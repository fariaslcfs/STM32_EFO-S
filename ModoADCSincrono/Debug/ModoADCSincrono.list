
ModoADCSincrono.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c694  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800c838  0800c838  0000d838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc58  0800cc58  0000e2d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc58  0800cc58  0000dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc60  0800cc60  0000e2d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc60  0800cc60  0000dc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc64  0800cc64  0000dc64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800cc68  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e28  200002d8  0800cf40  0000e2d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002100  0800cf40  0000f100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121cc  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003311  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  000237e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c07  00000000  00000000  000247d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a9f4  00000000  00000000  000253df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001610d  00000000  00000000  0003fdd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097dd1  00000000  00000000  00055ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edcb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  000edcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000f3224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c81c 	.word	0x0800c81c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800c81c 	.word	0x0800c81c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <count2volt>:

#define Vref 3.3 // Reference voltage (in volts)

int max_count;

double count2volt(int res, int count){
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]

	    max_count = pow(2, res) - 1;
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fb3e 	bl	8000534 <__aeabi_i2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	ec43 2b11 	vmov	d1, r2, r3
 8000ec0:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8000f30 <count2volt+0x88>
 8000ec4:	f00a fd4c 	bl	800b960 <pow>
 8000ec8:	ec51 0b10 	vmov	r0, r1, d0
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <count2volt+0x98>)
 8000ed2:	f7ff f9e1 	bl	8000298 <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe43 	bl	8000b68 <__aeabi_d2iz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <count2volt+0x9c>)
 8000ee6:	6013      	str	r3, [r2, #0]

	    return(Vref / max_count * count);
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <count2volt+0x9c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb21 	bl	8000534 <__aeabi_i2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	a110      	add	r1, pc, #64	@ (adr r1, 8000f38 <count2volt+0x90>)
 8000ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000efc:	f7ff fcae 	bl	800085c <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4614      	mov	r4, r2
 8000f06:	461d      	mov	r5, r3
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f7ff fb13 	bl	8000534 <__aeabi_i2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4620      	mov	r0, r4
 8000f14:	4629      	mov	r1, r5
 8000f16:	f7ff fb77 	bl	8000608 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f22:	eeb0 0a47 	vmov.f32	s0, s14
 8000f26:	eef0 0a67 	vmov.f32	s1, s15
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40000000 	.word	0x40000000
 8000f38:	66666666 	.word	0x66666666
 8000f3c:	400a6666 	.word	0x400a6666
 8000f40:	3ff00000 	.word	0x3ff00000
 8000f44:	200002f4 	.word	0x200002f4

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fc0d 	bl	800176c <HAL_Init>
  HAL_StatusTypeDef RET;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f88b 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f975 	bl	8001244 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f5a:	f000 f8f3 	bl	8001144 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000f5e:	f000 f943 	bl	80011e8 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000f62:	f007 f9a7 	bl	80082b4 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	bufmid[0] = MIDSCALE >> 8;
 8000f66:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <main+0xfc>)
 8000f68:	2207      	movs	r2, #7
 8000f6a:	701a      	strb	r2, [r3, #0]
	bufmid[1] = MIDSCALE;
 8000f6c:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <main+0xfc>)
 8000f6e:	2245      	movs	r2, #69	@ 0x45
 8000f70:	705a      	strb	r2, [r3, #1]
	buffull[0] = FULLSCALE >> 8;
 8000f72:	4b35      	ldr	r3, [pc, #212]	@ (8001048 <main+0x100>)
 8000f74:	220f      	movs	r2, #15
 8000f76:	701a      	strb	r2, [r3, #0]
	buffull[1] = FULLSCALE;
 8000f78:	4b33      	ldr	r3, [pc, #204]	@ (8001048 <main+0x100>)
 8000f7a:	22ff      	movs	r2, #255	@ 0xff
 8000f7c:	705a      	strb	r2, [r3, #1]

	while (1) {

		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4832      	ldr	r0, [pc, #200]	@ (800104c <main+0x104>)
 8000f82:	f001 fb11 	bl	80025a8 <HAL_GPIO_ReadPin>
 8000f86:	4603      	mov	r3, r0
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b31      	ldr	r3, [pc, #196]	@ (8001050 <main+0x108>)
 8000f8c:	701a      	strb	r2, [r3, #0]

		if (!pinState) {
 8000f8e:	4b30      	ldr	r3, [pc, #192]	@ (8001050 <main+0x108>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d117      	bne.n	8000fc6 <main+0x7e>
			RET = HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufmid, 2, 10);
 8000f96:	230a      	movs	r3, #10
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	4a29      	ldr	r2, [pc, #164]	@ (8001044 <main+0xfc>)
 8000f9e:	21c0      	movs	r1, #192	@ 0xc0
 8000fa0:	482c      	ldr	r0, [pc, #176]	@ (8001054 <main+0x10c>)
 8000fa2:	f001 fc91 	bl	80028c8 <HAL_I2C_Master_Transmit>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
			if (RET == HAL_OK) {
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d106      	bne.n	8000fbe <main+0x76>
				adcValue = readADCValue();
 8000fb0:	f000 f9b6 	bl	8001320 <readADCValue>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b27      	ldr	r3, [pc, #156]	@ (8001058 <main+0x110>)
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	e01a      	b.n	8000ff4 <main+0xac>
			}
			else {
				adcValue = 0.0;
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <main+0x110>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	e016      	b.n	8000ff4 <main+0xac>
			}
		}
		else {
			RET = HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), buffull, 2, 10);
 8000fc6:	230a      	movs	r3, #10
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	4a1e      	ldr	r2, [pc, #120]	@ (8001048 <main+0x100>)
 8000fce:	21c0      	movs	r1, #192	@ 0xc0
 8000fd0:	4820      	ldr	r0, [pc, #128]	@ (8001054 <main+0x10c>)
 8000fd2:	f001 fc79 	bl	80028c8 <HAL_I2C_Master_Transmit>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	71fb      	strb	r3, [r7, #7]
			if (RET == HAL_OK) {
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d106      	bne.n	8000fee <main+0xa6>
				adcValue = readADCValue();
 8000fe0:	f000 f99e 	bl	8001320 <readADCValue>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8001058 <main+0x110>)
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	e002      	b.n	8000ff4 <main+0xac>
			}
			else {
				adcValue = 0.0;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	@ (8001058 <main+0x110>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
			}
		}

		volts = count2volt(ADCRES, adcValue);
 8000ff4:	4b18      	ldr	r3, [pc, #96]	@ (8001058 <main+0x110>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	200c      	movs	r0, #12
 8000ffc:	f7ff ff54 	bl	8000ea8 <count2volt>
 8001000:	eeb0 7a40 	vmov.f32	s14, s0
 8001004:	eef0 7a60 	vmov.f32	s15, s1
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <main+0x114>)
 800100a:	ed83 7b00 	vstr	d7, [r3]


		sprintf(buffer, "Counts: %d --- Volts: %.2f\r", adcValue, volts);
 800100e:	4b12      	ldr	r3, [pc, #72]	@ (8001058 <main+0x110>)
 8001010:	6819      	ldr	r1, [r3, #0]
 8001012:	4b12      	ldr	r3, [pc, #72]	@ (800105c <main+0x114>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	e9cd 2300 	strd	r2, r3, [sp]
 800101c:	460a      	mov	r2, r1
 800101e:	4910      	ldr	r1, [pc, #64]	@ (8001060 <main+0x118>)
 8001020:	4810      	ldr	r0, [pc, #64]	@ (8001064 <main+0x11c>)
 8001022:	f008 fb71 	bl	8009708 <siprintf>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 8001026:	2120      	movs	r1, #32
 8001028:	480e      	ldr	r0, [pc, #56]	@ (8001064 <main+0x11c>)
 800102a:	f007 fa01 	bl	8008430 <CDC_Transmit_FS>

		HAL_Delay(500);
 800102e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001032:	f000 fc0d 	bl	8001850 <HAL_Delay>

		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001036:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800103a:	480b      	ldr	r0, [pc, #44]	@ (8001068 <main+0x120>)
 800103c:	f001 fae5 	bl	800260a <HAL_GPIO_TogglePin>
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8001040:	e79d      	b.n	8000f7e <main+0x36>
 8001042:	bf00      	nop
 8001044:	200003c0 	.word	0x200003c0
 8001048:	200003c4 	.word	0x200003c4
 800104c:	40020000 	.word	0x40020000
 8001050:	200003c6 	.word	0x200003c6
 8001054:	20000340 	.word	0x20000340
 8001058:	20000394 	.word	0x20000394
 800105c:	20000398 	.word	0x20000398
 8001060:	0800c838 	.word	0x0800c838
 8001064:	200003a0 	.word	0x200003a0
 8001068:	40020800 	.word	0x40020800

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	@ 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	@ 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f008 fba7 	bl	80097ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	4b29      	ldr	r3, [pc, #164]	@ (800113c <SystemClock_Config+0xd0>)
 8001096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001098:	4a28      	ldr	r2, [pc, #160]	@ (800113c <SystemClock_Config+0xd0>)
 800109a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109e:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a0:	4b26      	ldr	r3, [pc, #152]	@ (800113c <SystemClock_Config+0xd0>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	4b23      	ldr	r3, [pc, #140]	@ (8001140 <SystemClock_Config+0xd4>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a22      	ldr	r2, [pc, #136]	@ (8001140 <SystemClock_Config+0xd4>)
 80010b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b20      	ldr	r3, [pc, #128]	@ (8001140 <SystemClock_Config+0xd4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d2:	2301      	movs	r3, #1
 80010d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d6:	2310      	movs	r3, #16
 80010d8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80010e4:	230f      	movs	r3, #15
 80010e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80010e8:	2390      	movs	r3, #144	@ 0x90
 80010ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ec:	2304      	movs	r3, #4
 80010ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80010f0:	2305      	movs	r3, #5
 80010f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 f98f 	bl	800441c <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001104:	f000 f92c 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fbf2 	bl	800490c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800112e:	f000 f917 	bl	8001360 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3750      	adds	r7, #80	@ 0x50
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001156:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001158:	4a21      	ldr	r2, [pc, #132]	@ (80011e0 <MX_ADC1_Init+0x9c>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <MX_ADC1_Init+0x98>)
 800115e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b1d      	ldr	r3, [pc, #116]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b17      	ldr	r3, [pc, #92]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001186:	4a17      	ldr	r2, [pc, #92]	@ (80011e4 <MX_ADC1_Init+0xa0>)
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001190:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_ADC1_Init+0x98>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	@ (80011dc <MX_ADC1_Init+0x98>)
 80011a6:	f000 fb77 	bl	8001898 <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 f8d6 	bl	8001360 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_ADC1_Init+0x98>)
 80011c6:	f000 fd2b 	bl	8001c20 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 f8c6 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002f8 	.word	0x200002f8
 80011e0:	40012000 	.word	0x40012000
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_I2C2_Init+0x50>)
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <MX_I2C2_Init+0x54>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_I2C2_Init+0x50>)
 80011f4:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <MX_I2C2_Init+0x58>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_I2C2_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001238 <MX_I2C2_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <MX_I2C2_Init+0x50>)
 8001206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800120a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b0a      	ldr	r3, [pc, #40]	@ (8001238 <MX_I2C2_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001212:	4b09      	ldr	r3, [pc, #36]	@ (8001238 <MX_I2C2_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <MX_I2C2_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121e:	4b06      	ldr	r3, [pc, #24]	@ (8001238 <MX_I2C2_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_I2C2_Init+0x50>)
 8001226:	f001 fa0b 	bl	8002640 <HAL_I2C_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001230:	f000 f896 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000340 	.word	0x20000340
 800123c:	40005800 	.word	0x40005800
 8001240:	000186a0 	.word	0x000186a0

08001244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	@ 0x28
 8001248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b2d      	ldr	r3, [pc, #180]	@ (8001314 <MX_GPIO_Init+0xd0>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	4a2c      	ldr	r2, [pc, #176]	@ (8001314 <MX_GPIO_Init+0xd0>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6313      	str	r3, [r2, #48]	@ 0x30
 800126a:	4b2a      	ldr	r3, [pc, #168]	@ (8001314 <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126e:	f003 0304 	and.w	r3, r3, #4
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <MX_GPIO_Init+0xd0>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a25      	ldr	r2, [pc, #148]	@ (8001314 <MX_GPIO_Init+0xd0>)
 8001280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b23      	ldr	r3, [pc, #140]	@ (8001314 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <MX_GPIO_Init+0xd0>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a1e      	ldr	r2, [pc, #120]	@ (8001314 <MX_GPIO_Init+0xd0>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0302 	orr.w	r3, r3, #2
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012d0:	4811      	ldr	r0, [pc, #68]	@ (8001318 <MX_GPIO_Init+0xd4>)
 80012d2:	f001 f981 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	480a      	ldr	r0, [pc, #40]	@ (8001318 <MX_GPIO_Init+0xd4>)
 80012f0:	f000 ffd6 	bl	80022a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fc:	2301      	movs	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	4619      	mov	r1, r3
 8001306:	4805      	ldr	r0, [pc, #20]	@ (800131c <MX_GPIO_Init+0xd8>)
 8001308:	f000 ffca 	bl	80022a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	@ 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40020800 	.word	0x40020800
 800131c:	40020000 	.word	0x40020000

08001320 <readADCValue>:

/* USER CODE BEGIN 4 */
// Função para iniciar a conversão e retornar o valor convertido
uint32_t readADCValue(void) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
	uint32_t adc_value = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]

	// Inicia a conversão do ADC de forma síncrona
	if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 800132a:	480c      	ldr	r0, [pc, #48]	@ (800135c <readADCValue+0x3c>)
 800132c:	f000 faf8 	bl	8001920 <HAL_ADC_Start>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d10d      	bne.n	8001352 <readADCValue+0x32>
		// Espera até que a conversão seja concluída
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001336:	2164      	movs	r1, #100	@ 0x64
 8001338:	4808      	ldr	r0, [pc, #32]	@ (800135c <readADCValue+0x3c>)
 800133a:	f000 fbd8 	bl	8001aee <HAL_ADC_PollForConversion>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <readADCValue+0x2c>
			// Obtém o valor convertido
			adc_value = HAL_ADC_GetValue(&hadc1);
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <readADCValue+0x3c>)
 8001346:	f000 fc5d 	bl	8001c04 <HAL_ADC_GetValue>
 800134a:	6078      	str	r0, [r7, #4]
		}
		// Stop ADC to save power and resources
		HAL_ADC_Stop(&hadc1);
 800134c:	4803      	ldr	r0, [pc, #12]	@ (800135c <readADCValue+0x3c>)
 800134e:	f000 fb9b 	bl	8001a88 <HAL_ADC_Stop>
	}

	return adc_value;
 8001352:	687b      	ldr	r3, [r7, #4]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200002f8 	.word	0x200002f8

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <Error_Handler+0x8>

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <HAL_MspInit+0x4c>)
 800137c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b0d      	ldr	r3, [pc, #52]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800138a:	607b      	str	r3, [r7, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	603b      	str	r3, [r7, #0]
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	4a08      	ldr	r2, [pc, #32]	@ (80013b8 <HAL_MspInit+0x4c>)
 8001398:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139c:	6413      	str	r3, [r2, #64]	@ 0x40
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_MspInit+0x4c>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a6:	603b      	str	r3, [r7, #0]
 80013a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	@ 0x28
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]
 80013d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <HAL_ADC_MspInit+0x7c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d127      	bne.n	800142e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 80013e2:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_ADC_MspInit+0x80>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e6:	4a15      	ldr	r2, [pc, #84]	@ (800143c <HAL_ADC_MspInit+0x80>)
 80013e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ee:	4b13      	ldr	r3, [pc, #76]	@ (800143c <HAL_ADC_MspInit+0x80>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f6:	613b      	str	r3, [r7, #16]
 80013f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_ADC_MspInit+0x80>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <HAL_ADC_MspInit+0x80>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_ADC_MspInit+0x80>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001416:	2302      	movs	r3, #2
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800141a:	2303      	movs	r3, #3
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_ADC_MspInit+0x84>)
 800142a:	f000 ff39 	bl	80022a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	@ 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40012000 	.word	0x40012000
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a21      	ldr	r2, [pc, #132]	@ (80014e8 <HAL_I2C_MspInit+0xa4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d13c      	bne.n	80014e0 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <HAL_I2C_MspInit+0xa8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_I2C_MspInit+0xa8>)
 8001470:	f043 0302 	orr.w	r3, r3, #2
 8001474:	6313      	str	r3, [r2, #48]	@ 0x30
 8001476:	4b1d      	ldr	r3, [pc, #116]	@ (80014ec <HAL_I2C_MspInit+0xa8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001488:	2312      	movs	r3, #18
 800148a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001494:	2304      	movs	r3, #4
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4814      	ldr	r0, [pc, #80]	@ (80014f0 <HAL_I2C_MspInit+0xac>)
 80014a0:	f000 fefe 	bl	80022a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a4:	2308      	movs	r3, #8
 80014a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014a8:	2312      	movs	r3, #18
 80014aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ac:	2301      	movs	r3, #1
 80014ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014b4:	2309      	movs	r3, #9
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	480c      	ldr	r0, [pc, #48]	@ (80014f0 <HAL_I2C_MspInit+0xac>)
 80014c0:	f000 feee 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <HAL_I2C_MspInit+0xa8>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	4a07      	ldr	r2, [pc, #28]	@ (80014ec <HAL_I2C_MspInit+0xa8>)
 80014ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d4:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_I2C_MspInit+0xa8>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	@ 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40005800 	.word	0x40005800
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020400 	.word	0x40020400

080014f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <NMI_Handler+0x4>

080014fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <HardFault_Handler+0x4>

08001504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <MemManage_Handler+0x4>

0800150c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <BusFault_Handler+0x4>

08001514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <UsageFault_Handler+0x4>

0800151c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154a:	f000 f961 	bl	8001810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <OTG_FS_IRQHandler+0x10>)
 800155a:	f001 fe52 	bl	8003202 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200018b0 	.word	0x200018b0

08001568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return 1;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_kill>:

int _kill(int pid, int sig)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001582:	f008 f977 	bl	8009874 <__errno>
 8001586:	4603      	mov	r3, r0
 8001588:	2216      	movs	r2, #22
 800158a:	601a      	str	r2, [r3, #0]
  return -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_exit>:

void _exit (int status)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ffe7 	bl	8001578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <_exit+0x12>

080015ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e00a      	b.n	80015d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c0:	f3af 8000 	nop.w
 80015c4:	4601      	mov	r1, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	b2ca      	uxtb	r2, r1
 80015ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbf0      	blt.n	80015c0 <_read+0x12>
  }

  return len;
 80015de:	687b      	ldr	r3, [r7, #4]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e009      	b.n	800160e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	60ba      	str	r2, [r7, #8]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbf1      	blt.n	80015fa <_write+0x12>
  }
  return len;
 8001616:	687b      	ldr	r3, [r7, #4]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_close>:

int _close(int file)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001648:	605a      	str	r2, [r3, #4]
  return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_isatty>:

int _isatty(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f008 f8dc 	bl	8009874 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20020000 	.word	0x20020000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	200003c8 	.word	0x200003c8
 80016f0:	20002100 	.word	0x20002100

080016f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <SystemInit+0x20>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <SystemInit+0x20>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001718:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001750 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800171c:	f7ff ffea 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopFillZerobss+0x22>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001746:	f008 f89b 	bl	8009880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174a:	f7ff fbfd 	bl	8000f48 <main>
  bx  lr    
 800174e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 800175c:	0800cc68 	.word	0x0800cc68
  ldr r2, =_sbss
 8001760:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8001764:	20002100 	.word	0x20002100

08001768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001770:	4b0e      	ldr	r3, [pc, #56]	@ (80017ac <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0d      	ldr	r2, [pc, #52]	@ (80017ac <HAL_Init+0x40>)
 8001776:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800177a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a0a      	ldr	r2, [pc, #40]	@ (80017ac <HAL_Init+0x40>)
 8001782:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001788:	4b08      	ldr	r3, [pc, #32]	@ (80017ac <HAL_Init+0x40>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a07      	ldr	r2, [pc, #28]	@ (80017ac <HAL_Init+0x40>)
 800178e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001794:	2003      	movs	r0, #3
 8001796:	f000 fd41 	bl	800221c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179a:	200f      	movs	r0, #15
 800179c:	f000 f808 	bl	80017b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a0:	f7ff fde4 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <HAL_InitTick+0x54>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <HAL_InitTick+0x58>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f000 fd59 	bl	8002286 <HAL_SYSTICK_Config>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e00e      	b.n	80017fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b0f      	cmp	r3, #15
 80017e2:	d80a      	bhi.n	80017fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e4:	2200      	movs	r2, #0
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ec:	f000 fd21 	bl	8002232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f0:	4a06      	ldr	r2, [pc, #24]	@ (800180c <HAL_InitTick+0x5c>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	e000      	b.n	80017fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000000 	.word	0x20000000
 8001808:	20000008 	.word	0x20000008
 800180c:	20000004 	.word	0x20000004

08001810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_IncTick+0x20>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b06      	ldr	r3, [pc, #24]	@ (8001834 <HAL_IncTick+0x24>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4413      	add	r3, r2
 8001820:	4a04      	ldr	r2, [pc, #16]	@ (8001834 <HAL_IncTick+0x24>)
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000008 	.word	0x20000008
 8001834:	200003cc 	.word	0x200003cc

08001838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return uwTick;
 800183c:	4b03      	ldr	r3, [pc, #12]	@ (800184c <HAL_GetTick+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	200003cc 	.word	0x200003cc

08001850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001858:	f7ff ffee 	bl	8001838 <HAL_GetTick>
 800185c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001868:	d005      	beq.n	8001876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_Delay+0x44>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	461a      	mov	r2, r3
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001876:	bf00      	nop
 8001878:	f7ff ffde 	bl	8001838 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	429a      	cmp	r2, r3
 8001886:	d8f7      	bhi.n	8001878 <HAL_Delay+0x28>
  {
  }
}
 8001888:	bf00      	nop
 800188a:	bf00      	nop
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000008 	.word	0x20000008

08001898 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a0:	2300      	movs	r3, #0
 80018a2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e033      	b.n	8001916 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff fd80 	bl	80013bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d118      	bne.n	8001908 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018de:	f023 0302 	bic.w	r3, r3, #2
 80018e2:	f043 0202 	orr.w	r2, r3, #2
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f000 faca 	bl	8001e84 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f023 0303 	bic.w	r3, r3, #3
 80018fe:	f043 0201 	orr.w	r2, r3, #1
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	641a      	str	r2, [r3, #64]	@ 0x40
 8001906:	e001      	b.n	800190c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADC_Start+0x1a>
 8001936:	2302      	movs	r3, #2
 8001938:	e097      	b.n	8001a6a <HAL_ADC_Start+0x14a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d018      	beq.n	8001982 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f042 0201 	orr.w	r2, r2, #1
 800195e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001960:	4b45      	ldr	r3, [pc, #276]	@ (8001a78 <HAL_ADC_Start+0x158>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a45      	ldr	r2, [pc, #276]	@ (8001a7c <HAL_ADC_Start+0x15c>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0c9a      	lsrs	r2, r3, #18
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001974:	e002      	b.n	800197c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d15f      	bne.n	8001a50 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d007      	beq.n	80019c2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019ce:	d106      	bne.n	80019de <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d4:	f023 0206 	bic.w	r2, r3, #6
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	645a      	str	r2, [r3, #68]	@ 0x44
 80019dc:	e002      	b.n	80019e4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019ec:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <HAL_ADC_Start+0x160>)
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019f8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 031f 	and.w	r3, r3, #31
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d10f      	bne.n	8001a26 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d129      	bne.n	8001a68 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	e020      	b.n	8001a68 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a16      	ldr	r2, [pc, #88]	@ (8001a84 <HAL_ADC_Start+0x164>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d11b      	bne.n	8001a68 <HAL_ADC_Start+0x148>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d114      	bne.n	8001a68 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	e00b      	b.n	8001a68 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a54:	f043 0210 	orr.w	r2, r3, #16
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	431bde83 	.word	0x431bde83
 8001a80:	40012300 	.word	0x40012300
 8001a84:	40012000 	.word	0x40012000

08001a88 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d101      	bne.n	8001a9e <HAL_ADC_Stop+0x16>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e021      	b.n	8001ae2 <HAL_ADC_Stop+0x5a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001acc:	f023 0301 	bic.w	r3, r3, #1
 8001ad0:	f043 0201 	orr.w	r2, r3, #1
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b0a:	d113      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b1a:	d10b      	bne.n	8001b34 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	f043 0220 	orr.w	r2, r3, #32
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e063      	b.n	8001bfc <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7ff fe80 	bl	8001838 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b3a:	e021      	b.n	8001b80 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b42:	d01d      	beq.n	8001b80 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_ADC_PollForConversion+0x6c>
 8001b4a:	f7ff fe75 	bl	8001838 <HAL_GetTick>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d212      	bcs.n	8001b80 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d00b      	beq.n	8001b80 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	f043 0204 	orr.w	r2, r3, #4
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e03d      	b.n	8001bfc <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d1d6      	bne.n	8001b3c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f06f 0212 	mvn.w	r2, #18
 8001b96:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d123      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11f      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d111      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d105      	bne.n	8001bfa <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x1c>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e113      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x244>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d925      	bls.n	8001c98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68d9      	ldr	r1, [r3, #12]
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	3b1e      	subs	r3, #30
 8001c62:	2207      	movs	r2, #7
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43da      	mvns	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	400a      	ands	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68d9      	ldr	r1, [r3, #12]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4618      	mov	r0, r3
 8001c84:	4603      	mov	r3, r0
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4403      	add	r3, r0
 8001c8a:	3b1e      	subs	r3, #30
 8001c8c:	409a      	lsls	r2, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	430a      	orrs	r2, r1
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	e022      	b.n	8001cde <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6919      	ldr	r1, [r3, #16]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	2207      	movs	r2, #7
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	400a      	ands	r2, r1
 8001cba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6919      	ldr	r1, [r3, #16]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	4618      	mov	r0, r3
 8001cce:	4603      	mov	r3, r0
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	4403      	add	r3, r0
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d824      	bhi.n	8001d30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3b05      	subs	r3, #5
 8001cf8:	221f      	movs	r2, #31
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	3b05      	subs	r3, #5
 8001d22:	fa00 f203 	lsl.w	r2, r0, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d2e:	e04c      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b0c      	cmp	r3, #12
 8001d36:	d824      	bhi.n	8001d82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	3b23      	subs	r3, #35	@ 0x23
 8001d4a:	221f      	movs	r2, #31
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43da      	mvns	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	400a      	ands	r2, r1
 8001d58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4618      	mov	r0, r3
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b23      	subs	r3, #35	@ 0x23
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d80:	e023      	b.n	8001dca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	3b41      	subs	r3, #65	@ 0x41
 8001d94:	221f      	movs	r2, #31
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43da      	mvns	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	400a      	ands	r2, r1
 8001da2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	4618      	mov	r0, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685a      	ldr	r2, [r3, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	3b41      	subs	r3, #65	@ 0x41
 8001dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001dca:	4b29      	ldr	r3, [pc, #164]	@ (8001e70 <HAL_ADC_ConfigChannel+0x250>)
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a28      	ldr	r2, [pc, #160]	@ (8001e74 <HAL_ADC_ConfigChannel+0x254>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d10f      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1d8>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b12      	cmp	r3, #18
 8001dde:	d10b      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_ADC_ConfigChannel+0x254>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d12b      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x23a>
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <HAL_ADC_ConfigChannel+0x258>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0x1f4>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2b11      	cmp	r3, #17
 8001e12:	d122      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a11      	ldr	r2, [pc, #68]	@ (8001e78 <HAL_ADC_ConfigChannel+0x258>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d111      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e36:	4b11      	ldr	r3, [pc, #68]	@ (8001e7c <HAL_ADC_ConfigChannel+0x25c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a11      	ldr	r2, [pc, #68]	@ (8001e80 <HAL_ADC_ConfigChannel+0x260>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9a      	lsrs	r2, r3, #18
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f9      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	40012300 	.word	0x40012300
 8001e74:	40012000 	.word	0x40012000
 8001e78:	10000012 	.word	0x10000012
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	431bde83 	.word	0x431bde83

08001e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8c:	4b79      	ldr	r3, [pc, #484]	@ (8002074 <ADC_Init+0x1f0>)
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6859      	ldr	r1, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	021a      	lsls	r2, r3, #8
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001edc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	430a      	orrs	r2, r1
 8001eee:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	6899      	ldr	r1, [r3, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f16:	4a58      	ldr	r2, [pc, #352]	@ (8002078 <ADC_Init+0x1f4>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d022      	beq.n	8001f62 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f2a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6899      	ldr	r1, [r3, #8]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689a      	ldr	r2, [r3, #8]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6899      	ldr	r1, [r3, #8]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	609a      	str	r2, [r3, #8]
 8001f60:	e00f      	b.n	8001f82 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f80:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0202 	bic.w	r2, r2, #2
 8001f90:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7e1b      	ldrb	r3, [r3, #24]
 8001f9c:	005a      	lsls	r2, r3, #1
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d01b      	beq.n	8001fe8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fbe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001fce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	035a      	lsls	r2, r3, #13
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	e007      	b.n	8001ff8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ff6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002006:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	3b01      	subs	r3, #1
 8002014:	051a      	lsls	r2, r3, #20
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800202c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6899      	ldr	r1, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800203a:	025a      	lsls	r2, r3, #9
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689a      	ldr	r2, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002052:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6899      	ldr	r1, [r3, #8]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	029a      	lsls	r2, r3, #10
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	40012300 	.word	0x40012300
 8002078:	0f000001 	.word	0x0f000001

0800207c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002092:	68ba      	ldr	r2, [r7, #8]
 8002094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002098:	4013      	ands	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ae:	4a04      	ldr	r2, [pc, #16]	@ (80020c0 <__NVIC_SetPriorityGrouping+0x44>)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	60d3      	str	r3, [r2, #12]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000ed00 	.word	0xe000ed00

080020c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c8:	4b04      	ldr	r3, [pc, #16]	@ (80020dc <__NVIC_GetPriorityGrouping+0x18>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	0a1b      	lsrs	r3, r3, #8
 80020ce:	f003 0307 	and.w	r3, r3, #7
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db0b      	blt.n	800210a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	f003 021f 	and.w	r2, r3, #31
 80020f8:	4907      	ldr	r1, [pc, #28]	@ (8002118 <__NVIC_EnableIRQ+0x38>)
 80020fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	2001      	movs	r0, #1
 8002102:	fa00 f202 	lsl.w	r2, r0, r2
 8002106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800210a:	bf00      	nop
 800210c:	370c      	adds	r7, #12
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e8:	d301      	bcc.n	80021ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ea:	2301      	movs	r3, #1
 80021ec:	e00f      	b.n	800220e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002218 <SysTick_Config+0x40>)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f6:	210f      	movs	r1, #15
 80021f8:	f04f 30ff 	mov.w	r0, #4294967295
 80021fc:	f7ff ff8e 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002200:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <SysTick_Config+0x40>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002206:	4b04      	ldr	r3, [pc, #16]	@ (8002218 <SysTick_Config+0x40>)
 8002208:	2207      	movs	r2, #7
 800220a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff29 	bl	800207c <__NVIC_SetPriorityGrouping>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002244:	f7ff ff3e 	bl	80020c4 <__NVIC_GetPriorityGrouping>
 8002248:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68b9      	ldr	r1, [r7, #8]
 800224e:	6978      	ldr	r0, [r7, #20]
 8002250:	f7ff ff8e 	bl	8002170 <NVIC_EncodePriority>
 8002254:	4602      	mov	r2, r0
 8002256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff ff5d 	bl	800211c <__NVIC_SetPriority>
}
 8002262:	bf00      	nop
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	4603      	mov	r3, r0
 8002272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff ff31 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffa2 	bl	80021d8 <SysTick_Config>
 8002294:	4603      	mov	r3, r0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b089      	sub	sp, #36	@ 0x24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022b2:	2300      	movs	r3, #0
 80022b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
 80022ba:	e159      	b.n	8002570 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022bc:	2201      	movs	r2, #1
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	f040 8148 	bne.w	800256a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d005      	beq.n	80022f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d130      	bne.n	8002354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	2203      	movs	r2, #3
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68da      	ldr	r2, [r3, #12]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	69ba      	ldr	r2, [r7, #24]
 8002374:	4013      	ands	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4313      	orrs	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	69b9      	ldr	r1, [r7, #24]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80a2 	beq.w	800256a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	4b57      	ldr	r3, [pc, #348]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	4a56      	ldr	r2, [pc, #344]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002434:	6453      	str	r3, [r2, #68]	@ 0x44
 8002436:	4b54      	ldr	r3, [pc, #336]	@ (8002588 <HAL_GPIO_Init+0x2e8>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002442:	4a52      	ldr	r2, [pc, #328]	@ (800258c <HAL_GPIO_Init+0x2ec>)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	3302      	adds	r3, #2
 800244a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	220f      	movs	r2, #15
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a49      	ldr	r2, [pc, #292]	@ (8002590 <HAL_GPIO_Init+0x2f0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d019      	beq.n	80024a2 <HAL_GPIO_Init+0x202>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a48      	ldr	r2, [pc, #288]	@ (8002594 <HAL_GPIO_Init+0x2f4>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d013      	beq.n	800249e <HAL_GPIO_Init+0x1fe>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a47      	ldr	r2, [pc, #284]	@ (8002598 <HAL_GPIO_Init+0x2f8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d00d      	beq.n	800249a <HAL_GPIO_Init+0x1fa>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a46      	ldr	r2, [pc, #280]	@ (800259c <HAL_GPIO_Init+0x2fc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d007      	beq.n	8002496 <HAL_GPIO_Init+0x1f6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a45      	ldr	r2, [pc, #276]	@ (80025a0 <HAL_GPIO_Init+0x300>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d101      	bne.n	8002492 <HAL_GPIO_Init+0x1f2>
 800248e:	2304      	movs	r3, #4
 8002490:	e008      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 8002492:	2307      	movs	r3, #7
 8002494:	e006      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 8002496:	2303      	movs	r3, #3
 8002498:	e004      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 800249a:	2302      	movs	r3, #2
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <HAL_GPIO_Init+0x204>
 80024a2:	2300      	movs	r3, #0
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	f002 0203 	and.w	r2, r2, #3
 80024aa:	0092      	lsls	r2, r2, #2
 80024ac:	4093      	lsls	r3, r2
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b4:	4935      	ldr	r1, [pc, #212]	@ (800258c <HAL_GPIO_Init+0x2ec>)
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	089b      	lsrs	r3, r3, #2
 80024ba:	3302      	adds	r3, #2
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c2:	4b38      	ldr	r3, [pc, #224]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e6:	4a2f      	ldr	r2, [pc, #188]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024ec:	4b2d      	ldr	r3, [pc, #180]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002510:	4a24      	ldr	r2, [pc, #144]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002516:	4b23      	ldr	r3, [pc, #140]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	43db      	mvns	r3, r3
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	4013      	ands	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253a:	4a1a      	ldr	r2, [pc, #104]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	43db      	mvns	r3, r3
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	4013      	ands	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002564:	4a0f      	ldr	r2, [pc, #60]	@ (80025a4 <HAL_GPIO_Init+0x304>)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b0f      	cmp	r3, #15
 8002574:	f67f aea2 	bls.w	80022bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3724      	adds	r7, #36	@ 0x24
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	40013800 	.word	0x40013800
 8002590:	40020000 	.word	0x40020000
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800
 800259c:	40020c00 	.word	0x40020c00
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40013c00 	.word	0x40013c00

080025a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	887b      	ldrh	r3, [r7, #2]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
 80025c4:	e001      	b.n	80025ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800261c:	887a      	ldrh	r2, [r7, #2]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	041a      	lsls	r2, r3, #16
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	43d9      	mvns	r1, r3
 8002628:	887b      	ldrh	r3, [r7, #2]
 800262a:	400b      	ands	r3, r1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	619a      	str	r2, [r3, #24]
}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e12b      	b.n	80028aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b00      	cmp	r3, #0
 800265c:	d106      	bne.n	800266c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7fe feec 	bl	8001444 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2224      	movs	r2, #36	@ 0x24
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002692:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026a4:	f002 faea 	bl	8004c7c <HAL_RCC_GetPCLK1Freq>
 80026a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a81      	ldr	r2, [pc, #516]	@ (80028b4 <HAL_I2C_Init+0x274>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d807      	bhi.n	80026c4 <HAL_I2C_Init+0x84>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a80      	ldr	r2, [pc, #512]	@ (80028b8 <HAL_I2C_Init+0x278>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	bf94      	ite	ls
 80026bc:	2301      	movls	r3, #1
 80026be:	2300      	movhi	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e006      	b.n	80026d2 <HAL_I2C_Init+0x92>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a7d      	ldr	r2, [pc, #500]	@ (80028bc <HAL_I2C_Init+0x27c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0e7      	b.n	80028aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a78      	ldr	r2, [pc, #480]	@ (80028c0 <HAL_I2C_Init+0x280>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0c9b      	lsrs	r3, r3, #18
 80026e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4a6a      	ldr	r2, [pc, #424]	@ (80028b4 <HAL_I2C_Init+0x274>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d802      	bhi.n	8002714 <HAL_I2C_Init+0xd4>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	3301      	adds	r3, #1
 8002712:	e009      	b.n	8002728 <HAL_I2C_Init+0xe8>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800271a:	fb02 f303 	mul.w	r3, r2, r3
 800271e:	4a69      	ldr	r2, [pc, #420]	@ (80028c4 <HAL_I2C_Init+0x284>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	099b      	lsrs	r3, r3, #6
 8002726:	3301      	adds	r3, #1
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	430b      	orrs	r3, r1
 800272e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800273a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	495c      	ldr	r1, [pc, #368]	@ (80028b4 <HAL_I2C_Init+0x274>)
 8002744:	428b      	cmp	r3, r1
 8002746:	d819      	bhi.n	800277c <HAL_I2C_Init+0x13c>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e59      	subs	r1, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	fbb1 f3f3 	udiv	r3, r1, r3
 8002756:	1c59      	adds	r1, r3, #1
 8002758:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800275c:	400b      	ands	r3, r1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_I2C_Init+0x138>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1e59      	subs	r1, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002770:	3301      	adds	r3, #1
 8002772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002776:	e051      	b.n	800281c <HAL_I2C_Init+0x1dc>
 8002778:	2304      	movs	r3, #4
 800277a:	e04f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_I2C_Init+0x168>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	2b00      	cmp	r3, #0
 800279e:	bf0c      	ite	eq
 80027a0:	2301      	moveq	r3, #1
 80027a2:	2300      	movne	r3, #0
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	e012      	b.n	80027ce <HAL_I2C_Init+0x18e>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_I2C_Init+0x196>
 80027d2:	2301      	movs	r3, #1
 80027d4:	e022      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10e      	bne.n	80027fc <HAL_I2C_Init+0x1bc>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1e58      	subs	r0, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	460b      	mov	r3, r1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	440b      	add	r3, r1
 80027ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80027f0:	3301      	adds	r3, #1
 80027f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027fa:	e00f      	b.n	800281c <HAL_I2C_Init+0x1dc>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	6809      	ldr	r1, [r1, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69da      	ldr	r2, [r3, #28]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800284a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6911      	ldr	r1, [r2, #16]
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68d2      	ldr	r2, [r2, #12]
 8002856:	4311      	orrs	r1, r2
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	000186a0 	.word	0x000186a0
 80028b8:	001e847f 	.word	0x001e847f
 80028bc:	003d08ff 	.word	0x003d08ff
 80028c0:	431bde83 	.word	0x431bde83
 80028c4:	10624dd3 	.word	0x10624dd3

080028c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b088      	sub	sp, #32
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7fe ffac 	bl	8001838 <HAL_GetTick>
 80028e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 80e0 	bne.w	8002ab0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	4970      	ldr	r1, [pc, #448]	@ (8002abc <HAL_I2C_Master_Transmit+0x1f4>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f964 	bl	8002bc8 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e0d3      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_Master_Transmit+0x50>
 8002914:	2302      	movs	r3, #2
 8002916:	e0cc      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d007      	beq.n	800293e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800294c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2221      	movs	r2, #33	@ 0x21
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2210      	movs	r2, #16
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	893a      	ldrh	r2, [r7, #8]
 800296e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a50      	ldr	r2, [pc, #320]	@ (8002ac0 <HAL_I2C_Master_Transmit+0x1f8>)
 800297e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	6a3a      	ldr	r2, [r7, #32]
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f89c 	bl	8002ac4 <I2C_MasterRequestWrite>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e08d      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	695b      	ldr	r3, [r3, #20]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029ac:	e066      	b.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	6a39      	ldr	r1, [r7, #32]
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fa22 	bl	8002dfc <I2C_WaitOnTXEFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00d      	beq.n	80029da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d107      	bne.n	80029d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e06b      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	d11b      	bne.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	6a39      	ldr	r1, [r7, #32]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 fa19 	bl	8002e8c <I2C_WaitOnBTFFlagUntilTimeout>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00d      	beq.n	8002a7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d107      	bne.n	8002a78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e01a      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d194      	bne.n	80029ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	e000      	b.n	8002ab2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ab0:	2302      	movs	r3, #2
  }
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	00100002 	.word	0x00100002
 8002ac0:	ffff0000 	.word	0xffff0000

08002ac4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d006      	beq.n	8002aee <I2C_MasterRequestWrite+0x2a>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d003      	beq.n	8002aee <I2C_MasterRequestWrite+0x2a>
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002aec:	d108      	bne.n	8002b00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	e00b      	b.n	8002b18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	2b12      	cmp	r3, #18
 8002b06:	d107      	bne.n	8002b18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f000 f84f 	bl	8002bc8 <I2C_WaitOnFlagUntilTimeout>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00d      	beq.n	8002b4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b3e:	d103      	bne.n	8002b48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e035      	b.n	8002bb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b54:	d108      	bne.n	8002b68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b64:	611a      	str	r2, [r3, #16]
 8002b66:	e01b      	b.n	8002ba0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b68:	897b      	ldrh	r3, [r7, #10]
 8002b6a:	11db      	asrs	r3, r3, #7
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	f003 0306 	and.w	r3, r3, #6
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	f063 030f 	orn	r3, r3, #15
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	490e      	ldr	r1, [pc, #56]	@ (8002bc0 <I2C_MasterRequestWrite+0xfc>)
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 f898 	bl	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e010      	b.n	8002bb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b96:	897b      	ldrh	r3, [r7, #10]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4907      	ldr	r1, [pc, #28]	@ (8002bc4 <I2C_MasterRequestWrite+0x100>)
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f888 	bl	8002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	00010008 	.word	0x00010008
 8002bc4:	00010002 	.word	0x00010002

08002bc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bd8:	e048      	b.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be0:	d044      	beq.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002be2:	f7fe fe29 	bl	8001838 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d302      	bcc.n	8002bf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d139      	bne.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10d      	bne.n	8002c1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	e00c      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	43da      	mvns	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d116      	bne.n	8002c6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2220      	movs	r2, #32
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c58:	f043 0220 	orr.w	r2, r3, #32
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e023      	b.n	8002cb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d10d      	bne.n	8002c92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4013      	ands	r3, r2
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	461a      	mov	r2, r3
 8002c90:	e00c      	b.n	8002cac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	43da      	mvns	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	bf0c      	ite	eq
 8002ca4:	2301      	moveq	r3, #1
 8002ca6:	2300      	movne	r3, #0
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d093      	beq.n	8002bda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cca:	e071      	b.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cda:	d123      	bne.n	8002d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002cf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f043 0204 	orr.w	r2, r3, #4
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e067      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2a:	d041      	beq.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d2c:	f7fe fd84 	bl	8001838 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d302      	bcc.n	8002d42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d136      	bne.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d10c      	bne.n	8002d66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	43da      	mvns	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4013      	ands	r3, r2
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	bf14      	ite	ne
 8002d5e:	2301      	movne	r3, #1
 8002d60:	2300      	moveq	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	e00b      	b.n	8002d7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	43da      	mvns	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4013      	ands	r3, r2
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	f043 0220 	orr.w	r2, r3, #32
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e021      	b.n	8002df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10c      	bne.n	8002dd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	e00b      	b.n	8002dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4013      	ands	r3, r2
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f47f af6d 	bne.w	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e08:	e034      	b.n	8002e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f886 	bl	8002f1c <I2C_IsAcknowledgeFailed>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e034      	b.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e20:	d028      	beq.n	8002e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e22:	f7fe fd09 	bl	8001838 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d302      	bcc.n	8002e38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d11d      	bne.n	8002e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695b      	ldr	r3, [r3, #20]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e42:	2b80      	cmp	r3, #128	@ 0x80
 8002e44:	d016      	beq.n	8002e74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	f043 0220 	orr.w	r2, r3, #32
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e7e:	2b80      	cmp	r3, #128	@ 0x80
 8002e80:	d1c3      	bne.n	8002e0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e98:	e034      	b.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f83e 	bl	8002f1c <I2C_IsAcknowledgeFailed>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e034      	b.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d028      	beq.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7fe fcc1 	bl	8001838 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11d      	bne.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d016      	beq.n	8002f04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e007      	b.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b04      	cmp	r3, #4
 8002f10:	d1c3      	bne.n	8002e9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f32:	d11b      	bne.n	8002f6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2220      	movs	r2, #32
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	f043 0204 	orr.w	r2, r3, #4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b086      	sub	sp, #24
 8002f7e:	af02      	add	r7, sp, #8
 8002f80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e101      	b.n	8003190 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d106      	bne.n	8002fac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f005 fb8a 	bl	80086c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fba:	d102      	bne.n	8002fc2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 ff83 	bl	8004ed2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7c1a      	ldrb	r2, [r3, #16]
 8002fd4:	f88d 2000 	strb.w	r2, [sp]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fdc:	f001 fe62 	bl	8004ca4 <USB_CoreInit>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d005      	beq.n	8002ff2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e0ce      	b.n	8003190 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f001 ff7b 	bl	8004ef4 <USB_SetCurrentMode>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d005      	beq.n	8003010 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0bf      	b.n	8003190 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003010:	2300      	movs	r3, #0
 8003012:	73fb      	strb	r3, [r7, #15]
 8003014:	e04a      	b.n	80030ac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003016:	7bfa      	ldrb	r2, [r7, #15]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3315      	adds	r3, #21
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3314      	adds	r3, #20
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	b298      	uxth	r0, r3
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	332e      	adds	r3, #46	@ 0x2e
 8003052:	4602      	mov	r2, r0
 8003054:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003056:	7bfa      	ldrb	r2, [r7, #15]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3318      	adds	r3, #24
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	331c      	adds	r3, #28
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3320      	adds	r3, #32
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3324      	adds	r3, #36	@ 0x24
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	3301      	adds	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	791b      	ldrb	r3, [r3, #4]
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d3af      	bcc.n	8003016 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	73fb      	strb	r3, [r7, #15]
 80030ba:	e044      	b.n	8003146 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030ce:	2200      	movs	r2, #0
 80030d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030d2:	7bfa      	ldrb	r2, [r7, #15]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030e4:	7bfa      	ldrb	r2, [r7, #15]
 80030e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030e8:	7bfa      	ldrb	r2, [r7, #15]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80030fa:	2200      	movs	r2, #0
 80030fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003114:	7bfa      	ldrb	r2, [r7, #15]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	6879      	ldr	r1, [r7, #4]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	440b      	add	r3, r1
 8003138:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	3301      	adds	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	791b      	ldrb	r3, [r3, #4]
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	429a      	cmp	r2, r3
 800314e:	d3b5      	bcc.n	80030bc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6818      	ldr	r0, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	7c1a      	ldrb	r2, [r3, #16]
 8003158:	f88d 2000 	strb.w	r2, [sp]
 800315c:	3304      	adds	r3, #4
 800315e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003160:	f001 ff14 	bl	8004f8c <USB_DevInit>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e00c      	b.n	8003190 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f002 ff58 	bl	800603e <USB_DevDisconnect>

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_PCD_Start+0x1c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e022      	b.n	80031fa <HAL_PCD_Start+0x62>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d105      	bne.n	80031dc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031d4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fe65 	bl	8004eb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 ff06 	bl	8005ffc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003202:	b590      	push	{r4, r7, lr}
 8003204:	b08d      	sub	sp, #52	@ 0x34
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003210:	6a3b      	ldr	r3, [r7, #32]
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 ffc4 	bl	80061a6 <USB_GetMode>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	f040 848c 	bne.w	8003b3e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 ff28 	bl	8006080 <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8482 	beq.w	8003b3c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	0a1b      	lsrs	r3, r3, #8
 8003242:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f002 ff15 	bl	8006080 <USB_ReadInterrupts>
 8003256:	4603      	mov	r3, r0
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b02      	cmp	r3, #2
 800325e:	d107      	bne.n	8003270 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	695a      	ldr	r2, [r3, #20]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f002 0202 	and.w	r2, r2, #2
 800326e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f002 ff03 	bl	8006080 <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f003 0310 	and.w	r3, r3, #16
 8003280:	2b10      	cmp	r3, #16
 8003282:	d161      	bne.n	8003348 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	699a      	ldr	r2, [r3, #24]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0210 	bic.w	r2, r2, #16
 8003292:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f003 020f 	and.w	r2, r3, #15
 80032a0:	4613      	mov	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	3304      	adds	r3, #4
 80032b2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	0c5b      	lsrs	r3, r3, #17
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d124      	bne.n	800330a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d035      	beq.n	8003338 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	091b      	lsrs	r3, r3, #4
 80032d4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	6a38      	ldr	r0, [r7, #32]
 80032e0:	f002 fd3a 	bl	8005d58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032f0:	441a      	add	r2, r3
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	091b      	lsrs	r3, r3, #4
 80032fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003302:	441a      	add	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	615a      	str	r2, [r3, #20]
 8003308:	e016      	b.n	8003338 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	0c5b      	lsrs	r3, r3, #17
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	2b06      	cmp	r3, #6
 8003314:	d110      	bne.n	8003338 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800331c:	2208      	movs	r2, #8
 800331e:	4619      	mov	r1, r3
 8003320:	6a38      	ldr	r0, [r7, #32]
 8003322:	f002 fd19 	bl	8005d58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	695a      	ldr	r2, [r3, #20]
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003332:	441a      	add	r2, r3
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f042 0210 	orr.w	r2, r2, #16
 8003346:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f002 fe97 	bl	8006080 <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003358:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800335c:	f040 80a7 	bne.w	80034ae <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fe9c 	bl	80060a6 <USB_ReadDevAllOutEpInterrupt>
 800336e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003370:	e099      	b.n	80034a6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 808e 	beq.w	800349a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003384:	b2d2      	uxtb	r2, r2
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f002 fec0 	bl	800610e <USB_ReadDevOutEPInterrupt>
 800338e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00c      	beq.n	80033b4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a6:	461a      	mov	r2, r3
 80033a8:	2301      	movs	r3, #1
 80033aa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fea2 	bl	80040f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00c      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ca:	461a      	mov	r2, r3
 80033cc:	2308      	movs	r3, #8
 80033ce:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 ff78 	bl	80042c8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ee:	461a      	mov	r2, r3
 80033f0:	2310      	movs	r3, #16
 80033f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d030      	beq.n	8003460 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003406:	2b80      	cmp	r3, #128	@ 0x80
 8003408:	d109      	bne.n	800341e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003418:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800341c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800341e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	4413      	add	r3, r2
 8003430:	3304      	adds	r3, #4
 8003432:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	78db      	ldrb	r3, [r3, #3]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d108      	bne.n	800344e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2200      	movs	r2, #0
 8003440:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	b2db      	uxtb	r3, r3
 8003446:	4619      	mov	r1, r3
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f005 fa35 	bl	80088b8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800345a:	461a      	mov	r2, r3
 800345c:	2302      	movs	r3, #2
 800345e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f003 0320 	and.w	r3, r3, #32
 8003466:	2b00      	cmp	r3, #0
 8003468:	d008      	beq.n	800347c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003476:	461a      	mov	r2, r3
 8003478:	2320      	movs	r3, #32
 800347a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	4413      	add	r3, r2
 800348e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003492:	461a      	mov	r2, r3
 8003494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003498:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800349a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349c:	3301      	adds	r3, #1
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f af62 	bne.w	8003372 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f002 fde4 	bl	8006080 <USB_ReadInterrupts>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034c2:	f040 80db 	bne.w	800367c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f002 fe05 	bl	80060da <USB_ReadDevAllInEpInterrupt>
 80034d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80034d6:	e0cd      	b.n	8003674 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80c2 	beq.w	8003668 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f002 fe2b 	bl	800614a <USB_ReadDevInEPInterrupt>
 80034f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d057      	beq.n	80035b0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	43db      	mvns	r3, r3
 800351a:	69f9      	ldr	r1, [r7, #28]
 800351c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003520:	4013      	ands	r3, r2
 8003522:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	4413      	add	r3, r2
 800352c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003530:	461a      	mov	r2, r3
 8003532:	2301      	movs	r3, #1
 8003534:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	799b      	ldrb	r3, [r3, #6]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d132      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003542:	4613      	mov	r3, r2
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	4413      	add	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	440b      	add	r3, r1
 800354c:	3320      	adds	r3, #32
 800354e:	6819      	ldr	r1, [r3, #0]
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003554:	4613      	mov	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4413      	add	r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	331c      	adds	r3, #28
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4419      	add	r1, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4403      	add	r3, r0
 8003572:	3320      	adds	r3, #32
 8003574:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	2b00      	cmp	r3, #0
 800357a:	d113      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x3a2>
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003580:	4613      	mov	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3324      	adds	r3, #36	@ 0x24
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d108      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800359c:	461a      	mov	r2, r3
 800359e:	2101      	movs	r1, #1
 80035a0:	f002 fe32 	bl	8006208 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	4619      	mov	r1, r3
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f005 f909 	bl	80087c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d008      	beq.n	80035cc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035c6:	461a      	mov	r2, r3
 80035c8:	2308      	movs	r3, #8
 80035ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f003 0310 	and.w	r3, r3, #16
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d8:	015a      	lsls	r2, r3, #5
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	4413      	add	r3, r2
 80035de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035e2:	461a      	mov	r2, r3
 80035e4:	2310      	movs	r3, #16
 80035e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	015a      	lsls	r2, r3, #5
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	4413      	add	r3, r2
 80035fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035fe:	461a      	mov	r2, r3
 8003600:	2340      	movs	r3, #64	@ 0x40
 8003602:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d023      	beq.n	8003656 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800360e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003610:	6a38      	ldr	r0, [r7, #32]
 8003612:	f001 fe1f 	bl	8005254 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4413      	add	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3310      	adds	r3, #16
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	78db      	ldrb	r3, [r3, #3]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d108      	bne.n	8003644 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2200      	movs	r2, #0
 8003636:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800363a:	b2db      	uxtb	r3, r3
 800363c:	4619      	mov	r1, r3
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f005 f94c 	bl	80088dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	4413      	add	r3, r2
 800364c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003650:	461a      	mov	r2, r3
 8003652:	2302      	movs	r3, #2
 8003654:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fcbb 	bl	8003fde <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	3301      	adds	r3, #1
 800366c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800366e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003670:	085b      	lsrs	r3, r3, #1
 8003672:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003676:	2b00      	cmp	r3, #0
 8003678:	f47f af2e 	bne.w	80034d8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4618      	mov	r0, r3
 8003682:	f002 fcfd 	bl	8006080 <USB_ReadInterrupts>
 8003686:	4603      	mov	r3, r0
 8003688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800368c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003690:	d122      	bne.n	80036d8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d108      	bne.n	80036c2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036b8:	2100      	movs	r1, #0
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fea2 	bl	8004404 <HAL_PCDEx_LPM_Callback>
 80036c0:	e002      	b.n	80036c8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f005 f8ea 	bl	800889c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695a      	ldr	r2, [r3, #20]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80036d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f002 fccf 	bl	8006080 <USB_ReadInterrupts>
 80036e2:	4603      	mov	r3, r0
 80036e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036ec:	d112      	bne.n	8003714 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d102      	bne.n	8003704 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f005 f8a6 	bl	8008850 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695a      	ldr	r2, [r3, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003712:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f002 fcb1 	bl	8006080 <USB_ReadInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003724:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003728:	f040 80b7 	bne.w	800389a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800373a:	f023 0301 	bic.w	r3, r3, #1
 800373e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2110      	movs	r1, #16
 8003746:	4618      	mov	r0, r3
 8003748:	f001 fd84 	bl	8005254 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003750:	e046      	b.n	80037e0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375e:	461a      	mov	r2, r3
 8003760:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003764:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003776:	0151      	lsls	r1, r2, #5
 8003778:	69fa      	ldr	r2, [r7, #28]
 800377a:	440a      	add	r2, r1
 800377c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003780:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003784:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003788:	015a      	lsls	r2, r3, #5
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	4413      	add	r3, r2
 800378e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003792:	461a      	mov	r2, r3
 8003794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003798:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037aa:	0151      	lsls	r1, r2, #5
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	440a      	add	r2, r1
 80037b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ca:	0151      	lsls	r1, r2, #5
 80037cc:	69fa      	ldr	r2, [r7, #28]
 80037ce:	440a      	add	r2, r1
 80037d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037dc:	3301      	adds	r3, #1
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	791b      	ldrb	r3, [r3, #4]
 80037e4:	461a      	mov	r2, r3
 80037e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d3b2      	bcc.n	8003752 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	69fa      	ldr	r2, [r7, #28]
 80037f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037fa:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80037fe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	7bdb      	ldrb	r3, [r3, #15]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d016      	beq.n	8003836 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003812:	69fa      	ldr	r2, [r7, #28]
 8003814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003818:	f043 030b 	orr.w	r3, r3, #11
 800381c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003828:	69fa      	ldr	r2, [r7, #28]
 800382a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800382e:	f043 030b 	orr.w	r3, r3, #11
 8003832:	6453      	str	r3, [r2, #68]	@ 0x44
 8003834:	e015      	b.n	8003862 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003844:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003848:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800384c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800385c:	f043 030b 	orr.w	r3, r3, #11
 8003860:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003870:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003874:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003884:	461a      	mov	r2, r3
 8003886:	f002 fcbf 	bl	8006208 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 fbee 	bl	8006080 <USB_ReadInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ae:	d123      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f002 fc84 	bl	80061c2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f001 fd41 	bl	8005346 <USB_GetDevSpeed>
 80038c4:	4603      	mov	r3, r0
 80038c6:	461a      	mov	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681c      	ldr	r4, [r3, #0]
 80038d0:	f001 f9c8 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 80038d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038da:	461a      	mov	r2, r3
 80038dc:	4620      	mov	r0, r4
 80038de:	f001 fa45 	bl	8004d6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f004 ff95 	bl	8008812 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80038f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f002 fbbf 	bl	8006080 <USB_ReadInterrupts>
 8003902:	4603      	mov	r3, r0
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b08      	cmp	r3, #8
 800390a:	d10a      	bne.n	8003922 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f004 ff72 	bl	80087f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f002 0208 	and.w	r2, r2, #8
 8003920:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f002 fbaa 	bl	8006080 <USB_ReadInterrupts>
 800392c:	4603      	mov	r3, r0
 800392e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003932:	2b80      	cmp	r3, #128	@ 0x80
 8003934:	d123      	bne.n	800397e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003942:	2301      	movs	r3, #1
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
 8003946:	e014      	b.n	8003972 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4619      	mov	r1, r3
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fb08 	bl	8003f7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800396c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396e:	3301      	adds	r3, #1
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	791b      	ldrb	r3, [r3, #4]
 8003976:	461a      	mov	r2, r3
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	4293      	cmp	r3, r2
 800397c:	d3e4      	bcc.n	8003948 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f002 fb7c 	bl	8006080 <USB_ReadInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800398e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003992:	d13c      	bne.n	8003a0e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003994:	2301      	movs	r3, #1
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
 8003998:	e02b      	b.n	80039f2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	015a      	lsls	r2, r3, #5
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ae:	4613      	mov	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	4413      	add	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3318      	adds	r3, #24
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d115      	bne.n	80039ec <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039c0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	da12      	bge.n	80039ec <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ca:	4613      	mov	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	4413      	add	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	440b      	add	r3, r1
 80039d4:	3317      	adds	r3, #23
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	4619      	mov	r1, r3
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 fac8 	bl	8003f7c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	3301      	adds	r3, #1
 80039f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	791b      	ldrb	r3, [r3, #4]
 80039f6:	461a      	mov	r2, r3
 80039f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d3cd      	bcc.n	800399a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 fb34 	bl	8006080 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a1e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a22:	d156      	bne.n	8003ad2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a24:	2301      	movs	r3, #1
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a28:	e045      	b.n	8003ab6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d12e      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	da2b      	bge.n	8003ab0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a64:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d121      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003a9a:	69fb      	ldr	r3, [r7, #28]
 8003a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	69fa      	ldr	r2, [r7, #28]
 8003aa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003aa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aac:	6053      	str	r3, [r2, #4]
            break;
 8003aae:	e008      	b.n	8003ac2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	791b      	ldrb	r3, [r3, #4]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d3b3      	bcc.n	8003a2a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fad2 	bl	8006080 <USB_ReadInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ae6:	d10a      	bne.n	8003afe <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f004 ff09 	bl	8008900 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 fabc 	bl	8006080 <USB_ReadInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d115      	bne.n	8003b3e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f004 fef9 	bl	800891c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6859      	ldr	r1, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	e000      	b.n	8003b3e <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b3c:	bf00      	nop
    }
  }
}
 8003b3e:	3734      	adds	r7, #52	@ 0x34
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd90      	pop	{r4, r7, pc}

08003b44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <HAL_PCD_SetAddress+0x1a>
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	e012      	b.n	8003b84 <HAL_PCD_SetAddress+0x40>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	4611      	mov	r1, r2
 8003b74:	4618      	mov	r0, r3
 8003b76:	f002 fa1b 	bl	8005fb0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	4608      	mov	r0, r1
 8003b96:	4611      	mov	r1, r2
 8003b98:	461a      	mov	r2, r3
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	70fb      	strb	r3, [r7, #3]
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	803b      	strh	r3, [r7, #0]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003baa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da0f      	bge.n	8003bd2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bb2:	78fb      	ldrb	r3, [r7, #3]
 8003bb4:	f003 020f 	and.w	r2, r3, #15
 8003bb8:	4613      	mov	r3, r2
 8003bba:	00db      	lsls	r3, r3, #3
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	705a      	strb	r2, [r3, #1]
 8003bd0:	e00f      	b.n	8003bf2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	4413      	add	r3, r2
 8003be8:	3304      	adds	r3, #4
 8003bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	b2da      	uxtb	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bfe:	883a      	ldrh	r2, [r7, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	78ba      	ldrb	r2, [r7, #2]
 8003c08:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	785b      	ldrb	r3, [r3, #1]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d004      	beq.n	8003c1c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c1c:	78bb      	ldrb	r3, [r7, #2]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d102      	bne.n	8003c28 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d101      	bne.n	8003c36 <HAL_PCD_EP_Open+0xaa>
 8003c32:	2302      	movs	r3, #2
 8003c34:	e00e      	b.n	8003c54 <HAL_PCD_EP_Open+0xc8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68f9      	ldr	r1, [r7, #12]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fba3 	bl	8005390 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c52:	7afb      	ldrb	r3, [r7, #11]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da0f      	bge.n	8003c90 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c70:	78fb      	ldrb	r3, [r7, #3]
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4413      	add	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	3310      	adds	r3, #16
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	4413      	add	r3, r2
 8003c84:	3304      	adds	r3, #4
 8003c86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	705a      	strb	r2, [r3, #1]
 8003c8e:	e00f      	b.n	8003cb0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	f003 020f 	and.w	r2, r3, #15
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3304      	adds	r3, #4
 8003ca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2200      	movs	r2, #0
 8003cae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 030f 	and.w	r3, r3, #15
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_PCD_EP_Close+0x6e>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e00e      	b.n	8003ce8 <HAL_PCD_EP_Close+0x8c>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 fbe1 	bl	80054a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	f003 020f 	and.w	r2, r3, #15
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	3304      	adds	r3, #4
 8003d18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d32:	7afb      	ldrb	r3, [r7, #11]
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	799b      	ldrb	r3, [r3, #6]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d102      	bne.n	8003d4c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	799b      	ldrb	r3, [r3, #6]
 8003d54:	461a      	mov	r2, r3
 8003d56:	6979      	ldr	r1, [r7, #20]
 8003d58:	f001 fc7e 	bl	8005658 <USB_EPStartXfer>

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
 8003d6e:	460b      	mov	r3, r1
 8003d70:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	f003 020f 	and.w	r2, r3, #15
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d88:	681b      	ldr	r3, [r3, #0]
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b086      	sub	sp, #24
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	460b      	mov	r3, r1
 8003da4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	f003 020f 	and.w	r2, r3, #15
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	3310      	adds	r3, #16
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4413      	add	r3, r2
 8003dba:	3304      	adds	r3, #4
 8003dbc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	b2da      	uxtb	r2, r3
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	799b      	ldrb	r3, [r3, #6]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d102      	bne.n	8003df0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	799b      	ldrb	r3, [r3, #6]
 8003df8:	461a      	mov	r2, r3
 8003dfa:	6979      	ldr	r1, [r7, #20]
 8003dfc:	f001 fc2c 	bl	8005658 <USB_EPStartXfer>

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	460b      	mov	r3, r1
 8003e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e16:	78fb      	ldrb	r3, [r7, #3]
 8003e18:	f003 030f 	and.w	r3, r3, #15
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	7912      	ldrb	r2, [r2, #4]
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e04f      	b.n	8003ec8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	da0f      	bge.n	8003e50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e30:	78fb      	ldrb	r3, [r7, #3]
 8003e32:	f003 020f 	and.w	r2, r3, #15
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	3310      	adds	r3, #16
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	3304      	adds	r3, #4
 8003e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	705a      	strb	r2, [r3, #1]
 8003e4e:	e00d      	b.n	8003e6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	4413      	add	r3, r2
 8003e62:	3304      	adds	r3, #4
 8003e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_PCD_EP_SetStall+0x82>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e01d      	b.n	8003ec8 <HAL_PCD_EP_SetStall+0xbe>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68f9      	ldr	r1, [r7, #12]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 ffb4 	bl	8005e08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	f003 030f 	and.w	r3, r3, #15
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7999      	ldrb	r1, [r3, #6]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003eb8:	461a      	mov	r2, r3
 8003eba:	f002 f9a5 	bl	8006208 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	460b      	mov	r3, r1
 8003eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	7912      	ldrb	r2, [r2, #4]
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e042      	b.n	8003f74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da0f      	bge.n	8003f16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	f003 020f 	and.w	r2, r3, #15
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	3310      	adds	r3, #16
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	4413      	add	r3, r2
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	705a      	strb	r2, [r3, #1]
 8003f14:	e00f      	b.n	8003f36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f16:	78fb      	ldrb	r3, [r7, #3]
 8003f18:	f003 020f 	and.w	r2, r3, #15
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f3c:	78fb      	ldrb	r3, [r7, #3]
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_PCD_EP_ClrStall+0x86>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e00e      	b.n	8003f74 <HAL_PCD_EP_ClrStall+0xa4>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f001 ffbd 	bl	8005ee4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	da0c      	bge.n	8003faa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f90:	78fb      	ldrb	r3, [r7, #3]
 8003f92:	f003 020f 	and.w	r2, r3, #15
 8003f96:	4613      	mov	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	3310      	adds	r3, #16
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3304      	adds	r3, #4
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	e00c      	b.n	8003fc4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003faa:	78fb      	ldrb	r3, [r7, #3]
 8003fac:	f003 020f 	and.w	r2, r3, #15
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4413      	add	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f001 fddc 	bl	8005b88 <USB_EPStopXfer>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08a      	sub	sp, #40	@ 0x28
 8003fe2:	af02      	add	r7, sp, #8
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	3310      	adds	r3, #16
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	4413      	add	r3, r2
 8004002:	3304      	adds	r3, #4
 8004004:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	429a      	cmp	r2, r3
 8004010:	d901      	bls.n	8004016 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e06b      	b.n	80040ee <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	69fa      	ldr	r2, [r7, #28]
 8004028:	429a      	cmp	r2, r3
 800402a:	d902      	bls.n	8004032 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	3303      	adds	r3, #3
 8004036:	089b      	lsrs	r3, r3, #2
 8004038:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800403a:	e02a      	b.n	8004092 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	691a      	ldr	r2, [r3, #16]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	429a      	cmp	r2, r3
 8004050:	d902      	bls.n	8004058 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	3303      	adds	r3, #3
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68d9      	ldr	r1, [r3, #12]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b2da      	uxtb	r2, r3
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	4603      	mov	r3, r0
 8004074:	6978      	ldr	r0, [r7, #20]
 8004076:	f001 fe31 	bl	8005cdc <USB_WritePacket>

    ep->xfer_buff  += len;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	441a      	add	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	441a      	add	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	015a      	lsls	r2, r3, #5
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	4413      	add	r3, r2
 800409a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040a2:	69ba      	ldr	r2, [r7, #24]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d809      	bhi.n	80040bc <PCD_WriteEmptyTxFifo+0xde>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d203      	bcs.n	80040bc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1bf      	bne.n	800403c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d811      	bhi.n	80040ec <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	2201      	movs	r2, #1
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	43db      	mvns	r3, r3
 80040e2:	6939      	ldr	r1, [r7, #16]
 80040e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040e8:	4013      	ands	r3, r2
 80040ea:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	333c      	adds	r3, #60	@ 0x3c
 8004110:	3304      	adds	r3, #4
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	015a      	lsls	r2, r3, #5
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	4413      	add	r3, r2
 800411e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	799b      	ldrb	r3, [r3, #6]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d17b      	bne.n	8004226 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b00      	cmp	r3, #0
 8004136:	d015      	beq.n	8004164 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	4a61      	ldr	r2, [pc, #388]	@ (80042c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	f240 80b9 	bls.w	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004148:	2b00      	cmp	r3, #0
 800414a:	f000 80b3 	beq.w	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800415a:	461a      	mov	r2, r3
 800415c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004160:	6093      	str	r3, [r2, #8]
 8004162:	e0a7      	b.n	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	4413      	add	r3, r2
 8004176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800417a:	461a      	mov	r2, r3
 800417c:	2320      	movs	r3, #32
 800417e:	6093      	str	r3, [r2, #8]
 8004180:	e098      	b.n	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	f040 8093 	bne.w	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	4a4b      	ldr	r2, [pc, #300]	@ (80042c0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d90f      	bls.n	80041b6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	015a      	lsls	r2, r3, #5
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	4413      	add	r3, r2
 80041a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ac:	461a      	mov	r2, r3
 80041ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041b2:	6093      	str	r3, [r2, #8]
 80041b4:	e07e      	b.n	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	4413      	add	r3, r2
 80041c8:	3304      	adds	r3, #4
 80041ca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1a      	ldr	r2, [r3, #32]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	0159      	lsls	r1, r3, #5
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	440b      	add	r3, r1
 80041d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e2:	1ad2      	subs	r2, r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d114      	bne.n	8004218 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6818      	ldr	r0, [r3, #0]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004200:	461a      	mov	r2, r3
 8004202:	2101      	movs	r1, #1
 8004204:	f002 f800 	bl	8006208 <USB_EP0_OutStart>
 8004208:	e006      	b.n	8004218 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	441a      	add	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	b2db      	uxtb	r3, r3
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f004 fab4 	bl	800878c <HAL_PCD_DataOutStageCallback>
 8004224:	e046      	b.n	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4a26      	ldr	r2, [pc, #152]	@ (80042c4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d124      	bne.n	8004278 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d00a      	beq.n	800424e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004244:	461a      	mov	r2, r3
 8004246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800424a:	6093      	str	r3, [r2, #8]
 800424c:	e032      	b.n	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f003 0320 	and.w	r3, r3, #32
 8004254:	2b00      	cmp	r3, #0
 8004256:	d008      	beq.n	800426a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004264:	461a      	mov	r2, r3
 8004266:	2320      	movs	r3, #32
 8004268:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	4619      	mov	r1, r3
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f004 fa8b 	bl	800878c <HAL_PCD_DataOutStageCallback>
 8004276:	e01d      	b.n	80042b4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d114      	bne.n	80042a8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	4613      	mov	r3, r2
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4413      	add	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d108      	bne.n	80042a8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042a0:	461a      	mov	r2, r3
 80042a2:	2100      	movs	r1, #0
 80042a4:	f001 ffb0 	bl	8006208 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f004 fa6c 	bl	800878c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3720      	adds	r7, #32
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	4f54300a 	.word	0x4f54300a
 80042c4:	4f54310a 	.word	0x4f54310a

080042c8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	333c      	adds	r3, #60	@ 0x3c
 80042e0:	3304      	adds	r3, #4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a15      	ldr	r2, [pc, #84]	@ (8004350 <PCD_EP_OutSetupPacket_int+0x88>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d90e      	bls.n	800431c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004314:	461a      	mov	r2, r3
 8004316:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800431a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f004 fa23 	bl	8008768 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a0a      	ldr	r2, [pc, #40]	@ (8004350 <PCD_EP_OutSetupPacket_int+0x88>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d90c      	bls.n	8004344 <PCD_EP_OutSetupPacket_int+0x7c>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	799b      	ldrb	r3, [r3, #6]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d108      	bne.n	8004344 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800433c:	461a      	mov	r2, r3
 800433e:	2101      	movs	r1, #1
 8004340:	f001 ff62 	bl	8006208 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	4f54300a 	.word	0x4f54300a

08004354 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	460b      	mov	r3, r1
 800435e:	70fb      	strb	r3, [r7, #3]
 8004360:	4613      	mov	r3, r2
 8004362:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800436c:	78fb      	ldrb	r3, [r7, #3]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d107      	bne.n	8004382 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004372:	883b      	ldrh	r3, [r7, #0]
 8004374:	0419      	lsls	r1, r3, #16
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	430a      	orrs	r2, r1
 800437e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004380:	e028      	b.n	80043d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	0c1b      	lsrs	r3, r3, #16
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	4413      	add	r3, r2
 800438e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e00d      	b.n	80043b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	3340      	adds	r3, #64	@ 0x40
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	0c1b      	lsrs	r3, r3, #16
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	4413      	add	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	3301      	adds	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	7bfa      	ldrb	r2, [r7, #15]
 80043b4:	78fb      	ldrb	r3, [r7, #3]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3ec      	bcc.n	8004396 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043bc:	883b      	ldrh	r3, [r7, #0]
 80043be:	0418      	lsls	r0, r3, #16
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	4302      	orrs	r2, r0
 80043cc:	3340      	adds	r3, #64	@ 0x40
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	460b      	mov	r3, r1
 80043ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	887a      	ldrh	r2, [r7, #2]
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e267      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d075      	beq.n	8004526 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800443a:	4b88      	ldr	r3, [pc, #544]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b04      	cmp	r3, #4
 8004444:	d00c      	beq.n	8004460 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004446:	4b85      	ldr	r3, [pc, #532]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444e:	2b08      	cmp	r3, #8
 8004450:	d112      	bne.n	8004478 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004452:	4b82      	ldr	r3, [pc, #520]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800445a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800445e:	d10b      	bne.n	8004478 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004460:	4b7e      	ldr	r3, [pc, #504]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d05b      	beq.n	8004524 <HAL_RCC_OscConfig+0x108>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d157      	bne.n	8004524 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e242      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004480:	d106      	bne.n	8004490 <HAL_RCC_OscConfig+0x74>
 8004482:	4b76      	ldr	r3, [pc, #472]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a75      	ldr	r2, [pc, #468]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e01d      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x98>
 800449a:	4b70      	ldr	r3, [pc, #448]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6f      	ldr	r2, [pc, #444]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b6d      	ldr	r3, [pc, #436]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a6c      	ldr	r2, [pc, #432]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0xb0>
 80044b4:	4b69      	ldr	r3, [pc, #420]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a68      	ldr	r2, [pc, #416]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b66      	ldr	r3, [pc, #408]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a65      	ldr	r2, [pc, #404]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fd f9b0 	bl	8001838 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044dc:	f7fd f9ac 	bl	8001838 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b64      	cmp	r3, #100	@ 0x64
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e207      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	4b5b      	ldr	r3, [pc, #364]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d0f0      	beq.n	80044dc <HAL_RCC_OscConfig+0xc0>
 80044fa:	e014      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044fc:	f7fd f99c 	bl	8001838 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004504:	f7fd f998 	bl	8001838 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	@ 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e1f3      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	4b51      	ldr	r3, [pc, #324]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f0      	bne.n	8004504 <HAL_RCC_OscConfig+0xe8>
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b00      	cmp	r3, #0
 8004530:	d063      	beq.n	80045fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004532:	4b4a      	ldr	r3, [pc, #296]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 030c 	and.w	r3, r3, #12
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00b      	beq.n	8004556 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453e:	4b47      	ldr	r3, [pc, #284]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004546:	2b08      	cmp	r3, #8
 8004548:	d11c      	bne.n	8004584 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454a:	4b44      	ldr	r3, [pc, #272]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d116      	bne.n	8004584 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004556:	4b41      	ldr	r3, [pc, #260]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x152>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d001      	beq.n	800456e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e1c7      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b3b      	ldr	r3, [pc, #236]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4937      	ldr	r1, [pc, #220]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004582:	e03a      	b.n	80045fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d020      	beq.n	80045ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b34      	ldr	r3, [pc, #208]	@ (8004660 <HAL_RCC_OscConfig+0x244>)
 800458e:	2201      	movs	r2, #1
 8004590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004592:	f7fd f951 	bl	8001838 <HAL_GetTick>
 8004596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800459a:	f7fd f94d 	bl	8001838 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e1a8      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	4b2b      	ldr	r3, [pc, #172]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0f0      	beq.n	800459a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b8:	4b28      	ldr	r3, [pc, #160]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	4925      	ldr	r1, [pc, #148]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	600b      	str	r3, [r1, #0]
 80045cc:	e015      	b.n	80045fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ce:	4b24      	ldr	r3, [pc, #144]	@ (8004660 <HAL_RCC_OscConfig+0x244>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fd f930 	bl	8001838 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045dc:	f7fd f92c 	bl	8001838 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e187      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	4b1b      	ldr	r3, [pc, #108]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d036      	beq.n	8004674 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460e:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <HAL_RCC_OscConfig+0x248>)
 8004610:	2201      	movs	r2, #1
 8004612:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004614:	f7fd f910 	bl	8001838 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800461c:	f7fd f90c 	bl	8001838 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e167      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <HAL_RCC_OscConfig+0x240>)
 8004630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x200>
 800463a:	e01b      	b.n	8004674 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800463c:	4b09      	ldr	r3, [pc, #36]	@ (8004664 <HAL_RCC_OscConfig+0x248>)
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7fd f8f9 	bl	8001838 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004648:	e00e      	b.n	8004668 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464a:	f7fd f8f5 	bl	8001838 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d907      	bls.n	8004668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e150      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
 800465c:	40023800 	.word	0x40023800
 8004660:	42470000 	.word	0x42470000
 8004664:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004668:	4b88      	ldr	r3, [pc, #544]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 800466a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1ea      	bne.n	800464a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	f000 8097 	beq.w	80047b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004686:	4b81      	ldr	r3, [pc, #516]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	4b7d      	ldr	r3, [pc, #500]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	4a7c      	ldr	r2, [pc, #496]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 800469c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046a2:	4b7a      	ldr	r3, [pc, #488]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046aa:	60bb      	str	r3, [r7, #8]
 80046ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ae:	2301      	movs	r3, #1
 80046b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046b2:	4b77      	ldr	r3, [pc, #476]	@ (8004890 <HAL_RCC_OscConfig+0x474>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d118      	bne.n	80046f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046be:	4b74      	ldr	r3, [pc, #464]	@ (8004890 <HAL_RCC_OscConfig+0x474>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a73      	ldr	r2, [pc, #460]	@ (8004890 <HAL_RCC_OscConfig+0x474>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ca:	f7fd f8b5 	bl	8001838 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046d2:	f7fd f8b1 	bl	8001838 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e10c      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <HAL_RCC_OscConfig+0x474>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d0f0      	beq.n	80046d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x2ea>
 80046f8:	4b64      	ldr	r3, [pc, #400]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046fc:	4a63      	ldr	r2, [pc, #396]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	6713      	str	r3, [r2, #112]	@ 0x70
 8004704:	e01c      	b.n	8004740 <HAL_RCC_OscConfig+0x324>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b05      	cmp	r3, #5
 800470c:	d10c      	bne.n	8004728 <HAL_RCC_OscConfig+0x30c>
 800470e:	4b5f      	ldr	r3, [pc, #380]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004712:	4a5e      	ldr	r2, [pc, #376]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004714:	f043 0304 	orr.w	r3, r3, #4
 8004718:	6713      	str	r3, [r2, #112]	@ 0x70
 800471a:	4b5c      	ldr	r3, [pc, #368]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 800471c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471e:	4a5b      	ldr	r2, [pc, #364]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004720:	f043 0301 	orr.w	r3, r3, #1
 8004724:	6713      	str	r3, [r2, #112]	@ 0x70
 8004726:	e00b      	b.n	8004740 <HAL_RCC_OscConfig+0x324>
 8004728:	4b58      	ldr	r3, [pc, #352]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472c:	4a57      	ldr	r2, [pc, #348]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	@ 0x70
 8004734:	4b55      	ldr	r3, [pc, #340]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004738:	4a54      	ldr	r2, [pc, #336]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 800473a:	f023 0304 	bic.w	r3, r3, #4
 800473e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d015      	beq.n	8004774 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fd f876 	bl	8001838 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fd f872 	bl	8001838 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e0cb      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004766:	4b49      	ldr	r3, [pc, #292]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0ee      	beq.n	8004750 <HAL_RCC_OscConfig+0x334>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004774:	f7fd f860 	bl	8001838 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800477a:	e00a      	b.n	8004792 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fd f85c 	bl	8001838 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478a:	4293      	cmp	r3, r2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e0b5      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004792:	4b3e      	ldr	r3, [pc, #248]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1ee      	bne.n	800477c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800479e:	7dfb      	ldrb	r3, [r7, #23]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d105      	bne.n	80047b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a4:	4b39      	ldr	r3, [pc, #228]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	4a38      	ldr	r2, [pc, #224]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 80047aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 80a1 	beq.w	80048fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ba:	4b34      	ldr	r3, [pc, #208]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d05c      	beq.n	8004880 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d141      	bne.n	8004852 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b31      	ldr	r3, [pc, #196]	@ (8004894 <HAL_RCC_OscConfig+0x478>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7fd f830 	bl	8001838 <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047dc:	f7fd f82c 	bl	8001838 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e087      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	4b27      	ldr	r3, [pc, #156]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f0      	bne.n	80047dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69da      	ldr	r2, [r3, #28]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	431a      	orrs	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	019b      	lsls	r3, r3, #6
 800480a:	431a      	orrs	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481c:	061b      	lsls	r3, r3, #24
 800481e:	491b      	ldr	r1, [pc, #108]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004820:	4313      	orrs	r3, r2
 8004822:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004824:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <HAL_RCC_OscConfig+0x478>)
 8004826:	2201      	movs	r2, #1
 8004828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482a:	f7fd f805 	bl	8001838 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004832:	f7fd f801 	bl	8001838 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e05c      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004844:	4b11      	ldr	r3, [pc, #68]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0f0      	beq.n	8004832 <HAL_RCC_OscConfig+0x416>
 8004850:	e054      	b.n	80048fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004852:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <HAL_RCC_OscConfig+0x478>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004858:	f7fc ffee 	bl	8001838 <HAL_GetTick>
 800485c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004860:	f7fc ffea 	bl	8001838 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e045      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	4b06      	ldr	r3, [pc, #24]	@ (800488c <HAL_RCC_OscConfig+0x470>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x444>
 800487e:	e03d      	b.n	80048fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d107      	bne.n	8004898 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e038      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
 800488c:	40023800 	.word	0x40023800
 8004890:	40007000 	.word	0x40007000
 8004894:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004898:	4b1b      	ldr	r3, [pc, #108]	@ (8004908 <HAL_RCC_OscConfig+0x4ec>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d028      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d121      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048be:	429a      	cmp	r2, r3
 80048c0:	d11a      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048c8:	4013      	ands	r3, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d111      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048de:	085b      	lsrs	r3, r3, #1
 80048e0:	3b01      	subs	r3, #1
 80048e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d001      	beq.n	80048fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	40023800 	.word	0x40023800

0800490c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0cc      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004920:	4b68      	ldr	r3, [pc, #416]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d90c      	bls.n	8004948 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b65      	ldr	r3, [pc, #404]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b63      	ldr	r3, [pc, #396]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e0b8      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d005      	beq.n	800496c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004960:	4b59      	ldr	r3, [pc, #356]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a58      	ldr	r2, [pc, #352]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800496a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0308 	and.w	r3, r3, #8
 8004974:	2b00      	cmp	r3, #0
 8004976:	d005      	beq.n	8004984 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004978:	4b53      	ldr	r3, [pc, #332]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a52      	ldr	r2, [pc, #328]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004982:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004984:	4b50      	ldr	r3, [pc, #320]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	494d      	ldr	r1, [pc, #308]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	4313      	orrs	r3, r2
 8004994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d044      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d107      	bne.n	80049ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049aa:	4b47      	ldr	r3, [pc, #284]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d119      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e07f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d003      	beq.n	80049ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d107      	bne.n	80049da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ca:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d109      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e06f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049da:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e067      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ea:	4b37      	ldr	r3, [pc, #220]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f023 0203 	bic.w	r2, r3, #3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	4934      	ldr	r1, [pc, #208]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049fc:	f7fc ff1c 	bl	8001838 <HAL_GetTick>
 8004a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a04:	f7fc ff18 	bl	8001838 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e04f      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f003 020c 	and.w	r2, r3, #12
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d1eb      	bne.n	8004a04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b25      	ldr	r3, [pc, #148]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d20c      	bcs.n	8004a54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b20      	ldr	r3, [pc, #128]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e032      	b.n	8004aba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0304 	and.w	r3, r3, #4
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a60:	4b19      	ldr	r3, [pc, #100]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4916      	ldr	r1, [pc, #88]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d009      	beq.n	8004a92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	490e      	ldr	r1, [pc, #56]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a92:	f000 f821 	bl	8004ad8 <HAL_RCC_GetSysClockFreq>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	091b      	lsrs	r3, r3, #4
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	490a      	ldr	r1, [pc, #40]	@ (8004acc <HAL_RCC_ClockConfig+0x1c0>)
 8004aa4:	5ccb      	ldrb	r3, [r1, r3]
 8004aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aaa:	4a09      	ldr	r2, [pc, #36]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c4>)
 8004aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004aae:	4b09      	ldr	r3, [pc, #36]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fc fe7c 	bl	80017b0 <HAL_InitTick>

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40023c00 	.word	0x40023c00
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	0800c89c 	.word	0x0800c89c
 8004ad0:	20000000 	.word	0x20000000
 8004ad4:	20000004 	.word	0x20000004

08004ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b090      	sub	sp, #64	@ 0x40
 8004ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae8:	2300      	movs	r3, #0
 8004aea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004af0:	4b59      	ldr	r3, [pc, #356]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d00d      	beq.n	8004b18 <HAL_RCC_GetSysClockFreq+0x40>
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	f200 80a1 	bhi.w	8004c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <HAL_RCC_GetSysClockFreq+0x34>
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d003      	beq.n	8004b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b0a:	e09b      	b.n	8004c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b0c:	4b53      	ldr	r3, [pc, #332]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004b10:	e09b      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b12:	4b53      	ldr	r3, [pc, #332]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b16:	e098      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b18:	4b4f      	ldr	r3, [pc, #316]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b20:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b22:	4b4d      	ldr	r3, [pc, #308]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	2200      	movs	r2, #0
 8004b36:	623b      	str	r3, [r7, #32]
 8004b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b40:	2100      	movs	r1, #0
 8004b42:	4b47      	ldr	r3, [pc, #284]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b44:	fb03 f201 	mul.w	r2, r3, r1
 8004b48:	2300      	movs	r3, #0
 8004b4a:	fb00 f303 	mul.w	r3, r0, r3
 8004b4e:	4413      	add	r3, r2
 8004b50:	4a43      	ldr	r2, [pc, #268]	@ (8004c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b52:	fba0 1202 	umull	r1, r2, r0, r2
 8004b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b58:	460a      	mov	r2, r1
 8004b5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b5e:	4413      	add	r3, r2
 8004b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b64:	2200      	movs	r2, #0
 8004b66:	61bb      	str	r3, [r7, #24]
 8004b68:	61fa      	str	r2, [r7, #28]
 8004b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b72:	f7fc f821 	bl	8000bb8 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b7e:	e053      	b.n	8004c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b80:	4b35      	ldr	r3, [pc, #212]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	099b      	lsrs	r3, r3, #6
 8004b86:	2200      	movs	r2, #0
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	617a      	str	r2, [r7, #20]
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b92:	f04f 0b00 	mov.w	fp, #0
 8004b96:	4652      	mov	r2, sl
 8004b98:	465b      	mov	r3, fp
 8004b9a:	f04f 0000 	mov.w	r0, #0
 8004b9e:	f04f 0100 	mov.w	r1, #0
 8004ba2:	0159      	lsls	r1, r3, #5
 8004ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ba8:	0150      	lsls	r0, r2, #5
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	ebb2 080a 	subs.w	r8, r2, sl
 8004bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bca:	ebb2 0408 	subs.w	r4, r2, r8
 8004bce:	eb63 0509 	sbc.w	r5, r3, r9
 8004bd2:	f04f 0200 	mov.w	r2, #0
 8004bd6:	f04f 0300 	mov.w	r3, #0
 8004bda:	00eb      	lsls	r3, r5, #3
 8004bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be0:	00e2      	lsls	r2, r4, #3
 8004be2:	4614      	mov	r4, r2
 8004be4:	461d      	mov	r5, r3
 8004be6:	eb14 030a 	adds.w	r3, r4, sl
 8004bea:	603b      	str	r3, [r7, #0]
 8004bec:	eb45 030b 	adc.w	r3, r5, fp
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	f04f 0200 	mov.w	r2, #0
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bfe:	4629      	mov	r1, r5
 8004c00:	028b      	lsls	r3, r1, #10
 8004c02:	4621      	mov	r1, r4
 8004c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c08:	4621      	mov	r1, r4
 8004c0a:	028a      	lsls	r2, r1, #10
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	2200      	movs	r2, #0
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	60fa      	str	r2, [r7, #12]
 8004c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1c:	f7fb ffcc 	bl	8000bb8 <__aeabi_uldivmod>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4613      	mov	r3, r2
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c28:	4b0b      	ldr	r3, [pc, #44]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	0c1b      	lsrs	r3, r3, #16
 8004c2e:	f003 0303 	and.w	r3, r3, #3
 8004c32:	3301      	adds	r3, #1
 8004c34:	005b      	lsls	r3, r3, #1
 8004c36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c42:	e002      	b.n	8004c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c44:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3740      	adds	r7, #64	@ 0x40
 8004c50:	46bd      	mov	sp, r7
 8004c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c56:	bf00      	nop
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	00f42400 	.word	0x00f42400
 8004c60:	017d7840 	.word	0x017d7840

08004c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c68:	4b03      	ldr	r3, [pc, #12]	@ (8004c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000000 	.word	0x20000000

08004c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c80:	f7ff fff0 	bl	8004c64 <HAL_RCC_GetHCLKFreq>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	0a9b      	lsrs	r3, r3, #10
 8004c8c:	f003 0307 	and.w	r3, r3, #7
 8004c90:	4903      	ldr	r1, [pc, #12]	@ (8004ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c92:	5ccb      	ldrb	r3, [r1, r3]
 8004c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800c8ac 	.word	0x0800c8ac

08004ca4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b084      	sub	sp, #16
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	f107 001c 	add.w	r0, r7, #28
 8004cb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d123      	bne.n	8004d06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004cd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004ce6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d105      	bne.n	8004cfa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 fae2 	bl	80062c4 <USB_CoreReset>
 8004d00:	4603      	mov	r3, r0
 8004d02:	73fb      	strb	r3, [r7, #15]
 8004d04:	e01b      	b.n	8004d3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 fad6 	bl	80062c4 <USB_CoreReset>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d30:	e005      	b.n	8004d3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d3e:	7fbb      	ldrb	r3, [r7, #30]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d10b      	bne.n	8004d5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f043 0206 	orr.w	r2, r3, #6
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f043 0220 	orr.w	r2, r3, #32
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d68:	b004      	add	sp, #16
 8004d6a:	4770      	bx	lr

08004d6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b087      	sub	sp, #28
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	60f8      	str	r0, [r7, #12]
 8004d74:	60b9      	str	r1, [r7, #8]
 8004d76:	4613      	mov	r3, r2
 8004d78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d165      	bne.n	8004e4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	4a41      	ldr	r2, [pc, #260]	@ (8004e88 <USB_SetTurnaroundTime+0x11c>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d906      	bls.n	8004d96 <USB_SetTurnaroundTime+0x2a>
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4a40      	ldr	r2, [pc, #256]	@ (8004e8c <USB_SetTurnaroundTime+0x120>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d202      	bcs.n	8004d96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004d90:	230f      	movs	r3, #15
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	e062      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	4a3c      	ldr	r2, [pc, #240]	@ (8004e8c <USB_SetTurnaroundTime+0x120>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d306      	bcc.n	8004dac <USB_SetTurnaroundTime+0x40>
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4a3b      	ldr	r2, [pc, #236]	@ (8004e90 <USB_SetTurnaroundTime+0x124>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d202      	bcs.n	8004dac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004da6:	230e      	movs	r3, #14
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e057      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4a38      	ldr	r2, [pc, #224]	@ (8004e90 <USB_SetTurnaroundTime+0x124>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d306      	bcc.n	8004dc2 <USB_SetTurnaroundTime+0x56>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4a37      	ldr	r2, [pc, #220]	@ (8004e94 <USB_SetTurnaroundTime+0x128>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d202      	bcs.n	8004dc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dbc:	230d      	movs	r3, #13
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e04c      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	4a33      	ldr	r2, [pc, #204]	@ (8004e94 <USB_SetTurnaroundTime+0x128>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d306      	bcc.n	8004dd8 <USB_SetTurnaroundTime+0x6c>
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	4a32      	ldr	r2, [pc, #200]	@ (8004e98 <USB_SetTurnaroundTime+0x12c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d802      	bhi.n	8004dd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e041      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	4a2f      	ldr	r2, [pc, #188]	@ (8004e98 <USB_SetTurnaroundTime+0x12c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d906      	bls.n	8004dee <USB_SetTurnaroundTime+0x82>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4a2e      	ldr	r2, [pc, #184]	@ (8004e9c <USB_SetTurnaroundTime+0x130>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d802      	bhi.n	8004dee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004de8:	230b      	movs	r3, #11
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	e036      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <USB_SetTurnaroundTime+0x130>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d906      	bls.n	8004e04 <USB_SetTurnaroundTime+0x98>
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	4a29      	ldr	r2, [pc, #164]	@ (8004ea0 <USB_SetTurnaroundTime+0x134>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d802      	bhi.n	8004e04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004dfe:	230a      	movs	r3, #10
 8004e00:	617b      	str	r3, [r7, #20]
 8004e02:	e02b      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4a26      	ldr	r2, [pc, #152]	@ (8004ea0 <USB_SetTurnaroundTime+0x134>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d906      	bls.n	8004e1a <USB_SetTurnaroundTime+0xae>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <USB_SetTurnaroundTime+0x138>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d202      	bcs.n	8004e1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e14:	2309      	movs	r3, #9
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e020      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	4a21      	ldr	r2, [pc, #132]	@ (8004ea4 <USB_SetTurnaroundTime+0x138>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d306      	bcc.n	8004e30 <USB_SetTurnaroundTime+0xc4>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	4a20      	ldr	r2, [pc, #128]	@ (8004ea8 <USB_SetTurnaroundTime+0x13c>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d802      	bhi.n	8004e30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e015      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <USB_SetTurnaroundTime+0x13c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d906      	bls.n	8004e46 <USB_SetTurnaroundTime+0xda>
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004eac <USB_SetTurnaroundTime+0x140>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d202      	bcs.n	8004e46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e40:	2307      	movs	r3, #7
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e00a      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e46:	2306      	movs	r3, #6
 8004e48:	617b      	str	r3, [r7, #20]
 8004e4a:	e007      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e4c:	79fb      	ldrb	r3, [r7, #7]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d102      	bne.n	8004e58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e52:	2309      	movs	r3, #9
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e001      	b.n	8004e5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e58:	2309      	movs	r3, #9
 8004e5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	029b      	lsls	r3, r3, #10
 8004e70:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004e74:	431a      	orrs	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	371c      	adds	r7, #28
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	00d8acbf 	.word	0x00d8acbf
 8004e8c:	00e4e1c0 	.word	0x00e4e1c0
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	01067380 	.word	0x01067380
 8004e98:	011a499f 	.word	0x011a499f
 8004e9c:	01312cff 	.word	0x01312cff
 8004ea0:	014ca43f 	.word	0x014ca43f
 8004ea4:	016e3600 	.word	0x016e3600
 8004ea8:	01a6ab1f 	.word	0x01a6ab1f
 8004eac:	01e84800 	.word	0x01e84800

08004eb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f043 0201 	orr.w	r2, r3, #1
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 0201 	bic.w	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d115      	bne.n	8004f42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f22:	200a      	movs	r0, #10
 8004f24:	f7fc fc94 	bl	8001850 <HAL_Delay>
      ms += 10U;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	330a      	adds	r3, #10
 8004f2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f001 f939 	bl	80061a6 <USB_GetMode>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d01e      	beq.n	8004f78 <USB_SetCurrentMode+0x84>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f3e:	d9f0      	bls.n	8004f22 <USB_SetCurrentMode+0x2e>
 8004f40:	e01a      	b.n	8004f78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f42:	78fb      	ldrb	r3, [r7, #3]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d115      	bne.n	8004f74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f54:	200a      	movs	r0, #10
 8004f56:	f7fc fc7b 	bl	8001850 <HAL_Delay>
      ms += 10U;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	330a      	adds	r3, #10
 8004f5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f001 f920 	bl	80061a6 <USB_GetMode>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d005      	beq.n	8004f78 <USB_SetCurrentMode+0x84>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f70:	d9f0      	bls.n	8004f54 <USB_SetCurrentMode+0x60>
 8004f72:	e001      	b.n	8004f78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e005      	b.n	8004f84 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f7c:	d101      	bne.n	8004f82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e000      	b.n	8004f84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	613b      	str	r3, [r7, #16]
 8004faa:	e009      	b.n	8004fc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3340      	adds	r3, #64	@ 0x40
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2b0e      	cmp	r3, #14
 8004fc4:	d9f2      	bls.n	8004fac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fc6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d11c      	bne.n	8005008 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	639a      	str	r2, [r3, #56]	@ 0x38
 8005006:	e00b      	b.n	8005020 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005018:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005026:	461a      	mov	r2, r3
 8005028:	2300      	movs	r3, #0
 800502a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800502c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10d      	bne.n	8005050 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800503c:	2100      	movs	r1, #0
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f968 	bl	8005314 <USB_SetDevSpeed>
 8005044:	e008      	b.n	8005058 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005046:	2101      	movs	r1, #1
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f963 	bl	8005314 <USB_SetDevSpeed>
 800504e:	e003      	b.n	8005058 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005050:	2103      	movs	r1, #3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f95e 	bl	8005314 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005058:	2110      	movs	r1, #16
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f8fa 	bl	8005254 <USB_FlushTxFifo>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f924 	bl	80052b8 <USB_FlushRxFifo>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005080:	461a      	mov	r2, r3
 8005082:	2300      	movs	r3, #0
 8005084:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508c:	461a      	mov	r2, r3
 800508e:	2300      	movs	r3, #0
 8005090:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005098:	461a      	mov	r2, r3
 800509a:	2300      	movs	r3, #0
 800509c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e043      	b.n	800512c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ba:	d118      	bne.n	80050ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	015a      	lsls	r2, r3, #5
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4413      	add	r3, r2
 80050ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050ce:	461a      	mov	r2, r3
 80050d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	e013      	b.n	8005100 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050e4:	461a      	mov	r2, r3
 80050e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e008      	b.n	8005100 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fa:	461a      	mov	r2, r3
 80050fc:	2300      	movs	r3, #0
 80050fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	015a      	lsls	r2, r3, #5
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	4413      	add	r3, r2
 8005108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510c:	461a      	mov	r2, r3
 800510e:	2300      	movs	r3, #0
 8005110:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	015a      	lsls	r2, r3, #5
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	4413      	add	r3, r2
 800511a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511e:	461a      	mov	r2, r3
 8005120:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005124:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3301      	adds	r3, #1
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005130:	461a      	mov	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	4293      	cmp	r3, r2
 8005136:	d3b5      	bcc.n	80050a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005138:	2300      	movs	r3, #0
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	e043      	b.n	80051c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005150:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005154:	d118      	bne.n	8005188 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d10a      	bne.n	8005172 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005168:	461a      	mov	r2, r3
 800516a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	e013      	b.n	800519a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517e:	461a      	mov	r2, r3
 8005180:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	e008      	b.n	800519a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	015a      	lsls	r2, r3, #5
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4413      	add	r3, r2
 8005190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	015a      	lsls	r2, r3, #5
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4413      	add	r3, r2
 80051a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a6:	461a      	mov	r2, r3
 80051a8:	2300      	movs	r3, #0
 80051aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b8:	461a      	mov	r2, r3
 80051ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	3301      	adds	r3, #1
 80051c4:	613b      	str	r3, [r7, #16]
 80051c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051ca:	461a      	mov	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d3b5      	bcc.n	800513e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80051f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80051f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d105      	bne.n	8005208 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f043 0210 	orr.w	r2, r3, #16
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699a      	ldr	r2, [r3, #24]
 800520c:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <USB_DevInit+0x2c4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005214:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	f043 0208 	orr.w	r2, r3, #8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005228:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800522c:	2b01      	cmp	r3, #1
 800522e:	d107      	bne.n	8005240 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005238:	f043 0304 	orr.w	r3, r3, #4
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005240:	7dfb      	ldrb	r3, [r7, #23]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800524c:	b004      	add	sp, #16
 800524e:	4770      	bx	lr
 8005250:	803c3800 	.word	0x803c3800

08005254 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	3301      	adds	r3, #1
 8005266:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800526e:	d901      	bls.n	8005274 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e01b      	b.n	80052ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	daf2      	bge.n	8005262 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	019b      	lsls	r3, r3, #6
 8005284:	f043 0220 	orr.w	r2, r3, #32
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	3301      	adds	r3, #1
 8005290:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005298:	d901      	bls.n	800529e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e006      	b.n	80052ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f003 0320 	and.w	r3, r3, #32
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d0f0      	beq.n	800528c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	3301      	adds	r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052d0:	d901      	bls.n	80052d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e018      	b.n	8005308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	daf2      	bge.n	80052c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052de:	2300      	movs	r3, #0
 80052e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2210      	movs	r2, #16
 80052e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3301      	adds	r3, #1
 80052ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052f4:	d901      	bls.n	80052fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e006      	b.n	8005308 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b10      	cmp	r3, #16
 8005304:	d0f0      	beq.n	80052e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005334:	4313      	orrs	r3, r2
 8005336:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	3714      	adds	r7, #20
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f003 0306 	and.w	r3, r3, #6
 800535e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005366:	2300      	movs	r3, #0
 8005368:	75fb      	strb	r3, [r7, #23]
 800536a:	e00a      	b.n	8005382 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2b02      	cmp	r3, #2
 8005370:	d002      	beq.n	8005378 <USB_GetDevSpeed+0x32>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2b06      	cmp	r3, #6
 8005376:	d102      	bne.n	800537e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005378:	2302      	movs	r3, #2
 800537a:	75fb      	strb	r3, [r7, #23]
 800537c:	e001      	b.n	8005382 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800537e:	230f      	movs	r3, #15
 8005380:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005382:	7dfb      	ldrb	r3, [r7, #23]
}
 8005384:	4618      	mov	r0, r3
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	785b      	ldrb	r3, [r3, #1]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d13a      	bne.n	8005422 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053b2:	69da      	ldr	r2, [r3, #28]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	68f9      	ldr	r1, [r7, #12]
 80053c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053ca:	4313      	orrs	r3, r2
 80053cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d155      	bne.n	8005490 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	015a      	lsls	r2, r3, #5
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4413      	add	r3, r2
 80053ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	791b      	ldrb	r3, [r3, #4]
 80053fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005400:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	059b      	lsls	r3, r3, #22
 8005406:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005408:	4313      	orrs	r3, r2
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005416:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800541a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e036      	b.n	8005490 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005428:	69da      	ldr	r2, [r3, #28]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	2101      	movs	r1, #1
 8005434:	fa01 f303 	lsl.w	r3, r1, r3
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005440:	4313      	orrs	r3, r2
 8005442:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d11a      	bne.n	8005490 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	791b      	ldrb	r3, [r3, #4]
 8005474:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005476:	430b      	orrs	r3, r1
 8005478:	4313      	orrs	r3, r2
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	0151      	lsls	r1, r2, #5
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	440a      	add	r2, r1
 8005482:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800548a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800548e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d161      	bne.n	8005580 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054d2:	d11f      	bne.n	8005514 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	015a      	lsls	r2, r3, #5
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	0151      	lsls	r1, r2, #5
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	440a      	add	r2, r1
 80054ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	0151      	lsls	r1, r2, #5
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	440a      	add	r2, r1
 800550a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800550e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005512:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	2101      	movs	r1, #1
 8005526:	fa01 f303 	lsl.w	r3, r1, r3
 800552a:	b29b      	uxth	r3, r3
 800552c:	43db      	mvns	r3, r3
 800552e:	68f9      	ldr	r1, [r7, #12]
 8005530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005534:	4013      	ands	r3, r2
 8005536:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	f003 030f 	and.w	r3, r3, #15
 8005548:	2101      	movs	r1, #1
 800554a:	fa01 f303 	lsl.w	r3, r1, r3
 800554e:	b29b      	uxth	r3, r3
 8005550:	43db      	mvns	r3, r3
 8005552:	68f9      	ldr	r1, [r7, #12]
 8005554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005558:	4013      	ands	r3, r2
 800555a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	0159      	lsls	r1, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	440b      	add	r3, r1
 8005572:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005576:	4619      	mov	r1, r3
 8005578:	4b35      	ldr	r3, [pc, #212]	@ (8005650 <USB_DeactivateEndpoint+0x1b0>)
 800557a:	4013      	ands	r3, r2
 800557c:	600b      	str	r3, [r1, #0]
 800557e:	e060      	b.n	8005642 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005592:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005596:	d11f      	bne.n	80055d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	f003 030f 	and.w	r3, r3, #15
 80055e8:	2101      	movs	r1, #1
 80055ea:	fa01 f303 	lsl.w	r3, r1, r3
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	43db      	mvns	r3, r3
 80055f2:	68f9      	ldr	r1, [r7, #12]
 80055f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055f8:	4013      	ands	r3, r2
 80055fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f303 	lsl.w	r3, r1, r3
 8005612:	041b      	lsls	r3, r3, #16
 8005614:	43db      	mvns	r3, r3
 8005616:	68f9      	ldr	r1, [r7, #12]
 8005618:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800561c:	4013      	ands	r3, r2
 800561e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0159      	lsls	r1, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	440b      	add	r3, r1
 8005636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563a:	4619      	mov	r1, r3
 800563c:	4b05      	ldr	r3, [pc, #20]	@ (8005654 <USB_DeactivateEndpoint+0x1b4>)
 800563e:	4013      	ands	r3, r2
 8005640:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	ec337800 	.word	0xec337800
 8005654:	eff37800 	.word	0xeff37800

08005658 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b08a      	sub	sp, #40	@ 0x28
 800565c:	af02      	add	r7, sp, #8
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b01      	cmp	r3, #1
 8005676:	f040 817a 	bne.w	800596e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d132      	bne.n	80056e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800569c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b2:	691b      	ldr	r3, [r3, #16]
 80056b4:	69ba      	ldr	r2, [r7, #24]
 80056b6:	0151      	lsls	r1, r2, #5
 80056b8:	69fa      	ldr	r2, [r7, #28]
 80056ba:	440a      	add	r2, r1
 80056bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	015a      	lsls	r2, r3, #5
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	4413      	add	r3, r2
 80056ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	0151      	lsls	r1, r2, #5
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	440a      	add	r2, r1
 80056dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056e0:	0cdb      	lsrs	r3, r3, #19
 80056e2:	04db      	lsls	r3, r3, #19
 80056e4:	6113      	str	r3, [r2, #16]
 80056e6:	e092      	b.n	800580e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	0151      	lsls	r1, r2, #5
 80056fa:	69fa      	ldr	r2, [r7, #28]
 80056fc:	440a      	add	r2, r1
 80056fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005702:	0cdb      	lsrs	r3, r3, #19
 8005704:	04db      	lsls	r3, r3, #19
 8005706:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	0151      	lsls	r1, r2, #5
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	440a      	add	r2, r1
 800571e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005722:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005726:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800572a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800572c:	69bb      	ldr	r3, [r7, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d11a      	bne.n	8005768 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	429a      	cmp	r2, r3
 800573c:	d903      	bls.n	8005746 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	69fa      	ldr	r2, [r7, #28]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005760:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005764:	6113      	str	r3, [r2, #16]
 8005766:	e01b      	b.n	80057a0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005774:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	6919      	ldr	r1, [r3, #16]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	440b      	add	r3, r1
 8005780:	1e59      	subs	r1, r3, #1
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	fbb1 f3f3 	udiv	r3, r1, r3
 800578a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800578c:	4ba2      	ldr	r3, [pc, #648]	@ (8005a18 <USB_EPStartXfer+0x3c0>)
 800578e:	400b      	ands	r3, r1
 8005790:	69b9      	ldr	r1, [r7, #24]
 8005792:	0148      	lsls	r0, r1, #5
 8005794:	69f9      	ldr	r1, [r7, #28]
 8005796:	4401      	add	r1, r0
 8005798:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800579c:	4313      	orrs	r3, r2
 800579e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b6:	69b9      	ldr	r1, [r7, #24]
 80057b8:	0148      	lsls	r0, r1, #5
 80057ba:	69f9      	ldr	r1, [r7, #28]
 80057bc:	4401      	add	r1, r0
 80057be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057c2:	4313      	orrs	r3, r2
 80057c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	791b      	ldrb	r3, [r3, #4]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d11f      	bne.n	800580e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	69fa      	ldr	r2, [r7, #28]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057e8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	69ba      	ldr	r2, [r7, #24]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005808:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800580c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800580e:	79fb      	ldrb	r3, [r7, #7]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d14b      	bne.n	80058ac <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	69db      	ldr	r3, [r3, #28]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	461a      	mov	r2, r3
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	791b      	ldrb	r3, [r3, #4]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d128      	bne.n	800588a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005844:	2b00      	cmp	r3, #0
 8005846:	d110      	bne.n	800586a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	4413      	add	r3, r2
 8005850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	0151      	lsls	r1, r2, #5
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	440a      	add	r2, r1
 800585e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005862:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005866:	6013      	str	r3, [r2, #0]
 8005868:	e00f      	b.n	800588a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	015a      	lsls	r2, r3, #5
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	4413      	add	r3, r2
 8005872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	69fa      	ldr	r2, [r7, #28]
 800587e:	440a      	add	r2, r1
 8005880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005888:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	69fa      	ldr	r2, [r7, #28]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058a4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058a8:	6013      	str	r3, [r2, #0]
 80058aa:	e165      	b.n	8005b78 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69ba      	ldr	r2, [r7, #24]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	69fa      	ldr	r2, [r7, #28]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	791b      	ldrb	r3, [r3, #4]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d015      	beq.n	8005900 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 814d 	beq.w	8005b78 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f003 030f 	and.w	r3, r3, #15
 80058ee:	2101      	movs	r1, #1
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	69f9      	ldr	r1, [r7, #28]
 80058f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80058fa:	4313      	orrs	r3, r2
 80058fc:	634b      	str	r3, [r1, #52]	@ 0x34
 80058fe:	e13b      	b.n	8005b78 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800590c:	2b00      	cmp	r3, #0
 800590e:	d110      	bne.n	8005932 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800592a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e00f      	b.n	8005952 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	69ba      	ldr	r2, [r7, #24]
 8005942:	0151      	lsls	r1, r2, #5
 8005944:	69fa      	ldr	r2, [r7, #28]
 8005946:	440a      	add	r2, r1
 8005948:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800594c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005950:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	68d9      	ldr	r1, [r3, #12]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	781a      	ldrb	r2, [r3, #0]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	b298      	uxth	r0, r3
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	4603      	mov	r3, r0
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 f9b8 	bl	8005cdc <USB_WritePacket>
 800596c:	e104      	b.n	8005b78 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	0151      	lsls	r1, r2, #5
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	440a      	add	r2, r1
 8005984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005988:	0cdb      	lsrs	r3, r3, #19
 800598a:	04db      	lsls	r3, r3, #19
 800598c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	69ba      	ldr	r2, [r7, #24]
 800599e:	0151      	lsls	r1, r2, #5
 80059a0:	69fa      	ldr	r2, [r7, #28]
 80059a2:	440a      	add	r2, r1
 80059a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059a8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059ac:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059b0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d131      	bne.n	8005a1c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d003      	beq.n	80059c8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059dc:	691a      	ldr	r2, [r3, #16]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	0148      	lsls	r0, r1, #5
 80059ea:	69f9      	ldr	r1, [r7, #28]
 80059ec:	4401      	add	r1, r0
 80059ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80059f2:	4313      	orrs	r3, r2
 80059f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a14:	6113      	str	r3, [r2, #16]
 8005a16:	e061      	b.n	8005adc <USB_EPStartXfer+0x484>
 8005a18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d123      	bne.n	8005a6c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a3a:	69b9      	ldr	r1, [r7, #24]
 8005a3c:	0148      	lsls	r0, r1, #5
 8005a3e:	69f9      	ldr	r1, [r7, #28]
 8005a40:	4401      	add	r1, r0
 8005a42:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a46:	4313      	orrs	r3, r2
 8005a48:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	0151      	lsls	r1, r2, #5
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	440a      	add	r2, r1
 8005a60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a64:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a68:	6113      	str	r3, [r2, #16]
 8005a6a:	e037      	b.n	8005adc <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	691a      	ldr	r2, [r3, #16]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	4413      	add	r3, r2
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a80:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	8afa      	ldrh	r2, [r7, #22]
 8005a88:	fb03 f202 	mul.w	r2, r3, r2
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a9c:	691a      	ldr	r2, [r3, #16]
 8005a9e:	8afb      	ldrh	r3, [r7, #22]
 8005aa0:	04d9      	lsls	r1, r3, #19
 8005aa2:	4b38      	ldr	r3, [pc, #224]	@ (8005b84 <USB_EPStartXfer+0x52c>)
 8005aa4:	400b      	ands	r3, r1
 8005aa6:	69b9      	ldr	r1, [r7, #24]
 8005aa8:	0148      	lsls	r0, r1, #5
 8005aaa:	69f9      	ldr	r1, [r7, #28]
 8005aac:	4401      	add	r1, r0
 8005aae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005acc:	69b9      	ldr	r1, [r7, #24]
 8005ace:	0148      	lsls	r0, r1, #5
 8005ad0:	69f9      	ldr	r1, [r7, #28]
 8005ad2:	4401      	add	r1, r0
 8005ad4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d10d      	bne.n	8005afe <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d009      	beq.n	8005afe <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	68d9      	ldr	r1, [r3, #12]
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afa:	460a      	mov	r2, r1
 8005afc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	791b      	ldrb	r3, [r3, #4]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d128      	bne.n	8005b58 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d110      	bne.n	8005b38 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	0151      	lsls	r1, r2, #5
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	440a      	add	r2, r1
 8005b2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	e00f      	b.n	8005b58 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	015a      	lsls	r2, r3, #5
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	4413      	add	r3, r2
 8005b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69ba      	ldr	r2, [r7, #24]
 8005b48:	0151      	lsls	r1, r2, #5
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	440a      	add	r2, r1
 8005b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b72:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	1ff80000 	.word	0x1ff80000

08005b88 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d14a      	bne.n	8005c3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	015a      	lsls	r2, r3, #5
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	4413      	add	r3, r2
 8005bb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bbe:	f040 8086 	bne.w	8005cce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	683a      	ldr	r2, [r7, #0]
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005be0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005be4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	683a      	ldr	r2, [r7, #0]
 8005bf8:	7812      	ldrb	r2, [r2, #0]
 8005bfa:	0151      	lsls	r1, r2, #5
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	440a      	add	r2, r1
 8005c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c04:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d902      	bls.n	8005c20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c1e:	e056      	b.n	8005cce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c38:	d0e7      	beq.n	8005c0a <USB_EPStopXfer+0x82>
 8005c3a:	e048      	b.n	8005cce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c50:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c54:	d13b      	bne.n	8005cce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	7812      	ldrb	r2, [r2, #0]
 8005c6a:	0151      	lsls	r1, r2, #5
 8005c6c:	693a      	ldr	r2, [r7, #16]
 8005c6e:	440a      	add	r2, r1
 8005c70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c74:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	0151      	lsls	r1, r2, #5
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	440a      	add	r2, r1
 8005c94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c98:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d902      	bls.n	8005cb4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
          break;
 8005cb2:	e00c      	b.n	8005cce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ccc:	d0e7      	beq.n	8005c9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	371c      	adds	r7, #28
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	@ 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	4611      	mov	r1, r2
 8005ce8:	461a      	mov	r2, r3
 8005cea:	460b      	mov	r3, r1
 8005cec:	71fb      	strb	r3, [r7, #7]
 8005cee:	4613      	mov	r3, r2
 8005cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d123      	bne.n	8005d4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d02:	88bb      	ldrh	r3, [r7, #4]
 8005d04:	3303      	adds	r3, #3
 8005d06:	089b      	lsrs	r3, r3, #2
 8005d08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e018      	b.n	8005d42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d10:	79fb      	ldrb	r3, [r7, #7]
 8005d12:	031a      	lsls	r2, r3, #12
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	4413      	add	r3, r2
 8005d18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	3301      	adds	r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	3301      	adds	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d36:	69fb      	ldr	r3, [r7, #28]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	61bb      	str	r3, [r7, #24]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d3e2      	bcc.n	8005d10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3724      	adds	r7, #36	@ 0x24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b08b      	sub	sp, #44	@ 0x2c
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	4613      	mov	r3, r2
 8005d64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	089b      	lsrs	r3, r3, #2
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	623b      	str	r3, [r7, #32]
 8005d82:	e014      	b.n	8005dae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	3301      	adds	r3, #1
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	3301      	adds	r3, #1
 8005d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	3301      	adds	r3, #1
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	3301      	adds	r3, #1
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	3301      	adds	r3, #1
 8005dac:	623b      	str	r3, [r7, #32]
 8005dae:	6a3a      	ldr	r2, [r7, #32]
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d3e6      	bcc.n	8005d84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005db6:	8bfb      	ldrh	r3, [r7, #30]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01e      	beq.n	8005dfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f107 0310 	add.w	r3, r7, #16
 8005dcc:	6812      	ldr	r2, [r2, #0]
 8005dce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	6a3b      	ldr	r3, [r7, #32]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	701a      	strb	r2, [r3, #0]
      i++;
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	3301      	adds	r3, #1
 8005de6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	3301      	adds	r3, #1
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005dee:	8bfb      	ldrh	r3, [r7, #30]
 8005df0:	3b01      	subs	r3, #1
 8005df2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005df4:	8bfb      	ldrh	r3, [r7, #30]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1ea      	bne.n	8005dd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	372c      	adds	r7, #44	@ 0x2c
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	785b      	ldrb	r3, [r3, #1]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d12c      	bne.n	8005e7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	db12      	blt.n	8005e5c <USB_EPSetStall+0x54>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00f      	beq.n	8005e5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e76:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	e02b      	b.n	8005ed6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	db12      	blt.n	8005eb6 <USB_EPSetStall+0xae>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00f      	beq.n	8005eb6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eb0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005eb4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ed4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d128      	bne.n	8005f52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f1a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	791b      	ldrb	r3, [r3, #4]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d003      	beq.n	8005f30 <USB_EPClearStall+0x4c>
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	791b      	ldrb	r3, [r3, #4]
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d138      	bne.n	8005fa2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	015a      	lsls	r2, r3, #5
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	0151      	lsls	r1, r2, #5
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	440a      	add	r2, r1
 8005f46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f4e:	6013      	str	r3, [r2, #0]
 8005f50:	e027      	b.n	8005fa2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f6c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	791b      	ldrb	r3, [r3, #4]
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d003      	beq.n	8005f82 <USB_EPClearStall+0x9e>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	791b      	ldrb	r3, [r3, #4]
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d10f      	bne.n	8005fa2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	0151      	lsls	r1, r2, #5
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	440a      	add	r2, r1
 8005f98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fa0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b085      	sub	sp, #20
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005fd2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005fe4:	68f9      	ldr	r1, [r7, #12]
 8005fe6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fea:	4313      	orrs	r3, r2
 8005fec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3714      	adds	r7, #20
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b085      	sub	sp, #20
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800602a:	f023 0302 	bic.w	r3, r3, #2
 800602e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006058:	f023 0303 	bic.w	r3, r3, #3
 800605c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	695b      	ldr	r3, [r3, #20]
 800608c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4013      	ands	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006098:	68fb      	ldr	r3, [r7, #12]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	4013      	ands	r3, r2
 80060c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	0c1b      	lsrs	r3, r3, #16
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr

080060da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060da:	b480      	push	{r7}
 80060dc:	b085      	sub	sp, #20
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	4013      	ands	r3, r2
 80060fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	b29b      	uxth	r3, r3
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	460b      	mov	r3, r1
 8006118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800611e:	78fb      	ldrb	r3, [r7, #3]
 8006120:	015a      	lsls	r2, r3, #5
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	4413      	add	r3, r2
 8006126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800613c:	68bb      	ldr	r3, [r7, #8]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	460b      	mov	r3, r1
 8006154:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800616a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800616c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	fa22 f303 	lsr.w	r3, r2, r3
 800617a:	01db      	lsls	r3, r3, #7
 800617c:	b2db      	uxtb	r3, r3
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	4313      	orrs	r3, r2
 8006182:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4013      	ands	r3, r2
 8006196:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006198:	68bb      	ldr	r3, [r7, #8]
}
 800619a:	4618      	mov	r0, r3
 800619c:	371c      	adds	r7, #28
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0301 	and.w	r3, r3, #1
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80061c2:	b480      	push	{r7}
 80061c4:	b085      	sub	sp, #20
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061dc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80061e0:	f023 0307 	bic.w	r3, r3, #7
 80061e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	460b      	mov	r3, r1
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	333c      	adds	r3, #60	@ 0x3c
 800621e:	3304      	adds	r3, #4
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	4a26      	ldr	r2, [pc, #152]	@ (80062c0 <USB_EP0_OutStart+0xb8>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d90a      	bls.n	8006242 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800623c:	d101      	bne.n	8006242 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e037      	b.n	80062b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006248:	461a      	mov	r2, r3
 800624a:	2300      	movs	r3, #0
 800624c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800625c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006270:	f043 0318 	orr.w	r3, r3, #24
 8006274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006284:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006288:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800628a:	7afb      	ldrb	r3, [r7, #11]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10f      	bne.n	80062b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006296:	461a      	mov	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062aa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80062ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	371c      	adds	r7, #28
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	4f54300a 	.word	0x4f54300a

080062c4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3301      	adds	r3, #1
 80062d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062dc:	d901      	bls.n	80062e2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e01b      	b.n	800631a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	daf2      	bge.n	80062d0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f043 0201 	orr.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3301      	adds	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006306:	d901      	bls.n	800630c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006308:	2303      	movs	r3, #3
 800630a:	e006      	b.n	800631a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	f003 0301 	and.w	r3, r3, #1
 8006314:	2b01      	cmp	r3, #1
 8006316:	d0f0      	beq.n	80062fa <USB_CoreReset+0x36>

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006334:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006338:	f002 fc88 	bl	8008c4c <USBD_static_malloc>
 800633c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	32b0      	adds	r2, #176	@ 0xb0
 800634e:	2100      	movs	r1, #0
 8006350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006354:	2302      	movs	r3, #2
 8006356:	e0d4      	b.n	8006502 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006358:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800635c:	2100      	movs	r1, #0
 800635e:	68f8      	ldr	r0, [r7, #12]
 8006360:	f003 fa35 	bl	80097ce <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	32b0      	adds	r2, #176	@ 0xb0
 800636e:	68f9      	ldr	r1, [r7, #12]
 8006370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	@ 0xb0
 800637e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	7c1b      	ldrb	r3, [r3, #16]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d138      	bne.n	8006402 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006390:	4b5e      	ldr	r3, [pc, #376]	@ (800650c <USBD_CDC_Init+0x1e4>)
 8006392:	7819      	ldrb	r1, [r3, #0]
 8006394:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006398:	2202      	movs	r2, #2
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f002 fb33 	bl	8008a06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063a0:	4b5a      	ldr	r3, [pc, #360]	@ (800650c <USBD_CDC_Init+0x1e4>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f003 020f 	and.w	r2, r3, #15
 80063a8:	6879      	ldr	r1, [r7, #4]
 80063aa:	4613      	mov	r3, r2
 80063ac:	009b      	lsls	r3, r3, #2
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	3324      	adds	r3, #36	@ 0x24
 80063b6:	2201      	movs	r2, #1
 80063b8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063ba:	4b55      	ldr	r3, [pc, #340]	@ (8006510 <USBD_CDC_Init+0x1e8>)
 80063bc:	7819      	ldrb	r1, [r3, #0]
 80063be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063c2:	2202      	movs	r2, #2
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f002 fb1e 	bl	8008a06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063ca:	4b51      	ldr	r3, [pc, #324]	@ (8006510 <USBD_CDC_Init+0x1e8>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	f003 020f 	and.w	r2, r3, #15
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063e2:	2201      	movs	r2, #1
 80063e4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063e6:	4b4b      	ldr	r3, [pc, #300]	@ (8006514 <USBD_CDC_Init+0x1ec>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	f003 020f 	and.w	r2, r3, #15
 80063ee:	6879      	ldr	r1, [r7, #4]
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	3326      	adds	r3, #38	@ 0x26
 80063fc:	2210      	movs	r2, #16
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e035      	b.n	800646e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006402:	4b42      	ldr	r3, [pc, #264]	@ (800650c <USBD_CDC_Init+0x1e4>)
 8006404:	7819      	ldrb	r1, [r3, #0]
 8006406:	2340      	movs	r3, #64	@ 0x40
 8006408:	2202      	movs	r2, #2
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f002 fafb 	bl	8008a06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006410:	4b3e      	ldr	r3, [pc, #248]	@ (800650c <USBD_CDC_Init+0x1e4>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 020f 	and.w	r2, r3, #15
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	4613      	mov	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	4413      	add	r3, r2
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	440b      	add	r3, r1
 8006424:	3324      	adds	r3, #36	@ 0x24
 8006426:	2201      	movs	r2, #1
 8006428:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800642a:	4b39      	ldr	r3, [pc, #228]	@ (8006510 <USBD_CDC_Init+0x1e8>)
 800642c:	7819      	ldrb	r1, [r3, #0]
 800642e:	2340      	movs	r3, #64	@ 0x40
 8006430:	2202      	movs	r2, #2
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f002 fae7 	bl	8008a06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006438:	4b35      	ldr	r3, [pc, #212]	@ (8006510 <USBD_CDC_Init+0x1e8>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	f003 020f 	and.w	r2, r3, #15
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006450:	2201      	movs	r2, #1
 8006452:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006454:	4b2f      	ldr	r3, [pc, #188]	@ (8006514 <USBD_CDC_Init+0x1ec>)
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 020f 	and.w	r2, r3, #15
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	3326      	adds	r3, #38	@ 0x26
 800646a:	2210      	movs	r2, #16
 800646c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800646e:	4b29      	ldr	r3, [pc, #164]	@ (8006514 <USBD_CDC_Init+0x1ec>)
 8006470:	7819      	ldrb	r1, [r3, #0]
 8006472:	2308      	movs	r3, #8
 8006474:	2203      	movs	r2, #3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f002 fac5 	bl	8008a06 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800647c:	4b25      	ldr	r3, [pc, #148]	@ (8006514 <USBD_CDC_Init+0x1ec>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f003 020f 	and.w	r2, r3, #15
 8006484:	6879      	ldr	r1, [r7, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	3324      	adds	r3, #36	@ 0x24
 8006492:	2201      	movs	r2, #1
 8006494:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	33b0      	adds	r3, #176	@ 0xb0
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064cc:	2302      	movs	r3, #2
 80064ce:	e018      	b.n	8006502 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	7c1b      	ldrb	r3, [r3, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d10a      	bne.n	80064ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <USBD_CDC_Init+0x1e8>)
 80064da:	7819      	ldrb	r1, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 fb7c 	bl	8008be4 <USBD_LL_PrepareReceive>
 80064ec:	e008      	b.n	8006500 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064ee:	4b08      	ldr	r3, [pc, #32]	@ (8006510 <USBD_CDC_Init+0x1e8>)
 80064f0:	7819      	ldrb	r1, [r3, #0]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064f8:	2340      	movs	r3, #64	@ 0x40
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 fb72 	bl	8008be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3710      	adds	r7, #16
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000093 	.word	0x20000093
 8006510:	20000094 	.word	0x20000094
 8006514:	20000095 	.word	0x20000095

08006518 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006524:	4b3a      	ldr	r3, [pc, #232]	@ (8006610 <USBD_CDC_DeInit+0xf8>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f002 fa91 	bl	8008a52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006530:	4b37      	ldr	r3, [pc, #220]	@ (8006610 <USBD_CDC_DeInit+0xf8>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	3324      	adds	r3, #36	@ 0x24
 8006546:	2200      	movs	r2, #0
 8006548:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800654a:	4b32      	ldr	r3, [pc, #200]	@ (8006614 <USBD_CDC_DeInit+0xfc>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	4619      	mov	r1, r3
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f002 fa7e 	bl	8008a52 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006556:	4b2f      	ldr	r3, [pc, #188]	@ (8006614 <USBD_CDC_DeInit+0xfc>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	f003 020f 	and.w	r2, r3, #15
 800655e:	6879      	ldr	r1, [r7, #4]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	440b      	add	r3, r1
 800656a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800656e:	2200      	movs	r2, #0
 8006570:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006572:	4b29      	ldr	r3, [pc, #164]	@ (8006618 <USBD_CDC_DeInit+0x100>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f002 fa6a 	bl	8008a52 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800657e:	4b26      	ldr	r3, [pc, #152]	@ (8006618 <USBD_CDC_DeInit+0x100>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	f003 020f 	and.w	r2, r3, #15
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	440b      	add	r3, r1
 8006592:	3324      	adds	r3, #36	@ 0x24
 8006594:	2200      	movs	r2, #0
 8006596:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006598:	4b1f      	ldr	r3, [pc, #124]	@ (8006618 <USBD_CDC_DeInit+0x100>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 020f 	and.w	r2, r3, #15
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	4613      	mov	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	4413      	add	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	440b      	add	r3, r1
 80065ac:	3326      	adds	r3, #38	@ 0x26
 80065ae:	2200      	movs	r2, #0
 80065b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	32b0      	adds	r2, #176	@ 0xb0
 80065bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01f      	beq.n	8006604 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	33b0      	adds	r3, #176	@ 0xb0
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4413      	add	r3, r2
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	32b0      	adds	r2, #176	@ 0xb0
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f002 fb3e 	bl	8008c68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32b0      	adds	r2, #176	@ 0xb0
 80065f6:	2100      	movs	r1, #0
 80065f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000093 	.word	0x20000093
 8006614:	20000094 	.word	0x20000094
 8006618:	20000095 	.word	0x20000095

0800661c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	32b0      	adds	r2, #176	@ 0xb0
 8006630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006634:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006636:	2300      	movs	r3, #0
 8006638:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006648:	2303      	movs	r3, #3
 800664a:	e0bf      	b.n	80067cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006654:	2b00      	cmp	r3, #0
 8006656:	d050      	beq.n	80066fa <USBD_CDC_Setup+0xde>
 8006658:	2b20      	cmp	r3, #32
 800665a:	f040 80af 	bne.w	80067bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	88db      	ldrh	r3, [r3, #6]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d03a      	beq.n	80066dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	b25b      	sxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	da1b      	bge.n	80066a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	33b0      	adds	r3, #176	@ 0xb0
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	683a      	ldr	r2, [r7, #0]
 8006684:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006686:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006688:	683a      	ldr	r2, [r7, #0]
 800668a:	88d2      	ldrh	r2, [r2, #6]
 800668c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	88db      	ldrh	r3, [r3, #6]
 8006692:	2b07      	cmp	r3, #7
 8006694:	bf28      	it	cs
 8006696:	2307      	movcs	r3, #7
 8006698:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	89fa      	ldrh	r2, [r7, #14]
 800669e:	4619      	mov	r1, r3
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f001 fd87 	bl	80081b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80066a6:	e090      	b.n	80067ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	785a      	ldrb	r2, [r3, #1]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	88db      	ldrh	r3, [r3, #6]
 80066b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80066b8:	d803      	bhi.n	80066c2 <USBD_CDC_Setup+0xa6>
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	88db      	ldrh	r3, [r3, #6]
 80066be:	b2da      	uxtb	r2, r3
 80066c0:	e000      	b.n	80066c4 <USBD_CDC_Setup+0xa8>
 80066c2:	2240      	movs	r2, #64	@ 0x40
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066ca:	6939      	ldr	r1, [r7, #16]
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80066d2:	461a      	mov	r2, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fd99 	bl	800820c <USBD_CtlPrepareRx>
      break;
 80066da:	e076      	b.n	80067ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	33b0      	adds	r3, #176	@ 0xb0
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	683a      	ldr	r2, [r7, #0]
 80066f0:	7850      	ldrb	r0, [r2, #1]
 80066f2:	2200      	movs	r2, #0
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	4798      	blx	r3
      break;
 80066f8:	e067      	b.n	80067ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	2b0b      	cmp	r3, #11
 8006700:	d851      	bhi.n	80067a6 <USBD_CDC_Setup+0x18a>
 8006702:	a201      	add	r2, pc, #4	@ (adr r2, 8006708 <USBD_CDC_Setup+0xec>)
 8006704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006708:	08006739 	.word	0x08006739
 800670c:	080067b5 	.word	0x080067b5
 8006710:	080067a7 	.word	0x080067a7
 8006714:	080067a7 	.word	0x080067a7
 8006718:	080067a7 	.word	0x080067a7
 800671c:	080067a7 	.word	0x080067a7
 8006720:	080067a7 	.word	0x080067a7
 8006724:	080067a7 	.word	0x080067a7
 8006728:	080067a7 	.word	0x080067a7
 800672c:	080067a7 	.word	0x080067a7
 8006730:	08006763 	.word	0x08006763
 8006734:	0800678d 	.word	0x0800678d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b03      	cmp	r3, #3
 8006742:	d107      	bne.n	8006754 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006744:	f107 030a 	add.w	r3, r7, #10
 8006748:	2202      	movs	r2, #2
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f001 fd31 	bl	80081b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006752:	e032      	b.n	80067ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f001 fcbb 	bl	80080d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800675c:	2303      	movs	r3, #3
 800675e:	75fb      	strb	r3, [r7, #23]
          break;
 8006760:	e02b      	b.n	80067ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b03      	cmp	r3, #3
 800676c:	d107      	bne.n	800677e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800676e:	f107 030d 	add.w	r3, r7, #13
 8006772:	2201      	movs	r2, #1
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fd1c 	bl	80081b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800677c:	e01d      	b.n	80067ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800677e:	6839      	ldr	r1, [r7, #0]
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 fca6 	bl	80080d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006786:	2303      	movs	r3, #3
 8006788:	75fb      	strb	r3, [r7, #23]
          break;
 800678a:	e016      	b.n	80067ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b03      	cmp	r3, #3
 8006796:	d00f      	beq.n	80067b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 fc99 	bl	80080d2 <USBD_CtlError>
            ret = USBD_FAIL;
 80067a0:	2303      	movs	r3, #3
 80067a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067a4:	e008      	b.n	80067b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067a6:	6839      	ldr	r1, [r7, #0]
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 fc92 	bl	80080d2 <USBD_CtlError>
          ret = USBD_FAIL;
 80067ae:	2303      	movs	r3, #3
 80067b0:	75fb      	strb	r3, [r7, #23]
          break;
 80067b2:	e002      	b.n	80067ba <USBD_CDC_Setup+0x19e>
          break;
 80067b4:	bf00      	nop
 80067b6:	e008      	b.n	80067ca <USBD_CDC_Setup+0x1ae>
          break;
 80067b8:	bf00      	nop
      }
      break;
 80067ba:	e006      	b.n	80067ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f001 fc87 	bl	80080d2 <USBD_CtlError>
      ret = USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	75fb      	strb	r3, [r7, #23]
      break;
 80067c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3718      	adds	r7, #24
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80067e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32b0      	adds	r2, #176	@ 0xb0
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d101      	bne.n	80067fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e065      	b.n	80068ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	32b0      	adds	r2, #176	@ 0xb0
 8006808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	f003 020f 	and.w	r2, r3, #15
 8006814:	6879      	ldr	r1, [r7, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	3318      	adds	r3, #24
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d02f      	beq.n	8006888 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	f003 020f 	and.w	r2, r3, #15
 800682e:	6879      	ldr	r1, [r7, #4]
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	440b      	add	r3, r1
 800683a:	3318      	adds	r3, #24
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	78fb      	ldrb	r3, [r7, #3]
 8006840:	f003 010f 	and.w	r1, r3, #15
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	460b      	mov	r3, r1
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	440b      	add	r3, r1
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4403      	add	r3, r0
 8006850:	331c      	adds	r3, #28
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	fbb2 f1f3 	udiv	r1, r2, r3
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800685e:	2b00      	cmp	r3, #0
 8006860:	d112      	bne.n	8006888 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006862:	78fb      	ldrb	r3, [r7, #3]
 8006864:	f003 020f 	and.w	r2, r3, #15
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	3318      	adds	r3, #24
 8006876:	2200      	movs	r2, #0
 8006878:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800687a:	78f9      	ldrb	r1, [r7, #3]
 800687c:	2300      	movs	r3, #0
 800687e:	2200      	movs	r2, #0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f002 f98e 	bl	8008ba2 <USBD_LL_Transmit>
 8006886:	e01f      	b.n	80068c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2200      	movs	r2, #0
 800688c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	33b0      	adds	r3, #176	@ 0xb0
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d010      	beq.n	80068c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	33b0      	adds	r3, #176	@ 0xb0
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	4413      	add	r3, r2
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80068c4:	78fa      	ldrb	r2, [r7, #3]
 80068c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	460b      	mov	r3, r1
 80068dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	32b0      	adds	r2, #176	@ 0xb0
 80068e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	32b0      	adds	r2, #176	@ 0xb0
 80068f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d101      	bne.n	8006904 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006900:	2303      	movs	r3, #3
 8006902:	e01a      	b.n	800693a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006904:	78fb      	ldrb	r3, [r7, #3]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 f98c 	bl	8008c26 <USBD_LL_GetRxDataSize>
 800690e:	4602      	mov	r2, r0
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	33b0      	adds	r3, #176	@ 0xb0
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	4413      	add	r3, r2
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006934:	4611      	mov	r1, r2
 8006936:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	32b0      	adds	r2, #176	@ 0xb0
 8006954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006958:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006960:	2303      	movs	r3, #3
 8006962:	e024      	b.n	80069ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	33b0      	adds	r3, #176	@ 0xb0
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d019      	beq.n	80069ac <USBD_CDC_EP0_RxReady+0x6a>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800697e:	2bff      	cmp	r3, #255	@ 0xff
 8006980:	d014      	beq.n	80069ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	33b0      	adds	r3, #176	@ 0xb0
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800699a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	22ff      	movs	r2, #255	@ 0xff
 80069a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069c0:	2182      	movs	r1, #130	@ 0x82
 80069c2:	4818      	ldr	r0, [pc, #96]	@ (8006a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069c4:	f000 fd4f 	bl	8007466 <USBD_GetEpDesc>
 80069c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069ca:	2101      	movs	r1, #1
 80069cc:	4815      	ldr	r0, [pc, #84]	@ (8006a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069ce:	f000 fd4a 	bl	8007466 <USBD_GetEpDesc>
 80069d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069d4:	2181      	movs	r1, #129	@ 0x81
 80069d6:	4813      	ldr	r0, [pc, #76]	@ (8006a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069d8:	f000 fd45 	bl	8007466 <USBD_GetEpDesc>
 80069dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	2210      	movs	r2, #16
 80069e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d006      	beq.n	80069fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069f8:	711a      	strb	r2, [r3, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a0c:	711a      	strb	r2, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2243      	movs	r2, #67	@ 0x43
 8006a16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a18:	4b02      	ldr	r3, [pc, #8]	@ (8006a24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3718      	adds	r7, #24
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	20000050 	.word	0x20000050

08006a28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a30:	2182      	movs	r1, #130	@ 0x82
 8006a32:	4818      	ldr	r0, [pc, #96]	@ (8006a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a34:	f000 fd17 	bl	8007466 <USBD_GetEpDesc>
 8006a38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	4815      	ldr	r0, [pc, #84]	@ (8006a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a3e:	f000 fd12 	bl	8007466 <USBD_GetEpDesc>
 8006a42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a44:	2181      	movs	r1, #129	@ 0x81
 8006a46:	4813      	ldr	r0, [pc, #76]	@ (8006a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a48:	f000 fd0d 	bl	8007466 <USBD_GetEpDesc>
 8006a4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2210      	movs	r2, #16
 8006a58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d006      	beq.n	8006a6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	2200      	movs	r2, #0
 8006a64:	711a      	strb	r2, [r3, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f042 0202 	orr.w	r2, r2, #2
 8006a6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	711a      	strb	r2, [r3, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f042 0202 	orr.w	r2, r2, #2
 8006a80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2243      	movs	r2, #67	@ 0x43
 8006a86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a88:	4b02      	ldr	r3, [pc, #8]	@ (8006a94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3718      	adds	r7, #24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	20000050 	.word	0x20000050

08006a98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006aa0:	2182      	movs	r1, #130	@ 0x82
 8006aa2:	4818      	ldr	r0, [pc, #96]	@ (8006b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006aa4:	f000 fcdf 	bl	8007466 <USBD_GetEpDesc>
 8006aa8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aaa:	2101      	movs	r1, #1
 8006aac:	4815      	ldr	r0, [pc, #84]	@ (8006b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006aae:	f000 fcda 	bl	8007466 <USBD_GetEpDesc>
 8006ab2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ab4:	2181      	movs	r1, #129	@ 0x81
 8006ab6:	4813      	ldr	r0, [pc, #76]	@ (8006b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ab8:	f000 fcd5 	bl	8007466 <USBD_GetEpDesc>
 8006abc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2210      	movs	r2, #16
 8006ac8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d006      	beq.n	8006ade <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ad8:	711a      	strb	r2, [r3, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d006      	beq.n	8006af2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006aec:	711a      	strb	r2, [r3, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2243      	movs	r2, #67	@ 0x43
 8006af6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006af8:	4b02      	ldr	r3, [pc, #8]	@ (8006b04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000050 	.word	0x20000050

08006b08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	220a      	movs	r2, #10
 8006b14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b16:	4b03      	ldr	r3, [pc, #12]	@ (8006b24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr
 8006b24:	2000000c 	.word	0x2000000c

08006b28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e009      	b.n	8006b50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	33b0      	adds	r3, #176	@ 0xb0
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	32b0      	adds	r2, #176	@ 0xb0
 8006b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b76:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e008      	b.n	8006b94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32b0      	adds	r2, #176	@ 0xb0
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bc0:	2303      	movs	r3, #3
 8006bc2:	e004      	b.n	8006bce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
	...

08006bdc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	32b0      	adds	r2, #176	@ 0xb0
 8006bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bf2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d101      	bne.n	8006c02 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e025      	b.n	8006c4e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d11f      	bne.n	8006c4c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c14:	4b10      	ldr	r3, [pc, #64]	@ (8006c58 <USBD_CDC_TransmitPacket+0x7c>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f003 020f 	and.w	r2, r3, #15
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4413      	add	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4403      	add	r3, r0
 8006c2e:	3318      	adds	r3, #24
 8006c30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c32:	4b09      	ldr	r3, [pc, #36]	@ (8006c58 <USBD_CDC_TransmitPacket+0x7c>)
 8006c34:	7819      	ldrb	r1, [r3, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f001 ffad 	bl	8008ba2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000093 	.word	0x20000093

08006c5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	32b0      	adds	r2, #176	@ 0xb0
 8006c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	32b0      	adds	r2, #176	@ 0xb0
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e018      	b.n	8006cbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	7c1b      	ldrb	r3, [r3, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10a      	bne.n	8006ca8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006c92:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc4 <USBD_CDC_ReceivePacket+0x68>)
 8006c94:	7819      	ldrb	r1, [r3, #0]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006c9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 ff9f 	bl	8008be4 <USBD_LL_PrepareReceive>
 8006ca6:	e008      	b.n	8006cba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <USBD_CDC_ReceivePacket+0x68>)
 8006caa:	7819      	ldrb	r1, [r3, #0]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cb2:	2340      	movs	r3, #64	@ 0x40
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 ff95 	bl	8008be4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	20000094 	.word	0x20000094

08006cc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	4613      	mov	r3, r2
 8006cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	e01f      	b.n	8006d20 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d003      	beq.n	8006d06 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	79fa      	ldrb	r2, [r7, #7]
 8006d12:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 fe0f 	bl	8008938 <USBD_LL_Init>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e025      	b.n	8006d8c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	32ae      	adds	r2, #174	@ 0xae
 8006d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00f      	beq.n	8006d7c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32ae      	adds	r2, #174	@ 0xae
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d6c:	f107 020e 	add.w	r2, r7, #14
 8006d70:	4610      	mov	r0, r2
 8006d72:	4798      	blx	r3
 8006d74:	4602      	mov	r2, r0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fe17 	bl	80089d0 <USBD_LL_Start>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006db4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	370c      	adds	r7, #12
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b084      	sub	sp, #16
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	460b      	mov	r3, r1
 8006dcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d009      	beq.n	8006df0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	4611      	mov	r1, r2
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e06:	2300      	movs	r3, #0
 8006e08:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	78fa      	ldrb	r2, [r7, #3]
 8006e14:	4611      	mov	r1, r2
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d001      	beq.n	8006e24 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e20:	2303      	movs	r3, #3
 8006e22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f001 f90c 	bl	800805e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006e54:	461a      	mov	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d01a      	beq.n	8006ea0 <USBD_LL_SetupStage+0x72>
 8006e6a:	2b02      	cmp	r3, #2
 8006e6c:	d822      	bhi.n	8006eb4 <USBD_LL_SetupStage+0x86>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d002      	beq.n	8006e78 <USBD_LL_SetupStage+0x4a>
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d00a      	beq.n	8006e8c <USBD_LL_SetupStage+0x5e>
 8006e76:	e01d      	b.n	8006eb4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f000 fb63 	bl	800754c <USBD_StdDevReq>
 8006e86:	4603      	mov	r3, r0
 8006e88:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8a:	e020      	b.n	8006ece <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fbcb 	bl	8007630 <USBD_StdItfReq>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9e:	e016      	b.n	8006ece <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fc2d 	bl	8007708 <USBD_StdEPReq>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb2:	e00c      	b.n	8006ece <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006eba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f001 fde4 	bl	8008a90 <USBD_LL_StallEP>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	73fb      	strb	r3, [r7, #15]
      break;
 8006ecc:	bf00      	nop
  }

  return ret;
 8006ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3710      	adds	r7, #16
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}

08006ed8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	607a      	str	r2, [r7, #4]
 8006ee4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006eea:	7afb      	ldrb	r3, [r7, #11]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d16e      	bne.n	8006fce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006ef6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	f040 8098 	bne.w	8007034 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	689a      	ldr	r2, [r3, #8]
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d913      	bls.n	8006f38 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	689a      	ldr	r2, [r3, #8]
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	1ad2      	subs	r2, r2, r3
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	4293      	cmp	r3, r2
 8006f28:	bf28      	it	cs
 8006f2a:	4613      	movcs	r3, r2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f001 f988 	bl	8008246 <USBD_CtlContinueRx>
 8006f36:	e07d      	b.n	8007034 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d014      	beq.n	8006f70 <USBD_LL_DataOutStage+0x98>
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d81d      	bhi.n	8006f86 <USBD_LL_DataOutStage+0xae>
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <USBD_LL_DataOutStage+0x7c>
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d003      	beq.n	8006f5a <USBD_LL_DataOutStage+0x82>
 8006f52:	e018      	b.n	8006f86 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	75bb      	strb	r3, [r7, #22]
            break;
 8006f58:	e018      	b.n	8006f8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f000 fa64 	bl	8007432 <USBD_CoreFindIF>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f6e:	e00d      	b.n	8006f8c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fa66 	bl	800744c <USBD_CoreFindEP>
 8006f80:	4603      	mov	r3, r0
 8006f82:	75bb      	strb	r3, [r7, #22]
            break;
 8006f84:	e002      	b.n	8006f8c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75bb      	strb	r3, [r7, #22]
            break;
 8006f8a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f8c:	7dbb      	ldrb	r3, [r7, #22]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d119      	bne.n	8006fc6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d113      	bne.n	8006fc6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006f9e:	7dba      	ldrb	r2, [r7, #22]
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	32ae      	adds	r2, #174	@ 0xae
 8006fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006fae:	7dba      	ldrb	r2, [r7, #22]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006fb6:	7dba      	ldrb	r2, [r7, #22]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	32ae      	adds	r2, #174	@ 0xae
 8006fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f001 f94e 	bl	8008268 <USBD_CtlSendStatus>
 8006fcc:	e032      	b.n	8007034 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 fa37 	bl	800744c <USBD_CoreFindEP>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006fe2:	7dbb      	ldrb	r3, [r7, #22]
 8006fe4:	2bff      	cmp	r3, #255	@ 0xff
 8006fe6:	d025      	beq.n	8007034 <USBD_LL_DataOutStage+0x15c>
 8006fe8:	7dbb      	ldrb	r3, [r7, #22]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d122      	bne.n	8007034 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d117      	bne.n	800702a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006ffa:	7dba      	ldrb	r2, [r7, #22]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	32ae      	adds	r2, #174	@ 0xae
 8007000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007004:	699b      	ldr	r3, [r3, #24]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00f      	beq.n	800702a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800700a:	7dba      	ldrb	r2, [r7, #22]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007012:	7dba      	ldrb	r2, [r7, #22]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	32ae      	adds	r2, #174	@ 0xae
 8007018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	7afa      	ldrb	r2, [r7, #11]
 8007020:	4611      	mov	r1, r2
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	4798      	blx	r3
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800702a:	7dfb      	ldrb	r3, [r7, #23]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d001      	beq.n	8007034 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007030:	7dfb      	ldrb	r3, [r7, #23]
 8007032:	e000      	b.n	8007036 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b086      	sub	sp, #24
 8007042:	af00      	add	r7, sp, #0
 8007044:	60f8      	str	r0, [r7, #12]
 8007046:	460b      	mov	r3, r1
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800704c:	7afb      	ldrb	r3, [r7, #11]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d16f      	bne.n	8007132 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	3314      	adds	r3, #20
 8007056:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800705e:	2b02      	cmp	r3, #2
 8007060:	d15a      	bne.n	8007118 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	429a      	cmp	r2, r3
 800706c:	d914      	bls.n	8007098 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	1ad2      	subs	r2, r2, r3
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	461a      	mov	r2, r3
 8007082:	6879      	ldr	r1, [r7, #4]
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f001 f8b0 	bl	80081ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800708a:	2300      	movs	r3, #0
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f001 fda7 	bl	8008be4 <USBD_LL_PrepareReceive>
 8007096:	e03f      	b.n	8007118 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	68da      	ldr	r2, [r3, #12]
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d11c      	bne.n	80070de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d316      	bcc.n	80070de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d20f      	bcs.n	80070de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070be:	2200      	movs	r2, #0
 80070c0:	2100      	movs	r1, #0
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f001 f891 	bl	80081ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070d0:	2300      	movs	r3, #0
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 fd84 	bl	8008be4 <USBD_LL_PrepareReceive>
 80070dc:	e01c      	b.n	8007118 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d10f      	bne.n	800710a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800710a:	2180      	movs	r1, #128	@ 0x80
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f001 fcbf 	bl	8008a90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f001 f8bb 	bl	800828e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d03a      	beq.n	8007198 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff fe42 	bl	8006dac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007130:	e032      	b.n	8007198 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007138:	b2db      	uxtb	r3, r3
 800713a:	4619      	mov	r1, r3
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f000 f985 	bl	800744c <USBD_CoreFindEP>
 8007142:	4603      	mov	r3, r0
 8007144:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	2bff      	cmp	r3, #255	@ 0xff
 800714a:	d025      	beq.n	8007198 <USBD_LL_DataInStage+0x15a>
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d122      	bne.n	8007198 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b03      	cmp	r3, #3
 800715c:	d11c      	bne.n	8007198 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800715e:	7dfa      	ldrb	r2, [r7, #23]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	32ae      	adds	r2, #174	@ 0xae
 8007164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007168:	695b      	ldr	r3, [r3, #20]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d014      	beq.n	8007198 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800716e:	7dfa      	ldrb	r2, [r7, #23]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007176:	7dfa      	ldrb	r2, [r7, #23]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	32ae      	adds	r2, #174	@ 0xae
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	7afa      	ldrb	r2, [r7, #11]
 8007184:	4611      	mov	r1, r2
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	4798      	blx	r3
 800718a:	4603      	mov	r3, r0
 800718c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800718e:	7dbb      	ldrb	r3, [r7, #22]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d001      	beq.n	8007198 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007194:	7dbb      	ldrb	r3, [r7, #22]
 8007196:	e000      	b.n	800719a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d014      	beq.n	8007208 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00e      	beq.n	8007208 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	6852      	ldr	r2, [r2, #4]
 80071f6:	b2d2      	uxtb	r2, r2
 80071f8:	4611      	mov	r1, r2
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	4798      	blx	r3
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d001      	beq.n	8007208 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007204:	2303      	movs	r3, #3
 8007206:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007208:	2340      	movs	r3, #64	@ 0x40
 800720a:	2200      	movs	r2, #0
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f001 fbf9 	bl	8008a06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2240      	movs	r2, #64	@ 0x40
 8007220:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007224:	2340      	movs	r3, #64	@ 0x40
 8007226:	2200      	movs	r2, #0
 8007228:	2180      	movs	r1, #128	@ 0x80
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fbeb 	bl	8008a06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2240      	movs	r2, #64	@ 0x40
 800723a:	621a      	str	r2, [r3, #32]

  return ret;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	460b      	mov	r3, r1
 8007250:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	78fa      	ldrb	r2, [r7, #3]
 8007256:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007274:	b2db      	uxtb	r3, r3
 8007276:	2b04      	cmp	r3, #4
 8007278:	d006      	beq.n	8007288 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007280:	b2da      	uxtb	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2204      	movs	r2, #4
 800728c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d106      	bne.n	80072c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072ce:	b580      	push	{r7, lr}
 80072d0:	b082      	sub	sp, #8
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d110      	bne.n	8007304 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00b      	beq.n	8007304 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f2:	69db      	ldr	r3, [r3, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072fe:	69db      	ldr	r3, [r3, #28]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	460b      	mov	r3, r1
 8007318:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	32ae      	adds	r2, #174	@ 0xae
 8007324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d101      	bne.n	8007330 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800732c:	2303      	movs	r3, #3
 800732e:	e01c      	b.n	800736a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b03      	cmp	r3, #3
 800733a:	d115      	bne.n	8007368 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	32ae      	adds	r2, #174	@ 0xae
 8007346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00b      	beq.n	8007368 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	@ 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	78fa      	ldrb	r2, [r7, #3]
 8007362:	4611      	mov	r1, r2
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3708      	adds	r7, #8
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	32ae      	adds	r2, #174	@ 0xae
 8007388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d101      	bne.n	8007394 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e01c      	b.n	80073ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b03      	cmp	r3, #3
 800739e:	d115      	bne.n	80073cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	32ae      	adds	r2, #174	@ 0xae
 80073aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	32ae      	adds	r2, #174	@ 0xae
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c4:	78fa      	ldrb	r2, [r7, #3]
 80073c6:	4611      	mov	r1, r2
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00e      	beq.n	8007428 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6852      	ldr	r2, [r2, #4]
 8007416:	b2d2      	uxtb	r2, r2
 8007418:	4611      	mov	r1, r2
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007424:	2303      	movs	r3, #3
 8007426:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007428:	7bfb      	ldrb	r3, [r7, #15]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007432:	b480      	push	{r7}
 8007434:	b083      	sub	sp, #12
 8007436:	af00      	add	r7, sp, #0
 8007438:	6078      	str	r0, [r7, #4]
 800743a:	460b      	mov	r3, r1
 800743c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800743e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007440:	4618      	mov	r0, r3
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007458:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	885b      	ldrh	r3, [r3, #2]
 8007482:	b29b      	uxth	r3, r3
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	4293      	cmp	r3, r2
 800748a:	d91f      	bls.n	80074cc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007492:	e013      	b.n	80074bc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007494:	f107 030a 	add.w	r3, r7, #10
 8007498:	4619      	mov	r1, r3
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f000 f81b 	bl	80074d6 <USBD_GetNextDesc>
 80074a0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	785b      	ldrb	r3, [r3, #1]
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d108      	bne.n	80074bc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	789b      	ldrb	r3, [r3, #2]
 80074b2:	78fa      	ldrb	r2, [r7, #3]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d008      	beq.n	80074ca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80074b8:	2300      	movs	r3, #0
 80074ba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	885b      	ldrh	r3, [r3, #2]
 80074c0:	b29a      	uxth	r2, r3
 80074c2:	897b      	ldrh	r3, [r7, #10]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d8e5      	bhi.n	8007494 <USBD_GetEpDesc+0x2e>
 80074c8:	e000      	b.n	80074cc <USBD_GetEpDesc+0x66>
          break;
 80074ca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80074cc:	693b      	ldr	r3, [r7, #16]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	4413      	add	r3, r2
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4413      	add	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007500:	68fb      	ldr	r3, [r7, #12]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	3301      	adds	r3, #1
 8007524:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800752c:	8a3b      	ldrh	r3, [r7, #16]
 800752e:	021b      	lsls	r3, r3, #8
 8007530:	b21a      	sxth	r2, r3
 8007532:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007536:	4313      	orrs	r3, r2
 8007538:	b21b      	sxth	r3, r3
 800753a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800753c:	89fb      	ldrh	r3, [r7, #14]
}
 800753e:	4618      	mov	r0, r3
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
	...

0800754c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d005      	beq.n	8007572 <USBD_StdDevReq+0x26>
 8007566:	2b40      	cmp	r3, #64	@ 0x40
 8007568:	d857      	bhi.n	800761a <USBD_StdDevReq+0xce>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00f      	beq.n	800758e <USBD_StdDevReq+0x42>
 800756e:	2b20      	cmp	r3, #32
 8007570:	d153      	bne.n	800761a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	32ae      	adds	r2, #174	@ 0xae
 800757c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
      break;
 800758c:	e04a      	b.n	8007624 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	2b09      	cmp	r3, #9
 8007594:	d83b      	bhi.n	800760e <USBD_StdDevReq+0xc2>
 8007596:	a201      	add	r2, pc, #4	@ (adr r2, 800759c <USBD_StdDevReq+0x50>)
 8007598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759c:	080075f1 	.word	0x080075f1
 80075a0:	08007605 	.word	0x08007605
 80075a4:	0800760f 	.word	0x0800760f
 80075a8:	080075fb 	.word	0x080075fb
 80075ac:	0800760f 	.word	0x0800760f
 80075b0:	080075cf 	.word	0x080075cf
 80075b4:	080075c5 	.word	0x080075c5
 80075b8:	0800760f 	.word	0x0800760f
 80075bc:	080075e7 	.word	0x080075e7
 80075c0:	080075d9 	.word	0x080075d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075c4:	6839      	ldr	r1, [r7, #0]
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 fa3c 	bl	8007a44 <USBD_GetDescriptor>
          break;
 80075cc:	e024      	b.n	8007618 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075ce:	6839      	ldr	r1, [r7, #0]
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 fba1 	bl	8007d18 <USBD_SetAddress>
          break;
 80075d6:	e01f      	b.n	8007618 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075d8:	6839      	ldr	r1, [r7, #0]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fbe0 	bl	8007da0 <USBD_SetConfig>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]
          break;
 80075e4:	e018      	b.n	8007618 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fc83 	bl	8007ef4 <USBD_GetConfig>
          break;
 80075ee:	e013      	b.n	8007618 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fcb4 	bl	8007f60 <USBD_GetStatus>
          break;
 80075f8:	e00e      	b.n	8007618 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075fa:	6839      	ldr	r1, [r7, #0]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 fce3 	bl	8007fc8 <USBD_SetFeature>
          break;
 8007602:	e009      	b.n	8007618 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fd07 	bl	800801a <USBD_ClrFeature>
          break;
 800760c:	e004      	b.n	8007618 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 fd5e 	bl	80080d2 <USBD_CtlError>
          break;
 8007616:	bf00      	nop
      }
      break;
 8007618:	e004      	b.n	8007624 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 fd58 	bl	80080d2 <USBD_CtlError>
      break;
 8007622:	bf00      	nop
  }

  return ret;
 8007624:	7bfb      	ldrb	r3, [r7, #15]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop

08007630 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007646:	2b40      	cmp	r3, #64	@ 0x40
 8007648:	d005      	beq.n	8007656 <USBD_StdItfReq+0x26>
 800764a:	2b40      	cmp	r3, #64	@ 0x40
 800764c:	d852      	bhi.n	80076f4 <USBD_StdItfReq+0xc4>
 800764e:	2b00      	cmp	r3, #0
 8007650:	d001      	beq.n	8007656 <USBD_StdItfReq+0x26>
 8007652:	2b20      	cmp	r3, #32
 8007654:	d14e      	bne.n	80076f4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800765c:	b2db      	uxtb	r3, r3
 800765e:	3b01      	subs	r3, #1
 8007660:	2b02      	cmp	r3, #2
 8007662:	d840      	bhi.n	80076e6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	889b      	ldrh	r3, [r3, #4]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b01      	cmp	r3, #1
 800766c:	d836      	bhi.n	80076dc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	889b      	ldrh	r3, [r3, #4]
 8007672:	b2db      	uxtb	r3, r3
 8007674:	4619      	mov	r1, r3
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff fedb 	bl	8007432 <USBD_CoreFindIF>
 800767c:	4603      	mov	r3, r0
 800767e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007680:	7bbb      	ldrb	r3, [r7, #14]
 8007682:	2bff      	cmp	r3, #255	@ 0xff
 8007684:	d01d      	beq.n	80076c2 <USBD_StdItfReq+0x92>
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d11a      	bne.n	80076c2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800768c:	7bba      	ldrb	r2, [r7, #14]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32ae      	adds	r2, #174	@ 0xae
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00f      	beq.n	80076bc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800769c:	7bba      	ldrb	r2, [r7, #14]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076a4:	7bba      	ldrb	r2, [r7, #14]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32ae      	adds	r2, #174	@ 0xae
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	6839      	ldr	r1, [r7, #0]
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076ba:	e004      	b.n	80076c6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076bc:	2303      	movs	r3, #3
 80076be:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076c0:	e001      	b.n	80076c6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076c2:	2303      	movs	r3, #3
 80076c4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	88db      	ldrh	r3, [r3, #6]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d110      	bne.n	80076f0 <USBD_StdItfReq+0xc0>
 80076ce:	7bfb      	ldrb	r3, [r7, #15]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fdc7 	bl	8008268 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076da:	e009      	b.n	80076f0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f000 fcf7 	bl	80080d2 <USBD_CtlError>
          break;
 80076e4:	e004      	b.n	80076f0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fcf2 	bl	80080d2 <USBD_CtlError>
          break;
 80076ee:	e000      	b.n	80076f2 <USBD_StdItfReq+0xc2>
          break;
 80076f0:	bf00      	nop
      }
      break;
 80076f2:	e004      	b.n	80076fe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fceb 	bl	80080d2 <USBD_CtlError>
      break;
 80076fc:	bf00      	nop
  }

  return ret;
 80076fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	889b      	ldrh	r3, [r3, #4]
 800771a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007724:	2b40      	cmp	r3, #64	@ 0x40
 8007726:	d007      	beq.n	8007738 <USBD_StdEPReq+0x30>
 8007728:	2b40      	cmp	r3, #64	@ 0x40
 800772a:	f200 817f 	bhi.w	8007a2c <USBD_StdEPReq+0x324>
 800772e:	2b00      	cmp	r3, #0
 8007730:	d02a      	beq.n	8007788 <USBD_StdEPReq+0x80>
 8007732:	2b20      	cmp	r3, #32
 8007734:	f040 817a 	bne.w	8007a2c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007738:	7bbb      	ldrb	r3, [r7, #14]
 800773a:	4619      	mov	r1, r3
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f7ff fe85 	bl	800744c <USBD_CoreFindEP>
 8007742:	4603      	mov	r3, r0
 8007744:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007746:	7b7b      	ldrb	r3, [r7, #13]
 8007748:	2bff      	cmp	r3, #255	@ 0xff
 800774a:	f000 8174 	beq.w	8007a36 <USBD_StdEPReq+0x32e>
 800774e:	7b7b      	ldrb	r3, [r7, #13]
 8007750:	2b00      	cmp	r3, #0
 8007752:	f040 8170 	bne.w	8007a36 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007756:	7b7a      	ldrb	r2, [r7, #13]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800775e:	7b7a      	ldrb	r2, [r7, #13]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	32ae      	adds	r2, #174	@ 0xae
 8007764:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	2b00      	cmp	r3, #0
 800776c:	f000 8163 	beq.w	8007a36 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007770:	7b7a      	ldrb	r2, [r7, #13]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	32ae      	adds	r2, #174	@ 0xae
 8007776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	4798      	blx	r3
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007786:	e156      	b.n	8007a36 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	785b      	ldrb	r3, [r3, #1]
 800778c:	2b03      	cmp	r3, #3
 800778e:	d008      	beq.n	80077a2 <USBD_StdEPReq+0x9a>
 8007790:	2b03      	cmp	r3, #3
 8007792:	f300 8145 	bgt.w	8007a20 <USBD_StdEPReq+0x318>
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 809b 	beq.w	80078d2 <USBD_StdEPReq+0x1ca>
 800779c:	2b01      	cmp	r3, #1
 800779e:	d03c      	beq.n	800781a <USBD_StdEPReq+0x112>
 80077a0:	e13e      	b.n	8007a20 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d002      	beq.n	80077b4 <USBD_StdEPReq+0xac>
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d016      	beq.n	80077e0 <USBD_StdEPReq+0xd8>
 80077b2:	e02c      	b.n	800780e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <USBD_StdEPReq+0xce>
 80077ba:	7bbb      	ldrb	r3, [r7, #14]
 80077bc:	2b80      	cmp	r3, #128	@ 0x80
 80077be:	d00a      	beq.n	80077d6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	4619      	mov	r1, r3
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f001 f963 	bl	8008a90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077ca:	2180      	movs	r1, #128	@ 0x80
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f001 f95f 	bl	8008a90 <USBD_LL_StallEP>
 80077d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077d4:	e020      	b.n	8007818 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fc7a 	bl	80080d2 <USBD_CtlError>
              break;
 80077de:	e01b      	b.n	8007818 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	885b      	ldrh	r3, [r3, #2]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10e      	bne.n	8007806 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077e8:	7bbb      	ldrb	r3, [r7, #14]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <USBD_StdEPReq+0xfe>
 80077ee:	7bbb      	ldrb	r3, [r7, #14]
 80077f0:	2b80      	cmp	r3, #128	@ 0x80
 80077f2:	d008      	beq.n	8007806 <USBD_StdEPReq+0xfe>
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	88db      	ldrh	r3, [r3, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d104      	bne.n	8007806 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f001 f945 	bl	8008a90 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 fd2e 	bl	8008268 <USBD_CtlSendStatus>

              break;
 800780c:	e004      	b.n	8007818 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 fc5e 	bl	80080d2 <USBD_CtlError>
              break;
 8007816:	bf00      	nop
          }
          break;
 8007818:	e107      	b.n	8007a2a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b02      	cmp	r3, #2
 8007824:	d002      	beq.n	800782c <USBD_StdEPReq+0x124>
 8007826:	2b03      	cmp	r3, #3
 8007828:	d016      	beq.n	8007858 <USBD_StdEPReq+0x150>
 800782a:	e04b      	b.n	80078c4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800782c:	7bbb      	ldrb	r3, [r7, #14]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00d      	beq.n	800784e <USBD_StdEPReq+0x146>
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b80      	cmp	r3, #128	@ 0x80
 8007836:	d00a      	beq.n	800784e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 f927 	bl	8008a90 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007842:	2180      	movs	r1, #128	@ 0x80
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f001 f923 	bl	8008a90 <USBD_LL_StallEP>
 800784a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800784c:	e040      	b.n	80078d0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc3e 	bl	80080d2 <USBD_CtlError>
              break;
 8007856:	e03b      	b.n	80078d0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	885b      	ldrh	r3, [r3, #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d136      	bne.n	80078ce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007866:	2b00      	cmp	r3, #0
 8007868:	d004      	beq.n	8007874 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	4619      	mov	r1, r3
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 f92d 	bl	8008ace <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fcf7 	bl	8008268 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fde4 	bl	800744c <USBD_CoreFindEP>
 8007884:	4603      	mov	r3, r0
 8007886:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007888:	7b7b      	ldrb	r3, [r7, #13]
 800788a:	2bff      	cmp	r3, #255	@ 0xff
 800788c:	d01f      	beq.n	80078ce <USBD_StdEPReq+0x1c6>
 800788e:	7b7b      	ldrb	r3, [r7, #13]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d11c      	bne.n	80078ce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007894:	7b7a      	ldrb	r2, [r7, #13]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800789c:	7b7a      	ldrb	r2, [r7, #13]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	32ae      	adds	r2, #174	@ 0xae
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d010      	beq.n	80078ce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078ac:	7b7a      	ldrb	r2, [r7, #13]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	32ae      	adds	r2, #174	@ 0xae
 80078b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	6839      	ldr	r1, [r7, #0]
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	4798      	blx	r3
 80078be:	4603      	mov	r3, r0
 80078c0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078c2:	e004      	b.n	80078ce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078c4:	6839      	ldr	r1, [r7, #0]
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 fc03 	bl	80080d2 <USBD_CtlError>
              break;
 80078cc:	e000      	b.n	80078d0 <USBD_StdEPReq+0x1c8>
              break;
 80078ce:	bf00      	nop
          }
          break;
 80078d0:	e0ab      	b.n	8007a2a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b02      	cmp	r3, #2
 80078dc:	d002      	beq.n	80078e4 <USBD_StdEPReq+0x1dc>
 80078de:	2b03      	cmp	r3, #3
 80078e0:	d032      	beq.n	8007948 <USBD_StdEPReq+0x240>
 80078e2:	e097      	b.n	8007a14 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <USBD_StdEPReq+0x1f2>
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b80      	cmp	r3, #128	@ 0x80
 80078ee:	d004      	beq.n	80078fa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fbed 	bl	80080d2 <USBD_CtlError>
                break;
 80078f8:	e091      	b.n	8007a1e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078fa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	da0b      	bge.n	800791a <USBD_StdEPReq+0x212>
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	3310      	adds	r3, #16
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	4413      	add	r3, r2
 8007916:	3304      	adds	r3, #4
 8007918:	e00b      	b.n	8007932 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	4413      	add	r3, r2
 8007930:	3304      	adds	r3, #4
 8007932:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2200      	movs	r2, #0
 8007938:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2202      	movs	r2, #2
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fc37 	bl	80081b4 <USBD_CtlSendData>
              break;
 8007946:	e06a      	b.n	8007a1e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	da11      	bge.n	8007974 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	f003 020f 	and.w	r2, r3, #15
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4613      	mov	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4413      	add	r3, r2
 800795e:	009b      	lsls	r3, r3, #2
 8007960:	440b      	add	r3, r1
 8007962:	3324      	adds	r3, #36	@ 0x24
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d117      	bne.n	800799a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fbb0 	bl	80080d2 <USBD_CtlError>
                  break;
 8007972:	e054      	b.n	8007a1e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	f003 020f 	and.w	r2, r3, #15
 800797a:	6879      	ldr	r1, [r7, #4]
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	440b      	add	r3, r1
 8007986:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d104      	bne.n	800799a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fb9d 	bl	80080d2 <USBD_CtlError>
                  break;
 8007998:	e041      	b.n	8007a1e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800799a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da0b      	bge.n	80079ba <USBD_StdEPReq+0x2b2>
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	3310      	adds	r3, #16
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	3304      	adds	r3, #4
 80079b8:	e00b      	b.n	80079d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	3304      	adds	r3, #4
 80079d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d002      	beq.n	80079e0 <USBD_StdEPReq+0x2d8>
 80079da:	7bbb      	ldrb	r3, [r7, #14]
 80079dc:	2b80      	cmp	r3, #128	@ 0x80
 80079de:	d103      	bne.n	80079e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e00e      	b.n	8007a06 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	4619      	mov	r1, r3
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f001 f88d 	bl	8008b0c <USBD_LL_IsStallEP>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d003      	beq.n	8007a00 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2201      	movs	r2, #1
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e002      	b.n	8007a06 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2202      	movs	r2, #2
 8007a0a:	4619      	mov	r1, r3
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fbd1 	bl	80081b4 <USBD_CtlSendData>
              break;
 8007a12:	e004      	b.n	8007a1e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fb5b 	bl	80080d2 <USBD_CtlError>
              break;
 8007a1c:	bf00      	nop
          }
          break;
 8007a1e:	e004      	b.n	8007a2a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fb55 	bl	80080d2 <USBD_CtlError>
          break;
 8007a28:	bf00      	nop
      }
      break;
 8007a2a:	e005      	b.n	8007a38 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb4f 	bl	80080d2 <USBD_CtlError>
      break;
 8007a34:	e000      	b.n	8007a38 <USBD_StdEPReq+0x330>
      break;
 8007a36:	bf00      	nop
  }

  return ret;
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	885b      	ldrh	r3, [r3, #2]
 8007a5e:	0a1b      	lsrs	r3, r3, #8
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	3b01      	subs	r3, #1
 8007a64:	2b06      	cmp	r3, #6
 8007a66:	f200 8128 	bhi.w	8007cba <USBD_GetDescriptor+0x276>
 8007a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a70 <USBD_GetDescriptor+0x2c>)
 8007a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a70:	08007a8d 	.word	0x08007a8d
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007ae5 	.word	0x08007ae5
 8007a7c:	08007cbb 	.word	0x08007cbb
 8007a80:	08007cbb 	.word	0x08007cbb
 8007a84:	08007c5b 	.word	0x08007c5b
 8007a88:	08007c87 	.word	0x08007c87
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	7c12      	ldrb	r2, [r2, #16]
 8007a98:	f107 0108 	add.w	r1, r7, #8
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4798      	blx	r3
 8007aa0:	60f8      	str	r0, [r7, #12]
      break;
 8007aa2:	e112      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	7c1b      	ldrb	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10d      	bne.n	8007ac8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ab4:	f107 0208 	add.w	r2, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	2202      	movs	r2, #2
 8007ac4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ac6:	e100      	b.n	8007cca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad0:	f107 0208 	add.w	r2, r7, #8
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	4798      	blx	r3
 8007ad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	2202      	movs	r2, #2
 8007ae0:	701a      	strb	r2, [r3, #0]
      break;
 8007ae2:	e0f2      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	885b      	ldrh	r3, [r3, #2]
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	f200 80ac 	bhi.w	8007c48 <USBD_GetDescriptor+0x204>
 8007af0:	a201      	add	r2, pc, #4	@ (adr r2, 8007af8 <USBD_GetDescriptor+0xb4>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b45 	.word	0x08007b45
 8007b00:	08007b79 	.word	0x08007b79
 8007b04:	08007bad 	.word	0x08007bad
 8007b08:	08007be1 	.word	0x08007be1
 8007b0c:	08007c15 	.word	0x08007c15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	7c12      	ldrb	r2, [r2, #16]
 8007b28:	f107 0108 	add.w	r1, r7, #8
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	4798      	blx	r3
 8007b30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b32:	e091      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 facb 	bl	80080d2 <USBD_CtlError>
            err++;
 8007b3c:	7afb      	ldrb	r3, [r7, #11]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	72fb      	strb	r3, [r7, #11]
          break;
 8007b42:	e089      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00b      	beq.n	8007b68 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	7c12      	ldrb	r2, [r2, #16]
 8007b5c:	f107 0108 	add.w	r1, r7, #8
 8007b60:	4610      	mov	r0, r2
 8007b62:	4798      	blx	r3
 8007b64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b66:	e077      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b68:	6839      	ldr	r1, [r7, #0]
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fab1 	bl	80080d2 <USBD_CtlError>
            err++;
 8007b70:	7afb      	ldrb	r3, [r7, #11]
 8007b72:	3301      	adds	r3, #1
 8007b74:	72fb      	strb	r3, [r7, #11]
          break;
 8007b76:	e06f      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00b      	beq.n	8007b9c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	7c12      	ldrb	r2, [r2, #16]
 8007b90:	f107 0108 	add.w	r1, r7, #8
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
 8007b98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b9a:	e05d      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa97 	bl	80080d2 <USBD_CtlError>
            err++;
 8007ba4:	7afb      	ldrb	r3, [r7, #11]
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	72fb      	strb	r3, [r7, #11]
          break;
 8007baa:	e055      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00b      	beq.n	8007bd0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	7c12      	ldrb	r2, [r2, #16]
 8007bc4:	f107 0108 	add.w	r1, r7, #8
 8007bc8:	4610      	mov	r0, r2
 8007bca:	4798      	blx	r3
 8007bcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bce:	e043      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fa7d 	bl	80080d2 <USBD_CtlError>
            err++;
 8007bd8:	7afb      	ldrb	r3, [r7, #11]
 8007bda:	3301      	adds	r3, #1
 8007bdc:	72fb      	strb	r3, [r7, #11]
          break;
 8007bde:	e03b      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007be6:	695b      	ldr	r3, [r3, #20]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf2:	695b      	ldr	r3, [r3, #20]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c02:	e029      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa63 	bl	80080d2 <USBD_CtlError>
            err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
          break;
 8007c12:	e021      	b.n	8007c58 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	7c12      	ldrb	r2, [r2, #16]
 8007c2c:	f107 0108 	add.w	r1, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c36:	e00f      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa49 	bl	80080d2 <USBD_CtlError>
            err++;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	3301      	adds	r3, #1
 8007c44:	72fb      	strb	r3, [r7, #11]
          break;
 8007c46:	e007      	b.n	8007c58 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa41 	bl	80080d2 <USBD_CtlError>
          err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c56:	bf00      	nop
      }
      break;
 8007c58:	e037      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	7c1b      	ldrb	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c6a:	f107 0208 	add.w	r2, r7, #8
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4798      	blx	r3
 8007c72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c74:	e029      	b.n	8007cca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 fa2a 	bl	80080d2 <USBD_CtlError>
        err++;
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	3301      	adds	r3, #1
 8007c82:	72fb      	strb	r3, [r7, #11]
      break;
 8007c84:	e021      	b.n	8007cca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	7c1b      	ldrb	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10d      	bne.n	8007caa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c96:	f107 0208 	add.w	r2, r7, #8
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4798      	blx	r3
 8007c9e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ca8:	e00f      	b.n	8007cca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007caa:	6839      	ldr	r1, [r7, #0]
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fa10 	bl	80080d2 <USBD_CtlError>
        err++;
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb8:	e007      	b.n	8007cca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa08 	bl	80080d2 <USBD_CtlError>
      err++;
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc8:	bf00      	nop
  }

  if (err != 0U)
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d11e      	bne.n	8007d0e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	88db      	ldrh	r3, [r3, #6]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d016      	beq.n	8007d06 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007cd8:	893b      	ldrh	r3, [r7, #8]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d00e      	beq.n	8007cfc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	88da      	ldrh	r2, [r3, #6]
 8007ce2:	893b      	ldrh	r3, [r7, #8]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bf28      	it	cs
 8007ce8:	4613      	movcs	r3, r2
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cee:	893b      	ldrh	r3, [r7, #8]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68f9      	ldr	r1, [r7, #12]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fa5d 	bl	80081b4 <USBD_CtlSendData>
 8007cfa:	e009      	b.n	8007d10 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f9e7 	bl	80080d2 <USBD_CtlError>
 8007d04:	e004      	b.n	8007d10 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 faae 	bl	8008268 <USBD_CtlSendStatus>
 8007d0c:	e000      	b.n	8007d10 <USBD_GetDescriptor+0x2cc>
    return;
 8007d0e:	bf00      	nop
  }
}
 8007d10:	3710      	adds	r7, #16
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop

08007d18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	889b      	ldrh	r3, [r3, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d131      	bne.n	8007d8e <USBD_SetAddress+0x76>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	88db      	ldrh	r3, [r3, #6]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d12d      	bne.n	8007d8e <USBD_SetAddress+0x76>
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	885b      	ldrh	r3, [r3, #2]
 8007d36:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d38:	d829      	bhi.n	8007d8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	885b      	ldrh	r3, [r3, #2]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d104      	bne.n	8007d5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d52:	6839      	ldr	r1, [r7, #0]
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f000 f9bc 	bl	80080d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5a:	e01d      	b.n	8007d98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	7bfa      	ldrb	r2, [r7, #15]
 8007d60:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fefb 	bl	8008b64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 fa7a 	bl	8008268 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d004      	beq.n	8007d84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d82:	e009      	b.n	8007d98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	e004      	b.n	8007d98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d8e:	6839      	ldr	r1, [r7, #0]
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f000 f99e 	bl	80080d2 <USBD_CtlError>
  }
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	885b      	ldrh	r3, [r3, #2]
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	4b4e      	ldr	r3, [pc, #312]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007db6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007db8:	4b4d      	ldr	r3, [pc, #308]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d905      	bls.n	8007dcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f985 	bl	80080d2 <USBD_CtlError>
    return USBD_FAIL;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e08c      	b.n	8007ee6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d002      	beq.n	8007dde <USBD_SetConfig+0x3e>
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d029      	beq.n	8007e30 <USBD_SetConfig+0x90>
 8007ddc:	e075      	b.n	8007eca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dde:	4b44      	ldr	r3, [pc, #272]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d020      	beq.n	8007e28 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007de6:	4b42      	ldr	r3, [pc, #264]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007df0:	4b3f      	ldr	r3, [pc, #252]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fe ffe3 	bl	8006dc2 <USBD_SetClassConfig>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d008      	beq.n	8007e18 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e06:	6839      	ldr	r1, [r7, #0]
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f962 	bl	80080d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2202      	movs	r2, #2
 8007e12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e16:	e065      	b.n	8007ee4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 fa25 	bl	8008268 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2203      	movs	r2, #3
 8007e22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e26:	e05d      	b.n	8007ee4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa1d 	bl	8008268 <USBD_CtlSendStatus>
      break;
 8007e2e:	e059      	b.n	8007ee4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e30:	4b2f      	ldr	r3, [pc, #188]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d112      	bne.n	8007e5e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2202      	movs	r2, #2
 8007e3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007e40:	4b2b      	ldr	r3, [pc, #172]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e4a:	4b29      	ldr	r3, [pc, #164]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f7fe ffd2 	bl	8006dfa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 fa06 	bl	8008268 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e5c:	e042      	b.n	8007ee4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e5e:	4b24      	ldr	r3, [pc, #144]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d02a      	beq.n	8007ec2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7fe ffc0 	bl	8006dfa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e84:	4b1a      	ldr	r3, [pc, #104]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	4619      	mov	r1, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7fe ff99 	bl	8006dc2 <USBD_SetClassConfig>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00f      	beq.n	8007eba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f000 f918 	bl	80080d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7fe ffa5 	bl	8006dfa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007eb8:	e014      	b.n	8007ee4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9d4 	bl	8008268 <USBD_CtlSendStatus>
      break;
 8007ec0:	e010      	b.n	8007ee4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f9d0 	bl	8008268 <USBD_CtlSendStatus>
      break;
 8007ec8:	e00c      	b.n	8007ee4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f900 	bl	80080d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ed2:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <USBD_SetConfig+0x150>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7fe ff8e 	bl	8006dfa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee2:	bf00      	nop
  }

  return ret;
 8007ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	200003d0 	.word	0x200003d0

08007ef4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
 8007efc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	88db      	ldrh	r3, [r3, #6]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d004      	beq.n	8007f10 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 f8e2 	bl	80080d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f0e:	e023      	b.n	8007f58 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	dc02      	bgt.n	8007f22 <USBD_GetConfig+0x2e>
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dc03      	bgt.n	8007f28 <USBD_GetConfig+0x34>
 8007f20:	e015      	b.n	8007f4e <USBD_GetConfig+0x5a>
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d00b      	beq.n	8007f3e <USBD_GetConfig+0x4a>
 8007f26:	e012      	b.n	8007f4e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	3308      	adds	r3, #8
 8007f32:	2201      	movs	r2, #1
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f93c 	bl	80081b4 <USBD_CtlSendData>
        break;
 8007f3c:	e00c      	b.n	8007f58 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3304      	adds	r3, #4
 8007f42:	2201      	movs	r2, #1
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f934 	bl	80081b4 <USBD_CtlSendData>
        break;
 8007f4c:	e004      	b.n	8007f58 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 f8be 	bl	80080d2 <USBD_CtlError>
        break;
 8007f56:	bf00      	nop
}
 8007f58:	bf00      	nop
 8007f5a:	3708      	adds	r7, #8
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	2b02      	cmp	r3, #2
 8007f76:	d81e      	bhi.n	8007fb6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	88db      	ldrh	r3, [r3, #6]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d004      	beq.n	8007f8a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f80:	6839      	ldr	r1, [r7, #0]
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f8a5 	bl	80080d2 <USBD_CtlError>
        break;
 8007f88:	e01a      	b.n	8007fc0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d005      	beq.n	8007fa6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	f043 0202 	orr.w	r2, r3, #2
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	2202      	movs	r2, #2
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f900 	bl	80081b4 <USBD_CtlSendData>
      break;
 8007fb4:	e004      	b.n	8007fc0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f88a 	bl	80080d2 <USBD_CtlError>
      break;
 8007fbe:	bf00      	nop
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	885b      	ldrh	r3, [r3, #2]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d107      	bne.n	8007fea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f940 	bl	8008268 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007fe8:	e013      	b.n	8008012 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d10b      	bne.n	800800a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	889b      	ldrh	r3, [r3, #4]
 8007ff6:	0a1b      	lsrs	r3, r3, #8
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	b2da      	uxtb	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f930 	bl	8008268 <USBD_CtlSendStatus>
}
 8008008:	e003      	b.n	8008012 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f860 	bl	80080d2 <USBD_CtlError>
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800802a:	b2db      	uxtb	r3, r3
 800802c:	3b01      	subs	r3, #1
 800802e:	2b02      	cmp	r3, #2
 8008030:	d80b      	bhi.n	800804a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	885b      	ldrh	r3, [r3, #2]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d10c      	bne.n	8008054 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f910 	bl	8008268 <USBD_CtlSendStatus>
      }
      break;
 8008048:	e004      	b.n	8008054 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800804a:	6839      	ldr	r1, [r7, #0]
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 f840 	bl	80080d2 <USBD_CtlError>
      break;
 8008052:	e000      	b.n	8008056 <USBD_ClrFeature+0x3c>
      break;
 8008054:	bf00      	nop
  }
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b084      	sub	sp, #16
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	781a      	ldrb	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	3301      	adds	r3, #1
 8008078:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	781a      	ldrb	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008088:	68f8      	ldr	r0, [r7, #12]
 800808a:	f7ff fa40 	bl	800750e <SWAPBYTE>
 800808e:	4603      	mov	r3, r0
 8008090:	461a      	mov	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3301      	adds	r3, #1
 800809a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3301      	adds	r3, #1
 80080a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7ff fa33 	bl	800750e <SWAPBYTE>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	3301      	adds	r3, #1
 80080b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080bc:	68f8      	ldr	r0, [r7, #12]
 80080be:	f7ff fa26 	bl	800750e <SWAPBYTE>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	80da      	strh	r2, [r3, #6]
}
 80080ca:	bf00      	nop
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}

080080d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	b082      	sub	sp, #8
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
 80080da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080dc:	2180      	movs	r1, #128	@ 0x80
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f000 fcd6 	bl	8008a90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080e4:	2100      	movs	r1, #0
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fcd2 	bl	8008a90 <USBD_LL_StallEP>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d036      	beq.n	8008178 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800810e:	6938      	ldr	r0, [r7, #16]
 8008110:	f000 f836 	bl	8008180 <USBD_GetLen>
 8008114:	4603      	mov	r3, r0
 8008116:	3301      	adds	r3, #1
 8008118:	b29b      	uxth	r3, r3
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	b29a      	uxth	r2, r3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008122:	7dfb      	ldrb	r3, [r7, #23]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	4413      	add	r3, r2
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	7812      	ldrb	r2, [r2, #0]
 800812c:	701a      	strb	r2, [r3, #0]
  idx++;
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	3301      	adds	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008134:	7dfb      	ldrb	r3, [r7, #23]
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	4413      	add	r3, r2
 800813a:	2203      	movs	r2, #3
 800813c:	701a      	strb	r2, [r3, #0]
  idx++;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	3301      	adds	r3, #1
 8008142:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008144:	e013      	b.n	800816e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	4413      	add	r3, r2
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	7812      	ldrb	r2, [r2, #0]
 8008150:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	3301      	adds	r3, #1
 8008156:	613b      	str	r3, [r7, #16]
    idx++;
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	3301      	adds	r3, #1
 800815c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	4413      	add	r3, r2
 8008164:	2200      	movs	r2, #0
 8008166:	701a      	strb	r2, [r3, #0]
    idx++;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	3301      	adds	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e7      	bne.n	8008146 <USBD_GetString+0x52>
 8008176:	e000      	b.n	800817a <USBD_GetString+0x86>
    return;
 8008178:	bf00      	nop
  }
}
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008190:	e005      	b.n	800819e <USBD_GetLen+0x1e>
  {
    len++;
 8008192:	7bfb      	ldrb	r3, [r7, #15]
 8008194:	3301      	adds	r3, #1
 8008196:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	3301      	adds	r3, #1
 800819c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1f5      	bne.n	8008192 <USBD_GetLen+0x12>
  }

  return len;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	60b9      	str	r1, [r7, #8]
 80081be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2202      	movs	r2, #2
 80081c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	2100      	movs	r1, #0
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f000 fce1 	bl	8008ba2 <USBD_LL_Transmit>

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	60f8      	str	r0, [r7, #12]
 80081f2:	60b9      	str	r1, [r7, #8]
 80081f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68ba      	ldr	r2, [r7, #8]
 80081fa:	2100      	movs	r1, #0
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f000 fcd0 	bl	8008ba2 <USBD_LL_Transmit>

  return USBD_OK;
 8008202:	2300      	movs	r3, #0
}
 8008204:	4618      	mov	r0, r3
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2203      	movs	r2, #3
 800821c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	2100      	movs	r1, #0
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fcd4 	bl	8008be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b084      	sub	sp, #16
 800824a:	af00      	add	r7, sp, #0
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	2100      	movs	r1, #0
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 fcc3 	bl	8008be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2204      	movs	r2, #4
 8008274:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008278:	2300      	movs	r3, #0
 800827a:	2200      	movs	r2, #0
 800827c:	2100      	movs	r1, #0
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 fc8f 	bl	8008ba2 <USBD_LL_Transmit>

  return USBD_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2205      	movs	r2, #5
 800829a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800829e:	2300      	movs	r3, #0
 80082a0:	2200      	movs	r2, #0
 80082a2:	2100      	movs	r1, #0
 80082a4:	6878      	ldr	r0, [r7, #4]
 80082a6:	f000 fc9d 	bl	8008be4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082b8:	2200      	movs	r2, #0
 80082ba:	4912      	ldr	r1, [pc, #72]	@ (8008304 <MX_USB_DEVICE_Init+0x50>)
 80082bc:	4812      	ldr	r0, [pc, #72]	@ (8008308 <MX_USB_DEVICE_Init+0x54>)
 80082be:	f7fe fd03 	bl	8006cc8 <USBD_Init>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082c8:	f7f9 f84a 	bl	8001360 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082cc:	490f      	ldr	r1, [pc, #60]	@ (800830c <MX_USB_DEVICE_Init+0x58>)
 80082ce:	480e      	ldr	r0, [pc, #56]	@ (8008308 <MX_USB_DEVICE_Init+0x54>)
 80082d0:	f7fe fd2a 	bl	8006d28 <USBD_RegisterClass>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082da:	f7f9 f841 	bl	8001360 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082de:	490c      	ldr	r1, [pc, #48]	@ (8008310 <MX_USB_DEVICE_Init+0x5c>)
 80082e0:	4809      	ldr	r0, [pc, #36]	@ (8008308 <MX_USB_DEVICE_Init+0x54>)
 80082e2:	f7fe fc21 	bl	8006b28 <USBD_CDC_RegisterInterface>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082ec:	f7f9 f838 	bl	8001360 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80082f0:	4805      	ldr	r0, [pc, #20]	@ (8008308 <MX_USB_DEVICE_Init+0x54>)
 80082f2:	f7fe fd4f 	bl	8006d94 <USBD_Start>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80082fc:	f7f9 f830 	bl	8001360 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008300:	bf00      	nop
 8008302:	bd80      	pop	{r7, pc}
 8008304:	200000ac 	.word	0x200000ac
 8008308:	200003d4 	.word	0x200003d4
 800830c:	20000018 	.word	0x20000018
 8008310:	20000098 	.word	0x20000098

08008314 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008318:	2200      	movs	r2, #0
 800831a:	4905      	ldr	r1, [pc, #20]	@ (8008330 <CDC_Init_FS+0x1c>)
 800831c:	4805      	ldr	r0, [pc, #20]	@ (8008334 <CDC_Init_FS+0x20>)
 800831e:	f7fe fc1d 	bl	8006b5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008322:	4905      	ldr	r1, [pc, #20]	@ (8008338 <CDC_Init_FS+0x24>)
 8008324:	4803      	ldr	r0, [pc, #12]	@ (8008334 <CDC_Init_FS+0x20>)
 8008326:	f7fe fc3b 	bl	8006ba0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800832a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800832c:	4618      	mov	r0, r3
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000eb0 	.word	0x20000eb0
 8008334:	200003d4 	.word	0x200003d4
 8008338:	200006b0 	.word	0x200006b0

0800833c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800833c:	b480      	push	{r7}
 800833e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008340:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008342:	4618      	mov	r0, r3
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	4603      	mov	r3, r0
 8008354:	6039      	str	r1, [r7, #0]
 8008356:	71fb      	strb	r3, [r7, #7]
 8008358:	4613      	mov	r3, r2
 800835a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	2b23      	cmp	r3, #35	@ 0x23
 8008360:	d84a      	bhi.n	80083f8 <CDC_Control_FS+0xac>
 8008362:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <CDC_Control_FS+0x1c>)
 8008364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008368:	080083f9 	.word	0x080083f9
 800836c:	080083f9 	.word	0x080083f9
 8008370:	080083f9 	.word	0x080083f9
 8008374:	080083f9 	.word	0x080083f9
 8008378:	080083f9 	.word	0x080083f9
 800837c:	080083f9 	.word	0x080083f9
 8008380:	080083f9 	.word	0x080083f9
 8008384:	080083f9 	.word	0x080083f9
 8008388:	080083f9 	.word	0x080083f9
 800838c:	080083f9 	.word	0x080083f9
 8008390:	080083f9 	.word	0x080083f9
 8008394:	080083f9 	.word	0x080083f9
 8008398:	080083f9 	.word	0x080083f9
 800839c:	080083f9 	.word	0x080083f9
 80083a0:	080083f9 	.word	0x080083f9
 80083a4:	080083f9 	.word	0x080083f9
 80083a8:	080083f9 	.word	0x080083f9
 80083ac:	080083f9 	.word	0x080083f9
 80083b0:	080083f9 	.word	0x080083f9
 80083b4:	080083f9 	.word	0x080083f9
 80083b8:	080083f9 	.word	0x080083f9
 80083bc:	080083f9 	.word	0x080083f9
 80083c0:	080083f9 	.word	0x080083f9
 80083c4:	080083f9 	.word	0x080083f9
 80083c8:	080083f9 	.word	0x080083f9
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	080083f9 	.word	0x080083f9
 80083dc:	080083f9 	.word	0x080083f9
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	080083f9 	.word	0x080083f9
 80083e8:	080083f9 	.word	0x080083f9
 80083ec:	080083f9 	.word	0x080083f9
 80083f0:	080083f9 	.word	0x080083f9
 80083f4:	080083f9 	.word	0x080083f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80083f8:	bf00      	nop
  }

  return (USBD_OK);
 80083fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	4805      	ldr	r0, [pc, #20]	@ (800842c <CDC_Receive_FS+0x24>)
 8008416:	f7fe fbc3 	bl	8006ba0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800841a:	4804      	ldr	r0, [pc, #16]	@ (800842c <CDC_Receive_FS+0x24>)
 800841c:	f7fe fc1e 	bl	8006c5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008420:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200003d4 	.word	0x200003d4

08008430 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008440:	4b0d      	ldr	r3, [pc, #52]	@ (8008478 <CDC_Transmit_FS+0x48>)
 8008442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008446:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008452:	2301      	movs	r3, #1
 8008454:	e00b      	b.n	800846e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008456:	887b      	ldrh	r3, [r7, #2]
 8008458:	461a      	mov	r2, r3
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4806      	ldr	r0, [pc, #24]	@ (8008478 <CDC_Transmit_FS+0x48>)
 800845e:	f7fe fb7d 	bl	8006b5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008462:	4805      	ldr	r0, [pc, #20]	@ (8008478 <CDC_Transmit_FS+0x48>)
 8008464:	f7fe fbba 	bl	8006bdc <USBD_CDC_TransmitPacket>
 8008468:	4603      	mov	r3, r0
 800846a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	200003d4 	.word	0x200003d4

0800847c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800848e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	4603      	mov	r3, r0
 80084a8:	6039      	str	r1, [r7, #0]
 80084aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	2212      	movs	r2, #18
 80084b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084b2:	4b03      	ldr	r3, [pc, #12]	@ (80084c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	200000c8 	.word	0x200000c8

080084c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	4603      	mov	r3, r0
 80084cc:	6039      	str	r1, [r7, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2204      	movs	r2, #4
 80084d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084d6:	4b03      	ldr	r3, [pc, #12]	@ (80084e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084d8:	4618      	mov	r0, r3
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr
 80084e4:	200000dc 	.word	0x200000dc

080084e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4907      	ldr	r1, [pc, #28]	@ (800851c <USBD_FS_ProductStrDescriptor+0x34>)
 80084fe:	4808      	ldr	r0, [pc, #32]	@ (8008520 <USBD_FS_ProductStrDescriptor+0x38>)
 8008500:	f7ff fdf8 	bl	80080f4 <USBD_GetString>
 8008504:	e004      	b.n	8008510 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4904      	ldr	r1, [pc, #16]	@ (800851c <USBD_FS_ProductStrDescriptor+0x34>)
 800850a:	4805      	ldr	r0, [pc, #20]	@ (8008520 <USBD_FS_ProductStrDescriptor+0x38>)
 800850c:	f7ff fdf2 	bl	80080f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008510:	4b02      	ldr	r3, [pc, #8]	@ (800851c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	200016b0 	.word	0x200016b0
 8008520:	0800c854 	.word	0x0800c854

08008524 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	6039      	str	r1, [r7, #0]
 800852e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	4904      	ldr	r1, [pc, #16]	@ (8008544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008534:	4804      	ldr	r0, [pc, #16]	@ (8008548 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008536:	f7ff fddd 	bl	80080f4 <USBD_GetString>
  return USBD_StrDesc;
 800853a:	4b02      	ldr	r3, [pc, #8]	@ (8008544 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	200016b0 	.word	0x200016b0
 8008548:	0800c86c 	.word	0x0800c86c

0800854c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b082      	sub	sp, #8
 8008550:	af00      	add	r7, sp, #0
 8008552:	4603      	mov	r3, r0
 8008554:	6039      	str	r1, [r7, #0]
 8008556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	221a      	movs	r2, #26
 800855c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800855e:	f000 f843 	bl	80085e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008562:	4b02      	ldr	r3, [pc, #8]	@ (800856c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008564:	4618      	mov	r0, r3
 8008566:	3708      	adds	r7, #8
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	200000e0 	.word	0x200000e0

08008570 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	4603      	mov	r3, r0
 8008578:	6039      	str	r1, [r7, #0]
 800857a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800857c:	79fb      	ldrb	r3, [r7, #7]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d105      	bne.n	800858e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	4907      	ldr	r1, [pc, #28]	@ (80085a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008586:	4808      	ldr	r0, [pc, #32]	@ (80085a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008588:	f7ff fdb4 	bl	80080f4 <USBD_GetString>
 800858c:	e004      	b.n	8008598 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800858e:	683a      	ldr	r2, [r7, #0]
 8008590:	4904      	ldr	r1, [pc, #16]	@ (80085a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008592:	4805      	ldr	r0, [pc, #20]	@ (80085a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008594:	f7ff fdae 	bl	80080f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008598:	4b02      	ldr	r3, [pc, #8]	@ (80085a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	200016b0 	.word	0x200016b0
 80085a8:	0800c880 	.word	0x0800c880

080085ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	4603      	mov	r3, r0
 80085b4:	6039      	str	r1, [r7, #0]
 80085b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d105      	bne.n	80085ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085be:	683a      	ldr	r2, [r7, #0]
 80085c0:	4907      	ldr	r1, [pc, #28]	@ (80085e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085c2:	4808      	ldr	r0, [pc, #32]	@ (80085e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085c4:	f7ff fd96 	bl	80080f4 <USBD_GetString>
 80085c8:	e004      	b.n	80085d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ca:	683a      	ldr	r2, [r7, #0]
 80085cc:	4904      	ldr	r1, [pc, #16]	@ (80085e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085ce:	4805      	ldr	r0, [pc, #20]	@ (80085e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085d0:	f7ff fd90 	bl	80080f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085d4:	4b02      	ldr	r3, [pc, #8]	@ (80085e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	200016b0 	.word	0x200016b0
 80085e4:	0800c88c 	.word	0x0800c88c

080085e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80085ee:	4b0f      	ldr	r3, [pc, #60]	@ (800862c <Get_SerialNum+0x44>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80085f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008630 <Get_SerialNum+0x48>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80085fa:	4b0e      	ldr	r3, [pc, #56]	@ (8008634 <Get_SerialNum+0x4c>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4413      	add	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d009      	beq.n	8008622 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800860e:	2208      	movs	r2, #8
 8008610:	4909      	ldr	r1, [pc, #36]	@ (8008638 <Get_SerialNum+0x50>)
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f000 f814 	bl	8008640 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008618:	2204      	movs	r2, #4
 800861a:	4908      	ldr	r1, [pc, #32]	@ (800863c <Get_SerialNum+0x54>)
 800861c:	68b8      	ldr	r0, [r7, #8]
 800861e:	f000 f80f 	bl	8008640 <IntToUnicode>
  }
}
 8008622:	bf00      	nop
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	1fff7a10 	.word	0x1fff7a10
 8008630:	1fff7a14 	.word	0x1fff7a14
 8008634:	1fff7a18 	.word	0x1fff7a18
 8008638:	200000e2 	.word	0x200000e2
 800863c:	200000f2 	.word	0x200000f2

08008640 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	4613      	mov	r3, r2
 800864c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800864e:	2300      	movs	r3, #0
 8008650:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008652:	2300      	movs	r3, #0
 8008654:	75fb      	strb	r3, [r7, #23]
 8008656:	e027      	b.n	80086a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	0f1b      	lsrs	r3, r3, #28
 800865c:	2b09      	cmp	r3, #9
 800865e:	d80b      	bhi.n	8008678 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	0f1b      	lsrs	r3, r3, #28
 8008664:	b2da      	uxtb	r2, r3
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	4619      	mov	r1, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	440b      	add	r3, r1
 8008670:	3230      	adds	r2, #48	@ 0x30
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e00a      	b.n	800868e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	0f1b      	lsrs	r3, r3, #28
 800867c:	b2da      	uxtb	r2, r3
 800867e:	7dfb      	ldrb	r3, [r7, #23]
 8008680:	005b      	lsls	r3, r3, #1
 8008682:	4619      	mov	r1, r3
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	440b      	add	r3, r1
 8008688:	3237      	adds	r2, #55	@ 0x37
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	005b      	lsls	r3, r3, #1
 8008698:	3301      	adds	r3, #1
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	4413      	add	r3, r2
 800869e:	2200      	movs	r2, #0
 80086a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80086a2:	7dfb      	ldrb	r3, [r7, #23]
 80086a4:	3301      	adds	r3, #1
 80086a6:	75fb      	strb	r3, [r7, #23]
 80086a8:	7dfa      	ldrb	r2, [r7, #23]
 80086aa:	79fb      	ldrb	r3, [r7, #7]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d3d3      	bcc.n	8008658 <IntToUnicode+0x18>
  }
}
 80086b0:	bf00      	nop
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	@ 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c8:	f107 0314 	add.w	r3, r7, #20
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	605a      	str	r2, [r3, #4]
 80086d2:	609a      	str	r2, [r3, #8]
 80086d4:	60da      	str	r2, [r3, #12]
 80086d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086e0:	d13a      	bne.n	8008758 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086e2:	2300      	movs	r3, #0
 80086e4:	613b      	str	r3, [r7, #16]
 80086e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 80086e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ea:	4a1d      	ldr	r2, [pc, #116]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 80086ec:	f043 0301 	orr.w	r3, r3, #1
 80086f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80086f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 80086f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	613b      	str	r3, [r7, #16]
 80086fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008704:	2302      	movs	r3, #2
 8008706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008708:	2300      	movs	r3, #0
 800870a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800870c:	2303      	movs	r3, #3
 800870e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008710:	230a      	movs	r3, #10
 8008712:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008714:	f107 0314 	add.w	r3, r7, #20
 8008718:	4619      	mov	r1, r3
 800871a:	4812      	ldr	r0, [pc, #72]	@ (8008764 <HAL_PCD_MspInit+0xa4>)
 800871c:	f7f9 fdc0 	bl	80022a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008720:	4b0f      	ldr	r3, [pc, #60]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 8008722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008724:	4a0e      	ldr	r2, [pc, #56]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 8008726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800872a:	6353      	str	r3, [r2, #52]	@ 0x34
 800872c:	2300      	movs	r3, #0
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	4b0b      	ldr	r3, [pc, #44]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 8008732:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008734:	4a0a      	ldr	r2, [pc, #40]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 8008736:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800873a:	6453      	str	r3, [r2, #68]	@ 0x44
 800873c:	4b08      	ldr	r3, [pc, #32]	@ (8008760 <HAL_PCD_MspInit+0xa0>)
 800873e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008740:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008744:	60fb      	str	r3, [r7, #12]
 8008746:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008748:	2200      	movs	r2, #0
 800874a:	2100      	movs	r1, #0
 800874c:	2043      	movs	r0, #67	@ 0x43
 800874e:	f7f9 fd70 	bl	8002232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008752:	2043      	movs	r0, #67	@ 0x43
 8008754:	f7f9 fd89 	bl	800226a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008758:	bf00      	nop
 800875a:	3728      	adds	r7, #40	@ 0x28
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	40023800 	.word	0x40023800
 8008764:	40020000 	.word	0x40020000

08008768 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800877c:	4619      	mov	r1, r3
 800877e:	4610      	mov	r0, r2
 8008780:	f7fe fb55 	bl	8006e2e <USBD_LL_SetupStage>
}
 8008784:	bf00      	nop
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	460b      	mov	r3, r1
 8008796:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800879e:	78fa      	ldrb	r2, [r7, #3]
 80087a0:	6879      	ldr	r1, [r7, #4]
 80087a2:	4613      	mov	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	440b      	add	r3, r1
 80087ac:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f7fe fb8f 	bl	8006ed8 <USBD_LL_DataOutStage>
}
 80087ba:	bf00      	nop
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b082      	sub	sp, #8
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	460b      	mov	r3, r1
 80087cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	3320      	adds	r3, #32
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	78fb      	ldrb	r3, [r7, #3]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f7fe fc28 	bl	800703e <USBD_LL_DataInStage>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b082      	sub	sp, #8
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe fd62 	bl	80072ce <USBD_LL_SOF>
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b084      	sub	sp, #16
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800881a:	2301      	movs	r3, #1
 800881c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	79db      	ldrb	r3, [r3, #7]
 8008822:	2b02      	cmp	r3, #2
 8008824:	d001      	beq.n	800882a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008826:	f7f8 fd9b 	bl	8001360 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008830:	7bfa      	ldrb	r2, [r7, #15]
 8008832:	4611      	mov	r1, r2
 8008834:	4618      	mov	r0, r3
 8008836:	f7fe fd06 	bl	8007246 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008840:	4618      	mov	r0, r3
 8008842:	f7fe fcae 	bl	80071a2 <USBD_LL_Reset>
}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fd01 	bl	8007266 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	7adb      	ldrb	r3, [r3, #11]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008884:	4b04      	ldr	r3, [pc, #16]	@ (8008898 <HAL_PCD_SuspendCallback+0x48>)
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	4a03      	ldr	r2, [pc, #12]	@ (8008898 <HAL_PCD_SuspendCallback+0x48>)
 800888a:	f043 0306 	orr.w	r3, r3, #6
 800888e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008890:	bf00      	nop
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	e000ed00 	.word	0xe000ed00

0800889c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088aa:	4618      	mov	r0, r3
 80088ac:	f7fe fcf7 	bl	800729e <USBD_LL_Resume>
}
 80088b0:	bf00      	nop
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088ca:	78fa      	ldrb	r2, [r7, #3]
 80088cc:	4611      	mov	r1, r2
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7fe fd4f 	bl	8007372 <USBD_LL_IsoOUTIncomplete>
}
 80088d4:	bf00      	nop
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	4611      	mov	r1, r2
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fd0b 	bl	800730e <USBD_LL_IsoINIncomplete>
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800890e:	4618      	mov	r0, r3
 8008910:	f7fe fd61 	bl	80073d6 <USBD_LL_DevConnected>
}
 8008914:	bf00      	nop
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fd5e 	bl	80073ec <USBD_LL_DevDisconnected>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d13c      	bne.n	80089c2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008948:	4a20      	ldr	r2, [pc, #128]	@ (80089cc <USBD_LL_Init+0x94>)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	4a1e      	ldr	r2, [pc, #120]	@ (80089cc <USBD_LL_Init+0x94>)
 8008954:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008958:	4b1c      	ldr	r3, [pc, #112]	@ (80089cc <USBD_LL_Init+0x94>)
 800895a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800895e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008960:	4b1a      	ldr	r3, [pc, #104]	@ (80089cc <USBD_LL_Init+0x94>)
 8008962:	2204      	movs	r2, #4
 8008964:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008966:	4b19      	ldr	r3, [pc, #100]	@ (80089cc <USBD_LL_Init+0x94>)
 8008968:	2202      	movs	r2, #2
 800896a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800896c:	4b17      	ldr	r3, [pc, #92]	@ (80089cc <USBD_LL_Init+0x94>)
 800896e:	2200      	movs	r2, #0
 8008970:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008972:	4b16      	ldr	r3, [pc, #88]	@ (80089cc <USBD_LL_Init+0x94>)
 8008974:	2202      	movs	r2, #2
 8008976:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008978:	4b14      	ldr	r3, [pc, #80]	@ (80089cc <USBD_LL_Init+0x94>)
 800897a:	2200      	movs	r2, #0
 800897c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800897e:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <USBD_LL_Init+0x94>)
 8008980:	2200      	movs	r2, #0
 8008982:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008984:	4b11      	ldr	r3, [pc, #68]	@ (80089cc <USBD_LL_Init+0x94>)
 8008986:	2200      	movs	r2, #0
 8008988:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800898a:	4b10      	ldr	r3, [pc, #64]	@ (80089cc <USBD_LL_Init+0x94>)
 800898c:	2200      	movs	r2, #0
 800898e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008990:	4b0e      	ldr	r3, [pc, #56]	@ (80089cc <USBD_LL_Init+0x94>)
 8008992:	2200      	movs	r2, #0
 8008994:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008996:	480d      	ldr	r0, [pc, #52]	@ (80089cc <USBD_LL_Init+0x94>)
 8008998:	f7fa faef 	bl	8002f7a <HAL_PCD_Init>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80089a2:	f7f8 fcdd 	bl	8001360 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80089a6:	2180      	movs	r1, #128	@ 0x80
 80089a8:	4808      	ldr	r0, [pc, #32]	@ (80089cc <USBD_LL_Init+0x94>)
 80089aa:	f7fb fd1a 	bl	80043e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089ae:	2240      	movs	r2, #64	@ 0x40
 80089b0:	2100      	movs	r1, #0
 80089b2:	4806      	ldr	r0, [pc, #24]	@ (80089cc <USBD_LL_Init+0x94>)
 80089b4:	f7fb fcce 	bl	8004354 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089b8:	2280      	movs	r2, #128	@ 0x80
 80089ba:	2101      	movs	r1, #1
 80089bc:	4803      	ldr	r0, [pc, #12]	@ (80089cc <USBD_LL_Init+0x94>)
 80089be:	f7fb fcc9 	bl	8004354 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	200018b0 	.word	0x200018b0

080089d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089dc:	2300      	movs	r3, #0
 80089de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fa fbd6 	bl	8003198 <HAL_PCD_Start>
 80089ec:	4603      	mov	r3, r0
 80089ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 f942 	bl	8008c7c <USBD_Get_USB_Status>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}

08008a06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a06:	b580      	push	{r7, lr}
 8008a08:	b084      	sub	sp, #16
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
 8008a0e:	4608      	mov	r0, r1
 8008a10:	4611      	mov	r1, r2
 8008a12:	461a      	mov	r2, r3
 8008a14:	4603      	mov	r3, r0
 8008a16:	70fb      	strb	r3, [r7, #3]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70bb      	strb	r3, [r7, #2]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a20:	2300      	movs	r3, #0
 8008a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a24:	2300      	movs	r3, #0
 8008a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a2e:	78bb      	ldrb	r3, [r7, #2]
 8008a30:	883a      	ldrh	r2, [r7, #0]
 8008a32:	78f9      	ldrb	r1, [r7, #3]
 8008a34:	f7fb f8aa 	bl	8003b8c <HAL_PCD_EP_Open>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f000 f91c 	bl	8008c7c <USBD_Get_USB_Status>
 8008a44:	4603      	mov	r3, r0
 8008a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a62:	2300      	movs	r3, #0
 8008a64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a6c:	78fa      	ldrb	r2, [r7, #3]
 8008a6e:	4611      	mov	r1, r2
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7fb f8f3 	bl	8003c5c <HAL_PCD_EP_Close>
 8008a76:	4603      	mov	r3, r0
 8008a78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 f8fd 	bl	8008c7c <USBD_Get_USB_Status>
 8008a82:	4603      	mov	r3, r0
 8008a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aaa:	78fa      	ldrb	r2, [r7, #3]
 8008aac:	4611      	mov	r1, r2
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fb f9ab 	bl	8003e0a <HAL_PCD_EP_SetStall>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f000 f8de 	bl	8008c7c <USBD_Get_USB_Status>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ae8:	78fa      	ldrb	r2, [r7, #3]
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fb f9ef 	bl	8003ed0 <HAL_PCD_EP_ClrStall>
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
 8008af8:	4618      	mov	r0, r3
 8008afa:	f000 f8bf 	bl	8008c7c <USBD_Get_USB_Status>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b085      	sub	sp, #20
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
 8008b14:	460b      	mov	r3, r1
 8008b16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	da0b      	bge.n	8008b40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b28:	78fb      	ldrb	r3, [r7, #3]
 8008b2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b2e:	68f9      	ldr	r1, [r7, #12]
 8008b30:	4613      	mov	r3, r2
 8008b32:	00db      	lsls	r3, r3, #3
 8008b34:	4413      	add	r3, r2
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	3316      	adds	r3, #22
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	e00b      	b.n	8008b58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b40:	78fb      	ldrb	r3, [r7, #3]
 8008b42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	00db      	lsls	r3, r3, #3
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008b56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr

08008b64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b74:	2300      	movs	r3, #0
 8008b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	4611      	mov	r1, r2
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fa ffde 	bl	8003b44 <HAL_PCD_SetAddress>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 f874 	bl	8008c7c <USBD_Get_USB_Status>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008bc0:	7af9      	ldrb	r1, [r7, #11]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	f7fb f8e6 	bl	8003d96 <HAL_PCD_EP_Transmit>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bce:	7dfb      	ldrb	r3, [r7, #23]
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f000 f853 	bl	8008c7c <USBD_Get_USB_Status>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bda:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	607a      	str	r2, [r7, #4]
 8008bee:	603b      	str	r3, [r7, #0]
 8008bf0:	460b      	mov	r3, r1
 8008bf2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c02:	7af9      	ldrb	r1, [r7, #11]
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	f7fb f872 	bl	8003cf0 <HAL_PCD_EP_Receive>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c10:	7dfb      	ldrb	r3, [r7, #23]
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 f832 	bl	8008c7c <USBD_Get_USB_Status>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3718      	adds	r7, #24
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c38:	78fa      	ldrb	r2, [r7, #3]
 8008c3a:	4611      	mov	r1, r2
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fb f892 	bl	8003d66 <HAL_PCD_EP_GetRxCount>
 8008c42:	4603      	mov	r3, r0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3708      	adds	r7, #8
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c54:	4b03      	ldr	r3, [pc, #12]	@ (8008c64 <USBD_static_malloc+0x18>)
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	370c      	adds	r7, #12
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20001d94 	.word	0x20001d94

08008c68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]

}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	4603      	mov	r3, r0
 8008c84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d817      	bhi.n	8008cc0 <USBD_Get_USB_Status+0x44>
 8008c90:	a201      	add	r2, pc, #4	@ (adr r2, 8008c98 <USBD_Get_USB_Status+0x1c>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008ca9 	.word	0x08008ca9
 8008c9c:	08008caf 	.word	0x08008caf
 8008ca0:	08008cb5 	.word	0x08008cb5
 8008ca4:	08008cbb 	.word	0x08008cbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cac:	e00b      	b.n	8008cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cae:	2303      	movs	r3, #3
 8008cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb2:	e008      	b.n	8008cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb8:	e005      	b.n	8008cc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbe:	e002      	b.n	8008cc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc4:	bf00      	nop
  }
  return usb_status;
 8008cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd2:	4770      	bx	lr

08008cd4 <__cvt>:
 8008cd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd8:	ec57 6b10 	vmov	r6, r7, d0
 8008cdc:	2f00      	cmp	r7, #0
 8008cde:	460c      	mov	r4, r1
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	463b      	mov	r3, r7
 8008ce4:	bfbb      	ittet	lt
 8008ce6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008cea:	461f      	movlt	r7, r3
 8008cec:	2300      	movge	r3, #0
 8008cee:	232d      	movlt	r3, #45	@ 0x2d
 8008cf0:	700b      	strb	r3, [r1, #0]
 8008cf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008cf4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008cf8:	4691      	mov	r9, r2
 8008cfa:	f023 0820 	bic.w	r8, r3, #32
 8008cfe:	bfbc      	itt	lt
 8008d00:	4632      	movlt	r2, r6
 8008d02:	4616      	movlt	r6, r2
 8008d04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d08:	d005      	beq.n	8008d16 <__cvt+0x42>
 8008d0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008d0e:	d100      	bne.n	8008d12 <__cvt+0x3e>
 8008d10:	3401      	adds	r4, #1
 8008d12:	2102      	movs	r1, #2
 8008d14:	e000      	b.n	8008d18 <__cvt+0x44>
 8008d16:	2103      	movs	r1, #3
 8008d18:	ab03      	add	r3, sp, #12
 8008d1a:	9301      	str	r3, [sp, #4]
 8008d1c:	ab02      	add	r3, sp, #8
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	ec47 6b10 	vmov	d0, r6, r7
 8008d24:	4653      	mov	r3, sl
 8008d26:	4622      	mov	r2, r4
 8008d28:	f000 fe5a 	bl	80099e0 <_dtoa_r>
 8008d2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d30:	4605      	mov	r5, r0
 8008d32:	d119      	bne.n	8008d68 <__cvt+0x94>
 8008d34:	f019 0f01 	tst.w	r9, #1
 8008d38:	d00e      	beq.n	8008d58 <__cvt+0x84>
 8008d3a:	eb00 0904 	add.w	r9, r0, r4
 8008d3e:	2200      	movs	r2, #0
 8008d40:	2300      	movs	r3, #0
 8008d42:	4630      	mov	r0, r6
 8008d44:	4639      	mov	r1, r7
 8008d46:	f7f7 fec7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d4a:	b108      	cbz	r0, 8008d50 <__cvt+0x7c>
 8008d4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d50:	2230      	movs	r2, #48	@ 0x30
 8008d52:	9b03      	ldr	r3, [sp, #12]
 8008d54:	454b      	cmp	r3, r9
 8008d56:	d31e      	bcc.n	8008d96 <__cvt+0xc2>
 8008d58:	9b03      	ldr	r3, [sp, #12]
 8008d5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d5c:	1b5b      	subs	r3, r3, r5
 8008d5e:	4628      	mov	r0, r5
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	b004      	add	sp, #16
 8008d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d6c:	eb00 0904 	add.w	r9, r0, r4
 8008d70:	d1e5      	bne.n	8008d3e <__cvt+0x6a>
 8008d72:	7803      	ldrb	r3, [r0, #0]
 8008d74:	2b30      	cmp	r3, #48	@ 0x30
 8008d76:	d10a      	bne.n	8008d8e <__cvt+0xba>
 8008d78:	2200      	movs	r2, #0
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	4639      	mov	r1, r7
 8008d80:	f7f7 feaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d84:	b918      	cbnz	r0, 8008d8e <__cvt+0xba>
 8008d86:	f1c4 0401 	rsb	r4, r4, #1
 8008d8a:	f8ca 4000 	str.w	r4, [sl]
 8008d8e:	f8da 3000 	ldr.w	r3, [sl]
 8008d92:	4499      	add	r9, r3
 8008d94:	e7d3      	b.n	8008d3e <__cvt+0x6a>
 8008d96:	1c59      	adds	r1, r3, #1
 8008d98:	9103      	str	r1, [sp, #12]
 8008d9a:	701a      	strb	r2, [r3, #0]
 8008d9c:	e7d9      	b.n	8008d52 <__cvt+0x7e>

08008d9e <__exponent>:
 8008d9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008da0:	2900      	cmp	r1, #0
 8008da2:	bfba      	itte	lt
 8008da4:	4249      	neglt	r1, r1
 8008da6:	232d      	movlt	r3, #45	@ 0x2d
 8008da8:	232b      	movge	r3, #43	@ 0x2b
 8008daa:	2909      	cmp	r1, #9
 8008dac:	7002      	strb	r2, [r0, #0]
 8008dae:	7043      	strb	r3, [r0, #1]
 8008db0:	dd29      	ble.n	8008e06 <__exponent+0x68>
 8008db2:	f10d 0307 	add.w	r3, sp, #7
 8008db6:	461d      	mov	r5, r3
 8008db8:	270a      	movs	r7, #10
 8008dba:	461a      	mov	r2, r3
 8008dbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008dc0:	fb07 1416 	mls	r4, r7, r6, r1
 8008dc4:	3430      	adds	r4, #48	@ 0x30
 8008dc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008dca:	460c      	mov	r4, r1
 8008dcc:	2c63      	cmp	r4, #99	@ 0x63
 8008dce:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	dcf1      	bgt.n	8008dba <__exponent+0x1c>
 8008dd6:	3130      	adds	r1, #48	@ 0x30
 8008dd8:	1e94      	subs	r4, r2, #2
 8008dda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dde:	1c41      	adds	r1, r0, #1
 8008de0:	4623      	mov	r3, r4
 8008de2:	42ab      	cmp	r3, r5
 8008de4:	d30a      	bcc.n	8008dfc <__exponent+0x5e>
 8008de6:	f10d 0309 	add.w	r3, sp, #9
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	42ac      	cmp	r4, r5
 8008dee:	bf88      	it	hi
 8008df0:	2300      	movhi	r3, #0
 8008df2:	3302      	adds	r3, #2
 8008df4:	4403      	add	r3, r0
 8008df6:	1a18      	subs	r0, r3, r0
 8008df8:	b003      	add	sp, #12
 8008dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dfc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008e00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008e04:	e7ed      	b.n	8008de2 <__exponent+0x44>
 8008e06:	2330      	movs	r3, #48	@ 0x30
 8008e08:	3130      	adds	r1, #48	@ 0x30
 8008e0a:	7083      	strb	r3, [r0, #2]
 8008e0c:	70c1      	strb	r1, [r0, #3]
 8008e0e:	1d03      	adds	r3, r0, #4
 8008e10:	e7f1      	b.n	8008df6 <__exponent+0x58>
	...

08008e14 <_printf_float>:
 8008e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e18:	b08d      	sub	sp, #52	@ 0x34
 8008e1a:	460c      	mov	r4, r1
 8008e1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e20:	4616      	mov	r6, r2
 8008e22:	461f      	mov	r7, r3
 8008e24:	4605      	mov	r5, r0
 8008e26:	f000 fcdb 	bl	80097e0 <_localeconv_r>
 8008e2a:	6803      	ldr	r3, [r0, #0]
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7f7 fa26 	bl	8000280 <strlen>
 8008e34:	2300      	movs	r3, #0
 8008e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e38:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3c:	9005      	str	r0, [sp, #20]
 8008e3e:	3307      	adds	r3, #7
 8008e40:	f023 0307 	bic.w	r3, r3, #7
 8008e44:	f103 0208 	add.w	r2, r3, #8
 8008e48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e4c:	f8d4 b000 	ldr.w	fp, [r4]
 8008e50:	f8c8 2000 	str.w	r2, [r8]
 8008e54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e6a:	4b9c      	ldr	r3, [pc, #624]	@ (80090dc <_printf_float+0x2c8>)
 8008e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e70:	f7f7 fe64 	bl	8000b3c <__aeabi_dcmpun>
 8008e74:	bb70      	cbnz	r0, 8008ed4 <_printf_float+0xc0>
 8008e76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e7a:	4b98      	ldr	r3, [pc, #608]	@ (80090dc <_printf_float+0x2c8>)
 8008e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e80:	f7f7 fe3e 	bl	8000b00 <__aeabi_dcmple>
 8008e84:	bb30      	cbnz	r0, 8008ed4 <_printf_float+0xc0>
 8008e86:	2200      	movs	r2, #0
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	4649      	mov	r1, r9
 8008e8e:	f7f7 fe2d 	bl	8000aec <__aeabi_dcmplt>
 8008e92:	b110      	cbz	r0, 8008e9a <_printf_float+0x86>
 8008e94:	232d      	movs	r3, #45	@ 0x2d
 8008e96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e9a:	4a91      	ldr	r2, [pc, #580]	@ (80090e0 <_printf_float+0x2cc>)
 8008e9c:	4b91      	ldr	r3, [pc, #580]	@ (80090e4 <_printf_float+0x2d0>)
 8008e9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ea2:	bf94      	ite	ls
 8008ea4:	4690      	movls	r8, r2
 8008ea6:	4698      	movhi	r8, r3
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	6123      	str	r3, [r4, #16]
 8008eac:	f02b 0304 	bic.w	r3, fp, #4
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	f04f 0900 	mov.w	r9, #0
 8008eb6:	9700      	str	r7, [sp, #0]
 8008eb8:	4633      	mov	r3, r6
 8008eba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f9d2 	bl	8009268 <_printf_common>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	f040 808d 	bne.w	8008fe4 <_printf_float+0x1d0>
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	b00d      	add	sp, #52	@ 0x34
 8008ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed4:	4642      	mov	r2, r8
 8008ed6:	464b      	mov	r3, r9
 8008ed8:	4640      	mov	r0, r8
 8008eda:	4649      	mov	r1, r9
 8008edc:	f7f7 fe2e 	bl	8000b3c <__aeabi_dcmpun>
 8008ee0:	b140      	cbz	r0, 8008ef4 <_printf_float+0xe0>
 8008ee2:	464b      	mov	r3, r9
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	bfbc      	itt	lt
 8008ee8:	232d      	movlt	r3, #45	@ 0x2d
 8008eea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008eee:	4a7e      	ldr	r2, [pc, #504]	@ (80090e8 <_printf_float+0x2d4>)
 8008ef0:	4b7e      	ldr	r3, [pc, #504]	@ (80090ec <_printf_float+0x2d8>)
 8008ef2:	e7d4      	b.n	8008e9e <_printf_float+0x8a>
 8008ef4:	6863      	ldr	r3, [r4, #4]
 8008ef6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008efa:	9206      	str	r2, [sp, #24]
 8008efc:	1c5a      	adds	r2, r3, #1
 8008efe:	d13b      	bne.n	8008f78 <_printf_float+0x164>
 8008f00:	2306      	movs	r3, #6
 8008f02:	6063      	str	r3, [r4, #4]
 8008f04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008f08:	2300      	movs	r3, #0
 8008f0a:	6022      	str	r2, [r4, #0]
 8008f0c:	9303      	str	r3, [sp, #12]
 8008f0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008f14:	ab09      	add	r3, sp, #36	@ 0x24
 8008f16:	9300      	str	r3, [sp, #0]
 8008f18:	6861      	ldr	r1, [r4, #4]
 8008f1a:	ec49 8b10 	vmov	d0, r8, r9
 8008f1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f22:	4628      	mov	r0, r5
 8008f24:	f7ff fed6 	bl	8008cd4 <__cvt>
 8008f28:	9b06      	ldr	r3, [sp, #24]
 8008f2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f2c:	2b47      	cmp	r3, #71	@ 0x47
 8008f2e:	4680      	mov	r8, r0
 8008f30:	d129      	bne.n	8008f86 <_printf_float+0x172>
 8008f32:	1cc8      	adds	r0, r1, #3
 8008f34:	db02      	blt.n	8008f3c <_printf_float+0x128>
 8008f36:	6863      	ldr	r3, [r4, #4]
 8008f38:	4299      	cmp	r1, r3
 8008f3a:	dd41      	ble.n	8008fc0 <_printf_float+0x1ac>
 8008f3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f40:	fa5f fa8a 	uxtb.w	sl, sl
 8008f44:	3901      	subs	r1, #1
 8008f46:	4652      	mov	r2, sl
 8008f48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f4e:	f7ff ff26 	bl	8008d9e <__exponent>
 8008f52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f54:	1813      	adds	r3, r2, r0
 8008f56:	2a01      	cmp	r2, #1
 8008f58:	4681      	mov	r9, r0
 8008f5a:	6123      	str	r3, [r4, #16]
 8008f5c:	dc02      	bgt.n	8008f64 <_printf_float+0x150>
 8008f5e:	6822      	ldr	r2, [r4, #0]
 8008f60:	07d2      	lsls	r2, r2, #31
 8008f62:	d501      	bpl.n	8008f68 <_printf_float+0x154>
 8008f64:	3301      	adds	r3, #1
 8008f66:	6123      	str	r3, [r4, #16]
 8008f68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d0a2      	beq.n	8008eb6 <_printf_float+0xa2>
 8008f70:	232d      	movs	r3, #45	@ 0x2d
 8008f72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f76:	e79e      	b.n	8008eb6 <_printf_float+0xa2>
 8008f78:	9a06      	ldr	r2, [sp, #24]
 8008f7a:	2a47      	cmp	r2, #71	@ 0x47
 8008f7c:	d1c2      	bne.n	8008f04 <_printf_float+0xf0>
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1c0      	bne.n	8008f04 <_printf_float+0xf0>
 8008f82:	2301      	movs	r3, #1
 8008f84:	e7bd      	b.n	8008f02 <_printf_float+0xee>
 8008f86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f8a:	d9db      	bls.n	8008f44 <_printf_float+0x130>
 8008f8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f90:	d118      	bne.n	8008fc4 <_printf_float+0x1b0>
 8008f92:	2900      	cmp	r1, #0
 8008f94:	6863      	ldr	r3, [r4, #4]
 8008f96:	dd0b      	ble.n	8008fb0 <_printf_float+0x19c>
 8008f98:	6121      	str	r1, [r4, #16]
 8008f9a:	b913      	cbnz	r3, 8008fa2 <_printf_float+0x18e>
 8008f9c:	6822      	ldr	r2, [r4, #0]
 8008f9e:	07d0      	lsls	r0, r2, #31
 8008fa0:	d502      	bpl.n	8008fa8 <_printf_float+0x194>
 8008fa2:	3301      	adds	r3, #1
 8008fa4:	440b      	add	r3, r1
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008faa:	f04f 0900 	mov.w	r9, #0
 8008fae:	e7db      	b.n	8008f68 <_printf_float+0x154>
 8008fb0:	b913      	cbnz	r3, 8008fb8 <_printf_float+0x1a4>
 8008fb2:	6822      	ldr	r2, [r4, #0]
 8008fb4:	07d2      	lsls	r2, r2, #31
 8008fb6:	d501      	bpl.n	8008fbc <_printf_float+0x1a8>
 8008fb8:	3302      	adds	r3, #2
 8008fba:	e7f4      	b.n	8008fa6 <_printf_float+0x192>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e7f2      	b.n	8008fa6 <_printf_float+0x192>
 8008fc0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc6:	4299      	cmp	r1, r3
 8008fc8:	db05      	blt.n	8008fd6 <_printf_float+0x1c2>
 8008fca:	6823      	ldr	r3, [r4, #0]
 8008fcc:	6121      	str	r1, [r4, #16]
 8008fce:	07d8      	lsls	r0, r3, #31
 8008fd0:	d5ea      	bpl.n	8008fa8 <_printf_float+0x194>
 8008fd2:	1c4b      	adds	r3, r1, #1
 8008fd4:	e7e7      	b.n	8008fa6 <_printf_float+0x192>
 8008fd6:	2900      	cmp	r1, #0
 8008fd8:	bfd4      	ite	le
 8008fda:	f1c1 0202 	rsble	r2, r1, #2
 8008fde:	2201      	movgt	r2, #1
 8008fe0:	4413      	add	r3, r2
 8008fe2:	e7e0      	b.n	8008fa6 <_printf_float+0x192>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	055a      	lsls	r2, r3, #21
 8008fe8:	d407      	bmi.n	8008ffa <_printf_float+0x1e6>
 8008fea:	6923      	ldr	r3, [r4, #16]
 8008fec:	4642      	mov	r2, r8
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d12b      	bne.n	8009050 <_printf_float+0x23c>
 8008ff8:	e767      	b.n	8008eca <_printf_float+0xb6>
 8008ffa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ffe:	f240 80dd 	bls.w	80091bc <_printf_float+0x3a8>
 8009002:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009006:	2200      	movs	r2, #0
 8009008:	2300      	movs	r3, #0
 800900a:	f7f7 fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 800900e:	2800      	cmp	r0, #0
 8009010:	d033      	beq.n	800907a <_printf_float+0x266>
 8009012:	4a37      	ldr	r2, [pc, #220]	@ (80090f0 <_printf_float+0x2dc>)
 8009014:	2301      	movs	r3, #1
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f af54 	beq.w	8008eca <_printf_float+0xb6>
 8009022:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009026:	4543      	cmp	r3, r8
 8009028:	db02      	blt.n	8009030 <_printf_float+0x21c>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	07d8      	lsls	r0, r3, #31
 800902e:	d50f      	bpl.n	8009050 <_printf_float+0x23c>
 8009030:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009034:	4631      	mov	r1, r6
 8009036:	4628      	mov	r0, r5
 8009038:	47b8      	blx	r7
 800903a:	3001      	adds	r0, #1
 800903c:	f43f af45 	beq.w	8008eca <_printf_float+0xb6>
 8009040:	f04f 0900 	mov.w	r9, #0
 8009044:	f108 38ff 	add.w	r8, r8, #4294967295
 8009048:	f104 0a1a 	add.w	sl, r4, #26
 800904c:	45c8      	cmp	r8, r9
 800904e:	dc09      	bgt.n	8009064 <_printf_float+0x250>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	079b      	lsls	r3, r3, #30
 8009054:	f100 8103 	bmi.w	800925e <_printf_float+0x44a>
 8009058:	68e0      	ldr	r0, [r4, #12]
 800905a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800905c:	4298      	cmp	r0, r3
 800905e:	bfb8      	it	lt
 8009060:	4618      	movlt	r0, r3
 8009062:	e734      	b.n	8008ece <_printf_float+0xba>
 8009064:	2301      	movs	r3, #1
 8009066:	4652      	mov	r2, sl
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f af2b 	beq.w	8008eca <_printf_float+0xb6>
 8009074:	f109 0901 	add.w	r9, r9, #1
 8009078:	e7e8      	b.n	800904c <_printf_float+0x238>
 800907a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	dc39      	bgt.n	80090f4 <_printf_float+0x2e0>
 8009080:	4a1b      	ldr	r2, [pc, #108]	@ (80090f0 <_printf_float+0x2dc>)
 8009082:	2301      	movs	r3, #1
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	47b8      	blx	r7
 800908a:	3001      	adds	r0, #1
 800908c:	f43f af1d 	beq.w	8008eca <_printf_float+0xb6>
 8009090:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009094:	ea59 0303 	orrs.w	r3, r9, r3
 8009098:	d102      	bne.n	80090a0 <_printf_float+0x28c>
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	07d9      	lsls	r1, r3, #31
 800909e:	d5d7      	bpl.n	8009050 <_printf_float+0x23c>
 80090a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090a4:	4631      	mov	r1, r6
 80090a6:	4628      	mov	r0, r5
 80090a8:	47b8      	blx	r7
 80090aa:	3001      	adds	r0, #1
 80090ac:	f43f af0d 	beq.w	8008eca <_printf_float+0xb6>
 80090b0:	f04f 0a00 	mov.w	sl, #0
 80090b4:	f104 0b1a 	add.w	fp, r4, #26
 80090b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ba:	425b      	negs	r3, r3
 80090bc:	4553      	cmp	r3, sl
 80090be:	dc01      	bgt.n	80090c4 <_printf_float+0x2b0>
 80090c0:	464b      	mov	r3, r9
 80090c2:	e793      	b.n	8008fec <_printf_float+0x1d8>
 80090c4:	2301      	movs	r3, #1
 80090c6:	465a      	mov	r2, fp
 80090c8:	4631      	mov	r1, r6
 80090ca:	4628      	mov	r0, r5
 80090cc:	47b8      	blx	r7
 80090ce:	3001      	adds	r0, #1
 80090d0:	f43f aefb 	beq.w	8008eca <_printf_float+0xb6>
 80090d4:	f10a 0a01 	add.w	sl, sl, #1
 80090d8:	e7ee      	b.n	80090b8 <_printf_float+0x2a4>
 80090da:	bf00      	nop
 80090dc:	7fefffff 	.word	0x7fefffff
 80090e0:	0800c8b4 	.word	0x0800c8b4
 80090e4:	0800c8b8 	.word	0x0800c8b8
 80090e8:	0800c8bc 	.word	0x0800c8bc
 80090ec:	0800c8c0 	.word	0x0800c8c0
 80090f0:	0800c8c4 	.word	0x0800c8c4
 80090f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090f6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090fa:	4553      	cmp	r3, sl
 80090fc:	bfa8      	it	ge
 80090fe:	4653      	movge	r3, sl
 8009100:	2b00      	cmp	r3, #0
 8009102:	4699      	mov	r9, r3
 8009104:	dc36      	bgt.n	8009174 <_printf_float+0x360>
 8009106:	f04f 0b00 	mov.w	fp, #0
 800910a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800910e:	f104 021a 	add.w	r2, r4, #26
 8009112:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009114:	9306      	str	r3, [sp, #24]
 8009116:	eba3 0309 	sub.w	r3, r3, r9
 800911a:	455b      	cmp	r3, fp
 800911c:	dc31      	bgt.n	8009182 <_printf_float+0x36e>
 800911e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009120:	459a      	cmp	sl, r3
 8009122:	dc3a      	bgt.n	800919a <_printf_float+0x386>
 8009124:	6823      	ldr	r3, [r4, #0]
 8009126:	07da      	lsls	r2, r3, #31
 8009128:	d437      	bmi.n	800919a <_printf_float+0x386>
 800912a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912c:	ebaa 0903 	sub.w	r9, sl, r3
 8009130:	9b06      	ldr	r3, [sp, #24]
 8009132:	ebaa 0303 	sub.w	r3, sl, r3
 8009136:	4599      	cmp	r9, r3
 8009138:	bfa8      	it	ge
 800913a:	4699      	movge	r9, r3
 800913c:	f1b9 0f00 	cmp.w	r9, #0
 8009140:	dc33      	bgt.n	80091aa <_printf_float+0x396>
 8009142:	f04f 0800 	mov.w	r8, #0
 8009146:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800914a:	f104 0b1a 	add.w	fp, r4, #26
 800914e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009150:	ebaa 0303 	sub.w	r3, sl, r3
 8009154:	eba3 0309 	sub.w	r3, r3, r9
 8009158:	4543      	cmp	r3, r8
 800915a:	f77f af79 	ble.w	8009050 <_printf_float+0x23c>
 800915e:	2301      	movs	r3, #1
 8009160:	465a      	mov	r2, fp
 8009162:	4631      	mov	r1, r6
 8009164:	4628      	mov	r0, r5
 8009166:	47b8      	blx	r7
 8009168:	3001      	adds	r0, #1
 800916a:	f43f aeae 	beq.w	8008eca <_printf_float+0xb6>
 800916e:	f108 0801 	add.w	r8, r8, #1
 8009172:	e7ec      	b.n	800914e <_printf_float+0x33a>
 8009174:	4642      	mov	r2, r8
 8009176:	4631      	mov	r1, r6
 8009178:	4628      	mov	r0, r5
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	d1c2      	bne.n	8009106 <_printf_float+0x2f2>
 8009180:	e6a3      	b.n	8008eca <_printf_float+0xb6>
 8009182:	2301      	movs	r3, #1
 8009184:	4631      	mov	r1, r6
 8009186:	4628      	mov	r0, r5
 8009188:	9206      	str	r2, [sp, #24]
 800918a:	47b8      	blx	r7
 800918c:	3001      	adds	r0, #1
 800918e:	f43f ae9c 	beq.w	8008eca <_printf_float+0xb6>
 8009192:	9a06      	ldr	r2, [sp, #24]
 8009194:	f10b 0b01 	add.w	fp, fp, #1
 8009198:	e7bb      	b.n	8009112 <_printf_float+0x2fe>
 800919a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800919e:	4631      	mov	r1, r6
 80091a0:	4628      	mov	r0, r5
 80091a2:	47b8      	blx	r7
 80091a4:	3001      	adds	r0, #1
 80091a6:	d1c0      	bne.n	800912a <_printf_float+0x316>
 80091a8:	e68f      	b.n	8008eca <_printf_float+0xb6>
 80091aa:	9a06      	ldr	r2, [sp, #24]
 80091ac:	464b      	mov	r3, r9
 80091ae:	4442      	add	r2, r8
 80091b0:	4631      	mov	r1, r6
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	d1c3      	bne.n	8009142 <_printf_float+0x32e>
 80091ba:	e686      	b.n	8008eca <_printf_float+0xb6>
 80091bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091c0:	f1ba 0f01 	cmp.w	sl, #1
 80091c4:	dc01      	bgt.n	80091ca <_printf_float+0x3b6>
 80091c6:	07db      	lsls	r3, r3, #31
 80091c8:	d536      	bpl.n	8009238 <_printf_float+0x424>
 80091ca:	2301      	movs	r3, #1
 80091cc:	4642      	mov	r2, r8
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f ae78 	beq.w	8008eca <_printf_float+0xb6>
 80091da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091de:	4631      	mov	r1, r6
 80091e0:	4628      	mov	r0, r5
 80091e2:	47b8      	blx	r7
 80091e4:	3001      	adds	r0, #1
 80091e6:	f43f ae70 	beq.w	8008eca <_printf_float+0xb6>
 80091ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091ee:	2200      	movs	r2, #0
 80091f0:	2300      	movs	r3, #0
 80091f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091f6:	f7f7 fc6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80091fa:	b9c0      	cbnz	r0, 800922e <_printf_float+0x41a>
 80091fc:	4653      	mov	r3, sl
 80091fe:	f108 0201 	add.w	r2, r8, #1
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	d10c      	bne.n	8009226 <_printf_float+0x412>
 800920c:	e65d      	b.n	8008eca <_printf_float+0xb6>
 800920e:	2301      	movs	r3, #1
 8009210:	465a      	mov	r2, fp
 8009212:	4631      	mov	r1, r6
 8009214:	4628      	mov	r0, r5
 8009216:	47b8      	blx	r7
 8009218:	3001      	adds	r0, #1
 800921a:	f43f ae56 	beq.w	8008eca <_printf_float+0xb6>
 800921e:	f108 0801 	add.w	r8, r8, #1
 8009222:	45d0      	cmp	r8, sl
 8009224:	dbf3      	blt.n	800920e <_printf_float+0x3fa>
 8009226:	464b      	mov	r3, r9
 8009228:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800922c:	e6df      	b.n	8008fee <_printf_float+0x1da>
 800922e:	f04f 0800 	mov.w	r8, #0
 8009232:	f104 0b1a 	add.w	fp, r4, #26
 8009236:	e7f4      	b.n	8009222 <_printf_float+0x40e>
 8009238:	2301      	movs	r3, #1
 800923a:	4642      	mov	r2, r8
 800923c:	e7e1      	b.n	8009202 <_printf_float+0x3ee>
 800923e:	2301      	movs	r3, #1
 8009240:	464a      	mov	r2, r9
 8009242:	4631      	mov	r1, r6
 8009244:	4628      	mov	r0, r5
 8009246:	47b8      	blx	r7
 8009248:	3001      	adds	r0, #1
 800924a:	f43f ae3e 	beq.w	8008eca <_printf_float+0xb6>
 800924e:	f108 0801 	add.w	r8, r8, #1
 8009252:	68e3      	ldr	r3, [r4, #12]
 8009254:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009256:	1a5b      	subs	r3, r3, r1
 8009258:	4543      	cmp	r3, r8
 800925a:	dcf0      	bgt.n	800923e <_printf_float+0x42a>
 800925c:	e6fc      	b.n	8009058 <_printf_float+0x244>
 800925e:	f04f 0800 	mov.w	r8, #0
 8009262:	f104 0919 	add.w	r9, r4, #25
 8009266:	e7f4      	b.n	8009252 <_printf_float+0x43e>

08009268 <_printf_common>:
 8009268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800926c:	4616      	mov	r6, r2
 800926e:	4698      	mov	r8, r3
 8009270:	688a      	ldr	r2, [r1, #8]
 8009272:	690b      	ldr	r3, [r1, #16]
 8009274:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009278:	4293      	cmp	r3, r2
 800927a:	bfb8      	it	lt
 800927c:	4613      	movlt	r3, r2
 800927e:	6033      	str	r3, [r6, #0]
 8009280:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009284:	4607      	mov	r7, r0
 8009286:	460c      	mov	r4, r1
 8009288:	b10a      	cbz	r2, 800928e <_printf_common+0x26>
 800928a:	3301      	adds	r3, #1
 800928c:	6033      	str	r3, [r6, #0]
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	0699      	lsls	r1, r3, #26
 8009292:	bf42      	ittt	mi
 8009294:	6833      	ldrmi	r3, [r6, #0]
 8009296:	3302      	addmi	r3, #2
 8009298:	6033      	strmi	r3, [r6, #0]
 800929a:	6825      	ldr	r5, [r4, #0]
 800929c:	f015 0506 	ands.w	r5, r5, #6
 80092a0:	d106      	bne.n	80092b0 <_printf_common+0x48>
 80092a2:	f104 0a19 	add.w	sl, r4, #25
 80092a6:	68e3      	ldr	r3, [r4, #12]
 80092a8:	6832      	ldr	r2, [r6, #0]
 80092aa:	1a9b      	subs	r3, r3, r2
 80092ac:	42ab      	cmp	r3, r5
 80092ae:	dc26      	bgt.n	80092fe <_printf_common+0x96>
 80092b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092b4:	6822      	ldr	r2, [r4, #0]
 80092b6:	3b00      	subs	r3, #0
 80092b8:	bf18      	it	ne
 80092ba:	2301      	movne	r3, #1
 80092bc:	0692      	lsls	r2, r2, #26
 80092be:	d42b      	bmi.n	8009318 <_printf_common+0xb0>
 80092c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092c4:	4641      	mov	r1, r8
 80092c6:	4638      	mov	r0, r7
 80092c8:	47c8      	blx	r9
 80092ca:	3001      	adds	r0, #1
 80092cc:	d01e      	beq.n	800930c <_printf_common+0xa4>
 80092ce:	6823      	ldr	r3, [r4, #0]
 80092d0:	6922      	ldr	r2, [r4, #16]
 80092d2:	f003 0306 	and.w	r3, r3, #6
 80092d6:	2b04      	cmp	r3, #4
 80092d8:	bf02      	ittt	eq
 80092da:	68e5      	ldreq	r5, [r4, #12]
 80092dc:	6833      	ldreq	r3, [r6, #0]
 80092de:	1aed      	subeq	r5, r5, r3
 80092e0:	68a3      	ldr	r3, [r4, #8]
 80092e2:	bf0c      	ite	eq
 80092e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092e8:	2500      	movne	r5, #0
 80092ea:	4293      	cmp	r3, r2
 80092ec:	bfc4      	itt	gt
 80092ee:	1a9b      	subgt	r3, r3, r2
 80092f0:	18ed      	addgt	r5, r5, r3
 80092f2:	2600      	movs	r6, #0
 80092f4:	341a      	adds	r4, #26
 80092f6:	42b5      	cmp	r5, r6
 80092f8:	d11a      	bne.n	8009330 <_printf_common+0xc8>
 80092fa:	2000      	movs	r0, #0
 80092fc:	e008      	b.n	8009310 <_printf_common+0xa8>
 80092fe:	2301      	movs	r3, #1
 8009300:	4652      	mov	r2, sl
 8009302:	4641      	mov	r1, r8
 8009304:	4638      	mov	r0, r7
 8009306:	47c8      	blx	r9
 8009308:	3001      	adds	r0, #1
 800930a:	d103      	bne.n	8009314 <_printf_common+0xac>
 800930c:	f04f 30ff 	mov.w	r0, #4294967295
 8009310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009314:	3501      	adds	r5, #1
 8009316:	e7c6      	b.n	80092a6 <_printf_common+0x3e>
 8009318:	18e1      	adds	r1, r4, r3
 800931a:	1c5a      	adds	r2, r3, #1
 800931c:	2030      	movs	r0, #48	@ 0x30
 800931e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009322:	4422      	add	r2, r4
 8009324:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009328:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800932c:	3302      	adds	r3, #2
 800932e:	e7c7      	b.n	80092c0 <_printf_common+0x58>
 8009330:	2301      	movs	r3, #1
 8009332:	4622      	mov	r2, r4
 8009334:	4641      	mov	r1, r8
 8009336:	4638      	mov	r0, r7
 8009338:	47c8      	blx	r9
 800933a:	3001      	adds	r0, #1
 800933c:	d0e6      	beq.n	800930c <_printf_common+0xa4>
 800933e:	3601      	adds	r6, #1
 8009340:	e7d9      	b.n	80092f6 <_printf_common+0x8e>
	...

08009344 <_printf_i>:
 8009344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009348:	7e0f      	ldrb	r7, [r1, #24]
 800934a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800934c:	2f78      	cmp	r7, #120	@ 0x78
 800934e:	4691      	mov	r9, r2
 8009350:	4680      	mov	r8, r0
 8009352:	460c      	mov	r4, r1
 8009354:	469a      	mov	sl, r3
 8009356:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800935a:	d807      	bhi.n	800936c <_printf_i+0x28>
 800935c:	2f62      	cmp	r7, #98	@ 0x62
 800935e:	d80a      	bhi.n	8009376 <_printf_i+0x32>
 8009360:	2f00      	cmp	r7, #0
 8009362:	f000 80d2 	beq.w	800950a <_printf_i+0x1c6>
 8009366:	2f58      	cmp	r7, #88	@ 0x58
 8009368:	f000 80b9 	beq.w	80094de <_printf_i+0x19a>
 800936c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009370:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009374:	e03a      	b.n	80093ec <_printf_i+0xa8>
 8009376:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800937a:	2b15      	cmp	r3, #21
 800937c:	d8f6      	bhi.n	800936c <_printf_i+0x28>
 800937e:	a101      	add	r1, pc, #4	@ (adr r1, 8009384 <_printf_i+0x40>)
 8009380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009384:	080093dd 	.word	0x080093dd
 8009388:	080093f1 	.word	0x080093f1
 800938c:	0800936d 	.word	0x0800936d
 8009390:	0800936d 	.word	0x0800936d
 8009394:	0800936d 	.word	0x0800936d
 8009398:	0800936d 	.word	0x0800936d
 800939c:	080093f1 	.word	0x080093f1
 80093a0:	0800936d 	.word	0x0800936d
 80093a4:	0800936d 	.word	0x0800936d
 80093a8:	0800936d 	.word	0x0800936d
 80093ac:	0800936d 	.word	0x0800936d
 80093b0:	080094f1 	.word	0x080094f1
 80093b4:	0800941b 	.word	0x0800941b
 80093b8:	080094ab 	.word	0x080094ab
 80093bc:	0800936d 	.word	0x0800936d
 80093c0:	0800936d 	.word	0x0800936d
 80093c4:	08009513 	.word	0x08009513
 80093c8:	0800936d 	.word	0x0800936d
 80093cc:	0800941b 	.word	0x0800941b
 80093d0:	0800936d 	.word	0x0800936d
 80093d4:	0800936d 	.word	0x0800936d
 80093d8:	080094b3 	.word	0x080094b3
 80093dc:	6833      	ldr	r3, [r6, #0]
 80093de:	1d1a      	adds	r2, r3, #4
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	6032      	str	r2, [r6, #0]
 80093e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093ec:	2301      	movs	r3, #1
 80093ee:	e09d      	b.n	800952c <_printf_i+0x1e8>
 80093f0:	6833      	ldr	r3, [r6, #0]
 80093f2:	6820      	ldr	r0, [r4, #0]
 80093f4:	1d19      	adds	r1, r3, #4
 80093f6:	6031      	str	r1, [r6, #0]
 80093f8:	0606      	lsls	r6, r0, #24
 80093fa:	d501      	bpl.n	8009400 <_printf_i+0xbc>
 80093fc:	681d      	ldr	r5, [r3, #0]
 80093fe:	e003      	b.n	8009408 <_printf_i+0xc4>
 8009400:	0645      	lsls	r5, r0, #25
 8009402:	d5fb      	bpl.n	80093fc <_printf_i+0xb8>
 8009404:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009408:	2d00      	cmp	r5, #0
 800940a:	da03      	bge.n	8009414 <_printf_i+0xd0>
 800940c:	232d      	movs	r3, #45	@ 0x2d
 800940e:	426d      	negs	r5, r5
 8009410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009414:	4859      	ldr	r0, [pc, #356]	@ (800957c <_printf_i+0x238>)
 8009416:	230a      	movs	r3, #10
 8009418:	e011      	b.n	800943e <_printf_i+0xfa>
 800941a:	6821      	ldr	r1, [r4, #0]
 800941c:	6833      	ldr	r3, [r6, #0]
 800941e:	0608      	lsls	r0, r1, #24
 8009420:	f853 5b04 	ldr.w	r5, [r3], #4
 8009424:	d402      	bmi.n	800942c <_printf_i+0xe8>
 8009426:	0649      	lsls	r1, r1, #25
 8009428:	bf48      	it	mi
 800942a:	b2ad      	uxthmi	r5, r5
 800942c:	2f6f      	cmp	r7, #111	@ 0x6f
 800942e:	4853      	ldr	r0, [pc, #332]	@ (800957c <_printf_i+0x238>)
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	bf14      	ite	ne
 8009434:	230a      	movne	r3, #10
 8009436:	2308      	moveq	r3, #8
 8009438:	2100      	movs	r1, #0
 800943a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800943e:	6866      	ldr	r6, [r4, #4]
 8009440:	60a6      	str	r6, [r4, #8]
 8009442:	2e00      	cmp	r6, #0
 8009444:	bfa2      	ittt	ge
 8009446:	6821      	ldrge	r1, [r4, #0]
 8009448:	f021 0104 	bicge.w	r1, r1, #4
 800944c:	6021      	strge	r1, [r4, #0]
 800944e:	b90d      	cbnz	r5, 8009454 <_printf_i+0x110>
 8009450:	2e00      	cmp	r6, #0
 8009452:	d04b      	beq.n	80094ec <_printf_i+0x1a8>
 8009454:	4616      	mov	r6, r2
 8009456:	fbb5 f1f3 	udiv	r1, r5, r3
 800945a:	fb03 5711 	mls	r7, r3, r1, r5
 800945e:	5dc7      	ldrb	r7, [r0, r7]
 8009460:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009464:	462f      	mov	r7, r5
 8009466:	42bb      	cmp	r3, r7
 8009468:	460d      	mov	r5, r1
 800946a:	d9f4      	bls.n	8009456 <_printf_i+0x112>
 800946c:	2b08      	cmp	r3, #8
 800946e:	d10b      	bne.n	8009488 <_printf_i+0x144>
 8009470:	6823      	ldr	r3, [r4, #0]
 8009472:	07df      	lsls	r7, r3, #31
 8009474:	d508      	bpl.n	8009488 <_printf_i+0x144>
 8009476:	6923      	ldr	r3, [r4, #16]
 8009478:	6861      	ldr	r1, [r4, #4]
 800947a:	4299      	cmp	r1, r3
 800947c:	bfde      	ittt	le
 800947e:	2330      	movle	r3, #48	@ 0x30
 8009480:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009484:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009488:	1b92      	subs	r2, r2, r6
 800948a:	6122      	str	r2, [r4, #16]
 800948c:	f8cd a000 	str.w	sl, [sp]
 8009490:	464b      	mov	r3, r9
 8009492:	aa03      	add	r2, sp, #12
 8009494:	4621      	mov	r1, r4
 8009496:	4640      	mov	r0, r8
 8009498:	f7ff fee6 	bl	8009268 <_printf_common>
 800949c:	3001      	adds	r0, #1
 800949e:	d14a      	bne.n	8009536 <_printf_i+0x1f2>
 80094a0:	f04f 30ff 	mov.w	r0, #4294967295
 80094a4:	b004      	add	sp, #16
 80094a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	f043 0320 	orr.w	r3, r3, #32
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	4833      	ldr	r0, [pc, #204]	@ (8009580 <_printf_i+0x23c>)
 80094b4:	2778      	movs	r7, #120	@ 0x78
 80094b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094ba:	6823      	ldr	r3, [r4, #0]
 80094bc:	6831      	ldr	r1, [r6, #0]
 80094be:	061f      	lsls	r7, r3, #24
 80094c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80094c4:	d402      	bmi.n	80094cc <_printf_i+0x188>
 80094c6:	065f      	lsls	r7, r3, #25
 80094c8:	bf48      	it	mi
 80094ca:	b2ad      	uxthmi	r5, r5
 80094cc:	6031      	str	r1, [r6, #0]
 80094ce:	07d9      	lsls	r1, r3, #31
 80094d0:	bf44      	itt	mi
 80094d2:	f043 0320 	orrmi.w	r3, r3, #32
 80094d6:	6023      	strmi	r3, [r4, #0]
 80094d8:	b11d      	cbz	r5, 80094e2 <_printf_i+0x19e>
 80094da:	2310      	movs	r3, #16
 80094dc:	e7ac      	b.n	8009438 <_printf_i+0xf4>
 80094de:	4827      	ldr	r0, [pc, #156]	@ (800957c <_printf_i+0x238>)
 80094e0:	e7e9      	b.n	80094b6 <_printf_i+0x172>
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	f023 0320 	bic.w	r3, r3, #32
 80094e8:	6023      	str	r3, [r4, #0]
 80094ea:	e7f6      	b.n	80094da <_printf_i+0x196>
 80094ec:	4616      	mov	r6, r2
 80094ee:	e7bd      	b.n	800946c <_printf_i+0x128>
 80094f0:	6833      	ldr	r3, [r6, #0]
 80094f2:	6825      	ldr	r5, [r4, #0]
 80094f4:	6961      	ldr	r1, [r4, #20]
 80094f6:	1d18      	adds	r0, r3, #4
 80094f8:	6030      	str	r0, [r6, #0]
 80094fa:	062e      	lsls	r6, r5, #24
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	d501      	bpl.n	8009504 <_printf_i+0x1c0>
 8009500:	6019      	str	r1, [r3, #0]
 8009502:	e002      	b.n	800950a <_printf_i+0x1c6>
 8009504:	0668      	lsls	r0, r5, #25
 8009506:	d5fb      	bpl.n	8009500 <_printf_i+0x1bc>
 8009508:	8019      	strh	r1, [r3, #0]
 800950a:	2300      	movs	r3, #0
 800950c:	6123      	str	r3, [r4, #16]
 800950e:	4616      	mov	r6, r2
 8009510:	e7bc      	b.n	800948c <_printf_i+0x148>
 8009512:	6833      	ldr	r3, [r6, #0]
 8009514:	1d1a      	adds	r2, r3, #4
 8009516:	6032      	str	r2, [r6, #0]
 8009518:	681e      	ldr	r6, [r3, #0]
 800951a:	6862      	ldr	r2, [r4, #4]
 800951c:	2100      	movs	r1, #0
 800951e:	4630      	mov	r0, r6
 8009520:	f7f6 fe5e 	bl	80001e0 <memchr>
 8009524:	b108      	cbz	r0, 800952a <_printf_i+0x1e6>
 8009526:	1b80      	subs	r0, r0, r6
 8009528:	6060      	str	r0, [r4, #4]
 800952a:	6863      	ldr	r3, [r4, #4]
 800952c:	6123      	str	r3, [r4, #16]
 800952e:	2300      	movs	r3, #0
 8009530:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009534:	e7aa      	b.n	800948c <_printf_i+0x148>
 8009536:	6923      	ldr	r3, [r4, #16]
 8009538:	4632      	mov	r2, r6
 800953a:	4649      	mov	r1, r9
 800953c:	4640      	mov	r0, r8
 800953e:	47d0      	blx	sl
 8009540:	3001      	adds	r0, #1
 8009542:	d0ad      	beq.n	80094a0 <_printf_i+0x15c>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	079b      	lsls	r3, r3, #30
 8009548:	d413      	bmi.n	8009572 <_printf_i+0x22e>
 800954a:	68e0      	ldr	r0, [r4, #12]
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	4298      	cmp	r0, r3
 8009550:	bfb8      	it	lt
 8009552:	4618      	movlt	r0, r3
 8009554:	e7a6      	b.n	80094a4 <_printf_i+0x160>
 8009556:	2301      	movs	r3, #1
 8009558:	4632      	mov	r2, r6
 800955a:	4649      	mov	r1, r9
 800955c:	4640      	mov	r0, r8
 800955e:	47d0      	blx	sl
 8009560:	3001      	adds	r0, #1
 8009562:	d09d      	beq.n	80094a0 <_printf_i+0x15c>
 8009564:	3501      	adds	r5, #1
 8009566:	68e3      	ldr	r3, [r4, #12]
 8009568:	9903      	ldr	r1, [sp, #12]
 800956a:	1a5b      	subs	r3, r3, r1
 800956c:	42ab      	cmp	r3, r5
 800956e:	dcf2      	bgt.n	8009556 <_printf_i+0x212>
 8009570:	e7eb      	b.n	800954a <_printf_i+0x206>
 8009572:	2500      	movs	r5, #0
 8009574:	f104 0619 	add.w	r6, r4, #25
 8009578:	e7f5      	b.n	8009566 <_printf_i+0x222>
 800957a:	bf00      	nop
 800957c:	0800c8c6 	.word	0x0800c8c6
 8009580:	0800c8d7 	.word	0x0800c8d7

08009584 <std>:
 8009584:	2300      	movs	r3, #0
 8009586:	b510      	push	{r4, lr}
 8009588:	4604      	mov	r4, r0
 800958a:	e9c0 3300 	strd	r3, r3, [r0]
 800958e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009592:	6083      	str	r3, [r0, #8]
 8009594:	8181      	strh	r1, [r0, #12]
 8009596:	6643      	str	r3, [r0, #100]	@ 0x64
 8009598:	81c2      	strh	r2, [r0, #14]
 800959a:	6183      	str	r3, [r0, #24]
 800959c:	4619      	mov	r1, r3
 800959e:	2208      	movs	r2, #8
 80095a0:	305c      	adds	r0, #92	@ 0x5c
 80095a2:	f000 f914 	bl	80097ce <memset>
 80095a6:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <std+0x58>)
 80095a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80095aa:	4b0d      	ldr	r3, [pc, #52]	@ (80095e0 <std+0x5c>)
 80095ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80095ae:	4b0d      	ldr	r3, [pc, #52]	@ (80095e4 <std+0x60>)
 80095b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095b2:	4b0d      	ldr	r3, [pc, #52]	@ (80095e8 <std+0x64>)
 80095b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80095b6:	4b0d      	ldr	r3, [pc, #52]	@ (80095ec <std+0x68>)
 80095b8:	6224      	str	r4, [r4, #32]
 80095ba:	429c      	cmp	r4, r3
 80095bc:	d006      	beq.n	80095cc <std+0x48>
 80095be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095c2:	4294      	cmp	r4, r2
 80095c4:	d002      	beq.n	80095cc <std+0x48>
 80095c6:	33d0      	adds	r3, #208	@ 0xd0
 80095c8:	429c      	cmp	r4, r3
 80095ca:	d105      	bne.n	80095d8 <std+0x54>
 80095cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095d4:	f000 b978 	b.w	80098c8 <__retarget_lock_init_recursive>
 80095d8:	bd10      	pop	{r4, pc}
 80095da:	bf00      	nop
 80095dc:	08009749 	.word	0x08009749
 80095e0:	0800976b 	.word	0x0800976b
 80095e4:	080097a3 	.word	0x080097a3
 80095e8:	080097c7 	.word	0x080097c7
 80095ec:	20001fb4 	.word	0x20001fb4

080095f0 <stdio_exit_handler>:
 80095f0:	4a02      	ldr	r2, [pc, #8]	@ (80095fc <stdio_exit_handler+0xc>)
 80095f2:	4903      	ldr	r1, [pc, #12]	@ (8009600 <stdio_exit_handler+0x10>)
 80095f4:	4803      	ldr	r0, [pc, #12]	@ (8009604 <stdio_exit_handler+0x14>)
 80095f6:	f000 b869 	b.w	80096cc <_fwalk_sglue>
 80095fa:	bf00      	nop
 80095fc:	200000fc 	.word	0x200000fc
 8009600:	0800b225 	.word	0x0800b225
 8009604:	2000010c 	.word	0x2000010c

08009608 <cleanup_stdio>:
 8009608:	6841      	ldr	r1, [r0, #4]
 800960a:	4b0c      	ldr	r3, [pc, #48]	@ (800963c <cleanup_stdio+0x34>)
 800960c:	4299      	cmp	r1, r3
 800960e:	b510      	push	{r4, lr}
 8009610:	4604      	mov	r4, r0
 8009612:	d001      	beq.n	8009618 <cleanup_stdio+0x10>
 8009614:	f001 fe06 	bl	800b224 <_fflush_r>
 8009618:	68a1      	ldr	r1, [r4, #8]
 800961a:	4b09      	ldr	r3, [pc, #36]	@ (8009640 <cleanup_stdio+0x38>)
 800961c:	4299      	cmp	r1, r3
 800961e:	d002      	beq.n	8009626 <cleanup_stdio+0x1e>
 8009620:	4620      	mov	r0, r4
 8009622:	f001 fdff 	bl	800b224 <_fflush_r>
 8009626:	68e1      	ldr	r1, [r4, #12]
 8009628:	4b06      	ldr	r3, [pc, #24]	@ (8009644 <cleanup_stdio+0x3c>)
 800962a:	4299      	cmp	r1, r3
 800962c:	d004      	beq.n	8009638 <cleanup_stdio+0x30>
 800962e:	4620      	mov	r0, r4
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009634:	f001 bdf6 	b.w	800b224 <_fflush_r>
 8009638:	bd10      	pop	{r4, pc}
 800963a:	bf00      	nop
 800963c:	20001fb4 	.word	0x20001fb4
 8009640:	2000201c 	.word	0x2000201c
 8009644:	20002084 	.word	0x20002084

08009648 <global_stdio_init.part.0>:
 8009648:	b510      	push	{r4, lr}
 800964a:	4b0b      	ldr	r3, [pc, #44]	@ (8009678 <global_stdio_init.part.0+0x30>)
 800964c:	4c0b      	ldr	r4, [pc, #44]	@ (800967c <global_stdio_init.part.0+0x34>)
 800964e:	4a0c      	ldr	r2, [pc, #48]	@ (8009680 <global_stdio_init.part.0+0x38>)
 8009650:	601a      	str	r2, [r3, #0]
 8009652:	4620      	mov	r0, r4
 8009654:	2200      	movs	r2, #0
 8009656:	2104      	movs	r1, #4
 8009658:	f7ff ff94 	bl	8009584 <std>
 800965c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009660:	2201      	movs	r2, #1
 8009662:	2109      	movs	r1, #9
 8009664:	f7ff ff8e 	bl	8009584 <std>
 8009668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800966c:	2202      	movs	r2, #2
 800966e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009672:	2112      	movs	r1, #18
 8009674:	f7ff bf86 	b.w	8009584 <std>
 8009678:	200020ec 	.word	0x200020ec
 800967c:	20001fb4 	.word	0x20001fb4
 8009680:	080095f1 	.word	0x080095f1

08009684 <__sfp_lock_acquire>:
 8009684:	4801      	ldr	r0, [pc, #4]	@ (800968c <__sfp_lock_acquire+0x8>)
 8009686:	f000 b920 	b.w	80098ca <__retarget_lock_acquire_recursive>
 800968a:	bf00      	nop
 800968c:	200020f5 	.word	0x200020f5

08009690 <__sfp_lock_release>:
 8009690:	4801      	ldr	r0, [pc, #4]	@ (8009698 <__sfp_lock_release+0x8>)
 8009692:	f000 b91b 	b.w	80098cc <__retarget_lock_release_recursive>
 8009696:	bf00      	nop
 8009698:	200020f5 	.word	0x200020f5

0800969c <__sinit>:
 800969c:	b510      	push	{r4, lr}
 800969e:	4604      	mov	r4, r0
 80096a0:	f7ff fff0 	bl	8009684 <__sfp_lock_acquire>
 80096a4:	6a23      	ldr	r3, [r4, #32]
 80096a6:	b11b      	cbz	r3, 80096b0 <__sinit+0x14>
 80096a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ac:	f7ff bff0 	b.w	8009690 <__sfp_lock_release>
 80096b0:	4b04      	ldr	r3, [pc, #16]	@ (80096c4 <__sinit+0x28>)
 80096b2:	6223      	str	r3, [r4, #32]
 80096b4:	4b04      	ldr	r3, [pc, #16]	@ (80096c8 <__sinit+0x2c>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1f5      	bne.n	80096a8 <__sinit+0xc>
 80096bc:	f7ff ffc4 	bl	8009648 <global_stdio_init.part.0>
 80096c0:	e7f2      	b.n	80096a8 <__sinit+0xc>
 80096c2:	bf00      	nop
 80096c4:	08009609 	.word	0x08009609
 80096c8:	200020ec 	.word	0x200020ec

080096cc <_fwalk_sglue>:
 80096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4607      	mov	r7, r0
 80096d2:	4688      	mov	r8, r1
 80096d4:	4614      	mov	r4, r2
 80096d6:	2600      	movs	r6, #0
 80096d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096dc:	f1b9 0901 	subs.w	r9, r9, #1
 80096e0:	d505      	bpl.n	80096ee <_fwalk_sglue+0x22>
 80096e2:	6824      	ldr	r4, [r4, #0]
 80096e4:	2c00      	cmp	r4, #0
 80096e6:	d1f7      	bne.n	80096d8 <_fwalk_sglue+0xc>
 80096e8:	4630      	mov	r0, r6
 80096ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ee:	89ab      	ldrh	r3, [r5, #12]
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d907      	bls.n	8009704 <_fwalk_sglue+0x38>
 80096f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096f8:	3301      	adds	r3, #1
 80096fa:	d003      	beq.n	8009704 <_fwalk_sglue+0x38>
 80096fc:	4629      	mov	r1, r5
 80096fe:	4638      	mov	r0, r7
 8009700:	47c0      	blx	r8
 8009702:	4306      	orrs	r6, r0
 8009704:	3568      	adds	r5, #104	@ 0x68
 8009706:	e7e9      	b.n	80096dc <_fwalk_sglue+0x10>

08009708 <siprintf>:
 8009708:	b40e      	push	{r1, r2, r3}
 800970a:	b500      	push	{lr}
 800970c:	b09c      	sub	sp, #112	@ 0x70
 800970e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009710:	9002      	str	r0, [sp, #8]
 8009712:	9006      	str	r0, [sp, #24]
 8009714:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009718:	4809      	ldr	r0, [pc, #36]	@ (8009740 <siprintf+0x38>)
 800971a:	9107      	str	r1, [sp, #28]
 800971c:	9104      	str	r1, [sp, #16]
 800971e:	4909      	ldr	r1, [pc, #36]	@ (8009744 <siprintf+0x3c>)
 8009720:	f853 2b04 	ldr.w	r2, [r3], #4
 8009724:	9105      	str	r1, [sp, #20]
 8009726:	6800      	ldr	r0, [r0, #0]
 8009728:	9301      	str	r3, [sp, #4]
 800972a:	a902      	add	r1, sp, #8
 800972c:	f001 fbfa 	bl	800af24 <_svfiprintf_r>
 8009730:	9b02      	ldr	r3, [sp, #8]
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	b01c      	add	sp, #112	@ 0x70
 8009738:	f85d eb04 	ldr.w	lr, [sp], #4
 800973c:	b003      	add	sp, #12
 800973e:	4770      	bx	lr
 8009740:	20000108 	.word	0x20000108
 8009744:	ffff0208 	.word	0xffff0208

08009748 <__sread>:
 8009748:	b510      	push	{r4, lr}
 800974a:	460c      	mov	r4, r1
 800974c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009750:	f000 f86c 	bl	800982c <_read_r>
 8009754:	2800      	cmp	r0, #0
 8009756:	bfab      	itete	ge
 8009758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800975a:	89a3      	ldrhlt	r3, [r4, #12]
 800975c:	181b      	addge	r3, r3, r0
 800975e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009762:	bfac      	ite	ge
 8009764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009766:	81a3      	strhlt	r3, [r4, #12]
 8009768:	bd10      	pop	{r4, pc}

0800976a <__swrite>:
 800976a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800976e:	461f      	mov	r7, r3
 8009770:	898b      	ldrh	r3, [r1, #12]
 8009772:	05db      	lsls	r3, r3, #23
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	4616      	mov	r6, r2
 800977a:	d505      	bpl.n	8009788 <__swrite+0x1e>
 800977c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009780:	2302      	movs	r3, #2
 8009782:	2200      	movs	r2, #0
 8009784:	f000 f840 	bl	8009808 <_lseek_r>
 8009788:	89a3      	ldrh	r3, [r4, #12]
 800978a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800978e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	4632      	mov	r2, r6
 8009796:	463b      	mov	r3, r7
 8009798:	4628      	mov	r0, r5
 800979a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	f000 b857 	b.w	8009850 <_write_r>

080097a2 <__sseek>:
 80097a2:	b510      	push	{r4, lr}
 80097a4:	460c      	mov	r4, r1
 80097a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097aa:	f000 f82d 	bl	8009808 <_lseek_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	bf15      	itete	ne
 80097b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097be:	81a3      	strheq	r3, [r4, #12]
 80097c0:	bf18      	it	ne
 80097c2:	81a3      	strhne	r3, [r4, #12]
 80097c4:	bd10      	pop	{r4, pc}

080097c6 <__sclose>:
 80097c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ca:	f000 b80d 	b.w	80097e8 <_close_r>

080097ce <memset>:
 80097ce:	4402      	add	r2, r0
 80097d0:	4603      	mov	r3, r0
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d100      	bne.n	80097d8 <memset+0xa>
 80097d6:	4770      	bx	lr
 80097d8:	f803 1b01 	strb.w	r1, [r3], #1
 80097dc:	e7f9      	b.n	80097d2 <memset+0x4>
	...

080097e0 <_localeconv_r>:
 80097e0:	4800      	ldr	r0, [pc, #0]	@ (80097e4 <_localeconv_r+0x4>)
 80097e2:	4770      	bx	lr
 80097e4:	20000248 	.word	0x20000248

080097e8 <_close_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4d06      	ldr	r5, [pc, #24]	@ (8009804 <_close_r+0x1c>)
 80097ec:	2300      	movs	r3, #0
 80097ee:	4604      	mov	r4, r0
 80097f0:	4608      	mov	r0, r1
 80097f2:	602b      	str	r3, [r5, #0]
 80097f4:	f7f7 ff14 	bl	8001620 <_close>
 80097f8:	1c43      	adds	r3, r0, #1
 80097fa:	d102      	bne.n	8009802 <_close_r+0x1a>
 80097fc:	682b      	ldr	r3, [r5, #0]
 80097fe:	b103      	cbz	r3, 8009802 <_close_r+0x1a>
 8009800:	6023      	str	r3, [r4, #0]
 8009802:	bd38      	pop	{r3, r4, r5, pc}
 8009804:	200020f0 	.word	0x200020f0

08009808 <_lseek_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	@ (8009828 <_lseek_r+0x20>)
 800980c:	4604      	mov	r4, r0
 800980e:	4608      	mov	r0, r1
 8009810:	4611      	mov	r1, r2
 8009812:	2200      	movs	r2, #0
 8009814:	602a      	str	r2, [r5, #0]
 8009816:	461a      	mov	r2, r3
 8009818:	f7f7 ff29 	bl	800166e <_lseek>
 800981c:	1c43      	adds	r3, r0, #1
 800981e:	d102      	bne.n	8009826 <_lseek_r+0x1e>
 8009820:	682b      	ldr	r3, [r5, #0]
 8009822:	b103      	cbz	r3, 8009826 <_lseek_r+0x1e>
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	bd38      	pop	{r3, r4, r5, pc}
 8009828:	200020f0 	.word	0x200020f0

0800982c <_read_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	@ (800984c <_read_r+0x20>)
 8009830:	4604      	mov	r4, r0
 8009832:	4608      	mov	r0, r1
 8009834:	4611      	mov	r1, r2
 8009836:	2200      	movs	r2, #0
 8009838:	602a      	str	r2, [r5, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	f7f7 feb7 	bl	80015ae <_read>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_read_r+0x1e>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_read_r+0x1e>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	200020f0 	.word	0x200020f0

08009850 <_write_r>:
 8009850:	b538      	push	{r3, r4, r5, lr}
 8009852:	4d07      	ldr	r5, [pc, #28]	@ (8009870 <_write_r+0x20>)
 8009854:	4604      	mov	r4, r0
 8009856:	4608      	mov	r0, r1
 8009858:	4611      	mov	r1, r2
 800985a:	2200      	movs	r2, #0
 800985c:	602a      	str	r2, [r5, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	f7f7 fec2 	bl	80015e8 <_write>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d102      	bne.n	800986e <_write_r+0x1e>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	b103      	cbz	r3, 800986e <_write_r+0x1e>
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	200020f0 	.word	0x200020f0

08009874 <__errno>:
 8009874:	4b01      	ldr	r3, [pc, #4]	@ (800987c <__errno+0x8>)
 8009876:	6818      	ldr	r0, [r3, #0]
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	20000108 	.word	0x20000108

08009880 <__libc_init_array>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	4d0d      	ldr	r5, [pc, #52]	@ (80098b8 <__libc_init_array+0x38>)
 8009884:	4c0d      	ldr	r4, [pc, #52]	@ (80098bc <__libc_init_array+0x3c>)
 8009886:	1b64      	subs	r4, r4, r5
 8009888:	10a4      	asrs	r4, r4, #2
 800988a:	2600      	movs	r6, #0
 800988c:	42a6      	cmp	r6, r4
 800988e:	d109      	bne.n	80098a4 <__libc_init_array+0x24>
 8009890:	4d0b      	ldr	r5, [pc, #44]	@ (80098c0 <__libc_init_array+0x40>)
 8009892:	4c0c      	ldr	r4, [pc, #48]	@ (80098c4 <__libc_init_array+0x44>)
 8009894:	f002 ffc2 	bl	800c81c <_init>
 8009898:	1b64      	subs	r4, r4, r5
 800989a:	10a4      	asrs	r4, r4, #2
 800989c:	2600      	movs	r6, #0
 800989e:	42a6      	cmp	r6, r4
 80098a0:	d105      	bne.n	80098ae <__libc_init_array+0x2e>
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a8:	4798      	blx	r3
 80098aa:	3601      	adds	r6, #1
 80098ac:	e7ee      	b.n	800988c <__libc_init_array+0xc>
 80098ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b2:	4798      	blx	r3
 80098b4:	3601      	adds	r6, #1
 80098b6:	e7f2      	b.n	800989e <__libc_init_array+0x1e>
 80098b8:	0800cc60 	.word	0x0800cc60
 80098bc:	0800cc60 	.word	0x0800cc60
 80098c0:	0800cc60 	.word	0x0800cc60
 80098c4:	0800cc64 	.word	0x0800cc64

080098c8 <__retarget_lock_init_recursive>:
 80098c8:	4770      	bx	lr

080098ca <__retarget_lock_acquire_recursive>:
 80098ca:	4770      	bx	lr

080098cc <__retarget_lock_release_recursive>:
 80098cc:	4770      	bx	lr

080098ce <quorem>:
 80098ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d2:	6903      	ldr	r3, [r0, #16]
 80098d4:	690c      	ldr	r4, [r1, #16]
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	4607      	mov	r7, r0
 80098da:	db7e      	blt.n	80099da <quorem+0x10c>
 80098dc:	3c01      	subs	r4, #1
 80098de:	f101 0814 	add.w	r8, r1, #20
 80098e2:	00a3      	lsls	r3, r4, #2
 80098e4:	f100 0514 	add.w	r5, r0, #20
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ee:	9301      	str	r3, [sp, #4]
 80098f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098f8:	3301      	adds	r3, #1
 80098fa:	429a      	cmp	r2, r3
 80098fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009900:	fbb2 f6f3 	udiv	r6, r2, r3
 8009904:	d32e      	bcc.n	8009964 <quorem+0x96>
 8009906:	f04f 0a00 	mov.w	sl, #0
 800990a:	46c4      	mov	ip, r8
 800990c:	46ae      	mov	lr, r5
 800990e:	46d3      	mov	fp, sl
 8009910:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009914:	b298      	uxth	r0, r3
 8009916:	fb06 a000 	mla	r0, r6, r0, sl
 800991a:	0c02      	lsrs	r2, r0, #16
 800991c:	0c1b      	lsrs	r3, r3, #16
 800991e:	fb06 2303 	mla	r3, r6, r3, r2
 8009922:	f8de 2000 	ldr.w	r2, [lr]
 8009926:	b280      	uxth	r0, r0
 8009928:	b292      	uxth	r2, r2
 800992a:	1a12      	subs	r2, r2, r0
 800992c:	445a      	add	r2, fp
 800992e:	f8de 0000 	ldr.w	r0, [lr]
 8009932:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009936:	b29b      	uxth	r3, r3
 8009938:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800993c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009940:	b292      	uxth	r2, r2
 8009942:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009946:	45e1      	cmp	r9, ip
 8009948:	f84e 2b04 	str.w	r2, [lr], #4
 800994c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009950:	d2de      	bcs.n	8009910 <quorem+0x42>
 8009952:	9b00      	ldr	r3, [sp, #0]
 8009954:	58eb      	ldr	r3, [r5, r3]
 8009956:	b92b      	cbnz	r3, 8009964 <quorem+0x96>
 8009958:	9b01      	ldr	r3, [sp, #4]
 800995a:	3b04      	subs	r3, #4
 800995c:	429d      	cmp	r5, r3
 800995e:	461a      	mov	r2, r3
 8009960:	d32f      	bcc.n	80099c2 <quorem+0xf4>
 8009962:	613c      	str	r4, [r7, #16]
 8009964:	4638      	mov	r0, r7
 8009966:	f001 f979 	bl	800ac5c <__mcmp>
 800996a:	2800      	cmp	r0, #0
 800996c:	db25      	blt.n	80099ba <quorem+0xec>
 800996e:	4629      	mov	r1, r5
 8009970:	2000      	movs	r0, #0
 8009972:	f858 2b04 	ldr.w	r2, [r8], #4
 8009976:	f8d1 c000 	ldr.w	ip, [r1]
 800997a:	fa1f fe82 	uxth.w	lr, r2
 800997e:	fa1f f38c 	uxth.w	r3, ip
 8009982:	eba3 030e 	sub.w	r3, r3, lr
 8009986:	4403      	add	r3, r0
 8009988:	0c12      	lsrs	r2, r2, #16
 800998a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800998e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009992:	b29b      	uxth	r3, r3
 8009994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009998:	45c1      	cmp	r9, r8
 800999a:	f841 3b04 	str.w	r3, [r1], #4
 800999e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099a2:	d2e6      	bcs.n	8009972 <quorem+0xa4>
 80099a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099ac:	b922      	cbnz	r2, 80099b8 <quorem+0xea>
 80099ae:	3b04      	subs	r3, #4
 80099b0:	429d      	cmp	r5, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	d30b      	bcc.n	80099ce <quorem+0x100>
 80099b6:	613c      	str	r4, [r7, #16]
 80099b8:	3601      	adds	r6, #1
 80099ba:	4630      	mov	r0, r6
 80099bc:	b003      	add	sp, #12
 80099be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c2:	6812      	ldr	r2, [r2, #0]
 80099c4:	3b04      	subs	r3, #4
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	d1cb      	bne.n	8009962 <quorem+0x94>
 80099ca:	3c01      	subs	r4, #1
 80099cc:	e7c6      	b.n	800995c <quorem+0x8e>
 80099ce:	6812      	ldr	r2, [r2, #0]
 80099d0:	3b04      	subs	r3, #4
 80099d2:	2a00      	cmp	r2, #0
 80099d4:	d1ef      	bne.n	80099b6 <quorem+0xe8>
 80099d6:	3c01      	subs	r4, #1
 80099d8:	e7ea      	b.n	80099b0 <quorem+0xe2>
 80099da:	2000      	movs	r0, #0
 80099dc:	e7ee      	b.n	80099bc <quorem+0xee>
	...

080099e0 <_dtoa_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	69c7      	ldr	r7, [r0, #28]
 80099e6:	b099      	sub	sp, #100	@ 0x64
 80099e8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099ec:	ec55 4b10 	vmov	r4, r5, d0
 80099f0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80099f4:	4683      	mov	fp, r0
 80099f6:	920e      	str	r2, [sp, #56]	@ 0x38
 80099f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099fa:	b97f      	cbnz	r7, 8009a1c <_dtoa_r+0x3c>
 80099fc:	2010      	movs	r0, #16
 80099fe:	f000 fdfd 	bl	800a5fc <malloc>
 8009a02:	4602      	mov	r2, r0
 8009a04:	f8cb 001c 	str.w	r0, [fp, #28]
 8009a08:	b920      	cbnz	r0, 8009a14 <_dtoa_r+0x34>
 8009a0a:	4ba7      	ldr	r3, [pc, #668]	@ (8009ca8 <_dtoa_r+0x2c8>)
 8009a0c:	21ef      	movs	r1, #239	@ 0xef
 8009a0e:	48a7      	ldr	r0, [pc, #668]	@ (8009cac <_dtoa_r+0x2cc>)
 8009a10:	f001 fc68 	bl	800b2e4 <__assert_func>
 8009a14:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a18:	6007      	str	r7, [r0, #0]
 8009a1a:	60c7      	str	r7, [r0, #12]
 8009a1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a20:	6819      	ldr	r1, [r3, #0]
 8009a22:	b159      	cbz	r1, 8009a3c <_dtoa_r+0x5c>
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	604a      	str	r2, [r1, #4]
 8009a28:	2301      	movs	r3, #1
 8009a2a:	4093      	lsls	r3, r2
 8009a2c:	608b      	str	r3, [r1, #8]
 8009a2e:	4658      	mov	r0, fp
 8009a30:	f000 feda 	bl	800a7e8 <_Bfree>
 8009a34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	1e2b      	subs	r3, r5, #0
 8009a3e:	bfb9      	ittee	lt
 8009a40:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a44:	9303      	strlt	r3, [sp, #12]
 8009a46:	2300      	movge	r3, #0
 8009a48:	6033      	strge	r3, [r6, #0]
 8009a4a:	9f03      	ldr	r7, [sp, #12]
 8009a4c:	4b98      	ldr	r3, [pc, #608]	@ (8009cb0 <_dtoa_r+0x2d0>)
 8009a4e:	bfbc      	itt	lt
 8009a50:	2201      	movlt	r2, #1
 8009a52:	6032      	strlt	r2, [r6, #0]
 8009a54:	43bb      	bics	r3, r7
 8009a56:	d112      	bne.n	8009a7e <_dtoa_r+0x9e>
 8009a58:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a5a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a64:	4323      	orrs	r3, r4
 8009a66:	f000 854d 	beq.w	800a504 <_dtoa_r+0xb24>
 8009a6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a6c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009cc4 <_dtoa_r+0x2e4>
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 854f 	beq.w	800a514 <_dtoa_r+0xb34>
 8009a76:	f10a 0303 	add.w	r3, sl, #3
 8009a7a:	f000 bd49 	b.w	800a510 <_dtoa_r+0xb30>
 8009a7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	ec51 0b17 	vmov	r0, r1, d7
 8009a88:	2300      	movs	r3, #0
 8009a8a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a8e:	f7f7 f823 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a92:	4680      	mov	r8, r0
 8009a94:	b158      	cbz	r0, 8009aae <_dtoa_r+0xce>
 8009a96:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a98:	2301      	movs	r3, #1
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a9e:	b113      	cbz	r3, 8009aa6 <_dtoa_r+0xc6>
 8009aa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aa2:	4b84      	ldr	r3, [pc, #528]	@ (8009cb4 <_dtoa_r+0x2d4>)
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009cc8 <_dtoa_r+0x2e8>
 8009aaa:	f000 bd33 	b.w	800a514 <_dtoa_r+0xb34>
 8009aae:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009ab2:	aa16      	add	r2, sp, #88	@ 0x58
 8009ab4:	a917      	add	r1, sp, #92	@ 0x5c
 8009ab6:	4658      	mov	r0, fp
 8009ab8:	f001 f980 	bl	800adbc <__d2b>
 8009abc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ac0:	4681      	mov	r9, r0
 8009ac2:	2e00      	cmp	r6, #0
 8009ac4:	d077      	beq.n	8009bb6 <_dtoa_r+0x1d6>
 8009ac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ac8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ad0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ad4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ad8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009adc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	4b74      	ldr	r3, [pc, #464]	@ (8009cb8 <_dtoa_r+0x2d8>)
 8009ae6:	f7f6 fbd7 	bl	8000298 <__aeabi_dsub>
 8009aea:	a369      	add	r3, pc, #420	@ (adr r3, 8009c90 <_dtoa_r+0x2b0>)
 8009aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af0:	f7f6 fd8a 	bl	8000608 <__aeabi_dmul>
 8009af4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c98 <_dtoa_r+0x2b8>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	f7f6 fbcf 	bl	800029c <__adddf3>
 8009afe:	4604      	mov	r4, r0
 8009b00:	4630      	mov	r0, r6
 8009b02:	460d      	mov	r5, r1
 8009b04:	f7f6 fd16 	bl	8000534 <__aeabi_i2d>
 8009b08:	a365      	add	r3, pc, #404	@ (adr r3, 8009ca0 <_dtoa_r+0x2c0>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fd7b 	bl	8000608 <__aeabi_dmul>
 8009b12:	4602      	mov	r2, r0
 8009b14:	460b      	mov	r3, r1
 8009b16:	4620      	mov	r0, r4
 8009b18:	4629      	mov	r1, r5
 8009b1a:	f7f6 fbbf 	bl	800029c <__adddf3>
 8009b1e:	4604      	mov	r4, r0
 8009b20:	460d      	mov	r5, r1
 8009b22:	f7f7 f821 	bl	8000b68 <__aeabi_d2iz>
 8009b26:	2200      	movs	r2, #0
 8009b28:	4607      	mov	r7, r0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4620      	mov	r0, r4
 8009b2e:	4629      	mov	r1, r5
 8009b30:	f7f6 ffdc 	bl	8000aec <__aeabi_dcmplt>
 8009b34:	b140      	cbz	r0, 8009b48 <_dtoa_r+0x168>
 8009b36:	4638      	mov	r0, r7
 8009b38:	f7f6 fcfc 	bl	8000534 <__aeabi_i2d>
 8009b3c:	4622      	mov	r2, r4
 8009b3e:	462b      	mov	r3, r5
 8009b40:	f7f6 ffca 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b44:	b900      	cbnz	r0, 8009b48 <_dtoa_r+0x168>
 8009b46:	3f01      	subs	r7, #1
 8009b48:	2f16      	cmp	r7, #22
 8009b4a:	d851      	bhi.n	8009bf0 <_dtoa_r+0x210>
 8009b4c:	4b5b      	ldr	r3, [pc, #364]	@ (8009cbc <_dtoa_r+0x2dc>)
 8009b4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b5a:	f7f6 ffc7 	bl	8000aec <__aeabi_dcmplt>
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	d048      	beq.n	8009bf4 <_dtoa_r+0x214>
 8009b62:	3f01      	subs	r7, #1
 8009b64:	2300      	movs	r3, #0
 8009b66:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b68:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b6a:	1b9b      	subs	r3, r3, r6
 8009b6c:	1e5a      	subs	r2, r3, #1
 8009b6e:	bf44      	itt	mi
 8009b70:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b74:	2300      	movmi	r3, #0
 8009b76:	9208      	str	r2, [sp, #32]
 8009b78:	bf54      	ite	pl
 8009b7a:	f04f 0800 	movpl.w	r8, #0
 8009b7e:	9308      	strmi	r3, [sp, #32]
 8009b80:	2f00      	cmp	r7, #0
 8009b82:	db39      	blt.n	8009bf8 <_dtoa_r+0x218>
 8009b84:	9b08      	ldr	r3, [sp, #32]
 8009b86:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b88:	443b      	add	r3, r7
 8009b8a:	9308      	str	r3, [sp, #32]
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b92:	2b09      	cmp	r3, #9
 8009b94:	d864      	bhi.n	8009c60 <_dtoa_r+0x280>
 8009b96:	2b05      	cmp	r3, #5
 8009b98:	bfc4      	itt	gt
 8009b9a:	3b04      	subgt	r3, #4
 8009b9c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba0:	f1a3 0302 	sub.w	r3, r3, #2
 8009ba4:	bfcc      	ite	gt
 8009ba6:	2400      	movgt	r4, #0
 8009ba8:	2401      	movle	r4, #1
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d863      	bhi.n	8009c76 <_dtoa_r+0x296>
 8009bae:	e8df f003 	tbb	[pc, r3]
 8009bb2:	372a      	.short	0x372a
 8009bb4:	5535      	.short	0x5535
 8009bb6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009bba:	441e      	add	r6, r3
 8009bbc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bc0:	2b20      	cmp	r3, #32
 8009bc2:	bfc1      	itttt	gt
 8009bc4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009bc8:	409f      	lslgt	r7, r3
 8009bca:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009bce:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009bd2:	bfd6      	itet	le
 8009bd4:	f1c3 0320 	rsble	r3, r3, #32
 8009bd8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009bdc:	fa04 f003 	lslle.w	r0, r4, r3
 8009be0:	f7f6 fc98 	bl	8000514 <__aeabi_ui2d>
 8009be4:	2201      	movs	r2, #1
 8009be6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009bea:	3e01      	subs	r6, #1
 8009bec:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bee:	e777      	b.n	8009ae0 <_dtoa_r+0x100>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e7b8      	b.n	8009b66 <_dtoa_r+0x186>
 8009bf4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009bf6:	e7b7      	b.n	8009b68 <_dtoa_r+0x188>
 8009bf8:	427b      	negs	r3, r7
 8009bfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	eba8 0807 	sub.w	r8, r8, r7
 8009c02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009c04:	e7c4      	b.n	8009b90 <_dtoa_r+0x1b0>
 8009c06:	2300      	movs	r3, #0
 8009c08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c0a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	dc35      	bgt.n	8009c7c <_dtoa_r+0x29c>
 8009c10:	2301      	movs	r3, #1
 8009c12:	9300      	str	r3, [sp, #0]
 8009c14:	9307      	str	r3, [sp, #28]
 8009c16:	461a      	mov	r2, r3
 8009c18:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c1a:	e00b      	b.n	8009c34 <_dtoa_r+0x254>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e7f3      	b.n	8009c08 <_dtoa_r+0x228>
 8009c20:	2300      	movs	r3, #0
 8009c22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c26:	18fb      	adds	r3, r7, r3
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	9307      	str	r3, [sp, #28]
 8009c30:	bfb8      	it	lt
 8009c32:	2301      	movlt	r3, #1
 8009c34:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c38:	2100      	movs	r1, #0
 8009c3a:	2204      	movs	r2, #4
 8009c3c:	f102 0514 	add.w	r5, r2, #20
 8009c40:	429d      	cmp	r5, r3
 8009c42:	d91f      	bls.n	8009c84 <_dtoa_r+0x2a4>
 8009c44:	6041      	str	r1, [r0, #4]
 8009c46:	4658      	mov	r0, fp
 8009c48:	f000 fd8e 	bl	800a768 <_Balloc>
 8009c4c:	4682      	mov	sl, r0
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	d13c      	bne.n	8009ccc <_dtoa_r+0x2ec>
 8009c52:	4b1b      	ldr	r3, [pc, #108]	@ (8009cc0 <_dtoa_r+0x2e0>)
 8009c54:	4602      	mov	r2, r0
 8009c56:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c5a:	e6d8      	b.n	8009a0e <_dtoa_r+0x2e>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e7e0      	b.n	8009c22 <_dtoa_r+0x242>
 8009c60:	2401      	movs	r4, #1
 8009c62:	2300      	movs	r3, #0
 8009c64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c66:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c68:	f04f 33ff 	mov.w	r3, #4294967295
 8009c6c:	9300      	str	r3, [sp, #0]
 8009c6e:	9307      	str	r3, [sp, #28]
 8009c70:	2200      	movs	r2, #0
 8009c72:	2312      	movs	r3, #18
 8009c74:	e7d0      	b.n	8009c18 <_dtoa_r+0x238>
 8009c76:	2301      	movs	r3, #1
 8009c78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c7a:	e7f5      	b.n	8009c68 <_dtoa_r+0x288>
 8009c7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c7e:	9300      	str	r3, [sp, #0]
 8009c80:	9307      	str	r3, [sp, #28]
 8009c82:	e7d7      	b.n	8009c34 <_dtoa_r+0x254>
 8009c84:	3101      	adds	r1, #1
 8009c86:	0052      	lsls	r2, r2, #1
 8009c88:	e7d8      	b.n	8009c3c <_dtoa_r+0x25c>
 8009c8a:	bf00      	nop
 8009c8c:	f3af 8000 	nop.w
 8009c90:	636f4361 	.word	0x636f4361
 8009c94:	3fd287a7 	.word	0x3fd287a7
 8009c98:	8b60c8b3 	.word	0x8b60c8b3
 8009c9c:	3fc68a28 	.word	0x3fc68a28
 8009ca0:	509f79fb 	.word	0x509f79fb
 8009ca4:	3fd34413 	.word	0x3fd34413
 8009ca8:	0800c8f5 	.word	0x0800c8f5
 8009cac:	0800c90c 	.word	0x0800c90c
 8009cb0:	7ff00000 	.word	0x7ff00000
 8009cb4:	0800c8c5 	.word	0x0800c8c5
 8009cb8:	3ff80000 	.word	0x3ff80000
 8009cbc:	0800ca08 	.word	0x0800ca08
 8009cc0:	0800c964 	.word	0x0800c964
 8009cc4:	0800c8f1 	.word	0x0800c8f1
 8009cc8:	0800c8c4 	.word	0x0800c8c4
 8009ccc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cd0:	6018      	str	r0, [r3, #0]
 8009cd2:	9b07      	ldr	r3, [sp, #28]
 8009cd4:	2b0e      	cmp	r3, #14
 8009cd6:	f200 80a4 	bhi.w	8009e22 <_dtoa_r+0x442>
 8009cda:	2c00      	cmp	r4, #0
 8009cdc:	f000 80a1 	beq.w	8009e22 <_dtoa_r+0x442>
 8009ce0:	2f00      	cmp	r7, #0
 8009ce2:	dd33      	ble.n	8009d4c <_dtoa_r+0x36c>
 8009ce4:	4bad      	ldr	r3, [pc, #692]	@ (8009f9c <_dtoa_r+0x5bc>)
 8009ce6:	f007 020f 	and.w	r2, r7, #15
 8009cea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cee:	ed93 7b00 	vldr	d7, [r3]
 8009cf2:	05f8      	lsls	r0, r7, #23
 8009cf4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009cf8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009cfc:	d516      	bpl.n	8009d2c <_dtoa_r+0x34c>
 8009cfe:	4ba8      	ldr	r3, [pc, #672]	@ (8009fa0 <_dtoa_r+0x5c0>)
 8009d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d08:	f7f6 fda8 	bl	800085c <__aeabi_ddiv>
 8009d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d10:	f004 040f 	and.w	r4, r4, #15
 8009d14:	2603      	movs	r6, #3
 8009d16:	4da2      	ldr	r5, [pc, #648]	@ (8009fa0 <_dtoa_r+0x5c0>)
 8009d18:	b954      	cbnz	r4, 8009d30 <_dtoa_r+0x350>
 8009d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d22:	f7f6 fd9b 	bl	800085c <__aeabi_ddiv>
 8009d26:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d2a:	e028      	b.n	8009d7e <_dtoa_r+0x39e>
 8009d2c:	2602      	movs	r6, #2
 8009d2e:	e7f2      	b.n	8009d16 <_dtoa_r+0x336>
 8009d30:	07e1      	lsls	r1, r4, #31
 8009d32:	d508      	bpl.n	8009d46 <_dtoa_r+0x366>
 8009d34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d3c:	f7f6 fc64 	bl	8000608 <__aeabi_dmul>
 8009d40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d44:	3601      	adds	r6, #1
 8009d46:	1064      	asrs	r4, r4, #1
 8009d48:	3508      	adds	r5, #8
 8009d4a:	e7e5      	b.n	8009d18 <_dtoa_r+0x338>
 8009d4c:	f000 80d2 	beq.w	8009ef4 <_dtoa_r+0x514>
 8009d50:	427c      	negs	r4, r7
 8009d52:	4b92      	ldr	r3, [pc, #584]	@ (8009f9c <_dtoa_r+0x5bc>)
 8009d54:	4d92      	ldr	r5, [pc, #584]	@ (8009fa0 <_dtoa_r+0x5c0>)
 8009d56:	f004 020f 	and.w	r2, r4, #15
 8009d5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d66:	f7f6 fc4f 	bl	8000608 <__aeabi_dmul>
 8009d6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d6e:	1124      	asrs	r4, r4, #4
 8009d70:	2300      	movs	r3, #0
 8009d72:	2602      	movs	r6, #2
 8009d74:	2c00      	cmp	r4, #0
 8009d76:	f040 80b2 	bne.w	8009ede <_dtoa_r+0x4fe>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1d3      	bne.n	8009d26 <_dtoa_r+0x346>
 8009d7e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d80:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80b7 	beq.w	8009ef8 <_dtoa_r+0x518>
 8009d8a:	4b86      	ldr	r3, [pc, #536]	@ (8009fa4 <_dtoa_r+0x5c4>)
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 feab 	bl	8000aec <__aeabi_dcmplt>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f000 80ae 	beq.w	8009ef8 <_dtoa_r+0x518>
 8009d9c:	9b07      	ldr	r3, [sp, #28]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	f000 80aa 	beq.w	8009ef8 <_dtoa_r+0x518>
 8009da4:	9b00      	ldr	r3, [sp, #0]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	dd37      	ble.n	8009e1a <_dtoa_r+0x43a>
 8009daa:	1e7b      	subs	r3, r7, #1
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	4620      	mov	r0, r4
 8009db0:	4b7d      	ldr	r3, [pc, #500]	@ (8009fa8 <_dtoa_r+0x5c8>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	4629      	mov	r1, r5
 8009db6:	f7f6 fc27 	bl	8000608 <__aeabi_dmul>
 8009dba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dbe:	9c00      	ldr	r4, [sp, #0]
 8009dc0:	3601      	adds	r6, #1
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7f6 fbb6 	bl	8000534 <__aeabi_i2d>
 8009dc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dcc:	f7f6 fc1c 	bl	8000608 <__aeabi_dmul>
 8009dd0:	4b76      	ldr	r3, [pc, #472]	@ (8009fac <_dtoa_r+0x5cc>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f7f6 fa62 	bl	800029c <__adddf3>
 8009dd8:	4605      	mov	r5, r0
 8009dda:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009dde:	2c00      	cmp	r4, #0
 8009de0:	f040 808d 	bne.w	8009efe <_dtoa_r+0x51e>
 8009de4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009de8:	4b71      	ldr	r3, [pc, #452]	@ (8009fb0 <_dtoa_r+0x5d0>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	f7f6 fa54 	bl	8000298 <__aeabi_dsub>
 8009df0:	4602      	mov	r2, r0
 8009df2:	460b      	mov	r3, r1
 8009df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009df8:	462a      	mov	r2, r5
 8009dfa:	4633      	mov	r3, r6
 8009dfc:	f7f6 fe94 	bl	8000b28 <__aeabi_dcmpgt>
 8009e00:	2800      	cmp	r0, #0
 8009e02:	f040 828b 	bne.w	800a31c <_dtoa_r+0x93c>
 8009e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e10:	f7f6 fe6c 	bl	8000aec <__aeabi_dcmplt>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	f040 8128 	bne.w	800a06a <_dtoa_r+0x68a>
 8009e1a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e22:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f2c0 815a 	blt.w	800a0de <_dtoa_r+0x6fe>
 8009e2a:	2f0e      	cmp	r7, #14
 8009e2c:	f300 8157 	bgt.w	800a0de <_dtoa_r+0x6fe>
 8009e30:	4b5a      	ldr	r3, [pc, #360]	@ (8009f9c <_dtoa_r+0x5bc>)
 8009e32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e36:	ed93 7b00 	vldr	d7, [r3]
 8009e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	ed8d 7b00 	vstr	d7, [sp]
 8009e42:	da03      	bge.n	8009e4c <_dtoa_r+0x46c>
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	f340 8101 	ble.w	800a04e <_dtoa_r+0x66e>
 8009e4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e50:	4656      	mov	r6, sl
 8009e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e56:	4620      	mov	r0, r4
 8009e58:	4629      	mov	r1, r5
 8009e5a:	f7f6 fcff 	bl	800085c <__aeabi_ddiv>
 8009e5e:	f7f6 fe83 	bl	8000b68 <__aeabi_d2iz>
 8009e62:	4680      	mov	r8, r0
 8009e64:	f7f6 fb66 	bl	8000534 <__aeabi_i2d>
 8009e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e6c:	f7f6 fbcc 	bl	8000608 <__aeabi_dmul>
 8009e70:	4602      	mov	r2, r0
 8009e72:	460b      	mov	r3, r1
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e7c:	f7f6 fa0c 	bl	8000298 <__aeabi_dsub>
 8009e80:	f806 4b01 	strb.w	r4, [r6], #1
 8009e84:	9d07      	ldr	r5, [sp, #28]
 8009e86:	eba6 040a 	sub.w	r4, r6, sl
 8009e8a:	42a5      	cmp	r5, r4
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	460b      	mov	r3, r1
 8009e90:	f040 8117 	bne.w	800a0c2 <_dtoa_r+0x6e2>
 8009e94:	f7f6 fa02 	bl	800029c <__adddf3>
 8009e98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	460d      	mov	r5, r1
 8009ea0:	f7f6 fe42 	bl	8000b28 <__aeabi_dcmpgt>
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f040 80f9 	bne.w	800a09c <_dtoa_r+0x6bc>
 8009eaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eae:	4620      	mov	r0, r4
 8009eb0:	4629      	mov	r1, r5
 8009eb2:	f7f6 fe11 	bl	8000ad8 <__aeabi_dcmpeq>
 8009eb6:	b118      	cbz	r0, 8009ec0 <_dtoa_r+0x4e0>
 8009eb8:	f018 0f01 	tst.w	r8, #1
 8009ebc:	f040 80ee 	bne.w	800a09c <_dtoa_r+0x6bc>
 8009ec0:	4649      	mov	r1, r9
 8009ec2:	4658      	mov	r0, fp
 8009ec4:	f000 fc90 	bl	800a7e8 <_Bfree>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	7033      	strb	r3, [r6, #0]
 8009ecc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ece:	3701      	adds	r7, #1
 8009ed0:	601f      	str	r7, [r3, #0]
 8009ed2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	f000 831d 	beq.w	800a514 <_dtoa_r+0xb34>
 8009eda:	601e      	str	r6, [r3, #0]
 8009edc:	e31a      	b.n	800a514 <_dtoa_r+0xb34>
 8009ede:	07e2      	lsls	r2, r4, #31
 8009ee0:	d505      	bpl.n	8009eee <_dtoa_r+0x50e>
 8009ee2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ee6:	f7f6 fb8f 	bl	8000608 <__aeabi_dmul>
 8009eea:	3601      	adds	r6, #1
 8009eec:	2301      	movs	r3, #1
 8009eee:	1064      	asrs	r4, r4, #1
 8009ef0:	3508      	adds	r5, #8
 8009ef2:	e73f      	b.n	8009d74 <_dtoa_r+0x394>
 8009ef4:	2602      	movs	r6, #2
 8009ef6:	e742      	b.n	8009d7e <_dtoa_r+0x39e>
 8009ef8:	9c07      	ldr	r4, [sp, #28]
 8009efa:	9704      	str	r7, [sp, #16]
 8009efc:	e761      	b.n	8009dc2 <_dtoa_r+0x3e2>
 8009efe:	4b27      	ldr	r3, [pc, #156]	@ (8009f9c <_dtoa_r+0x5bc>)
 8009f00:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009f02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009f06:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f0a:	4454      	add	r4, sl
 8009f0c:	2900      	cmp	r1, #0
 8009f0e:	d053      	beq.n	8009fb8 <_dtoa_r+0x5d8>
 8009f10:	4928      	ldr	r1, [pc, #160]	@ (8009fb4 <_dtoa_r+0x5d4>)
 8009f12:	2000      	movs	r0, #0
 8009f14:	f7f6 fca2 	bl	800085c <__aeabi_ddiv>
 8009f18:	4633      	mov	r3, r6
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	f7f6 f9bc 	bl	8000298 <__aeabi_dsub>
 8009f20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f24:	4656      	mov	r6, sl
 8009f26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f2a:	f7f6 fe1d 	bl	8000b68 <__aeabi_d2iz>
 8009f2e:	4605      	mov	r5, r0
 8009f30:	f7f6 fb00 	bl	8000534 <__aeabi_i2d>
 8009f34:	4602      	mov	r2, r0
 8009f36:	460b      	mov	r3, r1
 8009f38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f3c:	f7f6 f9ac 	bl	8000298 <__aeabi_dsub>
 8009f40:	3530      	adds	r5, #48	@ 0x30
 8009f42:	4602      	mov	r2, r0
 8009f44:	460b      	mov	r3, r1
 8009f46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f4a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f52:	f7f6 fdcb 	bl	8000aec <__aeabi_dcmplt>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d171      	bne.n	800a03e <_dtoa_r+0x65e>
 8009f5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f5e:	4911      	ldr	r1, [pc, #68]	@ (8009fa4 <_dtoa_r+0x5c4>)
 8009f60:	2000      	movs	r0, #0
 8009f62:	f7f6 f999 	bl	8000298 <__aeabi_dsub>
 8009f66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f6a:	f7f6 fdbf 	bl	8000aec <__aeabi_dcmplt>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	f040 8095 	bne.w	800a09e <_dtoa_r+0x6be>
 8009f74:	42a6      	cmp	r6, r4
 8009f76:	f43f af50 	beq.w	8009e1a <_dtoa_r+0x43a>
 8009f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009fa8 <_dtoa_r+0x5c8>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	f7f6 fb41 	bl	8000608 <__aeabi_dmul>
 8009f86:	4b08      	ldr	r3, [pc, #32]	@ (8009fa8 <_dtoa_r+0x5c8>)
 8009f88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f92:	f7f6 fb39 	bl	8000608 <__aeabi_dmul>
 8009f96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f9a:	e7c4      	b.n	8009f26 <_dtoa_r+0x546>
 8009f9c:	0800ca08 	.word	0x0800ca08
 8009fa0:	0800c9e0 	.word	0x0800c9e0
 8009fa4:	3ff00000 	.word	0x3ff00000
 8009fa8:	40240000 	.word	0x40240000
 8009fac:	401c0000 	.word	0x401c0000
 8009fb0:	40140000 	.word	0x40140000
 8009fb4:	3fe00000 	.word	0x3fe00000
 8009fb8:	4631      	mov	r1, r6
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f7f6 fb24 	bl	8000608 <__aeabi_dmul>
 8009fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fc4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009fc6:	4656      	mov	r6, sl
 8009fc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fcc:	f7f6 fdcc 	bl	8000b68 <__aeabi_d2iz>
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	f7f6 faaf 	bl	8000534 <__aeabi_i2d>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fde:	f7f6 f95b 	bl	8000298 <__aeabi_dsub>
 8009fe2:	3530      	adds	r5, #48	@ 0x30
 8009fe4:	f806 5b01 	strb.w	r5, [r6], #1
 8009fe8:	4602      	mov	r2, r0
 8009fea:	460b      	mov	r3, r1
 8009fec:	42a6      	cmp	r6, r4
 8009fee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ff2:	f04f 0200 	mov.w	r2, #0
 8009ff6:	d124      	bne.n	800a042 <_dtoa_r+0x662>
 8009ff8:	4bac      	ldr	r3, [pc, #688]	@ (800a2ac <_dtoa_r+0x8cc>)
 8009ffa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009ffe:	f7f6 f94d 	bl	800029c <__adddf3>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a00a:	f7f6 fd8d 	bl	8000b28 <__aeabi_dcmpgt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	d145      	bne.n	800a09e <_dtoa_r+0x6be>
 800a012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a016:	49a5      	ldr	r1, [pc, #660]	@ (800a2ac <_dtoa_r+0x8cc>)
 800a018:	2000      	movs	r0, #0
 800a01a:	f7f6 f93d 	bl	8000298 <__aeabi_dsub>
 800a01e:	4602      	mov	r2, r0
 800a020:	460b      	mov	r3, r1
 800a022:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a026:	f7f6 fd61 	bl	8000aec <__aeabi_dcmplt>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	f43f aef5 	beq.w	8009e1a <_dtoa_r+0x43a>
 800a030:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a032:	1e73      	subs	r3, r6, #1
 800a034:	9315      	str	r3, [sp, #84]	@ 0x54
 800a036:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a03a:	2b30      	cmp	r3, #48	@ 0x30
 800a03c:	d0f8      	beq.n	800a030 <_dtoa_r+0x650>
 800a03e:	9f04      	ldr	r7, [sp, #16]
 800a040:	e73e      	b.n	8009ec0 <_dtoa_r+0x4e0>
 800a042:	4b9b      	ldr	r3, [pc, #620]	@ (800a2b0 <_dtoa_r+0x8d0>)
 800a044:	f7f6 fae0 	bl	8000608 <__aeabi_dmul>
 800a048:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a04c:	e7bc      	b.n	8009fc8 <_dtoa_r+0x5e8>
 800a04e:	d10c      	bne.n	800a06a <_dtoa_r+0x68a>
 800a050:	4b98      	ldr	r3, [pc, #608]	@ (800a2b4 <_dtoa_r+0x8d4>)
 800a052:	2200      	movs	r2, #0
 800a054:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a058:	f7f6 fad6 	bl	8000608 <__aeabi_dmul>
 800a05c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a060:	f7f6 fd58 	bl	8000b14 <__aeabi_dcmpge>
 800a064:	2800      	cmp	r0, #0
 800a066:	f000 8157 	beq.w	800a318 <_dtoa_r+0x938>
 800a06a:	2400      	movs	r4, #0
 800a06c:	4625      	mov	r5, r4
 800a06e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a070:	43db      	mvns	r3, r3
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	4656      	mov	r6, sl
 800a076:	2700      	movs	r7, #0
 800a078:	4621      	mov	r1, r4
 800a07a:	4658      	mov	r0, fp
 800a07c:	f000 fbb4 	bl	800a7e8 <_Bfree>
 800a080:	2d00      	cmp	r5, #0
 800a082:	d0dc      	beq.n	800a03e <_dtoa_r+0x65e>
 800a084:	b12f      	cbz	r7, 800a092 <_dtoa_r+0x6b2>
 800a086:	42af      	cmp	r7, r5
 800a088:	d003      	beq.n	800a092 <_dtoa_r+0x6b2>
 800a08a:	4639      	mov	r1, r7
 800a08c:	4658      	mov	r0, fp
 800a08e:	f000 fbab 	bl	800a7e8 <_Bfree>
 800a092:	4629      	mov	r1, r5
 800a094:	4658      	mov	r0, fp
 800a096:	f000 fba7 	bl	800a7e8 <_Bfree>
 800a09a:	e7d0      	b.n	800a03e <_dtoa_r+0x65e>
 800a09c:	9704      	str	r7, [sp, #16]
 800a09e:	4633      	mov	r3, r6
 800a0a0:	461e      	mov	r6, r3
 800a0a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0a6:	2a39      	cmp	r2, #57	@ 0x39
 800a0a8:	d107      	bne.n	800a0ba <_dtoa_r+0x6da>
 800a0aa:	459a      	cmp	sl, r3
 800a0ac:	d1f8      	bne.n	800a0a0 <_dtoa_r+0x6c0>
 800a0ae:	9a04      	ldr	r2, [sp, #16]
 800a0b0:	3201      	adds	r2, #1
 800a0b2:	9204      	str	r2, [sp, #16]
 800a0b4:	2230      	movs	r2, #48	@ 0x30
 800a0b6:	f88a 2000 	strb.w	r2, [sl]
 800a0ba:	781a      	ldrb	r2, [r3, #0]
 800a0bc:	3201      	adds	r2, #1
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	e7bd      	b.n	800a03e <_dtoa_r+0x65e>
 800a0c2:	4b7b      	ldr	r3, [pc, #492]	@ (800a2b0 <_dtoa_r+0x8d0>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f7f6 fa9f 	bl	8000608 <__aeabi_dmul>
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	460d      	mov	r5, r1
 800a0d2:	f7f6 fd01 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f43f aebb 	beq.w	8009e52 <_dtoa_r+0x472>
 800a0dc:	e6f0      	b.n	8009ec0 <_dtoa_r+0x4e0>
 800a0de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	f000 80db 	beq.w	800a29c <_dtoa_r+0x8bc>
 800a0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0e8:	2a01      	cmp	r2, #1
 800a0ea:	f300 80bf 	bgt.w	800a26c <_dtoa_r+0x88c>
 800a0ee:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0f0:	2a00      	cmp	r2, #0
 800a0f2:	f000 80b7 	beq.w	800a264 <_dtoa_r+0x884>
 800a0f6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0fa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0fc:	4646      	mov	r6, r8
 800a0fe:	9a08      	ldr	r2, [sp, #32]
 800a100:	2101      	movs	r1, #1
 800a102:	441a      	add	r2, r3
 800a104:	4658      	mov	r0, fp
 800a106:	4498      	add	r8, r3
 800a108:	9208      	str	r2, [sp, #32]
 800a10a:	f000 fc21 	bl	800a950 <__i2b>
 800a10e:	4605      	mov	r5, r0
 800a110:	b15e      	cbz	r6, 800a12a <_dtoa_r+0x74a>
 800a112:	9b08      	ldr	r3, [sp, #32]
 800a114:	2b00      	cmp	r3, #0
 800a116:	dd08      	ble.n	800a12a <_dtoa_r+0x74a>
 800a118:	42b3      	cmp	r3, r6
 800a11a:	9a08      	ldr	r2, [sp, #32]
 800a11c:	bfa8      	it	ge
 800a11e:	4633      	movge	r3, r6
 800a120:	eba8 0803 	sub.w	r8, r8, r3
 800a124:	1af6      	subs	r6, r6, r3
 800a126:	1ad3      	subs	r3, r2, r3
 800a128:	9308      	str	r3, [sp, #32]
 800a12a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a12c:	b1f3      	cbz	r3, 800a16c <_dtoa_r+0x78c>
 800a12e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 80b7 	beq.w	800a2a4 <_dtoa_r+0x8c4>
 800a136:	b18c      	cbz	r4, 800a15c <_dtoa_r+0x77c>
 800a138:	4629      	mov	r1, r5
 800a13a:	4622      	mov	r2, r4
 800a13c:	4658      	mov	r0, fp
 800a13e:	f000 fcc7 	bl	800aad0 <__pow5mult>
 800a142:	464a      	mov	r2, r9
 800a144:	4601      	mov	r1, r0
 800a146:	4605      	mov	r5, r0
 800a148:	4658      	mov	r0, fp
 800a14a:	f000 fc17 	bl	800a97c <__multiply>
 800a14e:	4649      	mov	r1, r9
 800a150:	9004      	str	r0, [sp, #16]
 800a152:	4658      	mov	r0, fp
 800a154:	f000 fb48 	bl	800a7e8 <_Bfree>
 800a158:	9b04      	ldr	r3, [sp, #16]
 800a15a:	4699      	mov	r9, r3
 800a15c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a15e:	1b1a      	subs	r2, r3, r4
 800a160:	d004      	beq.n	800a16c <_dtoa_r+0x78c>
 800a162:	4649      	mov	r1, r9
 800a164:	4658      	mov	r0, fp
 800a166:	f000 fcb3 	bl	800aad0 <__pow5mult>
 800a16a:	4681      	mov	r9, r0
 800a16c:	2101      	movs	r1, #1
 800a16e:	4658      	mov	r0, fp
 800a170:	f000 fbee 	bl	800a950 <__i2b>
 800a174:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a176:	4604      	mov	r4, r0
 800a178:	2b00      	cmp	r3, #0
 800a17a:	f000 81cf 	beq.w	800a51c <_dtoa_r+0xb3c>
 800a17e:	461a      	mov	r2, r3
 800a180:	4601      	mov	r1, r0
 800a182:	4658      	mov	r0, fp
 800a184:	f000 fca4 	bl	800aad0 <__pow5mult>
 800a188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	4604      	mov	r4, r0
 800a18e:	f300 8095 	bgt.w	800a2bc <_dtoa_r+0x8dc>
 800a192:	9b02      	ldr	r3, [sp, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	f040 8087 	bne.w	800a2a8 <_dtoa_r+0x8c8>
 800a19a:	9b03      	ldr	r3, [sp, #12]
 800a19c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f040 8089 	bne.w	800a2b8 <_dtoa_r+0x8d8>
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1ac:	0d1b      	lsrs	r3, r3, #20
 800a1ae:	051b      	lsls	r3, r3, #20
 800a1b0:	b12b      	cbz	r3, 800a1be <_dtoa_r+0x7de>
 800a1b2:	9b08      	ldr	r3, [sp, #32]
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	9308      	str	r3, [sp, #32]
 800a1b8:	f108 0801 	add.w	r8, r8, #1
 800a1bc:	2301      	movs	r3, #1
 800a1be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	f000 81b0 	beq.w	800a528 <_dtoa_r+0xb48>
 800a1c8:	6923      	ldr	r3, [r4, #16]
 800a1ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1ce:	6918      	ldr	r0, [r3, #16]
 800a1d0:	f000 fb72 	bl	800a8b8 <__hi0bits>
 800a1d4:	f1c0 0020 	rsb	r0, r0, #32
 800a1d8:	9b08      	ldr	r3, [sp, #32]
 800a1da:	4418      	add	r0, r3
 800a1dc:	f010 001f 	ands.w	r0, r0, #31
 800a1e0:	d077      	beq.n	800a2d2 <_dtoa_r+0x8f2>
 800a1e2:	f1c0 0320 	rsb	r3, r0, #32
 800a1e6:	2b04      	cmp	r3, #4
 800a1e8:	dd6b      	ble.n	800a2c2 <_dtoa_r+0x8e2>
 800a1ea:	9b08      	ldr	r3, [sp, #32]
 800a1ec:	f1c0 001c 	rsb	r0, r0, #28
 800a1f0:	4403      	add	r3, r0
 800a1f2:	4480      	add	r8, r0
 800a1f4:	4406      	add	r6, r0
 800a1f6:	9308      	str	r3, [sp, #32]
 800a1f8:	f1b8 0f00 	cmp.w	r8, #0
 800a1fc:	dd05      	ble.n	800a20a <_dtoa_r+0x82a>
 800a1fe:	4649      	mov	r1, r9
 800a200:	4642      	mov	r2, r8
 800a202:	4658      	mov	r0, fp
 800a204:	f000 fcbe 	bl	800ab84 <__lshift>
 800a208:	4681      	mov	r9, r0
 800a20a:	9b08      	ldr	r3, [sp, #32]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dd05      	ble.n	800a21c <_dtoa_r+0x83c>
 800a210:	4621      	mov	r1, r4
 800a212:	461a      	mov	r2, r3
 800a214:	4658      	mov	r0, fp
 800a216:	f000 fcb5 	bl	800ab84 <__lshift>
 800a21a:	4604      	mov	r4, r0
 800a21c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d059      	beq.n	800a2d6 <_dtoa_r+0x8f6>
 800a222:	4621      	mov	r1, r4
 800a224:	4648      	mov	r0, r9
 800a226:	f000 fd19 	bl	800ac5c <__mcmp>
 800a22a:	2800      	cmp	r0, #0
 800a22c:	da53      	bge.n	800a2d6 <_dtoa_r+0x8f6>
 800a22e:	1e7b      	subs	r3, r7, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	4649      	mov	r1, r9
 800a234:	2300      	movs	r3, #0
 800a236:	220a      	movs	r2, #10
 800a238:	4658      	mov	r0, fp
 800a23a:	f000 faf7 	bl	800a82c <__multadd>
 800a23e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a240:	4681      	mov	r9, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 8172 	beq.w	800a52c <_dtoa_r+0xb4c>
 800a248:	2300      	movs	r3, #0
 800a24a:	4629      	mov	r1, r5
 800a24c:	220a      	movs	r2, #10
 800a24e:	4658      	mov	r0, fp
 800a250:	f000 faec 	bl	800a82c <__multadd>
 800a254:	9b00      	ldr	r3, [sp, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	4605      	mov	r5, r0
 800a25a:	dc67      	bgt.n	800a32c <_dtoa_r+0x94c>
 800a25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25e:	2b02      	cmp	r3, #2
 800a260:	dc41      	bgt.n	800a2e6 <_dtoa_r+0x906>
 800a262:	e063      	b.n	800a32c <_dtoa_r+0x94c>
 800a264:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a26a:	e746      	b.n	800a0fa <_dtoa_r+0x71a>
 800a26c:	9b07      	ldr	r3, [sp, #28]
 800a26e:	1e5c      	subs	r4, r3, #1
 800a270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a272:	42a3      	cmp	r3, r4
 800a274:	bfbf      	itttt	lt
 800a276:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a278:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a27a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a27c:	1ae3      	sublt	r3, r4, r3
 800a27e:	bfb4      	ite	lt
 800a280:	18d2      	addlt	r2, r2, r3
 800a282:	1b1c      	subge	r4, r3, r4
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	bfbc      	itt	lt
 800a288:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a28a:	2400      	movlt	r4, #0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	bfb5      	itete	lt
 800a290:	eba8 0603 	sublt.w	r6, r8, r3
 800a294:	9b07      	ldrge	r3, [sp, #28]
 800a296:	2300      	movlt	r3, #0
 800a298:	4646      	movge	r6, r8
 800a29a:	e730      	b.n	800a0fe <_dtoa_r+0x71e>
 800a29c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a29e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a2a0:	4646      	mov	r6, r8
 800a2a2:	e735      	b.n	800a110 <_dtoa_r+0x730>
 800a2a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2a6:	e75c      	b.n	800a162 <_dtoa_r+0x782>
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	e788      	b.n	800a1be <_dtoa_r+0x7de>
 800a2ac:	3fe00000 	.word	0x3fe00000
 800a2b0:	40240000 	.word	0x40240000
 800a2b4:	40140000 	.word	0x40140000
 800a2b8:	9b02      	ldr	r3, [sp, #8]
 800a2ba:	e780      	b.n	800a1be <_dtoa_r+0x7de>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2c0:	e782      	b.n	800a1c8 <_dtoa_r+0x7e8>
 800a2c2:	d099      	beq.n	800a1f8 <_dtoa_r+0x818>
 800a2c4:	9a08      	ldr	r2, [sp, #32]
 800a2c6:	331c      	adds	r3, #28
 800a2c8:	441a      	add	r2, r3
 800a2ca:	4498      	add	r8, r3
 800a2cc:	441e      	add	r6, r3
 800a2ce:	9208      	str	r2, [sp, #32]
 800a2d0:	e792      	b.n	800a1f8 <_dtoa_r+0x818>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	e7f6      	b.n	800a2c4 <_dtoa_r+0x8e4>
 800a2d6:	9b07      	ldr	r3, [sp, #28]
 800a2d8:	9704      	str	r7, [sp, #16]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dc20      	bgt.n	800a320 <_dtoa_r+0x940>
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	dd1e      	ble.n	800a324 <_dtoa_r+0x944>
 800a2e6:	9b00      	ldr	r3, [sp, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f47f aec0 	bne.w	800a06e <_dtoa_r+0x68e>
 800a2ee:	4621      	mov	r1, r4
 800a2f0:	2205      	movs	r2, #5
 800a2f2:	4658      	mov	r0, fp
 800a2f4:	f000 fa9a 	bl	800a82c <__multadd>
 800a2f8:	4601      	mov	r1, r0
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	4648      	mov	r0, r9
 800a2fe:	f000 fcad 	bl	800ac5c <__mcmp>
 800a302:	2800      	cmp	r0, #0
 800a304:	f77f aeb3 	ble.w	800a06e <_dtoa_r+0x68e>
 800a308:	4656      	mov	r6, sl
 800a30a:	2331      	movs	r3, #49	@ 0x31
 800a30c:	f806 3b01 	strb.w	r3, [r6], #1
 800a310:	9b04      	ldr	r3, [sp, #16]
 800a312:	3301      	adds	r3, #1
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	e6ae      	b.n	800a076 <_dtoa_r+0x696>
 800a318:	9c07      	ldr	r4, [sp, #28]
 800a31a:	9704      	str	r7, [sp, #16]
 800a31c:	4625      	mov	r5, r4
 800a31e:	e7f3      	b.n	800a308 <_dtoa_r+0x928>
 800a320:	9b07      	ldr	r3, [sp, #28]
 800a322:	9300      	str	r3, [sp, #0]
 800a324:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 8104 	beq.w	800a534 <_dtoa_r+0xb54>
 800a32c:	2e00      	cmp	r6, #0
 800a32e:	dd05      	ble.n	800a33c <_dtoa_r+0x95c>
 800a330:	4629      	mov	r1, r5
 800a332:	4632      	mov	r2, r6
 800a334:	4658      	mov	r0, fp
 800a336:	f000 fc25 	bl	800ab84 <__lshift>
 800a33a:	4605      	mov	r5, r0
 800a33c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d05a      	beq.n	800a3f8 <_dtoa_r+0xa18>
 800a342:	6869      	ldr	r1, [r5, #4]
 800a344:	4658      	mov	r0, fp
 800a346:	f000 fa0f 	bl	800a768 <_Balloc>
 800a34a:	4606      	mov	r6, r0
 800a34c:	b928      	cbnz	r0, 800a35a <_dtoa_r+0x97a>
 800a34e:	4b84      	ldr	r3, [pc, #528]	@ (800a560 <_dtoa_r+0xb80>)
 800a350:	4602      	mov	r2, r0
 800a352:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a356:	f7ff bb5a 	b.w	8009a0e <_dtoa_r+0x2e>
 800a35a:	692a      	ldr	r2, [r5, #16]
 800a35c:	3202      	adds	r2, #2
 800a35e:	0092      	lsls	r2, r2, #2
 800a360:	f105 010c 	add.w	r1, r5, #12
 800a364:	300c      	adds	r0, #12
 800a366:	f000 ffaf 	bl	800b2c8 <memcpy>
 800a36a:	2201      	movs	r2, #1
 800a36c:	4631      	mov	r1, r6
 800a36e:	4658      	mov	r0, fp
 800a370:	f000 fc08 	bl	800ab84 <__lshift>
 800a374:	f10a 0301 	add.w	r3, sl, #1
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	9b00      	ldr	r3, [sp, #0]
 800a37c:	4453      	add	r3, sl
 800a37e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a380:	9b02      	ldr	r3, [sp, #8]
 800a382:	f003 0301 	and.w	r3, r3, #1
 800a386:	462f      	mov	r7, r5
 800a388:	930a      	str	r3, [sp, #40]	@ 0x28
 800a38a:	4605      	mov	r5, r0
 800a38c:	9b07      	ldr	r3, [sp, #28]
 800a38e:	4621      	mov	r1, r4
 800a390:	3b01      	subs	r3, #1
 800a392:	4648      	mov	r0, r9
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	f7ff fa9a 	bl	80098ce <quorem>
 800a39a:	4639      	mov	r1, r7
 800a39c:	9002      	str	r0, [sp, #8]
 800a39e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a3a2:	4648      	mov	r0, r9
 800a3a4:	f000 fc5a 	bl	800ac5c <__mcmp>
 800a3a8:	462a      	mov	r2, r5
 800a3aa:	9008      	str	r0, [sp, #32]
 800a3ac:	4621      	mov	r1, r4
 800a3ae:	4658      	mov	r0, fp
 800a3b0:	f000 fc70 	bl	800ac94 <__mdiff>
 800a3b4:	68c2      	ldr	r2, [r0, #12]
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	bb02      	cbnz	r2, 800a3fc <_dtoa_r+0xa1c>
 800a3ba:	4601      	mov	r1, r0
 800a3bc:	4648      	mov	r0, r9
 800a3be:	f000 fc4d 	bl	800ac5c <__mcmp>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4658      	mov	r0, fp
 800a3c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3ca:	f000 fa0d 	bl	800a7e8 <_Bfree>
 800a3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3d2:	9e07      	ldr	r6, [sp, #28]
 800a3d4:	ea43 0102 	orr.w	r1, r3, r2
 800a3d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3da:	4319      	orrs	r1, r3
 800a3dc:	d110      	bne.n	800a400 <_dtoa_r+0xa20>
 800a3de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3e2:	d029      	beq.n	800a438 <_dtoa_r+0xa58>
 800a3e4:	9b08      	ldr	r3, [sp, #32]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	dd02      	ble.n	800a3f0 <_dtoa_r+0xa10>
 800a3ea:	9b02      	ldr	r3, [sp, #8]
 800a3ec:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3f0:	9b00      	ldr	r3, [sp, #0]
 800a3f2:	f883 8000 	strb.w	r8, [r3]
 800a3f6:	e63f      	b.n	800a078 <_dtoa_r+0x698>
 800a3f8:	4628      	mov	r0, r5
 800a3fa:	e7bb      	b.n	800a374 <_dtoa_r+0x994>
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	e7e1      	b.n	800a3c4 <_dtoa_r+0x9e4>
 800a400:	9b08      	ldr	r3, [sp, #32]
 800a402:	2b00      	cmp	r3, #0
 800a404:	db04      	blt.n	800a410 <_dtoa_r+0xa30>
 800a406:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a408:	430b      	orrs	r3, r1
 800a40a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a40c:	430b      	orrs	r3, r1
 800a40e:	d120      	bne.n	800a452 <_dtoa_r+0xa72>
 800a410:	2a00      	cmp	r2, #0
 800a412:	dded      	ble.n	800a3f0 <_dtoa_r+0xa10>
 800a414:	4649      	mov	r1, r9
 800a416:	2201      	movs	r2, #1
 800a418:	4658      	mov	r0, fp
 800a41a:	f000 fbb3 	bl	800ab84 <__lshift>
 800a41e:	4621      	mov	r1, r4
 800a420:	4681      	mov	r9, r0
 800a422:	f000 fc1b 	bl	800ac5c <__mcmp>
 800a426:	2800      	cmp	r0, #0
 800a428:	dc03      	bgt.n	800a432 <_dtoa_r+0xa52>
 800a42a:	d1e1      	bne.n	800a3f0 <_dtoa_r+0xa10>
 800a42c:	f018 0f01 	tst.w	r8, #1
 800a430:	d0de      	beq.n	800a3f0 <_dtoa_r+0xa10>
 800a432:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a436:	d1d8      	bne.n	800a3ea <_dtoa_r+0xa0a>
 800a438:	9a00      	ldr	r2, [sp, #0]
 800a43a:	2339      	movs	r3, #57	@ 0x39
 800a43c:	7013      	strb	r3, [r2, #0]
 800a43e:	4633      	mov	r3, r6
 800a440:	461e      	mov	r6, r3
 800a442:	3b01      	subs	r3, #1
 800a444:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a448:	2a39      	cmp	r2, #57	@ 0x39
 800a44a:	d052      	beq.n	800a4f2 <_dtoa_r+0xb12>
 800a44c:	3201      	adds	r2, #1
 800a44e:	701a      	strb	r2, [r3, #0]
 800a450:	e612      	b.n	800a078 <_dtoa_r+0x698>
 800a452:	2a00      	cmp	r2, #0
 800a454:	dd07      	ble.n	800a466 <_dtoa_r+0xa86>
 800a456:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a45a:	d0ed      	beq.n	800a438 <_dtoa_r+0xa58>
 800a45c:	9a00      	ldr	r2, [sp, #0]
 800a45e:	f108 0301 	add.w	r3, r8, #1
 800a462:	7013      	strb	r3, [r2, #0]
 800a464:	e608      	b.n	800a078 <_dtoa_r+0x698>
 800a466:	9b07      	ldr	r3, [sp, #28]
 800a468:	9a07      	ldr	r2, [sp, #28]
 800a46a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a46e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a470:	4293      	cmp	r3, r2
 800a472:	d028      	beq.n	800a4c6 <_dtoa_r+0xae6>
 800a474:	4649      	mov	r1, r9
 800a476:	2300      	movs	r3, #0
 800a478:	220a      	movs	r2, #10
 800a47a:	4658      	mov	r0, fp
 800a47c:	f000 f9d6 	bl	800a82c <__multadd>
 800a480:	42af      	cmp	r7, r5
 800a482:	4681      	mov	r9, r0
 800a484:	f04f 0300 	mov.w	r3, #0
 800a488:	f04f 020a 	mov.w	r2, #10
 800a48c:	4639      	mov	r1, r7
 800a48e:	4658      	mov	r0, fp
 800a490:	d107      	bne.n	800a4a2 <_dtoa_r+0xac2>
 800a492:	f000 f9cb 	bl	800a82c <__multadd>
 800a496:	4607      	mov	r7, r0
 800a498:	4605      	mov	r5, r0
 800a49a:	9b07      	ldr	r3, [sp, #28]
 800a49c:	3301      	adds	r3, #1
 800a49e:	9307      	str	r3, [sp, #28]
 800a4a0:	e774      	b.n	800a38c <_dtoa_r+0x9ac>
 800a4a2:	f000 f9c3 	bl	800a82c <__multadd>
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4607      	mov	r7, r0
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	220a      	movs	r2, #10
 800a4ae:	4658      	mov	r0, fp
 800a4b0:	f000 f9bc 	bl	800a82c <__multadd>
 800a4b4:	4605      	mov	r5, r0
 800a4b6:	e7f0      	b.n	800a49a <_dtoa_r+0xaba>
 800a4b8:	9b00      	ldr	r3, [sp, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bfcc      	ite	gt
 800a4be:	461e      	movgt	r6, r3
 800a4c0:	2601      	movle	r6, #1
 800a4c2:	4456      	add	r6, sl
 800a4c4:	2700      	movs	r7, #0
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	4658      	mov	r0, fp
 800a4cc:	f000 fb5a 	bl	800ab84 <__lshift>
 800a4d0:	4621      	mov	r1, r4
 800a4d2:	4681      	mov	r9, r0
 800a4d4:	f000 fbc2 	bl	800ac5c <__mcmp>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	dcb0      	bgt.n	800a43e <_dtoa_r+0xa5e>
 800a4dc:	d102      	bne.n	800a4e4 <_dtoa_r+0xb04>
 800a4de:	f018 0f01 	tst.w	r8, #1
 800a4e2:	d1ac      	bne.n	800a43e <_dtoa_r+0xa5e>
 800a4e4:	4633      	mov	r3, r6
 800a4e6:	461e      	mov	r6, r3
 800a4e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4ec:	2a30      	cmp	r2, #48	@ 0x30
 800a4ee:	d0fa      	beq.n	800a4e6 <_dtoa_r+0xb06>
 800a4f0:	e5c2      	b.n	800a078 <_dtoa_r+0x698>
 800a4f2:	459a      	cmp	sl, r3
 800a4f4:	d1a4      	bne.n	800a440 <_dtoa_r+0xa60>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	2331      	movs	r3, #49	@ 0x31
 800a4fe:	f88a 3000 	strb.w	r3, [sl]
 800a502:	e5b9      	b.n	800a078 <_dtoa_r+0x698>
 800a504:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a506:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a564 <_dtoa_r+0xb84>
 800a50a:	b11b      	cbz	r3, 800a514 <_dtoa_r+0xb34>
 800a50c:	f10a 0308 	add.w	r3, sl, #8
 800a510:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a512:	6013      	str	r3, [r2, #0]
 800a514:	4650      	mov	r0, sl
 800a516:	b019      	add	sp, #100	@ 0x64
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a51e:	2b01      	cmp	r3, #1
 800a520:	f77f ae37 	ble.w	800a192 <_dtoa_r+0x7b2>
 800a524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a526:	930a      	str	r3, [sp, #40]	@ 0x28
 800a528:	2001      	movs	r0, #1
 800a52a:	e655      	b.n	800a1d8 <_dtoa_r+0x7f8>
 800a52c:	9b00      	ldr	r3, [sp, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f77f aed6 	ble.w	800a2e0 <_dtoa_r+0x900>
 800a534:	4656      	mov	r6, sl
 800a536:	4621      	mov	r1, r4
 800a538:	4648      	mov	r0, r9
 800a53a:	f7ff f9c8 	bl	80098ce <quorem>
 800a53e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a542:	f806 8b01 	strb.w	r8, [r6], #1
 800a546:	9b00      	ldr	r3, [sp, #0]
 800a548:	eba6 020a 	sub.w	r2, r6, sl
 800a54c:	4293      	cmp	r3, r2
 800a54e:	ddb3      	ble.n	800a4b8 <_dtoa_r+0xad8>
 800a550:	4649      	mov	r1, r9
 800a552:	2300      	movs	r3, #0
 800a554:	220a      	movs	r2, #10
 800a556:	4658      	mov	r0, fp
 800a558:	f000 f968 	bl	800a82c <__multadd>
 800a55c:	4681      	mov	r9, r0
 800a55e:	e7ea      	b.n	800a536 <_dtoa_r+0xb56>
 800a560:	0800c964 	.word	0x0800c964
 800a564:	0800c8e8 	.word	0x0800c8e8

0800a568 <_free_r>:
 800a568:	b538      	push	{r3, r4, r5, lr}
 800a56a:	4605      	mov	r5, r0
 800a56c:	2900      	cmp	r1, #0
 800a56e:	d041      	beq.n	800a5f4 <_free_r+0x8c>
 800a570:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a574:	1f0c      	subs	r4, r1, #4
 800a576:	2b00      	cmp	r3, #0
 800a578:	bfb8      	it	lt
 800a57a:	18e4      	addlt	r4, r4, r3
 800a57c:	f000 f8e8 	bl	800a750 <__malloc_lock>
 800a580:	4a1d      	ldr	r2, [pc, #116]	@ (800a5f8 <_free_r+0x90>)
 800a582:	6813      	ldr	r3, [r2, #0]
 800a584:	b933      	cbnz	r3, 800a594 <_free_r+0x2c>
 800a586:	6063      	str	r3, [r4, #4]
 800a588:	6014      	str	r4, [r2, #0]
 800a58a:	4628      	mov	r0, r5
 800a58c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a590:	f000 b8e4 	b.w	800a75c <__malloc_unlock>
 800a594:	42a3      	cmp	r3, r4
 800a596:	d908      	bls.n	800a5aa <_free_r+0x42>
 800a598:	6820      	ldr	r0, [r4, #0]
 800a59a:	1821      	adds	r1, r4, r0
 800a59c:	428b      	cmp	r3, r1
 800a59e:	bf01      	itttt	eq
 800a5a0:	6819      	ldreq	r1, [r3, #0]
 800a5a2:	685b      	ldreq	r3, [r3, #4]
 800a5a4:	1809      	addeq	r1, r1, r0
 800a5a6:	6021      	streq	r1, [r4, #0]
 800a5a8:	e7ed      	b.n	800a586 <_free_r+0x1e>
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	b10b      	cbz	r3, 800a5b4 <_free_r+0x4c>
 800a5b0:	42a3      	cmp	r3, r4
 800a5b2:	d9fa      	bls.n	800a5aa <_free_r+0x42>
 800a5b4:	6811      	ldr	r1, [r2, #0]
 800a5b6:	1850      	adds	r0, r2, r1
 800a5b8:	42a0      	cmp	r0, r4
 800a5ba:	d10b      	bne.n	800a5d4 <_free_r+0x6c>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	4401      	add	r1, r0
 800a5c0:	1850      	adds	r0, r2, r1
 800a5c2:	4283      	cmp	r3, r0
 800a5c4:	6011      	str	r1, [r2, #0]
 800a5c6:	d1e0      	bne.n	800a58a <_free_r+0x22>
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	6053      	str	r3, [r2, #4]
 800a5ce:	4408      	add	r0, r1
 800a5d0:	6010      	str	r0, [r2, #0]
 800a5d2:	e7da      	b.n	800a58a <_free_r+0x22>
 800a5d4:	d902      	bls.n	800a5dc <_free_r+0x74>
 800a5d6:	230c      	movs	r3, #12
 800a5d8:	602b      	str	r3, [r5, #0]
 800a5da:	e7d6      	b.n	800a58a <_free_r+0x22>
 800a5dc:	6820      	ldr	r0, [r4, #0]
 800a5de:	1821      	adds	r1, r4, r0
 800a5e0:	428b      	cmp	r3, r1
 800a5e2:	bf04      	itt	eq
 800a5e4:	6819      	ldreq	r1, [r3, #0]
 800a5e6:	685b      	ldreq	r3, [r3, #4]
 800a5e8:	6063      	str	r3, [r4, #4]
 800a5ea:	bf04      	itt	eq
 800a5ec:	1809      	addeq	r1, r1, r0
 800a5ee:	6021      	streq	r1, [r4, #0]
 800a5f0:	6054      	str	r4, [r2, #4]
 800a5f2:	e7ca      	b.n	800a58a <_free_r+0x22>
 800a5f4:	bd38      	pop	{r3, r4, r5, pc}
 800a5f6:	bf00      	nop
 800a5f8:	200020fc 	.word	0x200020fc

0800a5fc <malloc>:
 800a5fc:	4b02      	ldr	r3, [pc, #8]	@ (800a608 <malloc+0xc>)
 800a5fe:	4601      	mov	r1, r0
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	f000 b825 	b.w	800a650 <_malloc_r>
 800a606:	bf00      	nop
 800a608:	20000108 	.word	0x20000108

0800a60c <sbrk_aligned>:
 800a60c:	b570      	push	{r4, r5, r6, lr}
 800a60e:	4e0f      	ldr	r6, [pc, #60]	@ (800a64c <sbrk_aligned+0x40>)
 800a610:	460c      	mov	r4, r1
 800a612:	6831      	ldr	r1, [r6, #0]
 800a614:	4605      	mov	r5, r0
 800a616:	b911      	cbnz	r1, 800a61e <sbrk_aligned+0x12>
 800a618:	f000 fe46 	bl	800b2a8 <_sbrk_r>
 800a61c:	6030      	str	r0, [r6, #0]
 800a61e:	4621      	mov	r1, r4
 800a620:	4628      	mov	r0, r5
 800a622:	f000 fe41 	bl	800b2a8 <_sbrk_r>
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	d103      	bne.n	800a632 <sbrk_aligned+0x26>
 800a62a:	f04f 34ff 	mov.w	r4, #4294967295
 800a62e:	4620      	mov	r0, r4
 800a630:	bd70      	pop	{r4, r5, r6, pc}
 800a632:	1cc4      	adds	r4, r0, #3
 800a634:	f024 0403 	bic.w	r4, r4, #3
 800a638:	42a0      	cmp	r0, r4
 800a63a:	d0f8      	beq.n	800a62e <sbrk_aligned+0x22>
 800a63c:	1a21      	subs	r1, r4, r0
 800a63e:	4628      	mov	r0, r5
 800a640:	f000 fe32 	bl	800b2a8 <_sbrk_r>
 800a644:	3001      	adds	r0, #1
 800a646:	d1f2      	bne.n	800a62e <sbrk_aligned+0x22>
 800a648:	e7ef      	b.n	800a62a <sbrk_aligned+0x1e>
 800a64a:	bf00      	nop
 800a64c:	200020f8 	.word	0x200020f8

0800a650 <_malloc_r>:
 800a650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a654:	1ccd      	adds	r5, r1, #3
 800a656:	f025 0503 	bic.w	r5, r5, #3
 800a65a:	3508      	adds	r5, #8
 800a65c:	2d0c      	cmp	r5, #12
 800a65e:	bf38      	it	cc
 800a660:	250c      	movcc	r5, #12
 800a662:	2d00      	cmp	r5, #0
 800a664:	4606      	mov	r6, r0
 800a666:	db01      	blt.n	800a66c <_malloc_r+0x1c>
 800a668:	42a9      	cmp	r1, r5
 800a66a:	d904      	bls.n	800a676 <_malloc_r+0x26>
 800a66c:	230c      	movs	r3, #12
 800a66e:	6033      	str	r3, [r6, #0]
 800a670:	2000      	movs	r0, #0
 800a672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a676:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a74c <_malloc_r+0xfc>
 800a67a:	f000 f869 	bl	800a750 <__malloc_lock>
 800a67e:	f8d8 3000 	ldr.w	r3, [r8]
 800a682:	461c      	mov	r4, r3
 800a684:	bb44      	cbnz	r4, 800a6d8 <_malloc_r+0x88>
 800a686:	4629      	mov	r1, r5
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff ffbf 	bl	800a60c <sbrk_aligned>
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	4604      	mov	r4, r0
 800a692:	d158      	bne.n	800a746 <_malloc_r+0xf6>
 800a694:	f8d8 4000 	ldr.w	r4, [r8]
 800a698:	4627      	mov	r7, r4
 800a69a:	2f00      	cmp	r7, #0
 800a69c:	d143      	bne.n	800a726 <_malloc_r+0xd6>
 800a69e:	2c00      	cmp	r4, #0
 800a6a0:	d04b      	beq.n	800a73a <_malloc_r+0xea>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	4630      	mov	r0, r6
 800a6a8:	eb04 0903 	add.w	r9, r4, r3
 800a6ac:	f000 fdfc 	bl	800b2a8 <_sbrk_r>
 800a6b0:	4581      	cmp	r9, r0
 800a6b2:	d142      	bne.n	800a73a <_malloc_r+0xea>
 800a6b4:	6821      	ldr	r1, [r4, #0]
 800a6b6:	1a6d      	subs	r5, r5, r1
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	f7ff ffa6 	bl	800a60c <sbrk_aligned>
 800a6c0:	3001      	adds	r0, #1
 800a6c2:	d03a      	beq.n	800a73a <_malloc_r+0xea>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	442b      	add	r3, r5
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	bb62      	cbnz	r2, 800a72c <_malloc_r+0xdc>
 800a6d2:	f8c8 7000 	str.w	r7, [r8]
 800a6d6:	e00f      	b.n	800a6f8 <_malloc_r+0xa8>
 800a6d8:	6822      	ldr	r2, [r4, #0]
 800a6da:	1b52      	subs	r2, r2, r5
 800a6dc:	d420      	bmi.n	800a720 <_malloc_r+0xd0>
 800a6de:	2a0b      	cmp	r2, #11
 800a6e0:	d917      	bls.n	800a712 <_malloc_r+0xc2>
 800a6e2:	1961      	adds	r1, r4, r5
 800a6e4:	42a3      	cmp	r3, r4
 800a6e6:	6025      	str	r5, [r4, #0]
 800a6e8:	bf18      	it	ne
 800a6ea:	6059      	strne	r1, [r3, #4]
 800a6ec:	6863      	ldr	r3, [r4, #4]
 800a6ee:	bf08      	it	eq
 800a6f0:	f8c8 1000 	streq.w	r1, [r8]
 800a6f4:	5162      	str	r2, [r4, r5]
 800a6f6:	604b      	str	r3, [r1, #4]
 800a6f8:	4630      	mov	r0, r6
 800a6fa:	f000 f82f 	bl	800a75c <__malloc_unlock>
 800a6fe:	f104 000b 	add.w	r0, r4, #11
 800a702:	1d23      	adds	r3, r4, #4
 800a704:	f020 0007 	bic.w	r0, r0, #7
 800a708:	1ac2      	subs	r2, r0, r3
 800a70a:	bf1c      	itt	ne
 800a70c:	1a1b      	subne	r3, r3, r0
 800a70e:	50a3      	strne	r3, [r4, r2]
 800a710:	e7af      	b.n	800a672 <_malloc_r+0x22>
 800a712:	6862      	ldr	r2, [r4, #4]
 800a714:	42a3      	cmp	r3, r4
 800a716:	bf0c      	ite	eq
 800a718:	f8c8 2000 	streq.w	r2, [r8]
 800a71c:	605a      	strne	r2, [r3, #4]
 800a71e:	e7eb      	b.n	800a6f8 <_malloc_r+0xa8>
 800a720:	4623      	mov	r3, r4
 800a722:	6864      	ldr	r4, [r4, #4]
 800a724:	e7ae      	b.n	800a684 <_malloc_r+0x34>
 800a726:	463c      	mov	r4, r7
 800a728:	687f      	ldr	r7, [r7, #4]
 800a72a:	e7b6      	b.n	800a69a <_malloc_r+0x4a>
 800a72c:	461a      	mov	r2, r3
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	42a3      	cmp	r3, r4
 800a732:	d1fb      	bne.n	800a72c <_malloc_r+0xdc>
 800a734:	2300      	movs	r3, #0
 800a736:	6053      	str	r3, [r2, #4]
 800a738:	e7de      	b.n	800a6f8 <_malloc_r+0xa8>
 800a73a:	230c      	movs	r3, #12
 800a73c:	6033      	str	r3, [r6, #0]
 800a73e:	4630      	mov	r0, r6
 800a740:	f000 f80c 	bl	800a75c <__malloc_unlock>
 800a744:	e794      	b.n	800a670 <_malloc_r+0x20>
 800a746:	6005      	str	r5, [r0, #0]
 800a748:	e7d6      	b.n	800a6f8 <_malloc_r+0xa8>
 800a74a:	bf00      	nop
 800a74c:	200020fc 	.word	0x200020fc

0800a750 <__malloc_lock>:
 800a750:	4801      	ldr	r0, [pc, #4]	@ (800a758 <__malloc_lock+0x8>)
 800a752:	f7ff b8ba 	b.w	80098ca <__retarget_lock_acquire_recursive>
 800a756:	bf00      	nop
 800a758:	200020f4 	.word	0x200020f4

0800a75c <__malloc_unlock>:
 800a75c:	4801      	ldr	r0, [pc, #4]	@ (800a764 <__malloc_unlock+0x8>)
 800a75e:	f7ff b8b5 	b.w	80098cc <__retarget_lock_release_recursive>
 800a762:	bf00      	nop
 800a764:	200020f4 	.word	0x200020f4

0800a768 <_Balloc>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	69c6      	ldr	r6, [r0, #28]
 800a76c:	4604      	mov	r4, r0
 800a76e:	460d      	mov	r5, r1
 800a770:	b976      	cbnz	r6, 800a790 <_Balloc+0x28>
 800a772:	2010      	movs	r0, #16
 800a774:	f7ff ff42 	bl	800a5fc <malloc>
 800a778:	4602      	mov	r2, r0
 800a77a:	61e0      	str	r0, [r4, #28]
 800a77c:	b920      	cbnz	r0, 800a788 <_Balloc+0x20>
 800a77e:	4b18      	ldr	r3, [pc, #96]	@ (800a7e0 <_Balloc+0x78>)
 800a780:	4818      	ldr	r0, [pc, #96]	@ (800a7e4 <_Balloc+0x7c>)
 800a782:	216b      	movs	r1, #107	@ 0x6b
 800a784:	f000 fdae 	bl	800b2e4 <__assert_func>
 800a788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a78c:	6006      	str	r6, [r0, #0]
 800a78e:	60c6      	str	r6, [r0, #12]
 800a790:	69e6      	ldr	r6, [r4, #28]
 800a792:	68f3      	ldr	r3, [r6, #12]
 800a794:	b183      	cbz	r3, 800a7b8 <_Balloc+0x50>
 800a796:	69e3      	ldr	r3, [r4, #28]
 800a798:	68db      	ldr	r3, [r3, #12]
 800a79a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a79e:	b9b8      	cbnz	r0, 800a7d0 <_Balloc+0x68>
 800a7a0:	2101      	movs	r1, #1
 800a7a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a7a6:	1d72      	adds	r2, r6, #5
 800a7a8:	0092      	lsls	r2, r2, #2
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f000 fdb8 	bl	800b320 <_calloc_r>
 800a7b0:	b160      	cbz	r0, 800a7cc <_Balloc+0x64>
 800a7b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7b6:	e00e      	b.n	800a7d6 <_Balloc+0x6e>
 800a7b8:	2221      	movs	r2, #33	@ 0x21
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fdaf 	bl	800b320 <_calloc_r>
 800a7c2:	69e3      	ldr	r3, [r4, #28]
 800a7c4:	60f0      	str	r0, [r6, #12]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d1e4      	bne.n	800a796 <_Balloc+0x2e>
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	6802      	ldr	r2, [r0, #0]
 800a7d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7dc:	e7f7      	b.n	800a7ce <_Balloc+0x66>
 800a7de:	bf00      	nop
 800a7e0:	0800c8f5 	.word	0x0800c8f5
 800a7e4:	0800c975 	.word	0x0800c975

0800a7e8 <_Bfree>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	69c6      	ldr	r6, [r0, #28]
 800a7ec:	4605      	mov	r5, r0
 800a7ee:	460c      	mov	r4, r1
 800a7f0:	b976      	cbnz	r6, 800a810 <_Bfree+0x28>
 800a7f2:	2010      	movs	r0, #16
 800a7f4:	f7ff ff02 	bl	800a5fc <malloc>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	61e8      	str	r0, [r5, #28]
 800a7fc:	b920      	cbnz	r0, 800a808 <_Bfree+0x20>
 800a7fe:	4b09      	ldr	r3, [pc, #36]	@ (800a824 <_Bfree+0x3c>)
 800a800:	4809      	ldr	r0, [pc, #36]	@ (800a828 <_Bfree+0x40>)
 800a802:	218f      	movs	r1, #143	@ 0x8f
 800a804:	f000 fd6e 	bl	800b2e4 <__assert_func>
 800a808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a80c:	6006      	str	r6, [r0, #0]
 800a80e:	60c6      	str	r6, [r0, #12]
 800a810:	b13c      	cbz	r4, 800a822 <_Bfree+0x3a>
 800a812:	69eb      	ldr	r3, [r5, #28]
 800a814:	6862      	ldr	r2, [r4, #4]
 800a816:	68db      	ldr	r3, [r3, #12]
 800a818:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a81c:	6021      	str	r1, [r4, #0]
 800a81e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a822:	bd70      	pop	{r4, r5, r6, pc}
 800a824:	0800c8f5 	.word	0x0800c8f5
 800a828:	0800c975 	.word	0x0800c975

0800a82c <__multadd>:
 800a82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a830:	690d      	ldr	r5, [r1, #16]
 800a832:	4607      	mov	r7, r0
 800a834:	460c      	mov	r4, r1
 800a836:	461e      	mov	r6, r3
 800a838:	f101 0c14 	add.w	ip, r1, #20
 800a83c:	2000      	movs	r0, #0
 800a83e:	f8dc 3000 	ldr.w	r3, [ip]
 800a842:	b299      	uxth	r1, r3
 800a844:	fb02 6101 	mla	r1, r2, r1, r6
 800a848:	0c1e      	lsrs	r6, r3, #16
 800a84a:	0c0b      	lsrs	r3, r1, #16
 800a84c:	fb02 3306 	mla	r3, r2, r6, r3
 800a850:	b289      	uxth	r1, r1
 800a852:	3001      	adds	r0, #1
 800a854:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a858:	4285      	cmp	r5, r0
 800a85a:	f84c 1b04 	str.w	r1, [ip], #4
 800a85e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a862:	dcec      	bgt.n	800a83e <__multadd+0x12>
 800a864:	b30e      	cbz	r6, 800a8aa <__multadd+0x7e>
 800a866:	68a3      	ldr	r3, [r4, #8]
 800a868:	42ab      	cmp	r3, r5
 800a86a:	dc19      	bgt.n	800a8a0 <__multadd+0x74>
 800a86c:	6861      	ldr	r1, [r4, #4]
 800a86e:	4638      	mov	r0, r7
 800a870:	3101      	adds	r1, #1
 800a872:	f7ff ff79 	bl	800a768 <_Balloc>
 800a876:	4680      	mov	r8, r0
 800a878:	b928      	cbnz	r0, 800a886 <__multadd+0x5a>
 800a87a:	4602      	mov	r2, r0
 800a87c:	4b0c      	ldr	r3, [pc, #48]	@ (800a8b0 <__multadd+0x84>)
 800a87e:	480d      	ldr	r0, [pc, #52]	@ (800a8b4 <__multadd+0x88>)
 800a880:	21ba      	movs	r1, #186	@ 0xba
 800a882:	f000 fd2f 	bl	800b2e4 <__assert_func>
 800a886:	6922      	ldr	r2, [r4, #16]
 800a888:	3202      	adds	r2, #2
 800a88a:	f104 010c 	add.w	r1, r4, #12
 800a88e:	0092      	lsls	r2, r2, #2
 800a890:	300c      	adds	r0, #12
 800a892:	f000 fd19 	bl	800b2c8 <memcpy>
 800a896:	4621      	mov	r1, r4
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff ffa5 	bl	800a7e8 <_Bfree>
 800a89e:	4644      	mov	r4, r8
 800a8a0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a8a4:	3501      	adds	r5, #1
 800a8a6:	615e      	str	r6, [r3, #20]
 800a8a8:	6125      	str	r5, [r4, #16]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b0:	0800c964 	.word	0x0800c964
 800a8b4:	0800c975 	.word	0x0800c975

0800a8b8 <__hi0bits>:
 800a8b8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8bc:	4603      	mov	r3, r0
 800a8be:	bf36      	itet	cc
 800a8c0:	0403      	lslcc	r3, r0, #16
 800a8c2:	2000      	movcs	r0, #0
 800a8c4:	2010      	movcc	r0, #16
 800a8c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8ca:	bf3c      	itt	cc
 800a8cc:	021b      	lslcc	r3, r3, #8
 800a8ce:	3008      	addcc	r0, #8
 800a8d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8d4:	bf3c      	itt	cc
 800a8d6:	011b      	lslcc	r3, r3, #4
 800a8d8:	3004      	addcc	r0, #4
 800a8da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8de:	bf3c      	itt	cc
 800a8e0:	009b      	lslcc	r3, r3, #2
 800a8e2:	3002      	addcc	r0, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	db05      	blt.n	800a8f4 <__hi0bits+0x3c>
 800a8e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8ec:	f100 0001 	add.w	r0, r0, #1
 800a8f0:	bf08      	it	eq
 800a8f2:	2020      	moveq	r0, #32
 800a8f4:	4770      	bx	lr

0800a8f6 <__lo0bits>:
 800a8f6:	6803      	ldr	r3, [r0, #0]
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	f013 0007 	ands.w	r0, r3, #7
 800a8fe:	d00b      	beq.n	800a918 <__lo0bits+0x22>
 800a900:	07d9      	lsls	r1, r3, #31
 800a902:	d421      	bmi.n	800a948 <__lo0bits+0x52>
 800a904:	0798      	lsls	r0, r3, #30
 800a906:	bf49      	itett	mi
 800a908:	085b      	lsrmi	r3, r3, #1
 800a90a:	089b      	lsrpl	r3, r3, #2
 800a90c:	2001      	movmi	r0, #1
 800a90e:	6013      	strmi	r3, [r2, #0]
 800a910:	bf5c      	itt	pl
 800a912:	6013      	strpl	r3, [r2, #0]
 800a914:	2002      	movpl	r0, #2
 800a916:	4770      	bx	lr
 800a918:	b299      	uxth	r1, r3
 800a91a:	b909      	cbnz	r1, 800a920 <__lo0bits+0x2a>
 800a91c:	0c1b      	lsrs	r3, r3, #16
 800a91e:	2010      	movs	r0, #16
 800a920:	b2d9      	uxtb	r1, r3
 800a922:	b909      	cbnz	r1, 800a928 <__lo0bits+0x32>
 800a924:	3008      	adds	r0, #8
 800a926:	0a1b      	lsrs	r3, r3, #8
 800a928:	0719      	lsls	r1, r3, #28
 800a92a:	bf04      	itt	eq
 800a92c:	091b      	lsreq	r3, r3, #4
 800a92e:	3004      	addeq	r0, #4
 800a930:	0799      	lsls	r1, r3, #30
 800a932:	bf04      	itt	eq
 800a934:	089b      	lsreq	r3, r3, #2
 800a936:	3002      	addeq	r0, #2
 800a938:	07d9      	lsls	r1, r3, #31
 800a93a:	d403      	bmi.n	800a944 <__lo0bits+0x4e>
 800a93c:	085b      	lsrs	r3, r3, #1
 800a93e:	f100 0001 	add.w	r0, r0, #1
 800a942:	d003      	beq.n	800a94c <__lo0bits+0x56>
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	4770      	bx	lr
 800a948:	2000      	movs	r0, #0
 800a94a:	4770      	bx	lr
 800a94c:	2020      	movs	r0, #32
 800a94e:	4770      	bx	lr

0800a950 <__i2b>:
 800a950:	b510      	push	{r4, lr}
 800a952:	460c      	mov	r4, r1
 800a954:	2101      	movs	r1, #1
 800a956:	f7ff ff07 	bl	800a768 <_Balloc>
 800a95a:	4602      	mov	r2, r0
 800a95c:	b928      	cbnz	r0, 800a96a <__i2b+0x1a>
 800a95e:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <__i2b+0x24>)
 800a960:	4805      	ldr	r0, [pc, #20]	@ (800a978 <__i2b+0x28>)
 800a962:	f240 1145 	movw	r1, #325	@ 0x145
 800a966:	f000 fcbd 	bl	800b2e4 <__assert_func>
 800a96a:	2301      	movs	r3, #1
 800a96c:	6144      	str	r4, [r0, #20]
 800a96e:	6103      	str	r3, [r0, #16]
 800a970:	bd10      	pop	{r4, pc}
 800a972:	bf00      	nop
 800a974:	0800c964 	.word	0x0800c964
 800a978:	0800c975 	.word	0x0800c975

0800a97c <__multiply>:
 800a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a980:	4614      	mov	r4, r2
 800a982:	690a      	ldr	r2, [r1, #16]
 800a984:	6923      	ldr	r3, [r4, #16]
 800a986:	429a      	cmp	r2, r3
 800a988:	bfa8      	it	ge
 800a98a:	4623      	movge	r3, r4
 800a98c:	460f      	mov	r7, r1
 800a98e:	bfa4      	itt	ge
 800a990:	460c      	movge	r4, r1
 800a992:	461f      	movge	r7, r3
 800a994:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a998:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a99c:	68a3      	ldr	r3, [r4, #8]
 800a99e:	6861      	ldr	r1, [r4, #4]
 800a9a0:	eb0a 0609 	add.w	r6, sl, r9
 800a9a4:	42b3      	cmp	r3, r6
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	bfb8      	it	lt
 800a9aa:	3101      	addlt	r1, #1
 800a9ac:	f7ff fedc 	bl	800a768 <_Balloc>
 800a9b0:	b930      	cbnz	r0, 800a9c0 <__multiply+0x44>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	4b44      	ldr	r3, [pc, #272]	@ (800aac8 <__multiply+0x14c>)
 800a9b6:	4845      	ldr	r0, [pc, #276]	@ (800aacc <__multiply+0x150>)
 800a9b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a9bc:	f000 fc92 	bl	800b2e4 <__assert_func>
 800a9c0:	f100 0514 	add.w	r5, r0, #20
 800a9c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9c8:	462b      	mov	r3, r5
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	4543      	cmp	r3, r8
 800a9ce:	d321      	bcc.n	800aa14 <__multiply+0x98>
 800a9d0:	f107 0114 	add.w	r1, r7, #20
 800a9d4:	f104 0214 	add.w	r2, r4, #20
 800a9d8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9dc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9e0:	9302      	str	r3, [sp, #8]
 800a9e2:	1b13      	subs	r3, r2, r4
 800a9e4:	3b15      	subs	r3, #21
 800a9e6:	f023 0303 	bic.w	r3, r3, #3
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	f104 0715 	add.w	r7, r4, #21
 800a9f0:	42ba      	cmp	r2, r7
 800a9f2:	bf38      	it	cc
 800a9f4:	2304      	movcc	r3, #4
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	9b02      	ldr	r3, [sp, #8]
 800a9fa:	9103      	str	r1, [sp, #12]
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	d80c      	bhi.n	800aa1a <__multiply+0x9e>
 800aa00:	2e00      	cmp	r6, #0
 800aa02:	dd03      	ble.n	800aa0c <__multiply+0x90>
 800aa04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d05b      	beq.n	800aac4 <__multiply+0x148>
 800aa0c:	6106      	str	r6, [r0, #16]
 800aa0e:	b005      	add	sp, #20
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa14:	f843 2b04 	str.w	r2, [r3], #4
 800aa18:	e7d8      	b.n	800a9cc <__multiply+0x50>
 800aa1a:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa1e:	f1ba 0f00 	cmp.w	sl, #0
 800aa22:	d024      	beq.n	800aa6e <__multiply+0xf2>
 800aa24:	f104 0e14 	add.w	lr, r4, #20
 800aa28:	46a9      	mov	r9, r5
 800aa2a:	f04f 0c00 	mov.w	ip, #0
 800aa2e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa32:	f8d9 3000 	ldr.w	r3, [r9]
 800aa36:	fa1f fb87 	uxth.w	fp, r7
 800aa3a:	b29b      	uxth	r3, r3
 800aa3c:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa40:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa44:	f8d9 7000 	ldr.w	r7, [r9]
 800aa48:	4463      	add	r3, ip
 800aa4a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa4e:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa52:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa5c:	4572      	cmp	r2, lr
 800aa5e:	f849 3b04 	str.w	r3, [r9], #4
 800aa62:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa66:	d8e2      	bhi.n	800aa2e <__multiply+0xb2>
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	f845 c003 	str.w	ip, [r5, r3]
 800aa6e:	9b03      	ldr	r3, [sp, #12]
 800aa70:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa74:	3104      	adds	r1, #4
 800aa76:	f1b9 0f00 	cmp.w	r9, #0
 800aa7a:	d021      	beq.n	800aac0 <__multiply+0x144>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	f104 0c14 	add.w	ip, r4, #20
 800aa82:	46ae      	mov	lr, r5
 800aa84:	f04f 0a00 	mov.w	sl, #0
 800aa88:	f8bc b000 	ldrh.w	fp, [ip]
 800aa8c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa90:	fb09 770b 	mla	r7, r9, fp, r7
 800aa94:	4457      	add	r7, sl
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa9c:	f84e 3b04 	str.w	r3, [lr], #4
 800aaa0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aaa4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaa8:	f8be 3000 	ldrh.w	r3, [lr]
 800aaac:	fb09 330a 	mla	r3, r9, sl, r3
 800aab0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aab4:	4562      	cmp	r2, ip
 800aab6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaba:	d8e5      	bhi.n	800aa88 <__multiply+0x10c>
 800aabc:	9f01      	ldr	r7, [sp, #4]
 800aabe:	51eb      	str	r3, [r5, r7]
 800aac0:	3504      	adds	r5, #4
 800aac2:	e799      	b.n	800a9f8 <__multiply+0x7c>
 800aac4:	3e01      	subs	r6, #1
 800aac6:	e79b      	b.n	800aa00 <__multiply+0x84>
 800aac8:	0800c964 	.word	0x0800c964
 800aacc:	0800c975 	.word	0x0800c975

0800aad0 <__pow5mult>:
 800aad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad4:	4615      	mov	r5, r2
 800aad6:	f012 0203 	ands.w	r2, r2, #3
 800aada:	4607      	mov	r7, r0
 800aadc:	460e      	mov	r6, r1
 800aade:	d007      	beq.n	800aaf0 <__pow5mult+0x20>
 800aae0:	4c25      	ldr	r4, [pc, #148]	@ (800ab78 <__pow5mult+0xa8>)
 800aae2:	3a01      	subs	r2, #1
 800aae4:	2300      	movs	r3, #0
 800aae6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aaea:	f7ff fe9f 	bl	800a82c <__multadd>
 800aaee:	4606      	mov	r6, r0
 800aaf0:	10ad      	asrs	r5, r5, #2
 800aaf2:	d03d      	beq.n	800ab70 <__pow5mult+0xa0>
 800aaf4:	69fc      	ldr	r4, [r7, #28]
 800aaf6:	b97c      	cbnz	r4, 800ab18 <__pow5mult+0x48>
 800aaf8:	2010      	movs	r0, #16
 800aafa:	f7ff fd7f 	bl	800a5fc <malloc>
 800aafe:	4602      	mov	r2, r0
 800ab00:	61f8      	str	r0, [r7, #28]
 800ab02:	b928      	cbnz	r0, 800ab10 <__pow5mult+0x40>
 800ab04:	4b1d      	ldr	r3, [pc, #116]	@ (800ab7c <__pow5mult+0xac>)
 800ab06:	481e      	ldr	r0, [pc, #120]	@ (800ab80 <__pow5mult+0xb0>)
 800ab08:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab0c:	f000 fbea 	bl	800b2e4 <__assert_func>
 800ab10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab14:	6004      	str	r4, [r0, #0]
 800ab16:	60c4      	str	r4, [r0, #12]
 800ab18:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab20:	b94c      	cbnz	r4, 800ab36 <__pow5mult+0x66>
 800ab22:	f240 2171 	movw	r1, #625	@ 0x271
 800ab26:	4638      	mov	r0, r7
 800ab28:	f7ff ff12 	bl	800a950 <__i2b>
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab32:	4604      	mov	r4, r0
 800ab34:	6003      	str	r3, [r0, #0]
 800ab36:	f04f 0900 	mov.w	r9, #0
 800ab3a:	07eb      	lsls	r3, r5, #31
 800ab3c:	d50a      	bpl.n	800ab54 <__pow5mult+0x84>
 800ab3e:	4631      	mov	r1, r6
 800ab40:	4622      	mov	r2, r4
 800ab42:	4638      	mov	r0, r7
 800ab44:	f7ff ff1a 	bl	800a97c <__multiply>
 800ab48:	4631      	mov	r1, r6
 800ab4a:	4680      	mov	r8, r0
 800ab4c:	4638      	mov	r0, r7
 800ab4e:	f7ff fe4b 	bl	800a7e8 <_Bfree>
 800ab52:	4646      	mov	r6, r8
 800ab54:	106d      	asrs	r5, r5, #1
 800ab56:	d00b      	beq.n	800ab70 <__pow5mult+0xa0>
 800ab58:	6820      	ldr	r0, [r4, #0]
 800ab5a:	b938      	cbnz	r0, 800ab6c <__pow5mult+0x9c>
 800ab5c:	4622      	mov	r2, r4
 800ab5e:	4621      	mov	r1, r4
 800ab60:	4638      	mov	r0, r7
 800ab62:	f7ff ff0b 	bl	800a97c <__multiply>
 800ab66:	6020      	str	r0, [r4, #0]
 800ab68:	f8c0 9000 	str.w	r9, [r0]
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	e7e4      	b.n	800ab3a <__pow5mult+0x6a>
 800ab70:	4630      	mov	r0, r6
 800ab72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab76:	bf00      	nop
 800ab78:	0800c9d0 	.word	0x0800c9d0
 800ab7c:	0800c8f5 	.word	0x0800c8f5
 800ab80:	0800c975 	.word	0x0800c975

0800ab84 <__lshift>:
 800ab84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	460c      	mov	r4, r1
 800ab8a:	6849      	ldr	r1, [r1, #4]
 800ab8c:	6923      	ldr	r3, [r4, #16]
 800ab8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab92:	68a3      	ldr	r3, [r4, #8]
 800ab94:	4607      	mov	r7, r0
 800ab96:	4691      	mov	r9, r2
 800ab98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab9c:	f108 0601 	add.w	r6, r8, #1
 800aba0:	42b3      	cmp	r3, r6
 800aba2:	db0b      	blt.n	800abbc <__lshift+0x38>
 800aba4:	4638      	mov	r0, r7
 800aba6:	f7ff fddf 	bl	800a768 <_Balloc>
 800abaa:	4605      	mov	r5, r0
 800abac:	b948      	cbnz	r0, 800abc2 <__lshift+0x3e>
 800abae:	4602      	mov	r2, r0
 800abb0:	4b28      	ldr	r3, [pc, #160]	@ (800ac54 <__lshift+0xd0>)
 800abb2:	4829      	ldr	r0, [pc, #164]	@ (800ac58 <__lshift+0xd4>)
 800abb4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800abb8:	f000 fb94 	bl	800b2e4 <__assert_func>
 800abbc:	3101      	adds	r1, #1
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	e7ee      	b.n	800aba0 <__lshift+0x1c>
 800abc2:	2300      	movs	r3, #0
 800abc4:	f100 0114 	add.w	r1, r0, #20
 800abc8:	f100 0210 	add.w	r2, r0, #16
 800abcc:	4618      	mov	r0, r3
 800abce:	4553      	cmp	r3, sl
 800abd0:	db33      	blt.n	800ac3a <__lshift+0xb6>
 800abd2:	6920      	ldr	r0, [r4, #16]
 800abd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abd8:	f104 0314 	add.w	r3, r4, #20
 800abdc:	f019 091f 	ands.w	r9, r9, #31
 800abe0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abe4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abe8:	d02b      	beq.n	800ac42 <__lshift+0xbe>
 800abea:	f1c9 0e20 	rsb	lr, r9, #32
 800abee:	468a      	mov	sl, r1
 800abf0:	2200      	movs	r2, #0
 800abf2:	6818      	ldr	r0, [r3, #0]
 800abf4:	fa00 f009 	lsl.w	r0, r0, r9
 800abf8:	4310      	orrs	r0, r2
 800abfa:	f84a 0b04 	str.w	r0, [sl], #4
 800abfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac02:	459c      	cmp	ip, r3
 800ac04:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac08:	d8f3      	bhi.n	800abf2 <__lshift+0x6e>
 800ac0a:	ebac 0304 	sub.w	r3, ip, r4
 800ac0e:	3b15      	subs	r3, #21
 800ac10:	f023 0303 	bic.w	r3, r3, #3
 800ac14:	3304      	adds	r3, #4
 800ac16:	f104 0015 	add.w	r0, r4, #21
 800ac1a:	4584      	cmp	ip, r0
 800ac1c:	bf38      	it	cc
 800ac1e:	2304      	movcc	r3, #4
 800ac20:	50ca      	str	r2, [r1, r3]
 800ac22:	b10a      	cbz	r2, 800ac28 <__lshift+0xa4>
 800ac24:	f108 0602 	add.w	r6, r8, #2
 800ac28:	3e01      	subs	r6, #1
 800ac2a:	4638      	mov	r0, r7
 800ac2c:	612e      	str	r6, [r5, #16]
 800ac2e:	4621      	mov	r1, r4
 800ac30:	f7ff fdda 	bl	800a7e8 <_Bfree>
 800ac34:	4628      	mov	r0, r5
 800ac36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac3e:	3301      	adds	r3, #1
 800ac40:	e7c5      	b.n	800abce <__lshift+0x4a>
 800ac42:	3904      	subs	r1, #4
 800ac44:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac48:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac4c:	459c      	cmp	ip, r3
 800ac4e:	d8f9      	bhi.n	800ac44 <__lshift+0xc0>
 800ac50:	e7ea      	b.n	800ac28 <__lshift+0xa4>
 800ac52:	bf00      	nop
 800ac54:	0800c964 	.word	0x0800c964
 800ac58:	0800c975 	.word	0x0800c975

0800ac5c <__mcmp>:
 800ac5c:	690a      	ldr	r2, [r1, #16]
 800ac5e:	4603      	mov	r3, r0
 800ac60:	6900      	ldr	r0, [r0, #16]
 800ac62:	1a80      	subs	r0, r0, r2
 800ac64:	b530      	push	{r4, r5, lr}
 800ac66:	d10e      	bne.n	800ac86 <__mcmp+0x2a>
 800ac68:	3314      	adds	r3, #20
 800ac6a:	3114      	adds	r1, #20
 800ac6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac7c:	4295      	cmp	r5, r2
 800ac7e:	d003      	beq.n	800ac88 <__mcmp+0x2c>
 800ac80:	d205      	bcs.n	800ac8e <__mcmp+0x32>
 800ac82:	f04f 30ff 	mov.w	r0, #4294967295
 800ac86:	bd30      	pop	{r4, r5, pc}
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d3f3      	bcc.n	800ac74 <__mcmp+0x18>
 800ac8c:	e7fb      	b.n	800ac86 <__mcmp+0x2a>
 800ac8e:	2001      	movs	r0, #1
 800ac90:	e7f9      	b.n	800ac86 <__mcmp+0x2a>
	...

0800ac94 <__mdiff>:
 800ac94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac98:	4689      	mov	r9, r1
 800ac9a:	4606      	mov	r6, r0
 800ac9c:	4611      	mov	r1, r2
 800ac9e:	4648      	mov	r0, r9
 800aca0:	4614      	mov	r4, r2
 800aca2:	f7ff ffdb 	bl	800ac5c <__mcmp>
 800aca6:	1e05      	subs	r5, r0, #0
 800aca8:	d112      	bne.n	800acd0 <__mdiff+0x3c>
 800acaa:	4629      	mov	r1, r5
 800acac:	4630      	mov	r0, r6
 800acae:	f7ff fd5b 	bl	800a768 <_Balloc>
 800acb2:	4602      	mov	r2, r0
 800acb4:	b928      	cbnz	r0, 800acc2 <__mdiff+0x2e>
 800acb6:	4b3f      	ldr	r3, [pc, #252]	@ (800adb4 <__mdiff+0x120>)
 800acb8:	f240 2137 	movw	r1, #567	@ 0x237
 800acbc:	483e      	ldr	r0, [pc, #248]	@ (800adb8 <__mdiff+0x124>)
 800acbe:	f000 fb11 	bl	800b2e4 <__assert_func>
 800acc2:	2301      	movs	r3, #1
 800acc4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acc8:	4610      	mov	r0, r2
 800acca:	b003      	add	sp, #12
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd0:	bfbc      	itt	lt
 800acd2:	464b      	movlt	r3, r9
 800acd4:	46a1      	movlt	r9, r4
 800acd6:	4630      	mov	r0, r6
 800acd8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800acdc:	bfba      	itte	lt
 800acde:	461c      	movlt	r4, r3
 800ace0:	2501      	movlt	r5, #1
 800ace2:	2500      	movge	r5, #0
 800ace4:	f7ff fd40 	bl	800a768 <_Balloc>
 800ace8:	4602      	mov	r2, r0
 800acea:	b918      	cbnz	r0, 800acf4 <__mdiff+0x60>
 800acec:	4b31      	ldr	r3, [pc, #196]	@ (800adb4 <__mdiff+0x120>)
 800acee:	f240 2145 	movw	r1, #581	@ 0x245
 800acf2:	e7e3      	b.n	800acbc <__mdiff+0x28>
 800acf4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800acf8:	6926      	ldr	r6, [r4, #16]
 800acfa:	60c5      	str	r5, [r0, #12]
 800acfc:	f109 0310 	add.w	r3, r9, #16
 800ad00:	f109 0514 	add.w	r5, r9, #20
 800ad04:	f104 0e14 	add.w	lr, r4, #20
 800ad08:	f100 0b14 	add.w	fp, r0, #20
 800ad0c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad10:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	46d9      	mov	r9, fp
 800ad18:	f04f 0c00 	mov.w	ip, #0
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad22:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad26:	9301      	str	r3, [sp, #4]
 800ad28:	fa1f f38a 	uxth.w	r3, sl
 800ad2c:	4619      	mov	r1, r3
 800ad2e:	b283      	uxth	r3, r0
 800ad30:	1acb      	subs	r3, r1, r3
 800ad32:	0c00      	lsrs	r0, r0, #16
 800ad34:	4463      	add	r3, ip
 800ad36:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad3a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad44:	4576      	cmp	r6, lr
 800ad46:	f849 3b04 	str.w	r3, [r9], #4
 800ad4a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad4e:	d8e5      	bhi.n	800ad1c <__mdiff+0x88>
 800ad50:	1b33      	subs	r3, r6, r4
 800ad52:	3b15      	subs	r3, #21
 800ad54:	f023 0303 	bic.w	r3, r3, #3
 800ad58:	3415      	adds	r4, #21
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	42a6      	cmp	r6, r4
 800ad5e:	bf38      	it	cc
 800ad60:	2304      	movcc	r3, #4
 800ad62:	441d      	add	r5, r3
 800ad64:	445b      	add	r3, fp
 800ad66:	461e      	mov	r6, r3
 800ad68:	462c      	mov	r4, r5
 800ad6a:	4544      	cmp	r4, r8
 800ad6c:	d30e      	bcc.n	800ad8c <__mdiff+0xf8>
 800ad6e:	f108 0103 	add.w	r1, r8, #3
 800ad72:	1b49      	subs	r1, r1, r5
 800ad74:	f021 0103 	bic.w	r1, r1, #3
 800ad78:	3d03      	subs	r5, #3
 800ad7a:	45a8      	cmp	r8, r5
 800ad7c:	bf38      	it	cc
 800ad7e:	2100      	movcc	r1, #0
 800ad80:	440b      	add	r3, r1
 800ad82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad86:	b191      	cbz	r1, 800adae <__mdiff+0x11a>
 800ad88:	6117      	str	r7, [r2, #16]
 800ad8a:	e79d      	b.n	800acc8 <__mdiff+0x34>
 800ad8c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad90:	46e6      	mov	lr, ip
 800ad92:	0c08      	lsrs	r0, r1, #16
 800ad94:	fa1c fc81 	uxtah	ip, ip, r1
 800ad98:	4471      	add	r1, lr
 800ad9a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad9e:	b289      	uxth	r1, r1
 800ada0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ada4:	f846 1b04 	str.w	r1, [r6], #4
 800ada8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800adac:	e7dd      	b.n	800ad6a <__mdiff+0xd6>
 800adae:	3f01      	subs	r7, #1
 800adb0:	e7e7      	b.n	800ad82 <__mdiff+0xee>
 800adb2:	bf00      	nop
 800adb4:	0800c964 	.word	0x0800c964
 800adb8:	0800c975 	.word	0x0800c975

0800adbc <__d2b>:
 800adbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adc0:	460f      	mov	r7, r1
 800adc2:	2101      	movs	r1, #1
 800adc4:	ec59 8b10 	vmov	r8, r9, d0
 800adc8:	4616      	mov	r6, r2
 800adca:	f7ff fccd 	bl	800a768 <_Balloc>
 800adce:	4604      	mov	r4, r0
 800add0:	b930      	cbnz	r0, 800ade0 <__d2b+0x24>
 800add2:	4602      	mov	r2, r0
 800add4:	4b23      	ldr	r3, [pc, #140]	@ (800ae64 <__d2b+0xa8>)
 800add6:	4824      	ldr	r0, [pc, #144]	@ (800ae68 <__d2b+0xac>)
 800add8:	f240 310f 	movw	r1, #783	@ 0x30f
 800addc:	f000 fa82 	bl	800b2e4 <__assert_func>
 800ade0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ade4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ade8:	b10d      	cbz	r5, 800adee <__d2b+0x32>
 800adea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adee:	9301      	str	r3, [sp, #4]
 800adf0:	f1b8 0300 	subs.w	r3, r8, #0
 800adf4:	d023      	beq.n	800ae3e <__d2b+0x82>
 800adf6:	4668      	mov	r0, sp
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	f7ff fd7c 	bl	800a8f6 <__lo0bits>
 800adfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae02:	b1d0      	cbz	r0, 800ae3a <__d2b+0x7e>
 800ae04:	f1c0 0320 	rsb	r3, r0, #32
 800ae08:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0c:	430b      	orrs	r3, r1
 800ae0e:	40c2      	lsrs	r2, r0
 800ae10:	6163      	str	r3, [r4, #20]
 800ae12:	9201      	str	r2, [sp, #4]
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	61a3      	str	r3, [r4, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	bf0c      	ite	eq
 800ae1c:	2201      	moveq	r2, #1
 800ae1e:	2202      	movne	r2, #2
 800ae20:	6122      	str	r2, [r4, #16]
 800ae22:	b1a5      	cbz	r5, 800ae4e <__d2b+0x92>
 800ae24:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae28:	4405      	add	r5, r0
 800ae2a:	603d      	str	r5, [r7, #0]
 800ae2c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae30:	6030      	str	r0, [r6, #0]
 800ae32:	4620      	mov	r0, r4
 800ae34:	b003      	add	sp, #12
 800ae36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae3a:	6161      	str	r1, [r4, #20]
 800ae3c:	e7ea      	b.n	800ae14 <__d2b+0x58>
 800ae3e:	a801      	add	r0, sp, #4
 800ae40:	f7ff fd59 	bl	800a8f6 <__lo0bits>
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	6163      	str	r3, [r4, #20]
 800ae48:	3020      	adds	r0, #32
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	e7e8      	b.n	800ae20 <__d2b+0x64>
 800ae4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae56:	6038      	str	r0, [r7, #0]
 800ae58:	6918      	ldr	r0, [r3, #16]
 800ae5a:	f7ff fd2d 	bl	800a8b8 <__hi0bits>
 800ae5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae62:	e7e5      	b.n	800ae30 <__d2b+0x74>
 800ae64:	0800c964 	.word	0x0800c964
 800ae68:	0800c975 	.word	0x0800c975

0800ae6c <__ssputs_r>:
 800ae6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae70:	688e      	ldr	r6, [r1, #8]
 800ae72:	461f      	mov	r7, r3
 800ae74:	42be      	cmp	r6, r7
 800ae76:	680b      	ldr	r3, [r1, #0]
 800ae78:	4682      	mov	sl, r0
 800ae7a:	460c      	mov	r4, r1
 800ae7c:	4690      	mov	r8, r2
 800ae7e:	d82d      	bhi.n	800aedc <__ssputs_r+0x70>
 800ae80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae88:	d026      	beq.n	800aed8 <__ssputs_r+0x6c>
 800ae8a:	6965      	ldr	r5, [r4, #20]
 800ae8c:	6909      	ldr	r1, [r1, #16]
 800ae8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae92:	eba3 0901 	sub.w	r9, r3, r1
 800ae96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae9a:	1c7b      	adds	r3, r7, #1
 800ae9c:	444b      	add	r3, r9
 800ae9e:	106d      	asrs	r5, r5, #1
 800aea0:	429d      	cmp	r5, r3
 800aea2:	bf38      	it	cc
 800aea4:	461d      	movcc	r5, r3
 800aea6:	0553      	lsls	r3, r2, #21
 800aea8:	d527      	bpl.n	800aefa <__ssputs_r+0x8e>
 800aeaa:	4629      	mov	r1, r5
 800aeac:	f7ff fbd0 	bl	800a650 <_malloc_r>
 800aeb0:	4606      	mov	r6, r0
 800aeb2:	b360      	cbz	r0, 800af0e <__ssputs_r+0xa2>
 800aeb4:	6921      	ldr	r1, [r4, #16]
 800aeb6:	464a      	mov	r2, r9
 800aeb8:	f000 fa06 	bl	800b2c8 <memcpy>
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aec6:	81a3      	strh	r3, [r4, #12]
 800aec8:	6126      	str	r6, [r4, #16]
 800aeca:	6165      	str	r5, [r4, #20]
 800aecc:	444e      	add	r6, r9
 800aece:	eba5 0509 	sub.w	r5, r5, r9
 800aed2:	6026      	str	r6, [r4, #0]
 800aed4:	60a5      	str	r5, [r4, #8]
 800aed6:	463e      	mov	r6, r7
 800aed8:	42be      	cmp	r6, r7
 800aeda:	d900      	bls.n	800aede <__ssputs_r+0x72>
 800aedc:	463e      	mov	r6, r7
 800aede:	6820      	ldr	r0, [r4, #0]
 800aee0:	4632      	mov	r2, r6
 800aee2:	4641      	mov	r1, r8
 800aee4:	f000 f9c6 	bl	800b274 <memmove>
 800aee8:	68a3      	ldr	r3, [r4, #8]
 800aeea:	1b9b      	subs	r3, r3, r6
 800aeec:	60a3      	str	r3, [r4, #8]
 800aeee:	6823      	ldr	r3, [r4, #0]
 800aef0:	4433      	add	r3, r6
 800aef2:	6023      	str	r3, [r4, #0]
 800aef4:	2000      	movs	r0, #0
 800aef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aefa:	462a      	mov	r2, r5
 800aefc:	f000 fa36 	bl	800b36c <_realloc_r>
 800af00:	4606      	mov	r6, r0
 800af02:	2800      	cmp	r0, #0
 800af04:	d1e0      	bne.n	800aec8 <__ssputs_r+0x5c>
 800af06:	6921      	ldr	r1, [r4, #16]
 800af08:	4650      	mov	r0, sl
 800af0a:	f7ff fb2d 	bl	800a568 <_free_r>
 800af0e:	230c      	movs	r3, #12
 800af10:	f8ca 3000 	str.w	r3, [sl]
 800af14:	89a3      	ldrh	r3, [r4, #12]
 800af16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af1a:	81a3      	strh	r3, [r4, #12]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e7e9      	b.n	800aef6 <__ssputs_r+0x8a>
	...

0800af24 <_svfiprintf_r>:
 800af24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af28:	4698      	mov	r8, r3
 800af2a:	898b      	ldrh	r3, [r1, #12]
 800af2c:	061b      	lsls	r3, r3, #24
 800af2e:	b09d      	sub	sp, #116	@ 0x74
 800af30:	4607      	mov	r7, r0
 800af32:	460d      	mov	r5, r1
 800af34:	4614      	mov	r4, r2
 800af36:	d510      	bpl.n	800af5a <_svfiprintf_r+0x36>
 800af38:	690b      	ldr	r3, [r1, #16]
 800af3a:	b973      	cbnz	r3, 800af5a <_svfiprintf_r+0x36>
 800af3c:	2140      	movs	r1, #64	@ 0x40
 800af3e:	f7ff fb87 	bl	800a650 <_malloc_r>
 800af42:	6028      	str	r0, [r5, #0]
 800af44:	6128      	str	r0, [r5, #16]
 800af46:	b930      	cbnz	r0, 800af56 <_svfiprintf_r+0x32>
 800af48:	230c      	movs	r3, #12
 800af4a:	603b      	str	r3, [r7, #0]
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295
 800af50:	b01d      	add	sp, #116	@ 0x74
 800af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af56:	2340      	movs	r3, #64	@ 0x40
 800af58:	616b      	str	r3, [r5, #20]
 800af5a:	2300      	movs	r3, #0
 800af5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af5e:	2320      	movs	r3, #32
 800af60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af64:	f8cd 800c 	str.w	r8, [sp, #12]
 800af68:	2330      	movs	r3, #48	@ 0x30
 800af6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b108 <_svfiprintf_r+0x1e4>
 800af6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af72:	f04f 0901 	mov.w	r9, #1
 800af76:	4623      	mov	r3, r4
 800af78:	469a      	mov	sl, r3
 800af7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af7e:	b10a      	cbz	r2, 800af84 <_svfiprintf_r+0x60>
 800af80:	2a25      	cmp	r2, #37	@ 0x25
 800af82:	d1f9      	bne.n	800af78 <_svfiprintf_r+0x54>
 800af84:	ebba 0b04 	subs.w	fp, sl, r4
 800af88:	d00b      	beq.n	800afa2 <_svfiprintf_r+0x7e>
 800af8a:	465b      	mov	r3, fp
 800af8c:	4622      	mov	r2, r4
 800af8e:	4629      	mov	r1, r5
 800af90:	4638      	mov	r0, r7
 800af92:	f7ff ff6b 	bl	800ae6c <__ssputs_r>
 800af96:	3001      	adds	r0, #1
 800af98:	f000 80a7 	beq.w	800b0ea <_svfiprintf_r+0x1c6>
 800af9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af9e:	445a      	add	r2, fp
 800afa0:	9209      	str	r2, [sp, #36]	@ 0x24
 800afa2:	f89a 3000 	ldrb.w	r3, [sl]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	f000 809f 	beq.w	800b0ea <_svfiprintf_r+0x1c6>
 800afac:	2300      	movs	r3, #0
 800afae:	f04f 32ff 	mov.w	r2, #4294967295
 800afb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afb6:	f10a 0a01 	add.w	sl, sl, #1
 800afba:	9304      	str	r3, [sp, #16]
 800afbc:	9307      	str	r3, [sp, #28]
 800afbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800afc4:	4654      	mov	r4, sl
 800afc6:	2205      	movs	r2, #5
 800afc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afcc:	484e      	ldr	r0, [pc, #312]	@ (800b108 <_svfiprintf_r+0x1e4>)
 800afce:	f7f5 f907 	bl	80001e0 <memchr>
 800afd2:	9a04      	ldr	r2, [sp, #16]
 800afd4:	b9d8      	cbnz	r0, 800b00e <_svfiprintf_r+0xea>
 800afd6:	06d0      	lsls	r0, r2, #27
 800afd8:	bf44      	itt	mi
 800afda:	2320      	movmi	r3, #32
 800afdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afe0:	0711      	lsls	r1, r2, #28
 800afe2:	bf44      	itt	mi
 800afe4:	232b      	movmi	r3, #43	@ 0x2b
 800afe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afea:	f89a 3000 	ldrb.w	r3, [sl]
 800afee:	2b2a      	cmp	r3, #42	@ 0x2a
 800aff0:	d015      	beq.n	800b01e <_svfiprintf_r+0xfa>
 800aff2:	9a07      	ldr	r2, [sp, #28]
 800aff4:	4654      	mov	r4, sl
 800aff6:	2000      	movs	r0, #0
 800aff8:	f04f 0c0a 	mov.w	ip, #10
 800affc:	4621      	mov	r1, r4
 800affe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b002:	3b30      	subs	r3, #48	@ 0x30
 800b004:	2b09      	cmp	r3, #9
 800b006:	d94b      	bls.n	800b0a0 <_svfiprintf_r+0x17c>
 800b008:	b1b0      	cbz	r0, 800b038 <_svfiprintf_r+0x114>
 800b00a:	9207      	str	r2, [sp, #28]
 800b00c:	e014      	b.n	800b038 <_svfiprintf_r+0x114>
 800b00e:	eba0 0308 	sub.w	r3, r0, r8
 800b012:	fa09 f303 	lsl.w	r3, r9, r3
 800b016:	4313      	orrs	r3, r2
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	46a2      	mov	sl, r4
 800b01c:	e7d2      	b.n	800afc4 <_svfiprintf_r+0xa0>
 800b01e:	9b03      	ldr	r3, [sp, #12]
 800b020:	1d19      	adds	r1, r3, #4
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	9103      	str	r1, [sp, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	bfbb      	ittet	lt
 800b02a:	425b      	neglt	r3, r3
 800b02c:	f042 0202 	orrlt.w	r2, r2, #2
 800b030:	9307      	strge	r3, [sp, #28]
 800b032:	9307      	strlt	r3, [sp, #28]
 800b034:	bfb8      	it	lt
 800b036:	9204      	strlt	r2, [sp, #16]
 800b038:	7823      	ldrb	r3, [r4, #0]
 800b03a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b03c:	d10a      	bne.n	800b054 <_svfiprintf_r+0x130>
 800b03e:	7863      	ldrb	r3, [r4, #1]
 800b040:	2b2a      	cmp	r3, #42	@ 0x2a
 800b042:	d132      	bne.n	800b0aa <_svfiprintf_r+0x186>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	1d1a      	adds	r2, r3, #4
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	9203      	str	r2, [sp, #12]
 800b04c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b050:	3402      	adds	r4, #2
 800b052:	9305      	str	r3, [sp, #20]
 800b054:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b118 <_svfiprintf_r+0x1f4>
 800b058:	7821      	ldrb	r1, [r4, #0]
 800b05a:	2203      	movs	r2, #3
 800b05c:	4650      	mov	r0, sl
 800b05e:	f7f5 f8bf 	bl	80001e0 <memchr>
 800b062:	b138      	cbz	r0, 800b074 <_svfiprintf_r+0x150>
 800b064:	9b04      	ldr	r3, [sp, #16]
 800b066:	eba0 000a 	sub.w	r0, r0, sl
 800b06a:	2240      	movs	r2, #64	@ 0x40
 800b06c:	4082      	lsls	r2, r0
 800b06e:	4313      	orrs	r3, r2
 800b070:	3401      	adds	r4, #1
 800b072:	9304      	str	r3, [sp, #16]
 800b074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b078:	4824      	ldr	r0, [pc, #144]	@ (800b10c <_svfiprintf_r+0x1e8>)
 800b07a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b07e:	2206      	movs	r2, #6
 800b080:	f7f5 f8ae 	bl	80001e0 <memchr>
 800b084:	2800      	cmp	r0, #0
 800b086:	d036      	beq.n	800b0f6 <_svfiprintf_r+0x1d2>
 800b088:	4b21      	ldr	r3, [pc, #132]	@ (800b110 <_svfiprintf_r+0x1ec>)
 800b08a:	bb1b      	cbnz	r3, 800b0d4 <_svfiprintf_r+0x1b0>
 800b08c:	9b03      	ldr	r3, [sp, #12]
 800b08e:	3307      	adds	r3, #7
 800b090:	f023 0307 	bic.w	r3, r3, #7
 800b094:	3308      	adds	r3, #8
 800b096:	9303      	str	r3, [sp, #12]
 800b098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b09a:	4433      	add	r3, r6
 800b09c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b09e:	e76a      	b.n	800af76 <_svfiprintf_r+0x52>
 800b0a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b0a4:	460c      	mov	r4, r1
 800b0a6:	2001      	movs	r0, #1
 800b0a8:	e7a8      	b.n	800affc <_svfiprintf_r+0xd8>
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	3401      	adds	r4, #1
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	f04f 0c0a 	mov.w	ip, #10
 800b0b6:	4620      	mov	r0, r4
 800b0b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0bc:	3a30      	subs	r2, #48	@ 0x30
 800b0be:	2a09      	cmp	r2, #9
 800b0c0:	d903      	bls.n	800b0ca <_svfiprintf_r+0x1a6>
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d0c6      	beq.n	800b054 <_svfiprintf_r+0x130>
 800b0c6:	9105      	str	r1, [sp, #20]
 800b0c8:	e7c4      	b.n	800b054 <_svfiprintf_r+0x130>
 800b0ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e7f0      	b.n	800b0b6 <_svfiprintf_r+0x192>
 800b0d4:	ab03      	add	r3, sp, #12
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	462a      	mov	r2, r5
 800b0da:	4b0e      	ldr	r3, [pc, #56]	@ (800b114 <_svfiprintf_r+0x1f0>)
 800b0dc:	a904      	add	r1, sp, #16
 800b0de:	4638      	mov	r0, r7
 800b0e0:	f7fd fe98 	bl	8008e14 <_printf_float>
 800b0e4:	1c42      	adds	r2, r0, #1
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	d1d6      	bne.n	800b098 <_svfiprintf_r+0x174>
 800b0ea:	89ab      	ldrh	r3, [r5, #12]
 800b0ec:	065b      	lsls	r3, r3, #25
 800b0ee:	f53f af2d 	bmi.w	800af4c <_svfiprintf_r+0x28>
 800b0f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0f4:	e72c      	b.n	800af50 <_svfiprintf_r+0x2c>
 800b0f6:	ab03      	add	r3, sp, #12
 800b0f8:	9300      	str	r3, [sp, #0]
 800b0fa:	462a      	mov	r2, r5
 800b0fc:	4b05      	ldr	r3, [pc, #20]	@ (800b114 <_svfiprintf_r+0x1f0>)
 800b0fe:	a904      	add	r1, sp, #16
 800b100:	4638      	mov	r0, r7
 800b102:	f7fe f91f 	bl	8009344 <_printf_i>
 800b106:	e7ed      	b.n	800b0e4 <_svfiprintf_r+0x1c0>
 800b108:	0800cad0 	.word	0x0800cad0
 800b10c:	0800cada 	.word	0x0800cada
 800b110:	08008e15 	.word	0x08008e15
 800b114:	0800ae6d 	.word	0x0800ae6d
 800b118:	0800cad6 	.word	0x0800cad6

0800b11c <__sflush_r>:
 800b11c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b124:	0716      	lsls	r6, r2, #28
 800b126:	4605      	mov	r5, r0
 800b128:	460c      	mov	r4, r1
 800b12a:	d454      	bmi.n	800b1d6 <__sflush_r+0xba>
 800b12c:	684b      	ldr	r3, [r1, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	dc02      	bgt.n	800b138 <__sflush_r+0x1c>
 800b132:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b134:	2b00      	cmp	r3, #0
 800b136:	dd48      	ble.n	800b1ca <__sflush_r+0xae>
 800b138:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b13a:	2e00      	cmp	r6, #0
 800b13c:	d045      	beq.n	800b1ca <__sflush_r+0xae>
 800b13e:	2300      	movs	r3, #0
 800b140:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b144:	682f      	ldr	r7, [r5, #0]
 800b146:	6a21      	ldr	r1, [r4, #32]
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	d030      	beq.n	800b1ae <__sflush_r+0x92>
 800b14c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	0759      	lsls	r1, r3, #29
 800b152:	d505      	bpl.n	800b160 <__sflush_r+0x44>
 800b154:	6863      	ldr	r3, [r4, #4]
 800b156:	1ad2      	subs	r2, r2, r3
 800b158:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b15a:	b10b      	cbz	r3, 800b160 <__sflush_r+0x44>
 800b15c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b15e:	1ad2      	subs	r2, r2, r3
 800b160:	2300      	movs	r3, #0
 800b162:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b164:	6a21      	ldr	r1, [r4, #32]
 800b166:	4628      	mov	r0, r5
 800b168:	47b0      	blx	r6
 800b16a:	1c43      	adds	r3, r0, #1
 800b16c:	89a3      	ldrh	r3, [r4, #12]
 800b16e:	d106      	bne.n	800b17e <__sflush_r+0x62>
 800b170:	6829      	ldr	r1, [r5, #0]
 800b172:	291d      	cmp	r1, #29
 800b174:	d82b      	bhi.n	800b1ce <__sflush_r+0xb2>
 800b176:	4a2a      	ldr	r2, [pc, #168]	@ (800b220 <__sflush_r+0x104>)
 800b178:	410a      	asrs	r2, r1
 800b17a:	07d6      	lsls	r6, r2, #31
 800b17c:	d427      	bmi.n	800b1ce <__sflush_r+0xb2>
 800b17e:	2200      	movs	r2, #0
 800b180:	6062      	str	r2, [r4, #4]
 800b182:	04d9      	lsls	r1, r3, #19
 800b184:	6922      	ldr	r2, [r4, #16]
 800b186:	6022      	str	r2, [r4, #0]
 800b188:	d504      	bpl.n	800b194 <__sflush_r+0x78>
 800b18a:	1c42      	adds	r2, r0, #1
 800b18c:	d101      	bne.n	800b192 <__sflush_r+0x76>
 800b18e:	682b      	ldr	r3, [r5, #0]
 800b190:	b903      	cbnz	r3, 800b194 <__sflush_r+0x78>
 800b192:	6560      	str	r0, [r4, #84]	@ 0x54
 800b194:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b196:	602f      	str	r7, [r5, #0]
 800b198:	b1b9      	cbz	r1, 800b1ca <__sflush_r+0xae>
 800b19a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b19e:	4299      	cmp	r1, r3
 800b1a0:	d002      	beq.n	800b1a8 <__sflush_r+0x8c>
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f7ff f9e0 	bl	800a568 <_free_r>
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1ac:	e00d      	b.n	800b1ca <__sflush_r+0xae>
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	4628      	mov	r0, r5
 800b1b2:	47b0      	blx	r6
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	1c50      	adds	r0, r2, #1
 800b1b8:	d1c9      	bne.n	800b14e <__sflush_r+0x32>
 800b1ba:	682b      	ldr	r3, [r5, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d0c6      	beq.n	800b14e <__sflush_r+0x32>
 800b1c0:	2b1d      	cmp	r3, #29
 800b1c2:	d001      	beq.n	800b1c8 <__sflush_r+0xac>
 800b1c4:	2b16      	cmp	r3, #22
 800b1c6:	d11e      	bne.n	800b206 <__sflush_r+0xea>
 800b1c8:	602f      	str	r7, [r5, #0]
 800b1ca:	2000      	movs	r0, #0
 800b1cc:	e022      	b.n	800b214 <__sflush_r+0xf8>
 800b1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1d2:	b21b      	sxth	r3, r3
 800b1d4:	e01b      	b.n	800b20e <__sflush_r+0xf2>
 800b1d6:	690f      	ldr	r7, [r1, #16]
 800b1d8:	2f00      	cmp	r7, #0
 800b1da:	d0f6      	beq.n	800b1ca <__sflush_r+0xae>
 800b1dc:	0793      	lsls	r3, r2, #30
 800b1de:	680e      	ldr	r6, [r1, #0]
 800b1e0:	bf08      	it	eq
 800b1e2:	694b      	ldreq	r3, [r1, #20]
 800b1e4:	600f      	str	r7, [r1, #0]
 800b1e6:	bf18      	it	ne
 800b1e8:	2300      	movne	r3, #0
 800b1ea:	eba6 0807 	sub.w	r8, r6, r7
 800b1ee:	608b      	str	r3, [r1, #8]
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	dde9      	ble.n	800b1ca <__sflush_r+0xae>
 800b1f6:	6a21      	ldr	r1, [r4, #32]
 800b1f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1fa:	4643      	mov	r3, r8
 800b1fc:	463a      	mov	r2, r7
 800b1fe:	4628      	mov	r0, r5
 800b200:	47b0      	blx	r6
 800b202:	2800      	cmp	r0, #0
 800b204:	dc08      	bgt.n	800b218 <__sflush_r+0xfc>
 800b206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b20a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b20e:	81a3      	strh	r3, [r4, #12]
 800b210:	f04f 30ff 	mov.w	r0, #4294967295
 800b214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b218:	4407      	add	r7, r0
 800b21a:	eba8 0800 	sub.w	r8, r8, r0
 800b21e:	e7e7      	b.n	800b1f0 <__sflush_r+0xd4>
 800b220:	dfbffffe 	.word	0xdfbffffe

0800b224 <_fflush_r>:
 800b224:	b538      	push	{r3, r4, r5, lr}
 800b226:	690b      	ldr	r3, [r1, #16]
 800b228:	4605      	mov	r5, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	b913      	cbnz	r3, 800b234 <_fflush_r+0x10>
 800b22e:	2500      	movs	r5, #0
 800b230:	4628      	mov	r0, r5
 800b232:	bd38      	pop	{r3, r4, r5, pc}
 800b234:	b118      	cbz	r0, 800b23e <_fflush_r+0x1a>
 800b236:	6a03      	ldr	r3, [r0, #32]
 800b238:	b90b      	cbnz	r3, 800b23e <_fflush_r+0x1a>
 800b23a:	f7fe fa2f 	bl	800969c <__sinit>
 800b23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0f3      	beq.n	800b22e <_fflush_r+0xa>
 800b246:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b248:	07d0      	lsls	r0, r2, #31
 800b24a:	d404      	bmi.n	800b256 <_fflush_r+0x32>
 800b24c:	0599      	lsls	r1, r3, #22
 800b24e:	d402      	bmi.n	800b256 <_fflush_r+0x32>
 800b250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b252:	f7fe fb3a 	bl	80098ca <__retarget_lock_acquire_recursive>
 800b256:	4628      	mov	r0, r5
 800b258:	4621      	mov	r1, r4
 800b25a:	f7ff ff5f 	bl	800b11c <__sflush_r>
 800b25e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b260:	07da      	lsls	r2, r3, #31
 800b262:	4605      	mov	r5, r0
 800b264:	d4e4      	bmi.n	800b230 <_fflush_r+0xc>
 800b266:	89a3      	ldrh	r3, [r4, #12]
 800b268:	059b      	lsls	r3, r3, #22
 800b26a:	d4e1      	bmi.n	800b230 <_fflush_r+0xc>
 800b26c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b26e:	f7fe fb2d 	bl	80098cc <__retarget_lock_release_recursive>
 800b272:	e7dd      	b.n	800b230 <_fflush_r+0xc>

0800b274 <memmove>:
 800b274:	4288      	cmp	r0, r1
 800b276:	b510      	push	{r4, lr}
 800b278:	eb01 0402 	add.w	r4, r1, r2
 800b27c:	d902      	bls.n	800b284 <memmove+0x10>
 800b27e:	4284      	cmp	r4, r0
 800b280:	4623      	mov	r3, r4
 800b282:	d807      	bhi.n	800b294 <memmove+0x20>
 800b284:	1e43      	subs	r3, r0, #1
 800b286:	42a1      	cmp	r1, r4
 800b288:	d008      	beq.n	800b29c <memmove+0x28>
 800b28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b28e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b292:	e7f8      	b.n	800b286 <memmove+0x12>
 800b294:	4402      	add	r2, r0
 800b296:	4601      	mov	r1, r0
 800b298:	428a      	cmp	r2, r1
 800b29a:	d100      	bne.n	800b29e <memmove+0x2a>
 800b29c:	bd10      	pop	{r4, pc}
 800b29e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2a6:	e7f7      	b.n	800b298 <memmove+0x24>

0800b2a8 <_sbrk_r>:
 800b2a8:	b538      	push	{r3, r4, r5, lr}
 800b2aa:	4d06      	ldr	r5, [pc, #24]	@ (800b2c4 <_sbrk_r+0x1c>)
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	4604      	mov	r4, r0
 800b2b0:	4608      	mov	r0, r1
 800b2b2:	602b      	str	r3, [r5, #0]
 800b2b4:	f7f6 f9e8 	bl	8001688 <_sbrk>
 800b2b8:	1c43      	adds	r3, r0, #1
 800b2ba:	d102      	bne.n	800b2c2 <_sbrk_r+0x1a>
 800b2bc:	682b      	ldr	r3, [r5, #0]
 800b2be:	b103      	cbz	r3, 800b2c2 <_sbrk_r+0x1a>
 800b2c0:	6023      	str	r3, [r4, #0]
 800b2c2:	bd38      	pop	{r3, r4, r5, pc}
 800b2c4:	200020f0 	.word	0x200020f0

0800b2c8 <memcpy>:
 800b2c8:	440a      	add	r2, r1
 800b2ca:	4291      	cmp	r1, r2
 800b2cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2d0:	d100      	bne.n	800b2d4 <memcpy+0xc>
 800b2d2:	4770      	bx	lr
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2de:	4291      	cmp	r1, r2
 800b2e0:	d1f9      	bne.n	800b2d6 <memcpy+0xe>
 800b2e2:	bd10      	pop	{r4, pc}

0800b2e4 <__assert_func>:
 800b2e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2e6:	4614      	mov	r4, r2
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	4b09      	ldr	r3, [pc, #36]	@ (800b310 <__assert_func+0x2c>)
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	68d8      	ldr	r0, [r3, #12]
 800b2f2:	b954      	cbnz	r4, 800b30a <__assert_func+0x26>
 800b2f4:	4b07      	ldr	r3, [pc, #28]	@ (800b314 <__assert_func+0x30>)
 800b2f6:	461c      	mov	r4, r3
 800b2f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2fc:	9100      	str	r1, [sp, #0]
 800b2fe:	462b      	mov	r3, r5
 800b300:	4905      	ldr	r1, [pc, #20]	@ (800b318 <__assert_func+0x34>)
 800b302:	f000 f86f 	bl	800b3e4 <fiprintf>
 800b306:	f000 f87f 	bl	800b408 <abort>
 800b30a:	4b04      	ldr	r3, [pc, #16]	@ (800b31c <__assert_func+0x38>)
 800b30c:	e7f4      	b.n	800b2f8 <__assert_func+0x14>
 800b30e:	bf00      	nop
 800b310:	20000108 	.word	0x20000108
 800b314:	0800cb26 	.word	0x0800cb26
 800b318:	0800caf8 	.word	0x0800caf8
 800b31c:	0800caeb 	.word	0x0800caeb

0800b320 <_calloc_r>:
 800b320:	b570      	push	{r4, r5, r6, lr}
 800b322:	fba1 5402 	umull	r5, r4, r1, r2
 800b326:	b93c      	cbnz	r4, 800b338 <_calloc_r+0x18>
 800b328:	4629      	mov	r1, r5
 800b32a:	f7ff f991 	bl	800a650 <_malloc_r>
 800b32e:	4606      	mov	r6, r0
 800b330:	b928      	cbnz	r0, 800b33e <_calloc_r+0x1e>
 800b332:	2600      	movs	r6, #0
 800b334:	4630      	mov	r0, r6
 800b336:	bd70      	pop	{r4, r5, r6, pc}
 800b338:	220c      	movs	r2, #12
 800b33a:	6002      	str	r2, [r0, #0]
 800b33c:	e7f9      	b.n	800b332 <_calloc_r+0x12>
 800b33e:	462a      	mov	r2, r5
 800b340:	4621      	mov	r1, r4
 800b342:	f7fe fa44 	bl	80097ce <memset>
 800b346:	e7f5      	b.n	800b334 <_calloc_r+0x14>

0800b348 <__ascii_mbtowc>:
 800b348:	b082      	sub	sp, #8
 800b34a:	b901      	cbnz	r1, 800b34e <__ascii_mbtowc+0x6>
 800b34c:	a901      	add	r1, sp, #4
 800b34e:	b142      	cbz	r2, 800b362 <__ascii_mbtowc+0x1a>
 800b350:	b14b      	cbz	r3, 800b366 <__ascii_mbtowc+0x1e>
 800b352:	7813      	ldrb	r3, [r2, #0]
 800b354:	600b      	str	r3, [r1, #0]
 800b356:	7812      	ldrb	r2, [r2, #0]
 800b358:	1e10      	subs	r0, r2, #0
 800b35a:	bf18      	it	ne
 800b35c:	2001      	movne	r0, #1
 800b35e:	b002      	add	sp, #8
 800b360:	4770      	bx	lr
 800b362:	4610      	mov	r0, r2
 800b364:	e7fb      	b.n	800b35e <__ascii_mbtowc+0x16>
 800b366:	f06f 0001 	mvn.w	r0, #1
 800b36a:	e7f8      	b.n	800b35e <__ascii_mbtowc+0x16>

0800b36c <_realloc_r>:
 800b36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b370:	4680      	mov	r8, r0
 800b372:	4615      	mov	r5, r2
 800b374:	460c      	mov	r4, r1
 800b376:	b921      	cbnz	r1, 800b382 <_realloc_r+0x16>
 800b378:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b37c:	4611      	mov	r1, r2
 800b37e:	f7ff b967 	b.w	800a650 <_malloc_r>
 800b382:	b92a      	cbnz	r2, 800b390 <_realloc_r+0x24>
 800b384:	f7ff f8f0 	bl	800a568 <_free_r>
 800b388:	2400      	movs	r4, #0
 800b38a:	4620      	mov	r0, r4
 800b38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b390:	f000 f841 	bl	800b416 <_malloc_usable_size_r>
 800b394:	4285      	cmp	r5, r0
 800b396:	4606      	mov	r6, r0
 800b398:	d802      	bhi.n	800b3a0 <_realloc_r+0x34>
 800b39a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b39e:	d8f4      	bhi.n	800b38a <_realloc_r+0x1e>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	f7ff f954 	bl	800a650 <_malloc_r>
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d0ec      	beq.n	800b388 <_realloc_r+0x1c>
 800b3ae:	42b5      	cmp	r5, r6
 800b3b0:	462a      	mov	r2, r5
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	bf28      	it	cs
 800b3b6:	4632      	movcs	r2, r6
 800b3b8:	f7ff ff86 	bl	800b2c8 <memcpy>
 800b3bc:	4621      	mov	r1, r4
 800b3be:	4640      	mov	r0, r8
 800b3c0:	f7ff f8d2 	bl	800a568 <_free_r>
 800b3c4:	463c      	mov	r4, r7
 800b3c6:	e7e0      	b.n	800b38a <_realloc_r+0x1e>

0800b3c8 <__ascii_wctomb>:
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	4608      	mov	r0, r1
 800b3cc:	b141      	cbz	r1, 800b3e0 <__ascii_wctomb+0x18>
 800b3ce:	2aff      	cmp	r2, #255	@ 0xff
 800b3d0:	d904      	bls.n	800b3dc <__ascii_wctomb+0x14>
 800b3d2:	228a      	movs	r2, #138	@ 0x8a
 800b3d4:	601a      	str	r2, [r3, #0]
 800b3d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3da:	4770      	bx	lr
 800b3dc:	700a      	strb	r2, [r1, #0]
 800b3de:	2001      	movs	r0, #1
 800b3e0:	4770      	bx	lr
	...

0800b3e4 <fiprintf>:
 800b3e4:	b40e      	push	{r1, r2, r3}
 800b3e6:	b503      	push	{r0, r1, lr}
 800b3e8:	4601      	mov	r1, r0
 800b3ea:	ab03      	add	r3, sp, #12
 800b3ec:	4805      	ldr	r0, [pc, #20]	@ (800b404 <fiprintf+0x20>)
 800b3ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3f2:	6800      	ldr	r0, [r0, #0]
 800b3f4:	9301      	str	r3, [sp, #4]
 800b3f6:	f000 f83f 	bl	800b478 <_vfiprintf_r>
 800b3fa:	b002      	add	sp, #8
 800b3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b400:	b003      	add	sp, #12
 800b402:	4770      	bx	lr
 800b404:	20000108 	.word	0x20000108

0800b408 <abort>:
 800b408:	b508      	push	{r3, lr}
 800b40a:	2006      	movs	r0, #6
 800b40c:	f000 fa08 	bl	800b820 <raise>
 800b410:	2001      	movs	r0, #1
 800b412:	f7f6 f8c1 	bl	8001598 <_exit>

0800b416 <_malloc_usable_size_r>:
 800b416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b41a:	1f18      	subs	r0, r3, #4
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	bfbc      	itt	lt
 800b420:	580b      	ldrlt	r3, [r1, r0]
 800b422:	18c0      	addlt	r0, r0, r3
 800b424:	4770      	bx	lr

0800b426 <__sfputc_r>:
 800b426:	6893      	ldr	r3, [r2, #8]
 800b428:	3b01      	subs	r3, #1
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	b410      	push	{r4}
 800b42e:	6093      	str	r3, [r2, #8]
 800b430:	da08      	bge.n	800b444 <__sfputc_r+0x1e>
 800b432:	6994      	ldr	r4, [r2, #24]
 800b434:	42a3      	cmp	r3, r4
 800b436:	db01      	blt.n	800b43c <__sfputc_r+0x16>
 800b438:	290a      	cmp	r1, #10
 800b43a:	d103      	bne.n	800b444 <__sfputc_r+0x1e>
 800b43c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b440:	f000 b932 	b.w	800b6a8 <__swbuf_r>
 800b444:	6813      	ldr	r3, [r2, #0]
 800b446:	1c58      	adds	r0, r3, #1
 800b448:	6010      	str	r0, [r2, #0]
 800b44a:	7019      	strb	r1, [r3, #0]
 800b44c:	4608      	mov	r0, r1
 800b44e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <__sfputs_r>:
 800b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b456:	4606      	mov	r6, r0
 800b458:	460f      	mov	r7, r1
 800b45a:	4614      	mov	r4, r2
 800b45c:	18d5      	adds	r5, r2, r3
 800b45e:	42ac      	cmp	r4, r5
 800b460:	d101      	bne.n	800b466 <__sfputs_r+0x12>
 800b462:	2000      	movs	r0, #0
 800b464:	e007      	b.n	800b476 <__sfputs_r+0x22>
 800b466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b46a:	463a      	mov	r2, r7
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7ff ffda 	bl	800b426 <__sfputc_r>
 800b472:	1c43      	adds	r3, r0, #1
 800b474:	d1f3      	bne.n	800b45e <__sfputs_r+0xa>
 800b476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b478 <_vfiprintf_r>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	460d      	mov	r5, r1
 800b47e:	b09d      	sub	sp, #116	@ 0x74
 800b480:	4614      	mov	r4, r2
 800b482:	4698      	mov	r8, r3
 800b484:	4606      	mov	r6, r0
 800b486:	b118      	cbz	r0, 800b490 <_vfiprintf_r+0x18>
 800b488:	6a03      	ldr	r3, [r0, #32]
 800b48a:	b90b      	cbnz	r3, 800b490 <_vfiprintf_r+0x18>
 800b48c:	f7fe f906 	bl	800969c <__sinit>
 800b490:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b492:	07d9      	lsls	r1, r3, #31
 800b494:	d405      	bmi.n	800b4a2 <_vfiprintf_r+0x2a>
 800b496:	89ab      	ldrh	r3, [r5, #12]
 800b498:	059a      	lsls	r2, r3, #22
 800b49a:	d402      	bmi.n	800b4a2 <_vfiprintf_r+0x2a>
 800b49c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b49e:	f7fe fa14 	bl	80098ca <__retarget_lock_acquire_recursive>
 800b4a2:	89ab      	ldrh	r3, [r5, #12]
 800b4a4:	071b      	lsls	r3, r3, #28
 800b4a6:	d501      	bpl.n	800b4ac <_vfiprintf_r+0x34>
 800b4a8:	692b      	ldr	r3, [r5, #16]
 800b4aa:	b99b      	cbnz	r3, 800b4d4 <_vfiprintf_r+0x5c>
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f000 f938 	bl	800b724 <__swsetup_r>
 800b4b4:	b170      	cbz	r0, 800b4d4 <_vfiprintf_r+0x5c>
 800b4b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4b8:	07dc      	lsls	r4, r3, #31
 800b4ba:	d504      	bpl.n	800b4c6 <_vfiprintf_r+0x4e>
 800b4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b4c0:	b01d      	add	sp, #116	@ 0x74
 800b4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c6:	89ab      	ldrh	r3, [r5, #12]
 800b4c8:	0598      	lsls	r0, r3, #22
 800b4ca:	d4f7      	bmi.n	800b4bc <_vfiprintf_r+0x44>
 800b4cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4ce:	f7fe f9fd 	bl	80098cc <__retarget_lock_release_recursive>
 800b4d2:	e7f3      	b.n	800b4bc <_vfiprintf_r+0x44>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d8:	2320      	movs	r3, #32
 800b4da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4de:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4e2:	2330      	movs	r3, #48	@ 0x30
 800b4e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b694 <_vfiprintf_r+0x21c>
 800b4e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4ec:	f04f 0901 	mov.w	r9, #1
 800b4f0:	4623      	mov	r3, r4
 800b4f2:	469a      	mov	sl, r3
 800b4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4f8:	b10a      	cbz	r2, 800b4fe <_vfiprintf_r+0x86>
 800b4fa:	2a25      	cmp	r2, #37	@ 0x25
 800b4fc:	d1f9      	bne.n	800b4f2 <_vfiprintf_r+0x7a>
 800b4fe:	ebba 0b04 	subs.w	fp, sl, r4
 800b502:	d00b      	beq.n	800b51c <_vfiprintf_r+0xa4>
 800b504:	465b      	mov	r3, fp
 800b506:	4622      	mov	r2, r4
 800b508:	4629      	mov	r1, r5
 800b50a:	4630      	mov	r0, r6
 800b50c:	f7ff ffa2 	bl	800b454 <__sfputs_r>
 800b510:	3001      	adds	r0, #1
 800b512:	f000 80a7 	beq.w	800b664 <_vfiprintf_r+0x1ec>
 800b516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b518:	445a      	add	r2, fp
 800b51a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b51c:	f89a 3000 	ldrb.w	r3, [sl]
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 809f 	beq.w	800b664 <_vfiprintf_r+0x1ec>
 800b526:	2300      	movs	r3, #0
 800b528:	f04f 32ff 	mov.w	r2, #4294967295
 800b52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b530:	f10a 0a01 	add.w	sl, sl, #1
 800b534:	9304      	str	r3, [sp, #16]
 800b536:	9307      	str	r3, [sp, #28]
 800b538:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b53c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b53e:	4654      	mov	r4, sl
 800b540:	2205      	movs	r2, #5
 800b542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b546:	4853      	ldr	r0, [pc, #332]	@ (800b694 <_vfiprintf_r+0x21c>)
 800b548:	f7f4 fe4a 	bl	80001e0 <memchr>
 800b54c:	9a04      	ldr	r2, [sp, #16]
 800b54e:	b9d8      	cbnz	r0, 800b588 <_vfiprintf_r+0x110>
 800b550:	06d1      	lsls	r1, r2, #27
 800b552:	bf44      	itt	mi
 800b554:	2320      	movmi	r3, #32
 800b556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b55a:	0713      	lsls	r3, r2, #28
 800b55c:	bf44      	itt	mi
 800b55e:	232b      	movmi	r3, #43	@ 0x2b
 800b560:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b564:	f89a 3000 	ldrb.w	r3, [sl]
 800b568:	2b2a      	cmp	r3, #42	@ 0x2a
 800b56a:	d015      	beq.n	800b598 <_vfiprintf_r+0x120>
 800b56c:	9a07      	ldr	r2, [sp, #28]
 800b56e:	4654      	mov	r4, sl
 800b570:	2000      	movs	r0, #0
 800b572:	f04f 0c0a 	mov.w	ip, #10
 800b576:	4621      	mov	r1, r4
 800b578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b57c:	3b30      	subs	r3, #48	@ 0x30
 800b57e:	2b09      	cmp	r3, #9
 800b580:	d94b      	bls.n	800b61a <_vfiprintf_r+0x1a2>
 800b582:	b1b0      	cbz	r0, 800b5b2 <_vfiprintf_r+0x13a>
 800b584:	9207      	str	r2, [sp, #28]
 800b586:	e014      	b.n	800b5b2 <_vfiprintf_r+0x13a>
 800b588:	eba0 0308 	sub.w	r3, r0, r8
 800b58c:	fa09 f303 	lsl.w	r3, r9, r3
 800b590:	4313      	orrs	r3, r2
 800b592:	9304      	str	r3, [sp, #16]
 800b594:	46a2      	mov	sl, r4
 800b596:	e7d2      	b.n	800b53e <_vfiprintf_r+0xc6>
 800b598:	9b03      	ldr	r3, [sp, #12]
 800b59a:	1d19      	adds	r1, r3, #4
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	9103      	str	r1, [sp, #12]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	bfbb      	ittet	lt
 800b5a4:	425b      	neglt	r3, r3
 800b5a6:	f042 0202 	orrlt.w	r2, r2, #2
 800b5aa:	9307      	strge	r3, [sp, #28]
 800b5ac:	9307      	strlt	r3, [sp, #28]
 800b5ae:	bfb8      	it	lt
 800b5b0:	9204      	strlt	r2, [sp, #16]
 800b5b2:	7823      	ldrb	r3, [r4, #0]
 800b5b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5b6:	d10a      	bne.n	800b5ce <_vfiprintf_r+0x156>
 800b5b8:	7863      	ldrb	r3, [r4, #1]
 800b5ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5bc:	d132      	bne.n	800b624 <_vfiprintf_r+0x1ac>
 800b5be:	9b03      	ldr	r3, [sp, #12]
 800b5c0:	1d1a      	adds	r2, r3, #4
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	9203      	str	r2, [sp, #12]
 800b5c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5ca:	3402      	adds	r4, #2
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b6a4 <_vfiprintf_r+0x22c>
 800b5d2:	7821      	ldrb	r1, [r4, #0]
 800b5d4:	2203      	movs	r2, #3
 800b5d6:	4650      	mov	r0, sl
 800b5d8:	f7f4 fe02 	bl	80001e0 <memchr>
 800b5dc:	b138      	cbz	r0, 800b5ee <_vfiprintf_r+0x176>
 800b5de:	9b04      	ldr	r3, [sp, #16]
 800b5e0:	eba0 000a 	sub.w	r0, r0, sl
 800b5e4:	2240      	movs	r2, #64	@ 0x40
 800b5e6:	4082      	lsls	r2, r0
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	3401      	adds	r4, #1
 800b5ec:	9304      	str	r3, [sp, #16]
 800b5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f2:	4829      	ldr	r0, [pc, #164]	@ (800b698 <_vfiprintf_r+0x220>)
 800b5f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5f8:	2206      	movs	r2, #6
 800b5fa:	f7f4 fdf1 	bl	80001e0 <memchr>
 800b5fe:	2800      	cmp	r0, #0
 800b600:	d03f      	beq.n	800b682 <_vfiprintf_r+0x20a>
 800b602:	4b26      	ldr	r3, [pc, #152]	@ (800b69c <_vfiprintf_r+0x224>)
 800b604:	bb1b      	cbnz	r3, 800b64e <_vfiprintf_r+0x1d6>
 800b606:	9b03      	ldr	r3, [sp, #12]
 800b608:	3307      	adds	r3, #7
 800b60a:	f023 0307 	bic.w	r3, r3, #7
 800b60e:	3308      	adds	r3, #8
 800b610:	9303      	str	r3, [sp, #12]
 800b612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b614:	443b      	add	r3, r7
 800b616:	9309      	str	r3, [sp, #36]	@ 0x24
 800b618:	e76a      	b.n	800b4f0 <_vfiprintf_r+0x78>
 800b61a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b61e:	460c      	mov	r4, r1
 800b620:	2001      	movs	r0, #1
 800b622:	e7a8      	b.n	800b576 <_vfiprintf_r+0xfe>
 800b624:	2300      	movs	r3, #0
 800b626:	3401      	adds	r4, #1
 800b628:	9305      	str	r3, [sp, #20]
 800b62a:	4619      	mov	r1, r3
 800b62c:	f04f 0c0a 	mov.w	ip, #10
 800b630:	4620      	mov	r0, r4
 800b632:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b636:	3a30      	subs	r2, #48	@ 0x30
 800b638:	2a09      	cmp	r2, #9
 800b63a:	d903      	bls.n	800b644 <_vfiprintf_r+0x1cc>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d0c6      	beq.n	800b5ce <_vfiprintf_r+0x156>
 800b640:	9105      	str	r1, [sp, #20]
 800b642:	e7c4      	b.n	800b5ce <_vfiprintf_r+0x156>
 800b644:	fb0c 2101 	mla	r1, ip, r1, r2
 800b648:	4604      	mov	r4, r0
 800b64a:	2301      	movs	r3, #1
 800b64c:	e7f0      	b.n	800b630 <_vfiprintf_r+0x1b8>
 800b64e:	ab03      	add	r3, sp, #12
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	462a      	mov	r2, r5
 800b654:	4b12      	ldr	r3, [pc, #72]	@ (800b6a0 <_vfiprintf_r+0x228>)
 800b656:	a904      	add	r1, sp, #16
 800b658:	4630      	mov	r0, r6
 800b65a:	f7fd fbdb 	bl	8008e14 <_printf_float>
 800b65e:	4607      	mov	r7, r0
 800b660:	1c78      	adds	r0, r7, #1
 800b662:	d1d6      	bne.n	800b612 <_vfiprintf_r+0x19a>
 800b664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b666:	07d9      	lsls	r1, r3, #31
 800b668:	d405      	bmi.n	800b676 <_vfiprintf_r+0x1fe>
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	059a      	lsls	r2, r3, #22
 800b66e:	d402      	bmi.n	800b676 <_vfiprintf_r+0x1fe>
 800b670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b672:	f7fe f92b 	bl	80098cc <__retarget_lock_release_recursive>
 800b676:	89ab      	ldrh	r3, [r5, #12]
 800b678:	065b      	lsls	r3, r3, #25
 800b67a:	f53f af1f 	bmi.w	800b4bc <_vfiprintf_r+0x44>
 800b67e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b680:	e71e      	b.n	800b4c0 <_vfiprintf_r+0x48>
 800b682:	ab03      	add	r3, sp, #12
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	462a      	mov	r2, r5
 800b688:	4b05      	ldr	r3, [pc, #20]	@ (800b6a0 <_vfiprintf_r+0x228>)
 800b68a:	a904      	add	r1, sp, #16
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7fd fe59 	bl	8009344 <_printf_i>
 800b692:	e7e4      	b.n	800b65e <_vfiprintf_r+0x1e6>
 800b694:	0800cad0 	.word	0x0800cad0
 800b698:	0800cada 	.word	0x0800cada
 800b69c:	08008e15 	.word	0x08008e15
 800b6a0:	0800b455 	.word	0x0800b455
 800b6a4:	0800cad6 	.word	0x0800cad6

0800b6a8 <__swbuf_r>:
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6aa:	460e      	mov	r6, r1
 800b6ac:	4614      	mov	r4, r2
 800b6ae:	4605      	mov	r5, r0
 800b6b0:	b118      	cbz	r0, 800b6ba <__swbuf_r+0x12>
 800b6b2:	6a03      	ldr	r3, [r0, #32]
 800b6b4:	b90b      	cbnz	r3, 800b6ba <__swbuf_r+0x12>
 800b6b6:	f7fd fff1 	bl	800969c <__sinit>
 800b6ba:	69a3      	ldr	r3, [r4, #24]
 800b6bc:	60a3      	str	r3, [r4, #8]
 800b6be:	89a3      	ldrh	r3, [r4, #12]
 800b6c0:	071a      	lsls	r2, r3, #28
 800b6c2:	d501      	bpl.n	800b6c8 <__swbuf_r+0x20>
 800b6c4:	6923      	ldr	r3, [r4, #16]
 800b6c6:	b943      	cbnz	r3, 800b6da <__swbuf_r+0x32>
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	4628      	mov	r0, r5
 800b6cc:	f000 f82a 	bl	800b724 <__swsetup_r>
 800b6d0:	b118      	cbz	r0, 800b6da <__swbuf_r+0x32>
 800b6d2:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6da:	6823      	ldr	r3, [r4, #0]
 800b6dc:	6922      	ldr	r2, [r4, #16]
 800b6de:	1a98      	subs	r0, r3, r2
 800b6e0:	6963      	ldr	r3, [r4, #20]
 800b6e2:	b2f6      	uxtb	r6, r6
 800b6e4:	4283      	cmp	r3, r0
 800b6e6:	4637      	mov	r7, r6
 800b6e8:	dc05      	bgt.n	800b6f6 <__swbuf_r+0x4e>
 800b6ea:	4621      	mov	r1, r4
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f7ff fd99 	bl	800b224 <_fflush_r>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	d1ed      	bne.n	800b6d2 <__swbuf_r+0x2a>
 800b6f6:	68a3      	ldr	r3, [r4, #8]
 800b6f8:	3b01      	subs	r3, #1
 800b6fa:	60a3      	str	r3, [r4, #8]
 800b6fc:	6823      	ldr	r3, [r4, #0]
 800b6fe:	1c5a      	adds	r2, r3, #1
 800b700:	6022      	str	r2, [r4, #0]
 800b702:	701e      	strb	r6, [r3, #0]
 800b704:	6962      	ldr	r2, [r4, #20]
 800b706:	1c43      	adds	r3, r0, #1
 800b708:	429a      	cmp	r2, r3
 800b70a:	d004      	beq.n	800b716 <__swbuf_r+0x6e>
 800b70c:	89a3      	ldrh	r3, [r4, #12]
 800b70e:	07db      	lsls	r3, r3, #31
 800b710:	d5e1      	bpl.n	800b6d6 <__swbuf_r+0x2e>
 800b712:	2e0a      	cmp	r6, #10
 800b714:	d1df      	bne.n	800b6d6 <__swbuf_r+0x2e>
 800b716:	4621      	mov	r1, r4
 800b718:	4628      	mov	r0, r5
 800b71a:	f7ff fd83 	bl	800b224 <_fflush_r>
 800b71e:	2800      	cmp	r0, #0
 800b720:	d0d9      	beq.n	800b6d6 <__swbuf_r+0x2e>
 800b722:	e7d6      	b.n	800b6d2 <__swbuf_r+0x2a>

0800b724 <__swsetup_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4b29      	ldr	r3, [pc, #164]	@ (800b7cc <__swsetup_r+0xa8>)
 800b728:	4605      	mov	r5, r0
 800b72a:	6818      	ldr	r0, [r3, #0]
 800b72c:	460c      	mov	r4, r1
 800b72e:	b118      	cbz	r0, 800b738 <__swsetup_r+0x14>
 800b730:	6a03      	ldr	r3, [r0, #32]
 800b732:	b90b      	cbnz	r3, 800b738 <__swsetup_r+0x14>
 800b734:	f7fd ffb2 	bl	800969c <__sinit>
 800b738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73c:	0719      	lsls	r1, r3, #28
 800b73e:	d422      	bmi.n	800b786 <__swsetup_r+0x62>
 800b740:	06da      	lsls	r2, r3, #27
 800b742:	d407      	bmi.n	800b754 <__swsetup_r+0x30>
 800b744:	2209      	movs	r2, #9
 800b746:	602a      	str	r2, [r5, #0]
 800b748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	f04f 30ff 	mov.w	r0, #4294967295
 800b752:	e033      	b.n	800b7bc <__swsetup_r+0x98>
 800b754:	0758      	lsls	r0, r3, #29
 800b756:	d512      	bpl.n	800b77e <__swsetup_r+0x5a>
 800b758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b75a:	b141      	cbz	r1, 800b76e <__swsetup_r+0x4a>
 800b75c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b760:	4299      	cmp	r1, r3
 800b762:	d002      	beq.n	800b76a <__swsetup_r+0x46>
 800b764:	4628      	mov	r0, r5
 800b766:	f7fe feff 	bl	800a568 <_free_r>
 800b76a:	2300      	movs	r3, #0
 800b76c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	2300      	movs	r3, #0
 800b778:	6063      	str	r3, [r4, #4]
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	f043 0308 	orr.w	r3, r3, #8
 800b784:	81a3      	strh	r3, [r4, #12]
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	b94b      	cbnz	r3, 800b79e <__swsetup_r+0x7a>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b794:	d003      	beq.n	800b79e <__swsetup_r+0x7a>
 800b796:	4621      	mov	r1, r4
 800b798:	4628      	mov	r0, r5
 800b79a:	f000 f883 	bl	800b8a4 <__smakebuf_r>
 800b79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a2:	f013 0201 	ands.w	r2, r3, #1
 800b7a6:	d00a      	beq.n	800b7be <__swsetup_r+0x9a>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	60a2      	str	r2, [r4, #8]
 800b7ac:	6962      	ldr	r2, [r4, #20]
 800b7ae:	4252      	negs	r2, r2
 800b7b0:	61a2      	str	r2, [r4, #24]
 800b7b2:	6922      	ldr	r2, [r4, #16]
 800b7b4:	b942      	cbnz	r2, 800b7c8 <__swsetup_r+0xa4>
 800b7b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7ba:	d1c5      	bne.n	800b748 <__swsetup_r+0x24>
 800b7bc:	bd38      	pop	{r3, r4, r5, pc}
 800b7be:	0799      	lsls	r1, r3, #30
 800b7c0:	bf58      	it	pl
 800b7c2:	6962      	ldrpl	r2, [r4, #20]
 800b7c4:	60a2      	str	r2, [r4, #8]
 800b7c6:	e7f4      	b.n	800b7b2 <__swsetup_r+0x8e>
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	e7f7      	b.n	800b7bc <__swsetup_r+0x98>
 800b7cc:	20000108 	.word	0x20000108

0800b7d0 <_raise_r>:
 800b7d0:	291f      	cmp	r1, #31
 800b7d2:	b538      	push	{r3, r4, r5, lr}
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	460c      	mov	r4, r1
 800b7d8:	d904      	bls.n	800b7e4 <_raise_r+0x14>
 800b7da:	2316      	movs	r3, #22
 800b7dc:	6003      	str	r3, [r0, #0]
 800b7de:	f04f 30ff 	mov.w	r0, #4294967295
 800b7e2:	bd38      	pop	{r3, r4, r5, pc}
 800b7e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7e6:	b112      	cbz	r2, 800b7ee <_raise_r+0x1e>
 800b7e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7ec:	b94b      	cbnz	r3, 800b802 <_raise_r+0x32>
 800b7ee:	4628      	mov	r0, r5
 800b7f0:	f000 f830 	bl	800b854 <_getpid_r>
 800b7f4:	4622      	mov	r2, r4
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7fe:	f000 b817 	b.w	800b830 <_kill_r>
 800b802:	2b01      	cmp	r3, #1
 800b804:	d00a      	beq.n	800b81c <_raise_r+0x4c>
 800b806:	1c59      	adds	r1, r3, #1
 800b808:	d103      	bne.n	800b812 <_raise_r+0x42>
 800b80a:	2316      	movs	r3, #22
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	2001      	movs	r0, #1
 800b810:	e7e7      	b.n	800b7e2 <_raise_r+0x12>
 800b812:	2100      	movs	r1, #0
 800b814:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b818:	4620      	mov	r0, r4
 800b81a:	4798      	blx	r3
 800b81c:	2000      	movs	r0, #0
 800b81e:	e7e0      	b.n	800b7e2 <_raise_r+0x12>

0800b820 <raise>:
 800b820:	4b02      	ldr	r3, [pc, #8]	@ (800b82c <raise+0xc>)
 800b822:	4601      	mov	r1, r0
 800b824:	6818      	ldr	r0, [r3, #0]
 800b826:	f7ff bfd3 	b.w	800b7d0 <_raise_r>
 800b82a:	bf00      	nop
 800b82c:	20000108 	.word	0x20000108

0800b830 <_kill_r>:
 800b830:	b538      	push	{r3, r4, r5, lr}
 800b832:	4d07      	ldr	r5, [pc, #28]	@ (800b850 <_kill_r+0x20>)
 800b834:	2300      	movs	r3, #0
 800b836:	4604      	mov	r4, r0
 800b838:	4608      	mov	r0, r1
 800b83a:	4611      	mov	r1, r2
 800b83c:	602b      	str	r3, [r5, #0]
 800b83e:	f7f5 fe9b 	bl	8001578 <_kill>
 800b842:	1c43      	adds	r3, r0, #1
 800b844:	d102      	bne.n	800b84c <_kill_r+0x1c>
 800b846:	682b      	ldr	r3, [r5, #0]
 800b848:	b103      	cbz	r3, 800b84c <_kill_r+0x1c>
 800b84a:	6023      	str	r3, [r4, #0]
 800b84c:	bd38      	pop	{r3, r4, r5, pc}
 800b84e:	bf00      	nop
 800b850:	200020f0 	.word	0x200020f0

0800b854 <_getpid_r>:
 800b854:	f7f5 be88 	b.w	8001568 <_getpid>

0800b858 <__swhatbuf_r>:
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	460c      	mov	r4, r1
 800b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b860:	2900      	cmp	r1, #0
 800b862:	b096      	sub	sp, #88	@ 0x58
 800b864:	4615      	mov	r5, r2
 800b866:	461e      	mov	r6, r3
 800b868:	da0d      	bge.n	800b886 <__swhatbuf_r+0x2e>
 800b86a:	89a3      	ldrh	r3, [r4, #12]
 800b86c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b870:	f04f 0100 	mov.w	r1, #0
 800b874:	bf14      	ite	ne
 800b876:	2340      	movne	r3, #64	@ 0x40
 800b878:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b87c:	2000      	movs	r0, #0
 800b87e:	6031      	str	r1, [r6, #0]
 800b880:	602b      	str	r3, [r5, #0]
 800b882:	b016      	add	sp, #88	@ 0x58
 800b884:	bd70      	pop	{r4, r5, r6, pc}
 800b886:	466a      	mov	r2, sp
 800b888:	f000 f848 	bl	800b91c <_fstat_r>
 800b88c:	2800      	cmp	r0, #0
 800b88e:	dbec      	blt.n	800b86a <__swhatbuf_r+0x12>
 800b890:	9901      	ldr	r1, [sp, #4]
 800b892:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b896:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b89a:	4259      	negs	r1, r3
 800b89c:	4159      	adcs	r1, r3
 800b89e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b8a2:	e7eb      	b.n	800b87c <__swhatbuf_r+0x24>

0800b8a4 <__smakebuf_r>:
 800b8a4:	898b      	ldrh	r3, [r1, #12]
 800b8a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8a8:	079d      	lsls	r5, r3, #30
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	d507      	bpl.n	800b8c0 <__smakebuf_r+0x1c>
 800b8b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	6123      	str	r3, [r4, #16]
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	6163      	str	r3, [r4, #20]
 800b8bc:	b003      	add	sp, #12
 800b8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8c0:	ab01      	add	r3, sp, #4
 800b8c2:	466a      	mov	r2, sp
 800b8c4:	f7ff ffc8 	bl	800b858 <__swhatbuf_r>
 800b8c8:	9f00      	ldr	r7, [sp, #0]
 800b8ca:	4605      	mov	r5, r0
 800b8cc:	4639      	mov	r1, r7
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f7fe febe 	bl	800a650 <_malloc_r>
 800b8d4:	b948      	cbnz	r0, 800b8ea <__smakebuf_r+0x46>
 800b8d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8da:	059a      	lsls	r2, r3, #22
 800b8dc:	d4ee      	bmi.n	800b8bc <__smakebuf_r+0x18>
 800b8de:	f023 0303 	bic.w	r3, r3, #3
 800b8e2:	f043 0302 	orr.w	r3, r3, #2
 800b8e6:	81a3      	strh	r3, [r4, #12]
 800b8e8:	e7e2      	b.n	800b8b0 <__smakebuf_r+0xc>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	6020      	str	r0, [r4, #0]
 800b8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8f2:	81a3      	strh	r3, [r4, #12]
 800b8f4:	9b01      	ldr	r3, [sp, #4]
 800b8f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8fa:	b15b      	cbz	r3, 800b914 <__smakebuf_r+0x70>
 800b8fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b900:	4630      	mov	r0, r6
 800b902:	f000 f81d 	bl	800b940 <_isatty_r>
 800b906:	b128      	cbz	r0, 800b914 <__smakebuf_r+0x70>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	f023 0303 	bic.w	r3, r3, #3
 800b90e:	f043 0301 	orr.w	r3, r3, #1
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	431d      	orrs	r5, r3
 800b918:	81a5      	strh	r5, [r4, #12]
 800b91a:	e7cf      	b.n	800b8bc <__smakebuf_r+0x18>

0800b91c <_fstat_r>:
 800b91c:	b538      	push	{r3, r4, r5, lr}
 800b91e:	4d07      	ldr	r5, [pc, #28]	@ (800b93c <_fstat_r+0x20>)
 800b920:	2300      	movs	r3, #0
 800b922:	4604      	mov	r4, r0
 800b924:	4608      	mov	r0, r1
 800b926:	4611      	mov	r1, r2
 800b928:	602b      	str	r3, [r5, #0]
 800b92a:	f7f5 fe85 	bl	8001638 <_fstat>
 800b92e:	1c43      	adds	r3, r0, #1
 800b930:	d102      	bne.n	800b938 <_fstat_r+0x1c>
 800b932:	682b      	ldr	r3, [r5, #0]
 800b934:	b103      	cbz	r3, 800b938 <_fstat_r+0x1c>
 800b936:	6023      	str	r3, [r4, #0]
 800b938:	bd38      	pop	{r3, r4, r5, pc}
 800b93a:	bf00      	nop
 800b93c:	200020f0 	.word	0x200020f0

0800b940 <_isatty_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d06      	ldr	r5, [pc, #24]	@ (800b95c <_isatty_r+0x1c>)
 800b944:	2300      	movs	r3, #0
 800b946:	4604      	mov	r4, r0
 800b948:	4608      	mov	r0, r1
 800b94a:	602b      	str	r3, [r5, #0]
 800b94c:	f7f5 fe84 	bl	8001658 <_isatty>
 800b950:	1c43      	adds	r3, r0, #1
 800b952:	d102      	bne.n	800b95a <_isatty_r+0x1a>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	b103      	cbz	r3, 800b95a <_isatty_r+0x1a>
 800b958:	6023      	str	r3, [r4, #0]
 800b95a:	bd38      	pop	{r3, r4, r5, pc}
 800b95c:	200020f0 	.word	0x200020f0

0800b960 <pow>:
 800b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b962:	ed2d 8b02 	vpush	{d8}
 800b966:	eeb0 8a40 	vmov.f32	s16, s0
 800b96a:	eef0 8a60 	vmov.f32	s17, s1
 800b96e:	ec55 4b11 	vmov	r4, r5, d1
 800b972:	f000 f871 	bl	800ba58 <__ieee754_pow>
 800b976:	4622      	mov	r2, r4
 800b978:	462b      	mov	r3, r5
 800b97a:	4620      	mov	r0, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	ec57 6b10 	vmov	r6, r7, d0
 800b982:	f7f5 f8db 	bl	8000b3c <__aeabi_dcmpun>
 800b986:	2800      	cmp	r0, #0
 800b988:	d13b      	bne.n	800ba02 <pow+0xa2>
 800b98a:	ec51 0b18 	vmov	r0, r1, d8
 800b98e:	2200      	movs	r2, #0
 800b990:	2300      	movs	r3, #0
 800b992:	f7f5 f8a1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b996:	b1b8      	cbz	r0, 800b9c8 <pow+0x68>
 800b998:	2200      	movs	r2, #0
 800b99a:	2300      	movs	r3, #0
 800b99c:	4620      	mov	r0, r4
 800b99e:	4629      	mov	r1, r5
 800b9a0:	f7f5 f89a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d146      	bne.n	800ba36 <pow+0xd6>
 800b9a8:	ec45 4b10 	vmov	d0, r4, r5
 800b9ac:	f000 f848 	bl	800ba40 <finite>
 800b9b0:	b338      	cbz	r0, 800ba02 <pow+0xa2>
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f7f5 f897 	bl	8000aec <__aeabi_dcmplt>
 800b9be:	b300      	cbz	r0, 800ba02 <pow+0xa2>
 800b9c0:	f7fd ff58 	bl	8009874 <__errno>
 800b9c4:	2322      	movs	r3, #34	@ 0x22
 800b9c6:	e01b      	b.n	800ba00 <pow+0xa0>
 800b9c8:	ec47 6b10 	vmov	d0, r6, r7
 800b9cc:	f000 f838 	bl	800ba40 <finite>
 800b9d0:	b9e0      	cbnz	r0, 800ba0c <pow+0xac>
 800b9d2:	eeb0 0a48 	vmov.f32	s0, s16
 800b9d6:	eef0 0a68 	vmov.f32	s1, s17
 800b9da:	f000 f831 	bl	800ba40 <finite>
 800b9de:	b1a8      	cbz	r0, 800ba0c <pow+0xac>
 800b9e0:	ec45 4b10 	vmov	d0, r4, r5
 800b9e4:	f000 f82c 	bl	800ba40 <finite>
 800b9e8:	b180      	cbz	r0, 800ba0c <pow+0xac>
 800b9ea:	4632      	mov	r2, r6
 800b9ec:	463b      	mov	r3, r7
 800b9ee:	4630      	mov	r0, r6
 800b9f0:	4639      	mov	r1, r7
 800b9f2:	f7f5 f8a3 	bl	8000b3c <__aeabi_dcmpun>
 800b9f6:	2800      	cmp	r0, #0
 800b9f8:	d0e2      	beq.n	800b9c0 <pow+0x60>
 800b9fa:	f7fd ff3b 	bl	8009874 <__errno>
 800b9fe:	2321      	movs	r3, #33	@ 0x21
 800ba00:	6003      	str	r3, [r0, #0]
 800ba02:	ecbd 8b02 	vpop	{d8}
 800ba06:	ec47 6b10 	vmov	d0, r6, r7
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	2300      	movs	r3, #0
 800ba10:	4630      	mov	r0, r6
 800ba12:	4639      	mov	r1, r7
 800ba14:	f7f5 f860 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d0f2      	beq.n	800ba02 <pow+0xa2>
 800ba1c:	eeb0 0a48 	vmov.f32	s0, s16
 800ba20:	eef0 0a68 	vmov.f32	s1, s17
 800ba24:	f000 f80c 	bl	800ba40 <finite>
 800ba28:	2800      	cmp	r0, #0
 800ba2a:	d0ea      	beq.n	800ba02 <pow+0xa2>
 800ba2c:	ec45 4b10 	vmov	d0, r4, r5
 800ba30:	f000 f806 	bl	800ba40 <finite>
 800ba34:	e7c3      	b.n	800b9be <pow+0x5e>
 800ba36:	4f01      	ldr	r7, [pc, #4]	@ (800ba3c <pow+0xdc>)
 800ba38:	2600      	movs	r6, #0
 800ba3a:	e7e2      	b.n	800ba02 <pow+0xa2>
 800ba3c:	3ff00000 	.word	0x3ff00000

0800ba40 <finite>:
 800ba40:	b082      	sub	sp, #8
 800ba42:	ed8d 0b00 	vstr	d0, [sp]
 800ba46:	9801      	ldr	r0, [sp, #4]
 800ba48:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ba4c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ba50:	0fc0      	lsrs	r0, r0, #31
 800ba52:	b002      	add	sp, #8
 800ba54:	4770      	bx	lr
	...

0800ba58 <__ieee754_pow>:
 800ba58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba5c:	b091      	sub	sp, #68	@ 0x44
 800ba5e:	ed8d 1b00 	vstr	d1, [sp]
 800ba62:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ba66:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ba6a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ba6e:	ec57 6b10 	vmov	r6, r7, d0
 800ba72:	d113      	bne.n	800ba9c <__ieee754_pow+0x44>
 800ba74:	19b3      	adds	r3, r6, r6
 800ba76:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ba7a:	4152      	adcs	r2, r2
 800ba7c:	4298      	cmp	r0, r3
 800ba7e:	4b98      	ldr	r3, [pc, #608]	@ (800bce0 <__ieee754_pow+0x288>)
 800ba80:	4193      	sbcs	r3, r2
 800ba82:	f080 84ea 	bcs.w	800c45a <__ieee754_pow+0xa02>
 800ba86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba8a:	4630      	mov	r0, r6
 800ba8c:	4639      	mov	r1, r7
 800ba8e:	f7f4 fc05 	bl	800029c <__adddf3>
 800ba92:	ec41 0b10 	vmov	d0, r0, r1
 800ba96:	b011      	add	sp, #68	@ 0x44
 800ba98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba9c:	4a91      	ldr	r2, [pc, #580]	@ (800bce4 <__ieee754_pow+0x28c>)
 800ba9e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800baa2:	4590      	cmp	r8, r2
 800baa4:	463d      	mov	r5, r7
 800baa6:	4633      	mov	r3, r6
 800baa8:	d806      	bhi.n	800bab8 <__ieee754_pow+0x60>
 800baaa:	d101      	bne.n	800bab0 <__ieee754_pow+0x58>
 800baac:	2e00      	cmp	r6, #0
 800baae:	d1ea      	bne.n	800ba86 <__ieee754_pow+0x2e>
 800bab0:	4592      	cmp	sl, r2
 800bab2:	d801      	bhi.n	800bab8 <__ieee754_pow+0x60>
 800bab4:	d10e      	bne.n	800bad4 <__ieee754_pow+0x7c>
 800bab6:	b169      	cbz	r1, 800bad4 <__ieee754_pow+0x7c>
 800bab8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800babc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bac0:	431d      	orrs	r5, r3
 800bac2:	d1e0      	bne.n	800ba86 <__ieee754_pow+0x2e>
 800bac4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bac8:	18db      	adds	r3, r3, r3
 800baca:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bace:	4152      	adcs	r2, r2
 800bad0:	429d      	cmp	r5, r3
 800bad2:	e7d4      	b.n	800ba7e <__ieee754_pow+0x26>
 800bad4:	2d00      	cmp	r5, #0
 800bad6:	46c3      	mov	fp, r8
 800bad8:	da3a      	bge.n	800bb50 <__ieee754_pow+0xf8>
 800bada:	4a83      	ldr	r2, [pc, #524]	@ (800bce8 <__ieee754_pow+0x290>)
 800badc:	4592      	cmp	sl, r2
 800bade:	d84d      	bhi.n	800bb7c <__ieee754_pow+0x124>
 800bae0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bae4:	4592      	cmp	sl, r2
 800bae6:	f240 84c7 	bls.w	800c478 <__ieee754_pow+0xa20>
 800baea:	ea4f 522a 	mov.w	r2, sl, asr #20
 800baee:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800baf2:	2a14      	cmp	r2, #20
 800baf4:	dd0f      	ble.n	800bb16 <__ieee754_pow+0xbe>
 800baf6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bafa:	fa21 f402 	lsr.w	r4, r1, r2
 800bafe:	fa04 f202 	lsl.w	r2, r4, r2
 800bb02:	428a      	cmp	r2, r1
 800bb04:	f040 84b8 	bne.w	800c478 <__ieee754_pow+0xa20>
 800bb08:	f004 0401 	and.w	r4, r4, #1
 800bb0c:	f1c4 0402 	rsb	r4, r4, #2
 800bb10:	2900      	cmp	r1, #0
 800bb12:	d158      	bne.n	800bbc6 <__ieee754_pow+0x16e>
 800bb14:	e00e      	b.n	800bb34 <__ieee754_pow+0xdc>
 800bb16:	2900      	cmp	r1, #0
 800bb18:	d154      	bne.n	800bbc4 <__ieee754_pow+0x16c>
 800bb1a:	f1c2 0214 	rsb	r2, r2, #20
 800bb1e:	fa4a f402 	asr.w	r4, sl, r2
 800bb22:	fa04 f202 	lsl.w	r2, r4, r2
 800bb26:	4552      	cmp	r2, sl
 800bb28:	f040 84a3 	bne.w	800c472 <__ieee754_pow+0xa1a>
 800bb2c:	f004 0401 	and.w	r4, r4, #1
 800bb30:	f1c4 0402 	rsb	r4, r4, #2
 800bb34:	4a6d      	ldr	r2, [pc, #436]	@ (800bcec <__ieee754_pow+0x294>)
 800bb36:	4592      	cmp	sl, r2
 800bb38:	d12e      	bne.n	800bb98 <__ieee754_pow+0x140>
 800bb3a:	f1b9 0f00 	cmp.w	r9, #0
 800bb3e:	f280 8494 	bge.w	800c46a <__ieee754_pow+0xa12>
 800bb42:	496a      	ldr	r1, [pc, #424]	@ (800bcec <__ieee754_pow+0x294>)
 800bb44:	4632      	mov	r2, r6
 800bb46:	463b      	mov	r3, r7
 800bb48:	2000      	movs	r0, #0
 800bb4a:	f7f4 fe87 	bl	800085c <__aeabi_ddiv>
 800bb4e:	e7a0      	b.n	800ba92 <__ieee754_pow+0x3a>
 800bb50:	2400      	movs	r4, #0
 800bb52:	bbc1      	cbnz	r1, 800bbc6 <__ieee754_pow+0x16e>
 800bb54:	4a63      	ldr	r2, [pc, #396]	@ (800bce4 <__ieee754_pow+0x28c>)
 800bb56:	4592      	cmp	sl, r2
 800bb58:	d1ec      	bne.n	800bb34 <__ieee754_pow+0xdc>
 800bb5a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bb5e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bb62:	431a      	orrs	r2, r3
 800bb64:	f000 8479 	beq.w	800c45a <__ieee754_pow+0xa02>
 800bb68:	4b61      	ldr	r3, [pc, #388]	@ (800bcf0 <__ieee754_pow+0x298>)
 800bb6a:	4598      	cmp	r8, r3
 800bb6c:	d908      	bls.n	800bb80 <__ieee754_pow+0x128>
 800bb6e:	f1b9 0f00 	cmp.w	r9, #0
 800bb72:	f2c0 8476 	blt.w	800c462 <__ieee754_pow+0xa0a>
 800bb76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb7a:	e78a      	b.n	800ba92 <__ieee754_pow+0x3a>
 800bb7c:	2402      	movs	r4, #2
 800bb7e:	e7e8      	b.n	800bb52 <__ieee754_pow+0xfa>
 800bb80:	f1b9 0f00 	cmp.w	r9, #0
 800bb84:	f04f 0000 	mov.w	r0, #0
 800bb88:	f04f 0100 	mov.w	r1, #0
 800bb8c:	da81      	bge.n	800ba92 <__ieee754_pow+0x3a>
 800bb8e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bb92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb96:	e77c      	b.n	800ba92 <__ieee754_pow+0x3a>
 800bb98:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bb9c:	d106      	bne.n	800bbac <__ieee754_pow+0x154>
 800bb9e:	4632      	mov	r2, r6
 800bba0:	463b      	mov	r3, r7
 800bba2:	4630      	mov	r0, r6
 800bba4:	4639      	mov	r1, r7
 800bba6:	f7f4 fd2f 	bl	8000608 <__aeabi_dmul>
 800bbaa:	e772      	b.n	800ba92 <__ieee754_pow+0x3a>
 800bbac:	4a51      	ldr	r2, [pc, #324]	@ (800bcf4 <__ieee754_pow+0x29c>)
 800bbae:	4591      	cmp	r9, r2
 800bbb0:	d109      	bne.n	800bbc6 <__ieee754_pow+0x16e>
 800bbb2:	2d00      	cmp	r5, #0
 800bbb4:	db07      	blt.n	800bbc6 <__ieee754_pow+0x16e>
 800bbb6:	ec47 6b10 	vmov	d0, r6, r7
 800bbba:	b011      	add	sp, #68	@ 0x44
 800bbbc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	f000 bd52 	b.w	800c668 <__ieee754_sqrt>
 800bbc4:	2400      	movs	r4, #0
 800bbc6:	ec47 6b10 	vmov	d0, r6, r7
 800bbca:	9302      	str	r3, [sp, #8]
 800bbcc:	f000 fc88 	bl	800c4e0 <fabs>
 800bbd0:	9b02      	ldr	r3, [sp, #8]
 800bbd2:	ec51 0b10 	vmov	r0, r1, d0
 800bbd6:	bb53      	cbnz	r3, 800bc2e <__ieee754_pow+0x1d6>
 800bbd8:	4b44      	ldr	r3, [pc, #272]	@ (800bcec <__ieee754_pow+0x294>)
 800bbda:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bbde:	429a      	cmp	r2, r3
 800bbe0:	d002      	beq.n	800bbe8 <__ieee754_pow+0x190>
 800bbe2:	f1b8 0f00 	cmp.w	r8, #0
 800bbe6:	d122      	bne.n	800bc2e <__ieee754_pow+0x1d6>
 800bbe8:	f1b9 0f00 	cmp.w	r9, #0
 800bbec:	da05      	bge.n	800bbfa <__ieee754_pow+0x1a2>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	2000      	movs	r0, #0
 800bbf4:	493d      	ldr	r1, [pc, #244]	@ (800bcec <__ieee754_pow+0x294>)
 800bbf6:	f7f4 fe31 	bl	800085c <__aeabi_ddiv>
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	f6bf af49 	bge.w	800ba92 <__ieee754_pow+0x3a>
 800bc00:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bc04:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bc08:	ea58 0804 	orrs.w	r8, r8, r4
 800bc0c:	d108      	bne.n	800bc20 <__ieee754_pow+0x1c8>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	460b      	mov	r3, r1
 800bc12:	4610      	mov	r0, r2
 800bc14:	4619      	mov	r1, r3
 800bc16:	f7f4 fb3f 	bl	8000298 <__aeabi_dsub>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	e794      	b.n	800bb4a <__ieee754_pow+0xf2>
 800bc20:	2c01      	cmp	r4, #1
 800bc22:	f47f af36 	bne.w	800ba92 <__ieee754_pow+0x3a>
 800bc26:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	e731      	b.n	800ba92 <__ieee754_pow+0x3a>
 800bc2e:	0feb      	lsrs	r3, r5, #31
 800bc30:	3b01      	subs	r3, #1
 800bc32:	ea53 0204 	orrs.w	r2, r3, r4
 800bc36:	d102      	bne.n	800bc3e <__ieee754_pow+0x1e6>
 800bc38:	4632      	mov	r2, r6
 800bc3a:	463b      	mov	r3, r7
 800bc3c:	e7e9      	b.n	800bc12 <__ieee754_pow+0x1ba>
 800bc3e:	3c01      	subs	r4, #1
 800bc40:	431c      	orrs	r4, r3
 800bc42:	d016      	beq.n	800bc72 <__ieee754_pow+0x21a>
 800bc44:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800bcd0 <__ieee754_pow+0x278>
 800bc48:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800bc4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc50:	f240 8112 	bls.w	800be78 <__ieee754_pow+0x420>
 800bc54:	4b28      	ldr	r3, [pc, #160]	@ (800bcf8 <__ieee754_pow+0x2a0>)
 800bc56:	459a      	cmp	sl, r3
 800bc58:	4b25      	ldr	r3, [pc, #148]	@ (800bcf0 <__ieee754_pow+0x298>)
 800bc5a:	d916      	bls.n	800bc8a <__ieee754_pow+0x232>
 800bc5c:	4598      	cmp	r8, r3
 800bc5e:	d80b      	bhi.n	800bc78 <__ieee754_pow+0x220>
 800bc60:	f1b9 0f00 	cmp.w	r9, #0
 800bc64:	da0b      	bge.n	800bc7e <__ieee754_pow+0x226>
 800bc66:	2000      	movs	r0, #0
 800bc68:	b011      	add	sp, #68	@ 0x44
 800bc6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc6e:	f000 bcf3 	b.w	800c658 <__math_oflow>
 800bc72:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800bcd8 <__ieee754_pow+0x280>
 800bc76:	e7e7      	b.n	800bc48 <__ieee754_pow+0x1f0>
 800bc78:	f1b9 0f00 	cmp.w	r9, #0
 800bc7c:	dcf3      	bgt.n	800bc66 <__ieee754_pow+0x20e>
 800bc7e:	2000      	movs	r0, #0
 800bc80:	b011      	add	sp, #68	@ 0x44
 800bc82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc86:	f000 bcdf 	b.w	800c648 <__math_uflow>
 800bc8a:	4598      	cmp	r8, r3
 800bc8c:	d20c      	bcs.n	800bca8 <__ieee754_pow+0x250>
 800bc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	2300      	movs	r3, #0
 800bc96:	f7f4 ff29 	bl	8000aec <__aeabi_dcmplt>
 800bc9a:	3800      	subs	r0, #0
 800bc9c:	bf18      	it	ne
 800bc9e:	2001      	movne	r0, #1
 800bca0:	f1b9 0f00 	cmp.w	r9, #0
 800bca4:	daec      	bge.n	800bc80 <__ieee754_pow+0x228>
 800bca6:	e7df      	b.n	800bc68 <__ieee754_pow+0x210>
 800bca8:	4b10      	ldr	r3, [pc, #64]	@ (800bcec <__ieee754_pow+0x294>)
 800bcaa:	4598      	cmp	r8, r3
 800bcac:	f04f 0200 	mov.w	r2, #0
 800bcb0:	d924      	bls.n	800bcfc <__ieee754_pow+0x2a4>
 800bcb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	f7f4 ff18 	bl	8000aec <__aeabi_dcmplt>
 800bcbc:	3800      	subs	r0, #0
 800bcbe:	bf18      	it	ne
 800bcc0:	2001      	movne	r0, #1
 800bcc2:	f1b9 0f00 	cmp.w	r9, #0
 800bcc6:	dccf      	bgt.n	800bc68 <__ieee754_pow+0x210>
 800bcc8:	e7da      	b.n	800bc80 <__ieee754_pow+0x228>
 800bcca:	bf00      	nop
 800bccc:	f3af 8000 	nop.w
 800bcd0:	00000000 	.word	0x00000000
 800bcd4:	3ff00000 	.word	0x3ff00000
 800bcd8:	00000000 	.word	0x00000000
 800bcdc:	bff00000 	.word	0xbff00000
 800bce0:	fff00000 	.word	0xfff00000
 800bce4:	7ff00000 	.word	0x7ff00000
 800bce8:	433fffff 	.word	0x433fffff
 800bcec:	3ff00000 	.word	0x3ff00000
 800bcf0:	3fefffff 	.word	0x3fefffff
 800bcf4:	3fe00000 	.word	0x3fe00000
 800bcf8:	43f00000 	.word	0x43f00000
 800bcfc:	4b5a      	ldr	r3, [pc, #360]	@ (800be68 <__ieee754_pow+0x410>)
 800bcfe:	f7f4 facb 	bl	8000298 <__aeabi_dsub>
 800bd02:	a351      	add	r3, pc, #324	@ (adr r3, 800be48 <__ieee754_pow+0x3f0>)
 800bd04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd08:	4604      	mov	r4, r0
 800bd0a:	460d      	mov	r5, r1
 800bd0c:	f7f4 fc7c 	bl	8000608 <__aeabi_dmul>
 800bd10:	a34f      	add	r3, pc, #316	@ (adr r3, 800be50 <__ieee754_pow+0x3f8>)
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	4606      	mov	r6, r0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	f7f4 fc73 	bl	8000608 <__aeabi_dmul>
 800bd22:	4b52      	ldr	r3, [pc, #328]	@ (800be6c <__ieee754_pow+0x414>)
 800bd24:	4682      	mov	sl, r0
 800bd26:	468b      	mov	fp, r1
 800bd28:	2200      	movs	r2, #0
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	f7f4 fc6b 	bl	8000608 <__aeabi_dmul>
 800bd32:	4602      	mov	r2, r0
 800bd34:	460b      	mov	r3, r1
 800bd36:	a148      	add	r1, pc, #288	@ (adr r1, 800be58 <__ieee754_pow+0x400>)
 800bd38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd3c:	f7f4 faac 	bl	8000298 <__aeabi_dsub>
 800bd40:	4622      	mov	r2, r4
 800bd42:	462b      	mov	r3, r5
 800bd44:	f7f4 fc60 	bl	8000608 <__aeabi_dmul>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	2000      	movs	r0, #0
 800bd4e:	4948      	ldr	r1, [pc, #288]	@ (800be70 <__ieee754_pow+0x418>)
 800bd50:	f7f4 faa2 	bl	8000298 <__aeabi_dsub>
 800bd54:	4622      	mov	r2, r4
 800bd56:	4680      	mov	r8, r0
 800bd58:	4689      	mov	r9, r1
 800bd5a:	462b      	mov	r3, r5
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fc52 	bl	8000608 <__aeabi_dmul>
 800bd64:	4602      	mov	r2, r0
 800bd66:	460b      	mov	r3, r1
 800bd68:	4640      	mov	r0, r8
 800bd6a:	4649      	mov	r1, r9
 800bd6c:	f7f4 fc4c 	bl	8000608 <__aeabi_dmul>
 800bd70:	a33b      	add	r3, pc, #236	@ (adr r3, 800be60 <__ieee754_pow+0x408>)
 800bd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd76:	f7f4 fc47 	bl	8000608 <__aeabi_dmul>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	460b      	mov	r3, r1
 800bd7e:	4650      	mov	r0, sl
 800bd80:	4659      	mov	r1, fp
 800bd82:	f7f4 fa89 	bl	8000298 <__aeabi_dsub>
 800bd86:	4602      	mov	r2, r0
 800bd88:	460b      	mov	r3, r1
 800bd8a:	4680      	mov	r8, r0
 800bd8c:	4689      	mov	r9, r1
 800bd8e:	4630      	mov	r0, r6
 800bd90:	4639      	mov	r1, r7
 800bd92:	f7f4 fa83 	bl	800029c <__adddf3>
 800bd96:	2400      	movs	r4, #0
 800bd98:	4632      	mov	r2, r6
 800bd9a:	463b      	mov	r3, r7
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	460d      	mov	r5, r1
 800bda0:	f7f4 fa7a 	bl	8000298 <__aeabi_dsub>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	4640      	mov	r0, r8
 800bdaa:	4649      	mov	r1, r9
 800bdac:	f7f4 fa74 	bl	8000298 <__aeabi_dsub>
 800bdb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdb4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bdb8:	2300      	movs	r3, #0
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	4652      	mov	r2, sl
 800bdc6:	465b      	mov	r3, fp
 800bdc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdcc:	f7f4 fa64 	bl	8000298 <__aeabi_dsub>
 800bdd0:	4622      	mov	r2, r4
 800bdd2:	462b      	mov	r3, r5
 800bdd4:	f7f4 fc18 	bl	8000608 <__aeabi_dmul>
 800bdd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bddc:	4680      	mov	r8, r0
 800bdde:	4689      	mov	r9, r1
 800bde0:	4630      	mov	r0, r6
 800bde2:	4639      	mov	r1, r7
 800bde4:	f7f4 fc10 	bl	8000608 <__aeabi_dmul>
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4640      	mov	r0, r8
 800bdee:	4649      	mov	r1, r9
 800bdf0:	f7f4 fa54 	bl	800029c <__adddf3>
 800bdf4:	4652      	mov	r2, sl
 800bdf6:	465b      	mov	r3, fp
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	460f      	mov	r7, r1
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	4629      	mov	r1, r5
 800be00:	f7f4 fc02 	bl	8000608 <__aeabi_dmul>
 800be04:	460b      	mov	r3, r1
 800be06:	4602      	mov	r2, r0
 800be08:	4680      	mov	r8, r0
 800be0a:	4689      	mov	r9, r1
 800be0c:	4630      	mov	r0, r6
 800be0e:	4639      	mov	r1, r7
 800be10:	f7f4 fa44 	bl	800029c <__adddf3>
 800be14:	4b17      	ldr	r3, [pc, #92]	@ (800be74 <__ieee754_pow+0x41c>)
 800be16:	4299      	cmp	r1, r3
 800be18:	4604      	mov	r4, r0
 800be1a:	460d      	mov	r5, r1
 800be1c:	468a      	mov	sl, r1
 800be1e:	468b      	mov	fp, r1
 800be20:	f340 82ef 	ble.w	800c402 <__ieee754_pow+0x9aa>
 800be24:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800be28:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800be2c:	4303      	orrs	r3, r0
 800be2e:	f000 81e8 	beq.w	800c202 <__ieee754_pow+0x7aa>
 800be32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be36:	2200      	movs	r2, #0
 800be38:	2300      	movs	r3, #0
 800be3a:	f7f4 fe57 	bl	8000aec <__aeabi_dcmplt>
 800be3e:	3800      	subs	r0, #0
 800be40:	bf18      	it	ne
 800be42:	2001      	movne	r0, #1
 800be44:	e710      	b.n	800bc68 <__ieee754_pow+0x210>
 800be46:	bf00      	nop
 800be48:	60000000 	.word	0x60000000
 800be4c:	3ff71547 	.word	0x3ff71547
 800be50:	f85ddf44 	.word	0xf85ddf44
 800be54:	3e54ae0b 	.word	0x3e54ae0b
 800be58:	55555555 	.word	0x55555555
 800be5c:	3fd55555 	.word	0x3fd55555
 800be60:	652b82fe 	.word	0x652b82fe
 800be64:	3ff71547 	.word	0x3ff71547
 800be68:	3ff00000 	.word	0x3ff00000
 800be6c:	3fd00000 	.word	0x3fd00000
 800be70:	3fe00000 	.word	0x3fe00000
 800be74:	408fffff 	.word	0x408fffff
 800be78:	4bd5      	ldr	r3, [pc, #852]	@ (800c1d0 <__ieee754_pow+0x778>)
 800be7a:	402b      	ands	r3, r5
 800be7c:	2200      	movs	r2, #0
 800be7e:	b92b      	cbnz	r3, 800be8c <__ieee754_pow+0x434>
 800be80:	4bd4      	ldr	r3, [pc, #848]	@ (800c1d4 <__ieee754_pow+0x77c>)
 800be82:	f7f4 fbc1 	bl	8000608 <__aeabi_dmul>
 800be86:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800be8a:	468b      	mov	fp, r1
 800be8c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800be90:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800be94:	4413      	add	r3, r2
 800be96:	930a      	str	r3, [sp, #40]	@ 0x28
 800be98:	4bcf      	ldr	r3, [pc, #828]	@ (800c1d8 <__ieee754_pow+0x780>)
 800be9a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800be9e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bea2:	459b      	cmp	fp, r3
 800bea4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bea8:	dd08      	ble.n	800bebc <__ieee754_pow+0x464>
 800beaa:	4bcc      	ldr	r3, [pc, #816]	@ (800c1dc <__ieee754_pow+0x784>)
 800beac:	459b      	cmp	fp, r3
 800beae:	f340 81a5 	ble.w	800c1fc <__ieee754_pow+0x7a4>
 800beb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800beb4:	3301      	adds	r3, #1
 800beb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800beb8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bebc:	f04f 0a00 	mov.w	sl, #0
 800bec0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bec4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bec6:	4bc6      	ldr	r3, [pc, #792]	@ (800c1e0 <__ieee754_pow+0x788>)
 800bec8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800becc:	ed93 7b00 	vldr	d7, [r3]
 800bed0:	4629      	mov	r1, r5
 800bed2:	ec53 2b17 	vmov	r2, r3, d7
 800bed6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800beda:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bede:	f7f4 f9db 	bl	8000298 <__aeabi_dsub>
 800bee2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bee6:	4606      	mov	r6, r0
 800bee8:	460f      	mov	r7, r1
 800beea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800beee:	f7f4 f9d5 	bl	800029c <__adddf3>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	2000      	movs	r0, #0
 800bef8:	49ba      	ldr	r1, [pc, #744]	@ (800c1e4 <__ieee754_pow+0x78c>)
 800befa:	f7f4 fcaf 	bl	800085c <__aeabi_ddiv>
 800befe:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4630      	mov	r0, r6
 800bf08:	4639      	mov	r1, r7
 800bf0a:	f7f4 fb7d 	bl	8000608 <__aeabi_dmul>
 800bf0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf12:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bf16:	106d      	asrs	r5, r5, #1
 800bf18:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bf1c:	f04f 0b00 	mov.w	fp, #0
 800bf20:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bf24:	4661      	mov	r1, ip
 800bf26:	2200      	movs	r2, #0
 800bf28:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bf2c:	4658      	mov	r0, fp
 800bf2e:	46e1      	mov	r9, ip
 800bf30:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bf34:	4614      	mov	r4, r2
 800bf36:	461d      	mov	r5, r3
 800bf38:	f7f4 fb66 	bl	8000608 <__aeabi_dmul>
 800bf3c:	4602      	mov	r2, r0
 800bf3e:	460b      	mov	r3, r1
 800bf40:	4630      	mov	r0, r6
 800bf42:	4639      	mov	r1, r7
 800bf44:	f7f4 f9a8 	bl	8000298 <__aeabi_dsub>
 800bf48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf4c:	4606      	mov	r6, r0
 800bf4e:	460f      	mov	r7, r1
 800bf50:	4620      	mov	r0, r4
 800bf52:	4629      	mov	r1, r5
 800bf54:	f7f4 f9a0 	bl	8000298 <__aeabi_dsub>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf60:	f7f4 f99a 	bl	8000298 <__aeabi_dsub>
 800bf64:	465a      	mov	r2, fp
 800bf66:	464b      	mov	r3, r9
 800bf68:	f7f4 fb4e 	bl	8000608 <__aeabi_dmul>
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	460b      	mov	r3, r1
 800bf70:	4630      	mov	r0, r6
 800bf72:	4639      	mov	r1, r7
 800bf74:	f7f4 f990 	bl	8000298 <__aeabi_dsub>
 800bf78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf7c:	f7f4 fb44 	bl	8000608 <__aeabi_dmul>
 800bf80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf88:	4610      	mov	r0, r2
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	f7f4 fb3c 	bl	8000608 <__aeabi_dmul>
 800bf90:	a37d      	add	r3, pc, #500	@ (adr r3, 800c188 <__ieee754_pow+0x730>)
 800bf92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf96:	4604      	mov	r4, r0
 800bf98:	460d      	mov	r5, r1
 800bf9a:	f7f4 fb35 	bl	8000608 <__aeabi_dmul>
 800bf9e:	a37c      	add	r3, pc, #496	@ (adr r3, 800c190 <__ieee754_pow+0x738>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 f97a 	bl	800029c <__adddf3>
 800bfa8:	4622      	mov	r2, r4
 800bfaa:	462b      	mov	r3, r5
 800bfac:	f7f4 fb2c 	bl	8000608 <__aeabi_dmul>
 800bfb0:	a379      	add	r3, pc, #484	@ (adr r3, 800c198 <__ieee754_pow+0x740>)
 800bfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb6:	f7f4 f971 	bl	800029c <__adddf3>
 800bfba:	4622      	mov	r2, r4
 800bfbc:	462b      	mov	r3, r5
 800bfbe:	f7f4 fb23 	bl	8000608 <__aeabi_dmul>
 800bfc2:	a377      	add	r3, pc, #476	@ (adr r3, 800c1a0 <__ieee754_pow+0x748>)
 800bfc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc8:	f7f4 f968 	bl	800029c <__adddf3>
 800bfcc:	4622      	mov	r2, r4
 800bfce:	462b      	mov	r3, r5
 800bfd0:	f7f4 fb1a 	bl	8000608 <__aeabi_dmul>
 800bfd4:	a374      	add	r3, pc, #464	@ (adr r3, 800c1a8 <__ieee754_pow+0x750>)
 800bfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfda:	f7f4 f95f 	bl	800029c <__adddf3>
 800bfde:	4622      	mov	r2, r4
 800bfe0:	462b      	mov	r3, r5
 800bfe2:	f7f4 fb11 	bl	8000608 <__aeabi_dmul>
 800bfe6:	a372      	add	r3, pc, #456	@ (adr r3, 800c1b0 <__ieee754_pow+0x758>)
 800bfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfec:	f7f4 f956 	bl	800029c <__adddf3>
 800bff0:	4622      	mov	r2, r4
 800bff2:	4606      	mov	r6, r0
 800bff4:	460f      	mov	r7, r1
 800bff6:	462b      	mov	r3, r5
 800bff8:	4620      	mov	r0, r4
 800bffa:	4629      	mov	r1, r5
 800bffc:	f7f4 fb04 	bl	8000608 <__aeabi_dmul>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	4630      	mov	r0, r6
 800c006:	4639      	mov	r1, r7
 800c008:	f7f4 fafe 	bl	8000608 <__aeabi_dmul>
 800c00c:	465a      	mov	r2, fp
 800c00e:	4604      	mov	r4, r0
 800c010:	460d      	mov	r5, r1
 800c012:	464b      	mov	r3, r9
 800c014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c018:	f7f4 f940 	bl	800029c <__adddf3>
 800c01c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c020:	f7f4 faf2 	bl	8000608 <__aeabi_dmul>
 800c024:	4622      	mov	r2, r4
 800c026:	462b      	mov	r3, r5
 800c028:	f7f4 f938 	bl	800029c <__adddf3>
 800c02c:	465a      	mov	r2, fp
 800c02e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c032:	464b      	mov	r3, r9
 800c034:	4658      	mov	r0, fp
 800c036:	4649      	mov	r1, r9
 800c038:	f7f4 fae6 	bl	8000608 <__aeabi_dmul>
 800c03c:	4b6a      	ldr	r3, [pc, #424]	@ (800c1e8 <__ieee754_pow+0x790>)
 800c03e:	2200      	movs	r2, #0
 800c040:	4606      	mov	r6, r0
 800c042:	460f      	mov	r7, r1
 800c044:	f7f4 f92a 	bl	800029c <__adddf3>
 800c048:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c04c:	f7f4 f926 	bl	800029c <__adddf3>
 800c050:	46d8      	mov	r8, fp
 800c052:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c056:	460d      	mov	r5, r1
 800c058:	465a      	mov	r2, fp
 800c05a:	460b      	mov	r3, r1
 800c05c:	4640      	mov	r0, r8
 800c05e:	4649      	mov	r1, r9
 800c060:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c064:	f7f4 fad0 	bl	8000608 <__aeabi_dmul>
 800c068:	465c      	mov	r4, fp
 800c06a:	4680      	mov	r8, r0
 800c06c:	4689      	mov	r9, r1
 800c06e:	4b5e      	ldr	r3, [pc, #376]	@ (800c1e8 <__ieee754_pow+0x790>)
 800c070:	2200      	movs	r2, #0
 800c072:	4620      	mov	r0, r4
 800c074:	4629      	mov	r1, r5
 800c076:	f7f4 f90f 	bl	8000298 <__aeabi_dsub>
 800c07a:	4632      	mov	r2, r6
 800c07c:	463b      	mov	r3, r7
 800c07e:	f7f4 f90b 	bl	8000298 <__aeabi_dsub>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c08a:	f7f4 f905 	bl	8000298 <__aeabi_dsub>
 800c08e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c092:	f7f4 fab9 	bl	8000608 <__aeabi_dmul>
 800c096:	4622      	mov	r2, r4
 800c098:	4606      	mov	r6, r0
 800c09a:	460f      	mov	r7, r1
 800c09c:	462b      	mov	r3, r5
 800c09e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0a2:	f7f4 fab1 	bl	8000608 <__aeabi_dmul>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4630      	mov	r0, r6
 800c0ac:	4639      	mov	r1, r7
 800c0ae:	f7f4 f8f5 	bl	800029c <__adddf3>
 800c0b2:	4606      	mov	r6, r0
 800c0b4:	460f      	mov	r7, r1
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	4640      	mov	r0, r8
 800c0bc:	4649      	mov	r1, r9
 800c0be:	f7f4 f8ed 	bl	800029c <__adddf3>
 800c0c2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c0c6:	a33c      	add	r3, pc, #240	@ (adr r3, 800c1b8 <__ieee754_pow+0x760>)
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	4658      	mov	r0, fp
 800c0ce:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c0d2:	460d      	mov	r5, r1
 800c0d4:	f7f4 fa98 	bl	8000608 <__aeabi_dmul>
 800c0d8:	465c      	mov	r4, fp
 800c0da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0de:	4642      	mov	r2, r8
 800c0e0:	464b      	mov	r3, r9
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 f8d7 	bl	8000298 <__aeabi_dsub>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4630      	mov	r0, r6
 800c0f0:	4639      	mov	r1, r7
 800c0f2:	f7f4 f8d1 	bl	8000298 <__aeabi_dsub>
 800c0f6:	a332      	add	r3, pc, #200	@ (adr r3, 800c1c0 <__ieee754_pow+0x768>)
 800c0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fc:	f7f4 fa84 	bl	8000608 <__aeabi_dmul>
 800c100:	a331      	add	r3, pc, #196	@ (adr r3, 800c1c8 <__ieee754_pow+0x770>)
 800c102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c106:	4606      	mov	r6, r0
 800c108:	460f      	mov	r7, r1
 800c10a:	4620      	mov	r0, r4
 800c10c:	4629      	mov	r1, r5
 800c10e:	f7f4 fa7b 	bl	8000608 <__aeabi_dmul>
 800c112:	4602      	mov	r2, r0
 800c114:	460b      	mov	r3, r1
 800c116:	4630      	mov	r0, r6
 800c118:	4639      	mov	r1, r7
 800c11a:	f7f4 f8bf 	bl	800029c <__adddf3>
 800c11e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c120:	4b32      	ldr	r3, [pc, #200]	@ (800c1ec <__ieee754_pow+0x794>)
 800c122:	4413      	add	r3, r2
 800c124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c128:	f7f4 f8b8 	bl	800029c <__adddf3>
 800c12c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c130:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c132:	f7f4 f9ff 	bl	8000534 <__aeabi_i2d>
 800c136:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c138:	4b2d      	ldr	r3, [pc, #180]	@ (800c1f0 <__ieee754_pow+0x798>)
 800c13a:	4413      	add	r3, r2
 800c13c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c140:	4606      	mov	r6, r0
 800c142:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c146:	460f      	mov	r7, r1
 800c148:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c14c:	f7f4 f8a6 	bl	800029c <__adddf3>
 800c150:	4642      	mov	r2, r8
 800c152:	464b      	mov	r3, r9
 800c154:	f7f4 f8a2 	bl	800029c <__adddf3>
 800c158:	4632      	mov	r2, r6
 800c15a:	463b      	mov	r3, r7
 800c15c:	f7f4 f89e 	bl	800029c <__adddf3>
 800c160:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c164:	4632      	mov	r2, r6
 800c166:	463b      	mov	r3, r7
 800c168:	4658      	mov	r0, fp
 800c16a:	460d      	mov	r5, r1
 800c16c:	f7f4 f894 	bl	8000298 <__aeabi_dsub>
 800c170:	4642      	mov	r2, r8
 800c172:	464b      	mov	r3, r9
 800c174:	f7f4 f890 	bl	8000298 <__aeabi_dsub>
 800c178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c17c:	f7f4 f88c 	bl	8000298 <__aeabi_dsub>
 800c180:	465c      	mov	r4, fp
 800c182:	4602      	mov	r2, r0
 800c184:	e036      	b.n	800c1f4 <__ieee754_pow+0x79c>
 800c186:	bf00      	nop
 800c188:	4a454eef 	.word	0x4a454eef
 800c18c:	3fca7e28 	.word	0x3fca7e28
 800c190:	93c9db65 	.word	0x93c9db65
 800c194:	3fcd864a 	.word	0x3fcd864a
 800c198:	a91d4101 	.word	0xa91d4101
 800c19c:	3fd17460 	.word	0x3fd17460
 800c1a0:	518f264d 	.word	0x518f264d
 800c1a4:	3fd55555 	.word	0x3fd55555
 800c1a8:	db6fabff 	.word	0xdb6fabff
 800c1ac:	3fdb6db6 	.word	0x3fdb6db6
 800c1b0:	33333303 	.word	0x33333303
 800c1b4:	3fe33333 	.word	0x3fe33333
 800c1b8:	e0000000 	.word	0xe0000000
 800c1bc:	3feec709 	.word	0x3feec709
 800c1c0:	dc3a03fd 	.word	0xdc3a03fd
 800c1c4:	3feec709 	.word	0x3feec709
 800c1c8:	145b01f5 	.word	0x145b01f5
 800c1cc:	be3e2fe0 	.word	0xbe3e2fe0
 800c1d0:	7ff00000 	.word	0x7ff00000
 800c1d4:	43400000 	.word	0x43400000
 800c1d8:	0003988e 	.word	0x0003988e
 800c1dc:	000bb679 	.word	0x000bb679
 800c1e0:	0800cc48 	.word	0x0800cc48
 800c1e4:	3ff00000 	.word	0x3ff00000
 800c1e8:	40080000 	.word	0x40080000
 800c1ec:	0800cc28 	.word	0x0800cc28
 800c1f0:	0800cc38 	.word	0x0800cc38
 800c1f4:	460b      	mov	r3, r1
 800c1f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1fa:	e5d7      	b.n	800bdac <__ieee754_pow+0x354>
 800c1fc:	f04f 0a01 	mov.w	sl, #1
 800c200:	e65e      	b.n	800bec0 <__ieee754_pow+0x468>
 800c202:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c4d4 <__ieee754_pow+0xa7c>)
 800c204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 f846 	bl	800029c <__adddf3>
 800c210:	4642      	mov	r2, r8
 800c212:	e9cd 0100 	strd	r0, r1, [sp]
 800c216:	464b      	mov	r3, r9
 800c218:	4620      	mov	r0, r4
 800c21a:	4629      	mov	r1, r5
 800c21c:	f7f4 f83c 	bl	8000298 <__aeabi_dsub>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c228:	f7f4 fc7e 	bl	8000b28 <__aeabi_dcmpgt>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f47f ae00 	bne.w	800be32 <__ieee754_pow+0x3da>
 800c232:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c236:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c23a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c23e:	fa43 fa0a 	asr.w	sl, r3, sl
 800c242:	44da      	add	sl, fp
 800c244:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c248:	489d      	ldr	r0, [pc, #628]	@ (800c4c0 <__ieee754_pow+0xa68>)
 800c24a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c24e:	4108      	asrs	r0, r1
 800c250:	ea00 030a 	and.w	r3, r0, sl
 800c254:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c258:	f1c1 0114 	rsb	r1, r1, #20
 800c25c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c260:	fa4a fa01 	asr.w	sl, sl, r1
 800c264:	f1bb 0f00 	cmp.w	fp, #0
 800c268:	4640      	mov	r0, r8
 800c26a:	4649      	mov	r1, r9
 800c26c:	f04f 0200 	mov.w	r2, #0
 800c270:	bfb8      	it	lt
 800c272:	f1ca 0a00 	rsblt	sl, sl, #0
 800c276:	f7f4 f80f 	bl	8000298 <__aeabi_dsub>
 800c27a:	4680      	mov	r8, r0
 800c27c:	4689      	mov	r9, r1
 800c27e:	4632      	mov	r2, r6
 800c280:	463b      	mov	r3, r7
 800c282:	4640      	mov	r0, r8
 800c284:	4649      	mov	r1, r9
 800c286:	f7f4 f809 	bl	800029c <__adddf3>
 800c28a:	2400      	movs	r4, #0
 800c28c:	a37c      	add	r3, pc, #496	@ (adr r3, 800c480 <__ieee754_pow+0xa28>)
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	4620      	mov	r0, r4
 800c294:	460d      	mov	r5, r1
 800c296:	f7f4 f9b7 	bl	8000608 <__aeabi_dmul>
 800c29a:	4642      	mov	r2, r8
 800c29c:	e9cd 0100 	strd	r0, r1, [sp]
 800c2a0:	464b      	mov	r3, r9
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	f7f3 fff7 	bl	8000298 <__aeabi_dsub>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	460b      	mov	r3, r1
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	4639      	mov	r1, r7
 800c2b2:	f7f3 fff1 	bl	8000298 <__aeabi_dsub>
 800c2b6:	a374      	add	r3, pc, #464	@ (adr r3, 800c488 <__ieee754_pow+0xa30>)
 800c2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2bc:	f7f4 f9a4 	bl	8000608 <__aeabi_dmul>
 800c2c0:	a373      	add	r3, pc, #460	@ (adr r3, 800c490 <__ieee754_pow+0xa38>)
 800c2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	4689      	mov	r9, r1
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	f7f4 f99b 	bl	8000608 <__aeabi_dmul>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	4649      	mov	r1, r9
 800c2da:	f7f3 ffdf 	bl	800029c <__adddf3>
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	4602      	mov	r2, r0
 800c2e4:	460b      	mov	r3, r1
 800c2e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2ea:	f7f3 ffd7 	bl	800029c <__adddf3>
 800c2ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	4689      	mov	r9, r1
 800c2f6:	f7f3 ffcf 	bl	8000298 <__aeabi_dsub>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	4620      	mov	r0, r4
 800c300:	4629      	mov	r1, r5
 800c302:	f7f3 ffc9 	bl	8000298 <__aeabi_dsub>
 800c306:	4642      	mov	r2, r8
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	464b      	mov	r3, r9
 800c30e:	4640      	mov	r0, r8
 800c310:	4649      	mov	r1, r9
 800c312:	f7f4 f979 	bl	8000608 <__aeabi_dmul>
 800c316:	a360      	add	r3, pc, #384	@ (adr r3, 800c498 <__ieee754_pow+0xa40>)
 800c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31c:	4604      	mov	r4, r0
 800c31e:	460d      	mov	r5, r1
 800c320:	f7f4 f972 	bl	8000608 <__aeabi_dmul>
 800c324:	a35e      	add	r3, pc, #376	@ (adr r3, 800c4a0 <__ieee754_pow+0xa48>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	f7f3 ffb5 	bl	8000298 <__aeabi_dsub>
 800c32e:	4622      	mov	r2, r4
 800c330:	462b      	mov	r3, r5
 800c332:	f7f4 f969 	bl	8000608 <__aeabi_dmul>
 800c336:	a35c      	add	r3, pc, #368	@ (adr r3, 800c4a8 <__ieee754_pow+0xa50>)
 800c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33c:	f7f3 ffae 	bl	800029c <__adddf3>
 800c340:	4622      	mov	r2, r4
 800c342:	462b      	mov	r3, r5
 800c344:	f7f4 f960 	bl	8000608 <__aeabi_dmul>
 800c348:	a359      	add	r3, pc, #356	@ (adr r3, 800c4b0 <__ieee754_pow+0xa58>)
 800c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34e:	f7f3 ffa3 	bl	8000298 <__aeabi_dsub>
 800c352:	4622      	mov	r2, r4
 800c354:	462b      	mov	r3, r5
 800c356:	f7f4 f957 	bl	8000608 <__aeabi_dmul>
 800c35a:	a357      	add	r3, pc, #348	@ (adr r3, 800c4b8 <__ieee754_pow+0xa60>)
 800c35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c360:	f7f3 ff9c 	bl	800029c <__adddf3>
 800c364:	4622      	mov	r2, r4
 800c366:	462b      	mov	r3, r5
 800c368:	f7f4 f94e 	bl	8000608 <__aeabi_dmul>
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	4640      	mov	r0, r8
 800c372:	4649      	mov	r1, r9
 800c374:	f7f3 ff90 	bl	8000298 <__aeabi_dsub>
 800c378:	4604      	mov	r4, r0
 800c37a:	460d      	mov	r5, r1
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4640      	mov	r0, r8
 800c382:	4649      	mov	r1, r9
 800c384:	f7f4 f940 	bl	8000608 <__aeabi_dmul>
 800c388:	2200      	movs	r2, #0
 800c38a:	e9cd 0100 	strd	r0, r1, [sp]
 800c38e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c392:	4620      	mov	r0, r4
 800c394:	4629      	mov	r1, r5
 800c396:	f7f3 ff7f 	bl	8000298 <__aeabi_dsub>
 800c39a:	4602      	mov	r2, r0
 800c39c:	460b      	mov	r3, r1
 800c39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3a2:	f7f4 fa5b 	bl	800085c <__aeabi_ddiv>
 800c3a6:	4632      	mov	r2, r6
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	463b      	mov	r3, r7
 800c3ae:	4640      	mov	r0, r8
 800c3b0:	4649      	mov	r1, r9
 800c3b2:	f7f4 f929 	bl	8000608 <__aeabi_dmul>
 800c3b6:	4632      	mov	r2, r6
 800c3b8:	463b      	mov	r3, r7
 800c3ba:	f7f3 ff6f 	bl	800029c <__adddf3>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	f7f3 ff67 	bl	8000298 <__aeabi_dsub>
 800c3ca:	4642      	mov	r2, r8
 800c3cc:	464b      	mov	r3, r9
 800c3ce:	f7f3 ff63 	bl	8000298 <__aeabi_dsub>
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	493b      	ldr	r1, [pc, #236]	@ (800c4c4 <__ieee754_pow+0xa6c>)
 800c3d8:	2000      	movs	r0, #0
 800c3da:	f7f3 ff5d 	bl	8000298 <__aeabi_dsub>
 800c3de:	ec41 0b10 	vmov	d0, r0, r1
 800c3e2:	ee10 3a90 	vmov	r3, s1
 800c3e6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c3ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3ee:	da30      	bge.n	800c452 <__ieee754_pow+0x9fa>
 800c3f0:	4650      	mov	r0, sl
 800c3f2:	f000 f87d 	bl	800c4f0 <scalbn>
 800c3f6:	ec51 0b10 	vmov	r0, r1, d0
 800c3fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3fe:	f7ff bbd2 	b.w	800bba6 <__ieee754_pow+0x14e>
 800c402:	4c31      	ldr	r4, [pc, #196]	@ (800c4c8 <__ieee754_pow+0xa70>)
 800c404:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c408:	42a3      	cmp	r3, r4
 800c40a:	d91a      	bls.n	800c442 <__ieee754_pow+0x9ea>
 800c40c:	4b2f      	ldr	r3, [pc, #188]	@ (800c4cc <__ieee754_pow+0xa74>)
 800c40e:	440b      	add	r3, r1
 800c410:	4303      	orrs	r3, r0
 800c412:	d009      	beq.n	800c428 <__ieee754_pow+0x9d0>
 800c414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c418:	2200      	movs	r2, #0
 800c41a:	2300      	movs	r3, #0
 800c41c:	f7f4 fb66 	bl	8000aec <__aeabi_dcmplt>
 800c420:	3800      	subs	r0, #0
 800c422:	bf18      	it	ne
 800c424:	2001      	movne	r0, #1
 800c426:	e42b      	b.n	800bc80 <__ieee754_pow+0x228>
 800c428:	4642      	mov	r2, r8
 800c42a:	464b      	mov	r3, r9
 800c42c:	f7f3 ff34 	bl	8000298 <__aeabi_dsub>
 800c430:	4632      	mov	r2, r6
 800c432:	463b      	mov	r3, r7
 800c434:	f7f4 fb6e 	bl	8000b14 <__aeabi_dcmpge>
 800c438:	2800      	cmp	r0, #0
 800c43a:	d1eb      	bne.n	800c414 <__ieee754_pow+0x9bc>
 800c43c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c4dc <__ieee754_pow+0xa84>
 800c440:	e6f7      	b.n	800c232 <__ieee754_pow+0x7da>
 800c442:	469a      	mov	sl, r3
 800c444:	4b22      	ldr	r3, [pc, #136]	@ (800c4d0 <__ieee754_pow+0xa78>)
 800c446:	459a      	cmp	sl, r3
 800c448:	f63f aef3 	bhi.w	800c232 <__ieee754_pow+0x7da>
 800c44c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c450:	e715      	b.n	800c27e <__ieee754_pow+0x826>
 800c452:	ec51 0b10 	vmov	r0, r1, d0
 800c456:	4619      	mov	r1, r3
 800c458:	e7cf      	b.n	800c3fa <__ieee754_pow+0x9a2>
 800c45a:	491a      	ldr	r1, [pc, #104]	@ (800c4c4 <__ieee754_pow+0xa6c>)
 800c45c:	2000      	movs	r0, #0
 800c45e:	f7ff bb18 	b.w	800ba92 <__ieee754_pow+0x3a>
 800c462:	2000      	movs	r0, #0
 800c464:	2100      	movs	r1, #0
 800c466:	f7ff bb14 	b.w	800ba92 <__ieee754_pow+0x3a>
 800c46a:	4630      	mov	r0, r6
 800c46c:	4639      	mov	r1, r7
 800c46e:	f7ff bb10 	b.w	800ba92 <__ieee754_pow+0x3a>
 800c472:	460c      	mov	r4, r1
 800c474:	f7ff bb5e 	b.w	800bb34 <__ieee754_pow+0xdc>
 800c478:	2400      	movs	r4, #0
 800c47a:	f7ff bb49 	b.w	800bb10 <__ieee754_pow+0xb8>
 800c47e:	bf00      	nop
 800c480:	00000000 	.word	0x00000000
 800c484:	3fe62e43 	.word	0x3fe62e43
 800c488:	fefa39ef 	.word	0xfefa39ef
 800c48c:	3fe62e42 	.word	0x3fe62e42
 800c490:	0ca86c39 	.word	0x0ca86c39
 800c494:	be205c61 	.word	0xbe205c61
 800c498:	72bea4d0 	.word	0x72bea4d0
 800c49c:	3e663769 	.word	0x3e663769
 800c4a0:	c5d26bf1 	.word	0xc5d26bf1
 800c4a4:	3ebbbd41 	.word	0x3ebbbd41
 800c4a8:	af25de2c 	.word	0xaf25de2c
 800c4ac:	3f11566a 	.word	0x3f11566a
 800c4b0:	16bebd93 	.word	0x16bebd93
 800c4b4:	3f66c16c 	.word	0x3f66c16c
 800c4b8:	5555553e 	.word	0x5555553e
 800c4bc:	3fc55555 	.word	0x3fc55555
 800c4c0:	fff00000 	.word	0xfff00000
 800c4c4:	3ff00000 	.word	0x3ff00000
 800c4c8:	4090cbff 	.word	0x4090cbff
 800c4cc:	3f6f3400 	.word	0x3f6f3400
 800c4d0:	3fe00000 	.word	0x3fe00000
 800c4d4:	652b82fe 	.word	0x652b82fe
 800c4d8:	3c971547 	.word	0x3c971547
 800c4dc:	4090cc00 	.word	0x4090cc00

0800c4e0 <fabs>:
 800c4e0:	ec51 0b10 	vmov	r0, r1, d0
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4ea:	ec43 2b10 	vmov	d0, r2, r3
 800c4ee:	4770      	bx	lr

0800c4f0 <scalbn>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	ec55 4b10 	vmov	r4, r5, d0
 800c4f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	462b      	mov	r3, r5
 800c4fe:	b991      	cbnz	r1, 800c526 <scalbn+0x36>
 800c500:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c504:	4323      	orrs	r3, r4
 800c506:	d03d      	beq.n	800c584 <scalbn+0x94>
 800c508:	4b35      	ldr	r3, [pc, #212]	@ (800c5e0 <scalbn+0xf0>)
 800c50a:	4620      	mov	r0, r4
 800c50c:	4629      	mov	r1, r5
 800c50e:	2200      	movs	r2, #0
 800c510:	f7f4 f87a 	bl	8000608 <__aeabi_dmul>
 800c514:	4b33      	ldr	r3, [pc, #204]	@ (800c5e4 <scalbn+0xf4>)
 800c516:	429e      	cmp	r6, r3
 800c518:	4604      	mov	r4, r0
 800c51a:	460d      	mov	r5, r1
 800c51c:	da0f      	bge.n	800c53e <scalbn+0x4e>
 800c51e:	a328      	add	r3, pc, #160	@ (adr r3, 800c5c0 <scalbn+0xd0>)
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	e01e      	b.n	800c564 <scalbn+0x74>
 800c526:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c52a:	4291      	cmp	r1, r2
 800c52c:	d10b      	bne.n	800c546 <scalbn+0x56>
 800c52e:	4622      	mov	r2, r4
 800c530:	4620      	mov	r0, r4
 800c532:	4629      	mov	r1, r5
 800c534:	f7f3 feb2 	bl	800029c <__adddf3>
 800c538:	4604      	mov	r4, r0
 800c53a:	460d      	mov	r5, r1
 800c53c:	e022      	b.n	800c584 <scalbn+0x94>
 800c53e:	460b      	mov	r3, r1
 800c540:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c544:	3936      	subs	r1, #54	@ 0x36
 800c546:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c54a:	4296      	cmp	r6, r2
 800c54c:	dd0d      	ble.n	800c56a <scalbn+0x7a>
 800c54e:	2d00      	cmp	r5, #0
 800c550:	a11d      	add	r1, pc, #116	@ (adr r1, 800c5c8 <scalbn+0xd8>)
 800c552:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c556:	da02      	bge.n	800c55e <scalbn+0x6e>
 800c558:	a11d      	add	r1, pc, #116	@ (adr r1, 800c5d0 <scalbn+0xe0>)
 800c55a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c55e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c5c8 <scalbn+0xd8>)
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	f7f4 f850 	bl	8000608 <__aeabi_dmul>
 800c568:	e7e6      	b.n	800c538 <scalbn+0x48>
 800c56a:	1872      	adds	r2, r6, r1
 800c56c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c570:	428a      	cmp	r2, r1
 800c572:	dcec      	bgt.n	800c54e <scalbn+0x5e>
 800c574:	2a00      	cmp	r2, #0
 800c576:	dd08      	ble.n	800c58a <scalbn+0x9a>
 800c578:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c57c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c580:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c584:	ec45 4b10 	vmov	d0, r4, r5
 800c588:	bd70      	pop	{r4, r5, r6, pc}
 800c58a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c58e:	da08      	bge.n	800c5a2 <scalbn+0xb2>
 800c590:	2d00      	cmp	r5, #0
 800c592:	a10b      	add	r1, pc, #44	@ (adr r1, 800c5c0 <scalbn+0xd0>)
 800c594:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c598:	dac1      	bge.n	800c51e <scalbn+0x2e>
 800c59a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c5d8 <scalbn+0xe8>)
 800c59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a0:	e7bd      	b.n	800c51e <scalbn+0x2e>
 800c5a2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c5a6:	3236      	adds	r2, #54	@ 0x36
 800c5a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c5ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e8 <scalbn+0xf8>)
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	e7d4      	b.n	800c564 <scalbn+0x74>
 800c5ba:	bf00      	nop
 800c5bc:	f3af 8000 	nop.w
 800c5c0:	c2f8f359 	.word	0xc2f8f359
 800c5c4:	01a56e1f 	.word	0x01a56e1f
 800c5c8:	8800759c 	.word	0x8800759c
 800c5cc:	7e37e43c 	.word	0x7e37e43c
 800c5d0:	8800759c 	.word	0x8800759c
 800c5d4:	fe37e43c 	.word	0xfe37e43c
 800c5d8:	c2f8f359 	.word	0xc2f8f359
 800c5dc:	81a56e1f 	.word	0x81a56e1f
 800c5e0:	43500000 	.word	0x43500000
 800c5e4:	ffff3cb0 	.word	0xffff3cb0
 800c5e8:	3c900000 	.word	0x3c900000

0800c5ec <with_errno>:
 800c5ec:	b510      	push	{r4, lr}
 800c5ee:	ed2d 8b02 	vpush	{d8}
 800c5f2:	eeb0 8a40 	vmov.f32	s16, s0
 800c5f6:	eef0 8a60 	vmov.f32	s17, s1
 800c5fa:	4604      	mov	r4, r0
 800c5fc:	f7fd f93a 	bl	8009874 <__errno>
 800c600:	eeb0 0a48 	vmov.f32	s0, s16
 800c604:	eef0 0a68 	vmov.f32	s1, s17
 800c608:	ecbd 8b02 	vpop	{d8}
 800c60c:	6004      	str	r4, [r0, #0]
 800c60e:	bd10      	pop	{r4, pc}

0800c610 <xflow>:
 800c610:	4603      	mov	r3, r0
 800c612:	b507      	push	{r0, r1, r2, lr}
 800c614:	ec51 0b10 	vmov	r0, r1, d0
 800c618:	b183      	cbz	r3, 800c63c <xflow+0x2c>
 800c61a:	4602      	mov	r2, r0
 800c61c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c620:	e9cd 2300 	strd	r2, r3, [sp]
 800c624:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c628:	f7f3 ffee 	bl	8000608 <__aeabi_dmul>
 800c62c:	ec41 0b10 	vmov	d0, r0, r1
 800c630:	2022      	movs	r0, #34	@ 0x22
 800c632:	b003      	add	sp, #12
 800c634:	f85d eb04 	ldr.w	lr, [sp], #4
 800c638:	f7ff bfd8 	b.w	800c5ec <with_errno>
 800c63c:	4602      	mov	r2, r0
 800c63e:	460b      	mov	r3, r1
 800c640:	e7ee      	b.n	800c620 <xflow+0x10>
 800c642:	0000      	movs	r0, r0
 800c644:	0000      	movs	r0, r0
	...

0800c648 <__math_uflow>:
 800c648:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c650 <__math_uflow+0x8>
 800c64c:	f7ff bfe0 	b.w	800c610 <xflow>
 800c650:	00000000 	.word	0x00000000
 800c654:	10000000 	.word	0x10000000

0800c658 <__math_oflow>:
 800c658:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c660 <__math_oflow+0x8>
 800c65c:	f7ff bfd8 	b.w	800c610 <xflow>
 800c660:	00000000 	.word	0x00000000
 800c664:	70000000 	.word	0x70000000

0800c668 <__ieee754_sqrt>:
 800c668:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	4a68      	ldr	r2, [pc, #416]	@ (800c810 <__ieee754_sqrt+0x1a8>)
 800c66e:	ec55 4b10 	vmov	r4, r5, d0
 800c672:	43aa      	bics	r2, r5
 800c674:	462b      	mov	r3, r5
 800c676:	4621      	mov	r1, r4
 800c678:	d110      	bne.n	800c69c <__ieee754_sqrt+0x34>
 800c67a:	4622      	mov	r2, r4
 800c67c:	4620      	mov	r0, r4
 800c67e:	4629      	mov	r1, r5
 800c680:	f7f3 ffc2 	bl	8000608 <__aeabi_dmul>
 800c684:	4602      	mov	r2, r0
 800c686:	460b      	mov	r3, r1
 800c688:	4620      	mov	r0, r4
 800c68a:	4629      	mov	r1, r5
 800c68c:	f7f3 fe06 	bl	800029c <__adddf3>
 800c690:	4604      	mov	r4, r0
 800c692:	460d      	mov	r5, r1
 800c694:	ec45 4b10 	vmov	d0, r4, r5
 800c698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c69c:	2d00      	cmp	r5, #0
 800c69e:	dc0e      	bgt.n	800c6be <__ieee754_sqrt+0x56>
 800c6a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c6a4:	4322      	orrs	r2, r4
 800c6a6:	d0f5      	beq.n	800c694 <__ieee754_sqrt+0x2c>
 800c6a8:	b19d      	cbz	r5, 800c6d2 <__ieee754_sqrt+0x6a>
 800c6aa:	4622      	mov	r2, r4
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	4629      	mov	r1, r5
 800c6b0:	f7f3 fdf2 	bl	8000298 <__aeabi_dsub>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	f7f4 f8d0 	bl	800085c <__aeabi_ddiv>
 800c6bc:	e7e8      	b.n	800c690 <__ieee754_sqrt+0x28>
 800c6be:	152a      	asrs	r2, r5, #20
 800c6c0:	d115      	bne.n	800c6ee <__ieee754_sqrt+0x86>
 800c6c2:	2000      	movs	r0, #0
 800c6c4:	e009      	b.n	800c6da <__ieee754_sqrt+0x72>
 800c6c6:	0acb      	lsrs	r3, r1, #11
 800c6c8:	3a15      	subs	r2, #21
 800c6ca:	0549      	lsls	r1, r1, #21
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d0fa      	beq.n	800c6c6 <__ieee754_sqrt+0x5e>
 800c6d0:	e7f7      	b.n	800c6c2 <__ieee754_sqrt+0x5a>
 800c6d2:	462a      	mov	r2, r5
 800c6d4:	e7fa      	b.n	800c6cc <__ieee754_sqrt+0x64>
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	3001      	adds	r0, #1
 800c6da:	02dc      	lsls	r4, r3, #11
 800c6dc:	d5fb      	bpl.n	800c6d6 <__ieee754_sqrt+0x6e>
 800c6de:	1e44      	subs	r4, r0, #1
 800c6e0:	1b12      	subs	r2, r2, r4
 800c6e2:	f1c0 0420 	rsb	r4, r0, #32
 800c6e6:	fa21 f404 	lsr.w	r4, r1, r4
 800c6ea:	4323      	orrs	r3, r4
 800c6ec:	4081      	lsls	r1, r0
 800c6ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c6f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6fa:	07d2      	lsls	r2, r2, #31
 800c6fc:	bf5c      	itt	pl
 800c6fe:	005b      	lslpl	r3, r3, #1
 800c700:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c704:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c708:	bf58      	it	pl
 800c70a:	0049      	lslpl	r1, r1, #1
 800c70c:	2600      	movs	r6, #0
 800c70e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c712:	106d      	asrs	r5, r5, #1
 800c714:	0049      	lsls	r1, r1, #1
 800c716:	2016      	movs	r0, #22
 800c718:	4632      	mov	r2, r6
 800c71a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c71e:	1917      	adds	r7, r2, r4
 800c720:	429f      	cmp	r7, r3
 800c722:	bfde      	ittt	le
 800c724:	193a      	addle	r2, r7, r4
 800c726:	1bdb      	suble	r3, r3, r7
 800c728:	1936      	addle	r6, r6, r4
 800c72a:	0fcf      	lsrs	r7, r1, #31
 800c72c:	3801      	subs	r0, #1
 800c72e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c732:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c736:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c73a:	d1f0      	bne.n	800c71e <__ieee754_sqrt+0xb6>
 800c73c:	4604      	mov	r4, r0
 800c73e:	2720      	movs	r7, #32
 800c740:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c744:	429a      	cmp	r2, r3
 800c746:	eb00 0e0c 	add.w	lr, r0, ip
 800c74a:	db02      	blt.n	800c752 <__ieee754_sqrt+0xea>
 800c74c:	d113      	bne.n	800c776 <__ieee754_sqrt+0x10e>
 800c74e:	458e      	cmp	lr, r1
 800c750:	d811      	bhi.n	800c776 <__ieee754_sqrt+0x10e>
 800c752:	f1be 0f00 	cmp.w	lr, #0
 800c756:	eb0e 000c 	add.w	r0, lr, ip
 800c75a:	da42      	bge.n	800c7e2 <__ieee754_sqrt+0x17a>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	db40      	blt.n	800c7e2 <__ieee754_sqrt+0x17a>
 800c760:	f102 0801 	add.w	r8, r2, #1
 800c764:	1a9b      	subs	r3, r3, r2
 800c766:	458e      	cmp	lr, r1
 800c768:	bf88      	it	hi
 800c76a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c76e:	eba1 010e 	sub.w	r1, r1, lr
 800c772:	4464      	add	r4, ip
 800c774:	4642      	mov	r2, r8
 800c776:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c77a:	3f01      	subs	r7, #1
 800c77c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c780:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c784:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c788:	d1dc      	bne.n	800c744 <__ieee754_sqrt+0xdc>
 800c78a:	4319      	orrs	r1, r3
 800c78c:	d01b      	beq.n	800c7c6 <__ieee754_sqrt+0x15e>
 800c78e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c814 <__ieee754_sqrt+0x1ac>
 800c792:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c818 <__ieee754_sqrt+0x1b0>
 800c796:	e9da 0100 	ldrd	r0, r1, [sl]
 800c79a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c79e:	f7f3 fd7b 	bl	8000298 <__aeabi_dsub>
 800c7a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7a6:	4602      	mov	r2, r0
 800c7a8:	460b      	mov	r3, r1
 800c7aa:	4640      	mov	r0, r8
 800c7ac:	4649      	mov	r1, r9
 800c7ae:	f7f4 f9a7 	bl	8000b00 <__aeabi_dcmple>
 800c7b2:	b140      	cbz	r0, 800c7c6 <__ieee754_sqrt+0x15e>
 800c7b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c7b8:	e9da 0100 	ldrd	r0, r1, [sl]
 800c7bc:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7c0:	d111      	bne.n	800c7e6 <__ieee754_sqrt+0x17e>
 800c7c2:	3601      	adds	r6, #1
 800c7c4:	463c      	mov	r4, r7
 800c7c6:	1072      	asrs	r2, r6, #1
 800c7c8:	0863      	lsrs	r3, r4, #1
 800c7ca:	07f1      	lsls	r1, r6, #31
 800c7cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c7d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c7d4:	bf48      	it	mi
 800c7d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c7da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c7de:	4618      	mov	r0, r3
 800c7e0:	e756      	b.n	800c690 <__ieee754_sqrt+0x28>
 800c7e2:	4690      	mov	r8, r2
 800c7e4:	e7be      	b.n	800c764 <__ieee754_sqrt+0xfc>
 800c7e6:	f7f3 fd59 	bl	800029c <__adddf3>
 800c7ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	4649      	mov	r1, r9
 800c7f6:	f7f4 f979 	bl	8000aec <__aeabi_dcmplt>
 800c7fa:	b120      	cbz	r0, 800c806 <__ieee754_sqrt+0x19e>
 800c7fc:	1ca0      	adds	r0, r4, #2
 800c7fe:	bf08      	it	eq
 800c800:	3601      	addeq	r6, #1
 800c802:	3402      	adds	r4, #2
 800c804:	e7df      	b.n	800c7c6 <__ieee754_sqrt+0x15e>
 800c806:	1c63      	adds	r3, r4, #1
 800c808:	f023 0401 	bic.w	r4, r3, #1
 800c80c:	e7db      	b.n	800c7c6 <__ieee754_sqrt+0x15e>
 800c80e:	bf00      	nop
 800c810:	7ff00000 	.word	0x7ff00000
 800c814:	200002d0 	.word	0x200002d0
 800c818:	200002c8 	.word	0x200002c8

0800c81c <_init>:
 800c81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81e:	bf00      	nop
 800c820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c822:	bc08      	pop	{r3}
 800c824:	469e      	mov	lr, r3
 800c826:	4770      	bx	lr

0800c828 <_fini>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr
