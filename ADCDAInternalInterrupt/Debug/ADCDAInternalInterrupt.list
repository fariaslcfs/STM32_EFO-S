
ADCDAInternalInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c814  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  0800c9b8  0800c9b8  0000d9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cdd8  0800cdd8  0000e2d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cdd8  0800cdd8  0000ddd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cde0  0800cde0  0000e2d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cde0  0800cde0  0000dde0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cde4  0800cde4  0000dde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800cde8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e2c  200002d8  0800d0c0  0000e2d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002104  0800d0c0  0000f104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001338d  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359a  00000000  00000000  00021695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00024c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7e  00000000  00000000  00025cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ac0f  00000000  00000000  00026936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170ca  00000000  00000000  00041545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009806a  00000000  00000000  0005860f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f0679  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000579c  00000000  00000000  000f06bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000f5e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c99c 	.word	0x0800c99c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800c99c 	.word	0x0800c99c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <count2volt>:

#define Vref 3.3 // Reference voltage (in volts)

int max_count;

double count2volt(int res, int count){
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]

	    max_count = pow(2, res) - 1;
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fb3e 	bl	8000534 <__aeabi_i2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	ec43 2b11 	vmov	d1, r2, r3
 8000ec0:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8000f30 <count2volt+0x88>
 8000ec4:	f00a fe0c 	bl	800bae0 <pow>
 8000ec8:	ec51 0b10 	vmov	r0, r1, d0
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <count2volt+0x98>)
 8000ed2:	f7ff f9e1 	bl	8000298 <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe43 	bl	8000b68 <__aeabi_d2iz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <count2volt+0x9c>)
 8000ee6:	6013      	str	r3, [r2, #0]

	    return(Vref / max_count * count);
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <count2volt+0x9c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb21 	bl	8000534 <__aeabi_i2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	a110      	add	r1, pc, #64	@ (adr r1, 8000f38 <count2volt+0x90>)
 8000ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000efc:	f7ff fcae 	bl	800085c <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4614      	mov	r4, r2
 8000f06:	461d      	mov	r5, r3
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f7ff fb13 	bl	8000534 <__aeabi_i2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4620      	mov	r0, r4
 8000f14:	4629      	mov	r1, r5
 8000f16:	f7ff fb77 	bl	8000608 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f22:	eeb0 0a47 	vmov.f32	s0, s14
 8000f26:	eef0 0a67 	vmov.f32	s1, s15
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40000000 	.word	0x40000000
 8000f38:	66666666 	.word	0x66666666
 8000f3c:	400a6666 	.word	0x400a6666
 8000f40:	3ff00000 	.word	0x3ff00000
 8000f44:	200002f4 	.word	0x200002f4

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4e:	f000 fc2d 	bl	80017ac <HAL_Init>
  /* USER CODE BEGIN Init */
	HAL_StatusTypeDef RET;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f52:	f000 f8a9 	bl	80010a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f56:	f000 f98f 	bl	8001278 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f5a:	f000 f90d 	bl	8001178 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000f5e:	f000 f95d 	bl	800121c <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8000f62:	f007 fa65 	bl	8008430 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);
 8000f66:	4847      	ldr	r0, [pc, #284]	@ (8001084 <main+0x13c>)
 8000f68:	f000 fcfa 	bl	8001960 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {

		countsDAC = MIDSCALE;
 8000f6c:	4b46      	ldr	r3, [pc, #280]	@ (8001088 <main+0x140>)
 8000f6e:	f240 7246 	movw	r2, #1862	@ 0x746
 8000f72:	601a      	str	r2, [r3, #0]

		buf[0] = countsDAC >> 8;
 8000f74:	4b44      	ldr	r3, [pc, #272]	@ (8001088 <main+0x140>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	121b      	asrs	r3, r3, #8
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b43      	ldr	r3, [pc, #268]	@ (800108c <main+0x144>)
 8000f7e:	701a      	strb	r2, [r3, #0]
		buf[1] = countsDAC;
 8000f80:	4b41      	ldr	r3, [pc, #260]	@ (8001088 <main+0x140>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4b41      	ldr	r3, [pc, #260]	@ (800108c <main+0x144>)
 8000f88:	705a      	strb	r2, [r3, #1]

		RET = HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), buf, 2, 100);
 8000f8a:	2364      	movs	r3, #100	@ 0x64
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2302      	movs	r3, #2
 8000f90:	4a3e      	ldr	r2, [pc, #248]	@ (800108c <main+0x144>)
 8000f92:	21c0      	movs	r1, #192	@ 0xc0
 8000f94:	483e      	ldr	r0, [pc, #248]	@ (8001090 <main+0x148>)
 8000f96:	f001 fd55 	bl	8002a44 <HAL_I2C_Master_Transmit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
		if(RET == HAL_OK){
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d104      	bne.n	8000fae <main+0x66>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000fa4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fa8:	483a      	ldr	r0, [pc, #232]	@ (8001094 <main+0x14c>)
 8000faa:	f001 fbec 	bl	8002786 <HAL_GPIO_TogglePin>
		}

		volts = count2volt(ADCRES, adcValue);
 8000fae:	4b3a      	ldr	r3, [pc, #232]	@ (8001098 <main+0x150>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	200c      	movs	r0, #12
 8000fb6:	f7ff ff77 	bl	8000ea8 <count2volt>
 8000fba:	eeb0 7a40 	vmov.f32	s14, s0
 8000fbe:	eef0 7a60 	vmov.f32	s15, s1
 8000fc2:	4b36      	ldr	r3, [pc, #216]	@ (800109c <main+0x154>)
 8000fc4:	ed83 7b00 	vstr	d7, [r3]

		sprintf(buffer, "Counts: %d --- Volts: %.2f\n\r", adcValue, volts);
 8000fc8:	4b33      	ldr	r3, [pc, #204]	@ (8001098 <main+0x150>)
 8000fca:	6819      	ldr	r1, [r3, #0]
 8000fcc:	4b33      	ldr	r3, [pc, #204]	@ (800109c <main+0x154>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	e9cd 2300 	strd	r2, r3, [sp]
 8000fd6:	460a      	mov	r2, r1
 8000fd8:	4931      	ldr	r1, [pc, #196]	@ (80010a0 <main+0x158>)
 8000fda:	4832      	ldr	r0, [pc, #200]	@ (80010a4 <main+0x15c>)
 8000fdc:	f008 fc52 	bl	8009884 <siprintf>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 8000fe0:	2120      	movs	r1, #32
 8000fe2:	4830      	ldr	r0, [pc, #192]	@ (80010a4 <main+0x15c>)
 8000fe4:	f007 fae2 	bl	80085ac <CDC_Transmit_FS>

		HAL_ADC_Start_IT(&hadc1);
 8000fe8:	4826      	ldr	r0, [pc, #152]	@ (8001084 <main+0x13c>)
 8000fea:	f000 fcb9 	bl	8001960 <HAL_ADC_Start_IT>

		HAL_Delay(1000);
 8000fee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ff2:	f000 fc4d 	bl	8001890 <HAL_Delay>

		countsDAC = FULLSCALE;
 8000ff6:	4b24      	ldr	r3, [pc, #144]	@ (8001088 <main+0x140>)
 8000ff8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000ffc:	601a      	str	r2, [r3, #0]

		buf[0] = countsDAC >> 8;
 8000ffe:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <main+0x140>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	121b      	asrs	r3, r3, #8
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <main+0x144>)
 8001008:	701a      	strb	r2, [r3, #0]
		buf[1] = countsDAC;
 800100a:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <main+0x140>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <main+0x144>)
 8001012:	705a      	strb	r2, [r3, #1]

		RET = HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), buf, 2, 100);
 8001014:	2364      	movs	r3, #100	@ 0x64
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2302      	movs	r3, #2
 800101a:	4a1c      	ldr	r2, [pc, #112]	@ (800108c <main+0x144>)
 800101c:	21c0      	movs	r1, #192	@ 0xc0
 800101e:	481c      	ldr	r0, [pc, #112]	@ (8001090 <main+0x148>)
 8001020:	f001 fd10 	bl	8002a44 <HAL_I2C_Master_Transmit>
 8001024:	4603      	mov	r3, r0
 8001026:	71fb      	strb	r3, [r7, #7]
		if(RET == HAL_OK){
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <main+0xf0>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800102e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001032:	4818      	ldr	r0, [pc, #96]	@ (8001094 <main+0x14c>)
 8001034:	f001 fba7 	bl	8002786 <HAL_GPIO_TogglePin>
		}

		volts = count2volt(ADCRES, adcValue);
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <main+0x150>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	200c      	movs	r0, #12
 8001040:	f7ff ff32 	bl	8000ea8 <count2volt>
 8001044:	eeb0 7a40 	vmov.f32	s14, s0
 8001048:	eef0 7a60 	vmov.f32	s15, s1
 800104c:	4b13      	ldr	r3, [pc, #76]	@ (800109c <main+0x154>)
 800104e:	ed83 7b00 	vstr	d7, [r3]

		sprintf(buffer, "Counts: %d --- Volts: %.2f\n\r", adcValue, volts);
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <main+0x150>)
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <main+0x154>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	e9cd 2300 	strd	r2, r3, [sp]
 8001060:	460a      	mov	r2, r1
 8001062:	490f      	ldr	r1, [pc, #60]	@ (80010a0 <main+0x158>)
 8001064:	480f      	ldr	r0, [pc, #60]	@ (80010a4 <main+0x15c>)
 8001066:	f008 fc0d 	bl	8009884 <siprintf>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 800106a:	2120      	movs	r1, #32
 800106c:	480d      	ldr	r0, [pc, #52]	@ (80010a4 <main+0x15c>)
 800106e:	f007 fa9d 	bl	80085ac <CDC_Transmit_FS>

		HAL_ADC_Start_IT(&hadc1);
 8001072:	4804      	ldr	r0, [pc, #16]	@ (8001084 <main+0x13c>)
 8001074:	f000 fc74 	bl	8001960 <HAL_ADC_Start_IT>
		HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800107c:	f000 fc08 	bl	8001890 <HAL_Delay>
		countsDAC = MIDSCALE;
 8001080:	e774      	b.n	8000f6c <main+0x24>
 8001082:	bf00      	nop
 8001084:	200002f8 	.word	0x200002f8
 8001088:	20000394 	.word	0x20000394
 800108c:	200003c8 	.word	0x200003c8
 8001090:	20000340 	.word	0x20000340
 8001094:	40020800 	.word	0x40020800
 8001098:	20000398 	.word	0x20000398
 800109c:	200003a0 	.word	0x200003a0
 80010a0:	0800c9b8 	.word	0x0800c9b8
 80010a4:	200003a8 	.word	0x200003a8

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b094      	sub	sp, #80	@ 0x50
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0320 	add.w	r3, r7, #32
 80010b2:	2230      	movs	r2, #48	@ 0x30
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 fc47 	bl	800994a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010cc:	2300      	movs	r3, #0
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <SystemClock_Config+0xc8>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d4:	4a26      	ldr	r2, [pc, #152]	@ (8001170 <SystemClock_Config+0xc8>)
 80010d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010da:	6413      	str	r3, [r2, #64]	@ 0x40
 80010dc:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <SystemClock_Config+0xc8>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e8:	2300      	movs	r3, #0
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <SystemClock_Config+0xcc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a20      	ldr	r2, [pc, #128]	@ (8001174 <SystemClock_Config+0xcc>)
 80010f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010f6:	6013      	str	r3, [r2, #0]
 80010f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001174 <SystemClock_Config+0xcc>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001112:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001116:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8001118:	230f      	movs	r3, #15
 800111a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800111c:	2390      	movs	r3, #144	@ 0x90
 800111e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001120:	2304      	movs	r3, #4
 8001122:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001124:	2305      	movs	r3, #5
 8001126:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001128:	f107 0320 	add.w	r3, r7, #32
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fa33 	bl	8004598 <HAL_RCC_OscConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001138:	f000 f920 	bl	800137c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113c:	230f      	movs	r3, #15
 800113e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001140:	2302      	movs	r3, #2
 8001142:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001148:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800114c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001152:	f107 030c 	add.w	r3, r7, #12
 8001156:	2101      	movs	r1, #1
 8001158:	4618      	mov	r0, r3
 800115a:	f003 fc95 	bl	8004a88 <HAL_RCC_ClockConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001164:	f000 f90a 	bl	800137c <Error_Handler>
  }
}
 8001168:	bf00      	nop
 800116a:	3750      	adds	r7, #80	@ 0x50
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118a:	4b21      	ldr	r3, [pc, #132]	@ (8001210 <MX_ADC1_Init+0x98>)
 800118c:	4a21      	ldr	r2, [pc, #132]	@ (8001214 <MX_ADC1_Init+0x9c>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <MX_ADC1_Init+0x98>)
 8001192:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b1d      	ldr	r3, [pc, #116]	@ (8001210 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	@ (8001218 <MX_ADC1_Init+0xa0>)
 80011bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011da:	f000 fb7d 	bl	80018d8 <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 f8ca 	bl	800137c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	@ (8001210 <MX_ADC1_Init+0x98>)
 80011fa:	f000 fddd 	bl	8001db8 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001204:	f000 f8ba 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200002f8 	.word	0x200002f8
 8001214:	40012000 	.word	0x40012000
 8001218:	0f000001 	.word	0x0f000001

0800121c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_I2C2_Init+0x50>)
 8001222:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <MX_I2C2_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <MX_I2C2_Init+0x50>)
 8001228:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <MX_I2C2_Init+0x58>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800122c:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <MX_I2C2_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_I2C2_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <MX_I2C2_Init+0x50>)
 800123a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800123e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <MX_I2C2_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_I2C2_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	@ (800126c <MX_I2C2_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_I2C2_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <MX_I2C2_Init+0x50>)
 800125a:	f001 faaf 	bl	80027bc <HAL_I2C_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001264:	f000 f88a 	bl	800137c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000340 	.word	0x20000340
 8001270:	40005800 	.word	0x40005800
 8001274:	000186a0 	.word	0x000186a0

08001278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	@ 0x28
 800127c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
 800128c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b2d      	ldr	r3, [pc, #180]	@ (8001348 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a2c      	ldr	r2, [pc, #176]	@ (8001348 <MX_GPIO_Init+0xd0>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b2a      	ldr	r3, [pc, #168]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b26      	ldr	r3, [pc, #152]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a25      	ldr	r2, [pc, #148]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b23      	ldr	r3, [pc, #140]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	60bb      	str	r3, [r7, #8]
 80012e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a17      	ldr	r2, [pc, #92]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_GPIO_Init+0xd0>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012fe:	2200      	movs	r2, #0
 8001300:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001304:	4811      	ldr	r0, [pc, #68]	@ (800134c <MX_GPIO_Init+0xd4>)
 8001306:	f001 fa25 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800130a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800130e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001310:	2301      	movs	r3, #1
 8001312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480a      	ldr	r0, [pc, #40]	@ (800134c <MX_GPIO_Init+0xd4>)
 8001324:	f001 f892 	bl	800244c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001330:	2301      	movs	r3, #1
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_GPIO_Init+0xd8>)
 800133c:	f001 f886 	bl	800244c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	@ 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	40020800 	.word	0x40020800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	adcValue = HAL_ADC_GetValue(hadc1);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 fd0a 	bl	8001d76 <HAL_ADC_GetValue>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <HAL_ADC_ConvCpltCallback+0x24>)
 8001368:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(hadc1);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fbb6 	bl	8001adc <HAL_ADC_Stop_IT>
}
 8001370:	bf00      	nop
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000398 	.word	0x20000398

0800137c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001380:	b672      	cpsid	i
}
 8001382:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <Error_Handler+0x8>

08001388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	4b10      	ldr	r3, [pc, #64]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a0f      	ldr	r2, [pc, #60]	@ (80013d4 <HAL_MspInit+0x4c>)
 8001398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b09      	ldr	r3, [pc, #36]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	4a08      	ldr	r2, [pc, #32]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_MspInit+0x4c>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40023800 	.word	0x40023800

080013d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <HAL_ADC_MspInit+0x8c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12f      	bne.n	800145a <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <HAL_ADC_MspInit+0x90>)
 8001400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001402:	4a19      	ldr	r2, [pc, #100]	@ (8001468 <HAL_ADC_MspInit+0x90>)
 8001404:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001408:	6453      	str	r3, [r2, #68]	@ 0x44
 800140a:	4b17      	ldr	r3, [pc, #92]	@ (8001468 <HAL_ADC_MspInit+0x90>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <HAL_ADC_MspInit+0x90>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <HAL_ADC_MspInit+0x90>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <HAL_ADC_MspInit+0x90>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001432:	2302      	movs	r3, #2
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001436:	2303      	movs	r3, #3
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0314 	add.w	r3, r7, #20
 8001442:	4619      	mov	r1, r3
 8001444:	4809      	ldr	r0, [pc, #36]	@ (800146c <HAL_ADC_MspInit+0x94>)
 8001446:	f001 f801 	bl	800244c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2012      	movs	r0, #18
 8001450:	f000 ffc5 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001454:	2012      	movs	r0, #18
 8001456:	f000 ffde 	bl	8002416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	@ 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40012000 	.word	0x40012000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	@ 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_I2C_MspInit+0xa4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d13c      	bne.n	800150c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b20      	ldr	r3, [pc, #128]	@ (8001518 <HAL_I2C_MspInit+0xa8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a1f      	ldr	r2, [pc, #124]	@ (8001518 <HAL_I2C_MspInit+0xa8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001518 <HAL_I2C_MspInit+0xa8>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b4:	2312      	movs	r3, #18
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014c0:	2304      	movs	r3, #4
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4814      	ldr	r0, [pc, #80]	@ (800151c <HAL_I2C_MspInit+0xac>)
 80014cc:	f000 ffbe 	bl	800244c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014d0:	2308      	movs	r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d4:	2312      	movs	r3, #18
 80014d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d8:	2301      	movs	r3, #1
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014dc:	2303      	movs	r3, #3
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014e0:	2309      	movs	r3, #9
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	4619      	mov	r1, r3
 80014ea:	480c      	ldr	r0, [pc, #48]	@ (800151c <HAL_I2C_MspInit+0xac>)
 80014ec:	f000 ffae 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f0:	2300      	movs	r3, #0
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <HAL_I2C_MspInit+0xa8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a07      	ldr	r2, [pc, #28]	@ (8001518 <HAL_I2C_MspInit+0xa8>)
 80014fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001500:	4b05      	ldr	r3, [pc, #20]	@ (8001518 <HAL_I2C_MspInit+0xa8>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001504:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	@ 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40005800 	.word	0x40005800
 8001518:	40023800 	.word	0x40023800
 800151c:	40020400 	.word	0x40020400

08001520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <NMI_Handler+0x4>

08001528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <MemManage_Handler+0x4>

08001538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <BusFault_Handler+0x4>

08001540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <UsageFault_Handler+0x4>

08001548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001556:	b480      	push	{r7}
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001576:	f000 f96b 	bl	8001850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001584:	4802      	ldr	r0, [pc, #8]	@ (8001590 <ADC_IRQHandler+0x10>)
 8001586:	f000 fae6 	bl	8001b56 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200002f8 	.word	0x200002f8

08001594 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001598:	4802      	ldr	r0, [pc, #8]	@ (80015a4 <OTG_FS_IRQHandler+0x10>)
 800159a:	f001 fef0 	bl	800337e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200018b4 	.word	0x200018b4

080015a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return 1;
 80015ac:	2301      	movs	r3, #1
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_kill>:

int _kill(int pid, int sig)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015c2:	f008 fa15 	bl	80099f0 <__errno>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2216      	movs	r2, #22
 80015ca:	601a      	str	r2, [r3, #0]
  return -1;
 80015cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <_exit>:

void _exit (int status)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e0:	f04f 31ff 	mov.w	r1, #4294967295
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ffe7 	bl	80015b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ea:	bf00      	nop
 80015ec:	e7fd      	b.n	80015ea <_exit+0x12>

080015ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b086      	sub	sp, #24
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	60f8      	str	r0, [r7, #12]
 80015f6:	60b9      	str	r1, [r7, #8]
 80015f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	e00a      	b.n	8001616 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001600:	f3af 8000 	nop.w
 8001604:	4601      	mov	r1, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	60ba      	str	r2, [r7, #8]
 800160c:	b2ca      	uxtb	r2, r1
 800160e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	dbf0      	blt.n	8001600 <_read+0x12>
  }

  return len;
 800161e:	687b      	ldr	r3, [r7, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	e009      	b.n	800164e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3301      	adds	r3, #1
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	429a      	cmp	r2, r3
 8001654:	dbf1      	blt.n	800163a <_write+0x12>
  }
  return len;
 8001656:	687b      	ldr	r3, [r7, #4]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_close>:

int _close(int file)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001688:	605a      	str	r2, [r3, #4]
  return 0;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_isatty>:

int _isatty(int file)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a0:	2301      	movs	r3, #1
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b085      	sub	sp, #20
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	60f8      	str	r0, [r7, #12]
 80016b6:	60b9      	str	r1, [r7, #8]
 80016b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d0:	4a14      	ldr	r2, [pc, #80]	@ (8001724 <_sbrk+0x5c>)
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <_sbrk+0x60>)
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016dc:	4b13      	ldr	r3, [pc, #76]	@ (800172c <_sbrk+0x64>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <_sbrk+0x64>)
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <_sbrk+0x68>)
 80016e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4413      	add	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d207      	bcs.n	8001708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f8:	f008 f97a 	bl	80099f0 <__errno>
 80016fc:	4603      	mov	r3, r0
 80016fe:	220c      	movs	r2, #12
 8001700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001702:	f04f 33ff 	mov.w	r3, #4294967295
 8001706:	e009      	b.n	800171c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <_sbrk+0x64>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170e:	4b07      	ldr	r3, [pc, #28]	@ (800172c <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	4a05      	ldr	r2, [pc, #20]	@ (800172c <_sbrk+0x64>)
 8001718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171a:	68fb      	ldr	r3, [r7, #12]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20020000 	.word	0x20020000
 8001728:	00000400 	.word	0x00000400
 800172c:	200003cc 	.word	0x200003cc
 8001730:	20002108 	.word	0x20002108

08001734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <SystemInit+0x20>)
 800173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <SystemInit+0x20>)
 8001740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001790 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800175c:	f7ff ffea 	bl	8001734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	@ (8001794 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	@ (8001798 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	@ (80017a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001786:	f008 f939 	bl	80099fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178a:	f7ff fbdd 	bl	8000f48 <main>
  bx  lr    
 800178e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001790:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 800179c:	0800cde8 	.word	0x0800cde8
  ldr r2, =_sbss
 80017a0:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80017a4:	20002104 	.word	0x20002104

080017a8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <DMA1_Stream0_IRQHandler>
	...

080017ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b0:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0d      	ldr	r2, [pc, #52]	@ (80017ec <HAL_Init+0x40>)
 80017b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0a      	ldr	r2, [pc, #40]	@ (80017ec <HAL_Init+0x40>)
 80017c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <HAL_Init+0x40>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a07      	ldr	r2, [pc, #28]	@ (80017ec <HAL_Init+0x40>)
 80017ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d4:	2003      	movs	r0, #3
 80017d6:	f000 fdf7 	bl	80023c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017da:	200f      	movs	r0, #15
 80017dc:	f000 f808 	bl	80017f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e0:	f7ff fdd2 	bl	8001388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023c00 	.word	0x40023c00

080017f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <HAL_InitTick+0x54>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_InitTick+0x58>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	4619      	mov	r1, r3
 8001802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001806:	fbb3 f3f1 	udiv	r3, r3, r1
 800180a:	fbb2 f3f3 	udiv	r3, r2, r3
 800180e:	4618      	mov	r0, r3
 8001810:	f000 fe0f 	bl	8002432 <HAL_SYSTICK_Config>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e00e      	b.n	800183c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b0f      	cmp	r3, #15
 8001822:	d80a      	bhi.n	800183a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001824:	2200      	movs	r2, #0
 8001826:	6879      	ldr	r1, [r7, #4]
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f000 fdd7 	bl	80023de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001830:	4a06      	ldr	r2, [pc, #24]	@ (800184c <HAL_InitTick+0x5c>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	e000      	b.n	800183c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000000 	.word	0x20000000
 8001848:	20000008 	.word	0x20000008
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x20>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	461a      	mov	r2, r3
 800185a:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_IncTick+0x24>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4413      	add	r3, r2
 8001860:	4a04      	ldr	r2, [pc, #16]	@ (8001874 <HAL_IncTick+0x24>)
 8001862:	6013      	str	r3, [r2, #0]
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	20000008 	.word	0x20000008
 8001874:	200003d0 	.word	0x200003d0

08001878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return uwTick;
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <HAL_GetTick+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	200003d0 	.word	0x200003d0

08001890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff ffee 	bl	8001878 <HAL_GetTick>
 800189c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a8:	d005      	beq.n	80018b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018aa:	4b0a      	ldr	r3, [pc, #40]	@ (80018d4 <HAL_Delay+0x44>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018b6:	bf00      	nop
 80018b8:	f7ff ffde 	bl	8001878 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d8f7      	bhi.n	80018b8 <HAL_Delay+0x28>
  {
  }
}
 80018c8:	bf00      	nop
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000008 	.word	0x20000008

080018d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e033      	b.n	8001956 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff fd6e 	bl	80013d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f003 0310 	and.w	r3, r3, #16
 8001912:	2b00      	cmp	r3, #0
 8001914:	d118      	bne.n	8001948 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800191e:	f023 0302 	bic.w	r3, r3, #2
 8001922:	f043 0202 	orr.w	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 fb76 	bl	800201c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	f043 0201 	orr.w	r2, r3, #1
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40
 8001946:	e001      	b.n	800194c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3710      	adds	r7, #16
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
	...

08001960 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001972:	2b01      	cmp	r3, #1
 8001974:	d101      	bne.n	800197a <HAL_ADC_Start_IT+0x1a>
 8001976:	2302      	movs	r3, #2
 8001978:	e0a1      	b.n	8001abe <HAL_ADC_Start_IT+0x15e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d018      	beq.n	80019c2 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019a0:	4b4a      	ldr	r3, [pc, #296]	@ (8001acc <HAL_ADC_Start_IT+0x16c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a4a      	ldr	r2, [pc, #296]	@ (8001ad0 <HAL_ADC_Start_IT+0x170>)
 80019a6:	fba2 2303 	umull	r2, r3, r2, r3
 80019aa:	0c9a      	lsrs	r2, r3, #18
 80019ac:	4613      	mov	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019b4:	e002      	b.n	80019bc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f9      	bne.n	80019b6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d169      	bne.n	8001aa4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d007      	beq.n	8001a02 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a0e:	d106      	bne.n	8001a1e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a14:	f023 0206 	bic.w	r2, r3, #6
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a1c:	e002      	b.n	8001a24 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a2c:	4b29      	ldr	r3, [pc, #164]	@ (8001ad4 <HAL_ADC_Start_IT+0x174>)
 8001a2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a38:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10f      	bne.n	8001a7a <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d129      	bne.n	8001abc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	e020      	b.n	8001abc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a16      	ldr	r2, [pc, #88]	@ (8001ad8 <HAL_ADC_Start_IT+0x178>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d11b      	bne.n	8001abc <HAL_ADC_Start_IT+0x15c>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d114      	bne.n	8001abc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	e00b      	b.n	8001abc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa8:	f043 0210 	orr.w	r2, r3, #16
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f043 0201 	orr.w	r2, r3, #1
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	431bde83 	.word	0x431bde83
 8001ad4:	40012300 	.word	0x40012300
 8001ad8:	40012000 	.word	0x40012000

08001adc <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d101      	bne.n	8001af2 <HAL_ADC_Stop_IT+0x16>
 8001aee:	2302      	movs	r3, #2
 8001af0:	e02b      	b.n	8001b4a <HAL_ADC_Stop_IT+0x6e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0201 	bic.w	r2, r2, #1
 8001b08:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d113      	bne.n	8001b40 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6812      	ldr	r2, [r2, #0]
 8001b22:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001b26:	f023 0320 	bic.w	r3, r3, #32
 8001b2a:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b34:	f023 0301 	bic.w	r3, r3, #1
 8001b38:	f043 0201 	orr.w	r2, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f003 0320 	and.w	r3, r3, #32
 8001b84:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d049      	beq.n	8001c20 <HAL_ADC_IRQHandler+0xca>
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d046      	beq.n	8001c20 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d105      	bne.n	8001baa <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d12b      	bne.n	8001c10 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d127      	bne.n	8001c10 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d006      	beq.n	8001bdc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d119      	bne.n	8001c10 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 0220 	bic.w	r2, r2, #32
 8001bea:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f043 0201 	orr.w	r2, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7ff fb9f 	bl	8001354 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f06f 0212 	mvn.w	r2, #18
 8001c1e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c2e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d057      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0x190>
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d054      	beq.n	8001ce6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d105      	bne.n	8001c54 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d139      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d12b      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d124      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d11d      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa9c 	bl	8002214 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f06f 020c 	mvn.w	r2, #12
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d017      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x1d6>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d014      	beq.n	8001d2c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d10d      	bne.n	8001d2c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d14:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f837 	bl	8001d90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f06f 0201 	mvn.w	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0320 	and.w	r3, r3, #32
 8001d32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d3a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d015      	beq.n	8001d6e <HAL_ADC_IRQHandler+0x218>
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4c:	f043 0202 	orr.w	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0220 	mvn.w	r2, #32
 8001d5c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f820 	bl	8001da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0220 	mvn.w	r2, #32
 8001d6c:	601a      	str	r2, [r3, #0]
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_ADC_ConfigChannel+0x1c>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e113      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x244>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b09      	cmp	r3, #9
 8001de2:	d925      	bls.n	8001e30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68d9      	ldr	r1, [r3, #12]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	461a      	mov	r2, r3
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	3b1e      	subs	r3, #30
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43da      	mvns	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	400a      	ands	r2, r1
 8001e08:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68d9      	ldr	r1, [r3, #12]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4403      	add	r3, r0
 8001e22:	3b1e      	subs	r3, #30
 8001e24:	409a      	lsls	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	e022      	b.n	8001e76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6919      	ldr	r1, [r3, #16]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	2207      	movs	r2, #7
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	400a      	ands	r2, r1
 8001e52:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6919      	ldr	r1, [r3, #16]
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	4603      	mov	r3, r0
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4403      	add	r3, r0
 8001e6c:	409a      	lsls	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	430a      	orrs	r2, r1
 8001e74:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b06      	cmp	r3, #6
 8001e7c:	d824      	bhi.n	8001ec8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685a      	ldr	r2, [r3, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b05      	subs	r3, #5
 8001e90:	221f      	movs	r2, #31
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4618      	mov	r0, r3
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3b05      	subs	r3, #5
 8001eba:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ec6:	e04c      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b0c      	cmp	r3, #12
 8001ece:	d824      	bhi.n	8001f1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685a      	ldr	r2, [r3, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	3b23      	subs	r3, #35	@ 0x23
 8001ee2:	221f      	movs	r2, #31
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43da      	mvns	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	400a      	ands	r2, r1
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	3b23      	subs	r3, #35	@ 0x23
 8001f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f18:	e023      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b41      	subs	r3, #65	@ 0x41
 8001f2c:	221f      	movs	r2, #31
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	400a      	ands	r2, r1
 8001f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4618      	mov	r0, r3
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b41      	subs	r3, #65	@ 0x41
 8001f56:	fa00 f203 	lsl.w	r2, r0, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f62:	4b29      	ldr	r3, [pc, #164]	@ (8002008 <HAL_ADC_ConfigChannel+0x250>)
 8001f64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a28      	ldr	r2, [pc, #160]	@ (800200c <HAL_ADC_ConfigChannel+0x254>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d10f      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1d8>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b12      	cmp	r3, #18
 8001f76:	d10b      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	@ (800200c <HAL_ADC_ConfigChannel+0x254>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d12b      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x23a>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <HAL_ADC_ConfigChannel+0x258>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d003      	beq.n	8001fac <HAL_ADC_ConfigChannel+0x1f4>
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2b11      	cmp	r3, #17
 8001faa:	d122      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <HAL_ADC_ConfigChannel+0x258>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d111      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <HAL_ADC_ConfigChannel+0x25c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a11      	ldr	r2, [pc, #68]	@ (8002018 <HAL_ADC_ConfigChannel+0x260>)
 8001fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd8:	0c9a      	lsrs	r2, r3, #18
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fe4:	e002      	b.n	8001fec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f9      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40012300 	.word	0x40012300
 800200c:	40012000 	.word	0x40012000
 8002010:	10000012 	.word	0x10000012
 8002014:	20000000 	.word	0x20000000
 8002018:	431bde83 	.word	0x431bde83

0800201c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002024:	4b79      	ldr	r3, [pc, #484]	@ (800220c <ADC_Init+0x1f0>)
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	431a      	orrs	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002050:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	021a      	lsls	r2, r3, #8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002074:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	4a58      	ldr	r2, [pc, #352]	@ (8002210 <ADC_Init+0x1f4>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d022      	beq.n	80020fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6899      	ldr	r1, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	6899      	ldr	r1, [r3, #8]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
 80020f8:	e00f      	b.n	800211a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002108:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002118:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0202 	bic.w	r2, r2, #2
 8002128:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6899      	ldr	r1, [r3, #8]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	7e1b      	ldrb	r3, [r3, #24]
 8002134:	005a      	lsls	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01b      	beq.n	8002180 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002156:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002166:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6859      	ldr	r1, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	3b01      	subs	r3, #1
 8002174:	035a      	lsls	r2, r3, #13
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	e007      	b.n	8002190 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685a      	ldr	r2, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800218e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	051a      	lsls	r2, r3, #20
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80021c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021d2:	025a      	lsls	r2, r3, #9
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6899      	ldr	r1, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	029a      	lsls	r2, r3, #10
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	609a      	str	r2, [r3, #8]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	40012300 	.word	0x40012300
 8002210:	0f000001 	.word	0x0f000001

08002214 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002244:	4013      	ands	r3, r2
 8002246:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002250:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225a:	4a04      	ldr	r2, [pc, #16]	@ (800226c <__NVIC_SetPriorityGrouping+0x44>)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	60d3      	str	r3, [r2, #12]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <__NVIC_GetPriorityGrouping+0x18>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	f003 0307 	and.w	r3, r3, #7
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	2b00      	cmp	r3, #0
 800229c:	db0b      	blt.n	80022b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	f003 021f 	and.w	r2, r3, #31
 80022a4:	4907      	ldr	r1, [pc, #28]	@ (80022c4 <__NVIC_EnableIRQ+0x38>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2001      	movs	r0, #1
 80022ae:	fa00 f202 	lsl.w	r2, r0, r2
 80022b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000e100 	.word	0xe000e100

080022c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	6039      	str	r1, [r7, #0]
 80022d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	db0a      	blt.n	80022f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	490c      	ldr	r1, [pc, #48]	@ (8002314 <__NVIC_SetPriority+0x4c>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	0112      	lsls	r2, r2, #4
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	440b      	add	r3, r1
 80022ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f0:	e00a      	b.n	8002308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4908      	ldr	r1, [pc, #32]	@ (8002318 <__NVIC_SetPriority+0x50>)
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	3b04      	subs	r3, #4
 8002300:	0112      	lsls	r2, r2, #4
 8002302:	b2d2      	uxtb	r2, r2
 8002304:	440b      	add	r3, r1
 8002306:	761a      	strb	r2, [r3, #24]
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000e100 	.word	0xe000e100
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231c:	b480      	push	{r7}
 800231e:	b089      	sub	sp, #36	@ 0x24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0307 	and.w	r3, r3, #7
 800232e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f1c3 0307 	rsb	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	bf28      	it	cs
 800233a:	2304      	movcs	r3, #4
 800233c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3304      	adds	r3, #4
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <NVIC_EncodePriority+0x30>
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	3b03      	subs	r3, #3
 800234a:	e000      	b.n	800234e <NVIC_EncodePriority+0x32>
 800234c:	2300      	movs	r3, #0
 800234e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002350:	f04f 32ff 	mov.w	r2, #4294967295
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43da      	mvns	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	401a      	ands	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002364:	f04f 31ff 	mov.w	r1, #4294967295
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43d9      	mvns	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	4313      	orrs	r3, r2
         );
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	@ 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
	...

08002384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3b01      	subs	r3, #1
 8002390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002394:	d301      	bcc.n	800239a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002396:	2301      	movs	r3, #1
 8002398:	e00f      	b.n	80023ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239a:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <SysTick_Config+0x40>)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3b01      	subs	r3, #1
 80023a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a2:	210f      	movs	r1, #15
 80023a4:	f04f 30ff 	mov.w	r0, #4294967295
 80023a8:	f7ff ff8e 	bl	80022c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ac:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <SysTick_Config+0x40>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b2:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <SysTick_Config+0x40>)
 80023b4:	2207      	movs	r2, #7
 80023b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	e000e010 	.word	0xe000e010

080023c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff29 	bl	8002228 <__NVIC_SetPriorityGrouping>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f0:	f7ff ff3e 	bl	8002270 <__NVIC_GetPriorityGrouping>
 80023f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f7ff ff8e 	bl	800231c <NVIC_EncodePriority>
 8002400:	4602      	mov	r2, r0
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff5d 	bl	80022c8 <__NVIC_SetPriority>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff31 	bl	800228c <__NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff ffa2 	bl	8002384 <SysTick_Config>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
	...

0800244c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	@ 0x24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
 8002466:	e159      	b.n	800271c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002468:	2201      	movs	r2, #1
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800247c:	693a      	ldr	r2, [r7, #16]
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	429a      	cmp	r2, r3
 8002482:	f040 8148 	bne.w	8002716 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b01      	cmp	r3, #1
 8002490:	d005      	beq.n	800249e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249a:	2b02      	cmp	r3, #2
 800249c:	d130      	bne.n	8002500 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	2203      	movs	r2, #3
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4013      	ands	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d4:	2201      	movs	r2, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0201 	and.w	r2, r3, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b03      	cmp	r3, #3
 800250a:	d017      	beq.n	800253c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	2203      	movs	r2, #3
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d123      	bne.n	8002590 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	08da      	lsrs	r2, r3, #3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	3208      	adds	r2, #8
 8002550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	220f      	movs	r2, #15
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	69b9      	ldr	r1, [r7, #24]
 800258c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69ba      	ldr	r2, [r7, #24]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a2 	beq.w	8002716 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b57      	ldr	r3, [pc, #348]	@ (8002734 <HAL_GPIO_Init+0x2e8>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	4a56      	ldr	r2, [pc, #344]	@ (8002734 <HAL_GPIO_Init+0x2e8>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025e2:	4b54      	ldr	r3, [pc, #336]	@ (8002734 <HAL_GPIO_Init+0x2e8>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ee:	4a52      	ldr	r2, [pc, #328]	@ (8002738 <HAL_GPIO_Init+0x2ec>)
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a49      	ldr	r2, [pc, #292]	@ (800273c <HAL_GPIO_Init+0x2f0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d019      	beq.n	800264e <HAL_GPIO_Init+0x202>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a48      	ldr	r2, [pc, #288]	@ (8002740 <HAL_GPIO_Init+0x2f4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0x1fe>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a47      	ldr	r2, [pc, #284]	@ (8002744 <HAL_GPIO_Init+0x2f8>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d00d      	beq.n	8002646 <HAL_GPIO_Init+0x1fa>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a46      	ldr	r2, [pc, #280]	@ (8002748 <HAL_GPIO_Init+0x2fc>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d007      	beq.n	8002642 <HAL_GPIO_Init+0x1f6>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a45      	ldr	r2, [pc, #276]	@ (800274c <HAL_GPIO_Init+0x300>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <HAL_GPIO_Init+0x1f2>
 800263a:	2304      	movs	r3, #4
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800263e:	2307      	movs	r3, #7
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x204>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x204>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x204>
 800264e:	2300      	movs	r3, #0
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002660:	4935      	ldr	r1, [pc, #212]	@ (8002738 <HAL_GPIO_Init+0x2ec>)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266e:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <HAL_GPIO_Init+0x304>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002692:	4a2f      	ldr	r2, [pc, #188]	@ (8002750 <HAL_GPIO_Init+0x304>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002698:	4b2d      	ldr	r3, [pc, #180]	@ (8002750 <HAL_GPIO_Init+0x304>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026bc:	4a24      	ldr	r2, [pc, #144]	@ (8002750 <HAL_GPIO_Init+0x304>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c2:	4b23      	ldr	r3, [pc, #140]	@ (8002750 <HAL_GPIO_Init+0x304>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002750 <HAL_GPIO_Init+0x304>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ec:	4b18      	ldr	r3, [pc, #96]	@ (8002750 <HAL_GPIO_Init+0x304>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002710:	4a0f      	ldr	r2, [pc, #60]	@ (8002750 <HAL_GPIO_Init+0x304>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	f67f aea2 	bls.w	8002468 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40013800 	.word	0x40013800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002764:	787b      	ldrb	r3, [r7, #1]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800276a:	887a      	ldrh	r2, [r7, #2]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002770:	e003      	b.n	800277a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	041a      	lsls	r2, r3, #16
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002786:	b480      	push	{r7}
 8002788:	b085      	sub	sp, #20
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002798:	887a      	ldrh	r2, [r7, #2]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	4013      	ands	r3, r2
 800279e:	041a      	lsls	r2, r3, #16
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	400b      	ands	r3, r1
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	619a      	str	r2, [r3, #24]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e12b      	b.n	8002a26 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d106      	bne.n	80027e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7fe fe44 	bl	8001470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0201 	bic.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800280e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800281e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002820:	f002 faea 	bl	8004df8 <HAL_RCC_GetPCLK1Freq>
 8002824:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4a81      	ldr	r2, [pc, #516]	@ (8002a30 <HAL_I2C_Init+0x274>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d807      	bhi.n	8002840 <HAL_I2C_Init+0x84>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4a80      	ldr	r2, [pc, #512]	@ (8002a34 <HAL_I2C_Init+0x278>)
 8002834:	4293      	cmp	r3, r2
 8002836:	bf94      	ite	ls
 8002838:	2301      	movls	r3, #1
 800283a:	2300      	movhi	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e006      	b.n	800284e <HAL_I2C_Init+0x92>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a7d      	ldr	r2, [pc, #500]	@ (8002a38 <HAL_I2C_Init+0x27c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	bf94      	ite	ls
 8002848:	2301      	movls	r3, #1
 800284a:	2300      	movhi	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0e7      	b.n	8002a26 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a78      	ldr	r2, [pc, #480]	@ (8002a3c <HAL_I2C_Init+0x280>)
 800285a:	fba2 2303 	umull	r2, r3, r2, r3
 800285e:	0c9b      	lsrs	r3, r3, #18
 8002860:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a6a      	ldr	r2, [pc, #424]	@ (8002a30 <HAL_I2C_Init+0x274>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d802      	bhi.n	8002890 <HAL_I2C_Init+0xd4>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	3301      	adds	r3, #1
 800288e:	e009      	b.n	80028a4 <HAL_I2C_Init+0xe8>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	4a69      	ldr	r2, [pc, #420]	@ (8002a40 <HAL_I2C_Init+0x284>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	099b      	lsrs	r3, r3, #6
 80028a2:	3301      	adds	r3, #1
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	495c      	ldr	r1, [pc, #368]	@ (8002a30 <HAL_I2C_Init+0x274>)
 80028c0:	428b      	cmp	r3, r1
 80028c2:	d819      	bhi.n	80028f8 <HAL_I2C_Init+0x13c>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e59      	subs	r1, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80028d2:	1c59      	adds	r1, r3, #1
 80028d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028d8:	400b      	ands	r3, r1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_I2C_Init+0x138>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1e59      	subs	r1, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ec:	3301      	adds	r3, #1
 80028ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f2:	e051      	b.n	8002998 <HAL_I2C_Init+0x1dc>
 80028f4:	2304      	movs	r3, #4
 80028f6:	e04f      	b.n	8002998 <HAL_I2C_Init+0x1dc>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d111      	bne.n	8002924 <HAL_I2C_Init+0x168>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6859      	ldr	r1, [r3, #4]
 8002908:	460b      	mov	r3, r1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	440b      	add	r3, r1
 800290e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002912:	3301      	adds	r3, #1
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	2b00      	cmp	r3, #0
 800291a:	bf0c      	ite	eq
 800291c:	2301      	moveq	r3, #1
 800291e:	2300      	movne	r3, #0
 8002920:	b2db      	uxtb	r3, r3
 8002922:	e012      	b.n	800294a <HAL_I2C_Init+0x18e>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	0099      	lsls	r1, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	fbb0 f3f3 	udiv	r3, r0, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf0c      	ite	eq
 8002944:	2301      	moveq	r3, #1
 8002946:	2300      	movne	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_Init+0x196>
 800294e:	2301      	movs	r3, #1
 8002950:	e022      	b.n	8002998 <HAL_I2C_Init+0x1dc>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10e      	bne.n	8002978 <HAL_I2C_Init+0x1bc>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1e58      	subs	r0, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6859      	ldr	r1, [r3, #4]
 8002962:	460b      	mov	r3, r1
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	440b      	add	r3, r1
 8002968:	fbb0 f3f3 	udiv	r3, r0, r3
 800296c:	3301      	adds	r3, #1
 800296e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002972:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002976:	e00f      	b.n	8002998 <HAL_I2C_Init+0x1dc>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1e58      	subs	r0, r3, #1
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	0099      	lsls	r1, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	fbb0 f3f3 	udiv	r3, r0, r3
 800298e:	3301      	adds	r3, #1
 8002990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002994:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	6809      	ldr	r1, [r1, #0]
 800299c:	4313      	orrs	r3, r2
 800299e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6911      	ldr	r1, [r2, #16]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68d2      	ldr	r2, [r2, #12]
 80029d2:	4311      	orrs	r1, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6812      	ldr	r2, [r2, #0]
 80029d8:	430b      	orrs	r3, r1
 80029da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	431a      	orrs	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f042 0201 	orr.w	r2, r2, #1
 8002a06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	000186a0 	.word	0x000186a0
 8002a34:	001e847f 	.word	0x001e847f
 8002a38:	003d08ff 	.word	0x003d08ff
 8002a3c:	431bde83 	.word	0x431bde83
 8002a40:	10624dd3 	.word	0x10624dd3

08002a44 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af02      	add	r7, sp, #8
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	460b      	mov	r3, r1
 8002a52:	817b      	strh	r3, [r7, #10]
 8002a54:	4613      	mov	r3, r2
 8002a56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a58:	f7fe ff0e 	bl	8001878 <HAL_GetTick>
 8002a5c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	f040 80e0 	bne.w	8002c2c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2319      	movs	r3, #25
 8002a72:	2201      	movs	r2, #1
 8002a74:	4970      	ldr	r1, [pc, #448]	@ (8002c38 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 f964 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0d3      	b.n	8002c2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2C_Master_Transmit+0x50>
 8002a90:	2302      	movs	r3, #2
 8002a92:	e0cc      	b.n	8002c2e <HAL_I2C_Master_Transmit+0x1ea>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d007      	beq.n	8002aba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2221      	movs	r2, #33	@ 0x21
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2210      	movs	r2, #16
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	893a      	ldrh	r2, [r7, #8]
 8002aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a50      	ldr	r2, [pc, #320]	@ (8002c3c <HAL_I2C_Master_Transmit+0x1f8>)
 8002afa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002afc:	8979      	ldrh	r1, [r7, #10]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	6a3a      	ldr	r2, [r7, #32]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f89c 	bl	8002c40 <I2C_MasterRequestWrite>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e08d      	b.n	8002c2e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	613b      	str	r3, [r7, #16]
 8002b26:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b28:	e066      	b.n	8002bf8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fa22 	bl	8002f78 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d107      	bne.n	8002b52 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06b      	b.n	8002c2e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d11b      	bne.n	8002bcc <HAL_I2C_Master_Transmit+0x188>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d017      	beq.n	8002bcc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	781a      	ldrb	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bac:	1c5a      	adds	r2, r3, #1
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	6a39      	ldr	r1, [r7, #32]
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fa19 	bl	8003008 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d107      	bne.n	8002bf4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bf2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e01a      	b.n	8002c2e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d194      	bne.n	8002b2a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e000      	b.n	8002c2e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c2c:	2302      	movs	r3, #2
  }
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3718      	adds	r7, #24
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	00100002 	.word	0x00100002
 8002c3c:	ffff0000 	.word	0xffff0000

08002c40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af02      	add	r7, sp, #8
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	607a      	str	r2, [r7, #4]
 8002c4a:	603b      	str	r3, [r7, #0]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d006      	beq.n	8002c6a <I2C_MasterRequestWrite+0x2a>
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d003      	beq.n	8002c6a <I2C_MasterRequestWrite+0x2a>
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c68:	d108      	bne.n	8002c7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	e00b      	b.n	8002c94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c80:	2b12      	cmp	r3, #18
 8002c82:	d107      	bne.n	8002c94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f84f 	bl	8002d44 <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00d      	beq.n	8002cc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cba:	d103      	bne.n	8002cc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e035      	b.n	8002d34 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cd0:	d108      	bne.n	8002ce4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cd2:	897b      	ldrh	r3, [r7, #10]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ce0:	611a      	str	r2, [r3, #16]
 8002ce2:	e01b      	b.n	8002d1c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ce4:	897b      	ldrh	r3, [r7, #10]
 8002ce6:	11db      	asrs	r3, r3, #7
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	f003 0306 	and.w	r3, r3, #6
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	f063 030f 	orn	r3, r3, #15
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	490e      	ldr	r1, [pc, #56]	@ (8002d3c <I2C_MasterRequestWrite+0xfc>)
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f898 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e010      	b.n	8002d34 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d12:	897b      	ldrh	r3, [r7, #10]
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	4907      	ldr	r1, [pc, #28]	@ (8002d40 <I2C_MasterRequestWrite+0x100>)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f888 	bl	8002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	00010008 	.word	0x00010008
 8002d40:	00010002 	.word	0x00010002

08002d44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	4613      	mov	r3, r2
 8002d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d54:	e048      	b.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5c:	d044      	beq.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d5e:	f7fe fd8b 	bl	8001878 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d302      	bcc.n	8002d74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d139      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10d      	bne.n	8002d9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	e00c      	b.n	8002db4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	43da      	mvns	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d116      	bne.n	8002de8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2220      	movs	r2, #32
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	f043 0220 	orr.w	r2, r3, #32
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e023      	b.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	0c1b      	lsrs	r3, r3, #16
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d10d      	bne.n	8002e0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	bf0c      	ite	eq
 8002e04:	2301      	moveq	r3, #1
 8002e06:	2300      	movne	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	e00c      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	43da      	mvns	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	bf0c      	ite	eq
 8002e20:	2301      	moveq	r3, #1
 8002e22:	2300      	movne	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	461a      	mov	r2, r3
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d093      	beq.n	8002d56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e46:	e071      	b.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e56:	d123      	bne.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	f043 0204 	orr.w	r2, r3, #4
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e067      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d041      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7fe fce6 	bl	8001878 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d136      	bne.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	0c1b      	lsrs	r3, r3, #16
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d10c      	bne.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	43da      	mvns	r2, r3
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	e00b      	b.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	f043 0220 	orr.w	r2, r3, #32
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e021      	b.n	8002f70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	0c1b      	lsrs	r3, r3, #16
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d10c      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	43da      	mvns	r2, r3
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e00b      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	43da      	mvns	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f47f af6d 	bne.w	8002e48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f84:	e034      	b.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 f886 	bl	8003098 <I2C_IsAcknowledgeFailed>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e034      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d028      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9e:	f7fe fc6b 	bl	8001878 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d302      	bcc.n	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d11d      	bne.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fbe:	2b80      	cmp	r3, #128	@ 0x80
 8002fc0:	d016      	beq.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fdc:	f043 0220 	orr.w	r2, r3, #32
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e007      	b.n	8003000 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b80      	cmp	r3, #128	@ 0x80
 8002ffc:	d1c3      	bne.n	8002f86 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003014:	e034      	b.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f83e 	bl	8003098 <I2C_IsAcknowledgeFailed>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e034      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d028      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800302e:	f7fe fc23 	bl	8001878 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	68ba      	ldr	r2, [r7, #8]
 800303a:	429a      	cmp	r2, r3
 800303c:	d302      	bcc.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d11d      	bne.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b04      	cmp	r3, #4
 8003050:	d016      	beq.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	f043 0220 	orr.w	r2, r3, #32
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e007      	b.n	8003090 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d1c3      	bne.n	8003016 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ae:	d11b      	bne.n	80030e8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030b8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	f043 0204 	orr.w	r2, r3, #4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af02      	add	r7, sp, #8
 80030fc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e101      	b.n	800330c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f005 fb8a 	bl	800883c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003136:	d102      	bne.n	800313e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f001 ff83 	bl	800504e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6818      	ldr	r0, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	7c1a      	ldrb	r2, [r3, #16]
 8003150:	f88d 2000 	strb.w	r2, [sp]
 8003154:	3304      	adds	r3, #4
 8003156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003158:	f001 fe62 	bl	8004e20 <USB_CoreInit>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d005      	beq.n	800316e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0ce      	b.n	800330c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f001 ff7b 	bl	8005070 <USB_SetCurrentMode>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d005      	beq.n	800318c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0bf      	b.n	800330c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	73fb      	strb	r3, [r7, #15]
 8003190:	e04a      	b.n	8003228 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003192:	7bfa      	ldrb	r2, [r7, #15]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3315      	adds	r3, #21
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3314      	adds	r3, #20
 80031b6:	7bfa      	ldrb	r2, [r7, #15]
 80031b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031ba:	7bfa      	ldrb	r2, [r7, #15]
 80031bc:	7bfb      	ldrb	r3, [r7, #15]
 80031be:	b298      	uxth	r0, r3
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	00db      	lsls	r3, r3, #3
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	332e      	adds	r3, #46	@ 0x2e
 80031ce:	4602      	mov	r2, r0
 80031d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3318      	adds	r3, #24
 80031e2:	2200      	movs	r2, #0
 80031e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031e6:	7bfa      	ldrb	r2, [r7, #15]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	331c      	adds	r3, #28
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	3320      	adds	r3, #32
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800320e:	7bfa      	ldrb	r2, [r7, #15]
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	440b      	add	r3, r1
 800321c:	3324      	adds	r3, #36	@ 0x24
 800321e:	2200      	movs	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	3301      	adds	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	791b      	ldrb	r3, [r3, #4]
 800322c:	7bfa      	ldrb	r2, [r7, #15]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3af      	bcc.n	8003192 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	e044      	b.n	80032c2 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800324a:	2200      	movs	r2, #0
 800324c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800324e:	7bfa      	ldrb	r2, [r7, #15]
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003264:	7bfa      	ldrb	r2, [r7, #15]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003276:	2200      	movs	r2, #0
 8003278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800327a:	7bfa      	ldrb	r2, [r7, #15]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003290:	7bfa      	ldrb	r2, [r7, #15]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80032a6:	7bfa      	ldrb	r2, [r7, #15]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
 80032be:	3301      	adds	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	791b      	ldrb	r3, [r3, #4]
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d3b5      	bcc.n	8003238 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	7c1a      	ldrb	r2, [r3, #16]
 80032d4:	f88d 2000 	strb.w	r2, [sp]
 80032d8:	3304      	adds	r3, #4
 80032da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032dc:	f001 ff14 	bl	8005108 <USB_DevInit>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2202      	movs	r2, #2
 80032ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e00c      	b.n	800330c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f002 ff58 	bl	80061ba <USB_DevDisconnect>

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_PCD_Start+0x1c>
 800332c:	2302      	movs	r3, #2
 800332e:	e022      	b.n	8003376 <HAL_PCD_Start+0x62>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d009      	beq.n	8003358 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003348:	2b01      	cmp	r3, #1
 800334a:	d105      	bne.n	8003358 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003350:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f001 fe65 	bl	800502c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4618      	mov	r0, r3
 8003368:	f002 ff06 	bl	8006178 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800337e:	b590      	push	{r4, r7, lr}
 8003380:	b08d      	sub	sp, #52	@ 0x34
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f002 ffc4 	bl	8006322 <USB_GetMode>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	f040 848c 	bne.w	8003cba <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 ff28 	bl	80061fc <USB_ReadInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8482 	beq.w	8003cb8 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	0a1b      	lsrs	r3, r3, #8
 80033be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f002 ff15 	bl	80061fc <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d107      	bne.n	80033ec <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695a      	ldr	r2, [r3, #20]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f002 0202 	and.w	r2, r2, #2
 80033ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f002 ff03 	bl	80061fc <USB_ReadInterrupts>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f003 0310 	and.w	r3, r3, #16
 80033fc:	2b10      	cmp	r3, #16
 80033fe:	d161      	bne.n	80034c4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0210 	bic.w	r2, r2, #16
 800340e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f003 020f 	and.w	r2, r3, #15
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	3304      	adds	r3, #4
 800342e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	0c5b      	lsrs	r3, r3, #17
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	2b02      	cmp	r3, #2
 800343a:	d124      	bne.n	8003486 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d035      	beq.n	80034b4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	091b      	lsrs	r3, r3, #4
 8003450:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003456:	b29b      	uxth	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	6a38      	ldr	r0, [r7, #32]
 800345c:	f002 fd3a 	bl	8005ed4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	091b      	lsrs	r3, r3, #4
 8003468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800346c:	441a      	add	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	695a      	ldr	r2, [r3, #20]
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800347e:	441a      	add	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	615a      	str	r2, [r3, #20]
 8003484:	e016      	b.n	80034b4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	0c5b      	lsrs	r3, r3, #17
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	2b06      	cmp	r3, #6
 8003490:	d110      	bne.n	80034b4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003498:	2208      	movs	r2, #8
 800349a:	4619      	mov	r1, r3
 800349c:	6a38      	ldr	r0, [r7, #32]
 800349e:	f002 fd19 	bl	8005ed4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ae:	441a      	add	r2, r3
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0210 	orr.w	r2, r2, #16
 80034c2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f002 fe97 	bl	80061fc <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034d8:	f040 80a7 	bne.w	800362a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f002 fe9c 	bl	8006222 <USB_ReadDevAllOutEpInterrupt>
 80034ea:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034ec:	e099      	b.n	8003622 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 808e 	beq.w	8003616 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f002 fec0 	bl	800628a <USB_ReadDevOutEPInterrupt>
 800350a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	4413      	add	r3, r2
 800351e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003522:	461a      	mov	r2, r3
 8003524:	2301      	movs	r3, #1
 8003526:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fea2 	bl	8004274 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003546:	461a      	mov	r2, r3
 8003548:	2308      	movs	r3, #8
 800354a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800354c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 ff78 	bl	8004444 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b00      	cmp	r3, #0
 800355c:	d008      	beq.n	8003570 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	4413      	add	r3, r2
 8003566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800356a:	461a      	mov	r2, r3
 800356c:	2310      	movs	r3, #16
 800356e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	f003 0302 	and.w	r3, r3, #2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d030      	beq.n	80035dc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	2b80      	cmp	r3, #128	@ 0x80
 8003584:	d109      	bne.n	800359a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003594:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003598:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800359a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	3304      	adds	r3, #4
 80035ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	78db      	ldrb	r3, [r3, #3]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d108      	bne.n	80035ca <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2200      	movs	r2, #0
 80035bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	4619      	mov	r1, r3
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f005 fa35 	bl	8008a34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d6:	461a      	mov	r2, r3
 80035d8:	2302      	movs	r3, #2
 80035da:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f2:	461a      	mov	r2, r3
 80035f4:	2320      	movs	r3, #32
 80035f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360e:	461a      	mov	r2, r3
 8003610:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003614:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003618:	3301      	adds	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800361c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361e:	085b      	lsrs	r3, r3, #1
 8003620:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003624:	2b00      	cmp	r3, #0
 8003626:	f47f af62 	bne.w	80034ee <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f002 fde4 	bl	80061fc <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800363a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800363e:	f040 80db 	bne.w	80037f8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f002 fe05 	bl	8006256 <USB_ReadDevAllInEpInterrupt>
 800364c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003652:	e0cd      	b.n	80037f0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 80c2 	beq.w	80037e4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f002 fe2b 	bl	80062c6 <USB_ReadDevInEPInterrupt>
 8003670:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b00      	cmp	r3, #0
 800367a:	d057      	beq.n	800372c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	2201      	movs	r2, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003690:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	43db      	mvns	r3, r3
 8003696:	69f9      	ldr	r1, [r7, #28]
 8003698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800369c:	4013      	ands	r3, r2
 800369e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036ac:	461a      	mov	r2, r3
 80036ae:	2301      	movs	r3, #1
 80036b0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	799b      	ldrb	r3, [r3, #6]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d132      	bne.n	8003720 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3320      	adds	r3, #32
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4403      	add	r3, r0
 80036da:	331c      	adds	r3, #28
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4419      	add	r1, r3
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036e4:	4613      	mov	r3, r2
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	4403      	add	r3, r0
 80036ee:	3320      	adds	r3, #32
 80036f0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d113      	bne.n	8003720 <HAL_PCD_IRQHandler+0x3a2>
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3324      	adds	r3, #36	@ 0x24
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003718:	461a      	mov	r2, r3
 800371a:	2101      	movs	r1, #1
 800371c:	f002 fe32 	bl	8006384 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003722:	b2db      	uxtb	r3, r3
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f005 f909 	bl	800893e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d008      	beq.n	8003748 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003738:	015a      	lsls	r2, r3, #5
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003742:	461a      	mov	r2, r3
 8003744:	2308      	movs	r3, #8
 8003746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	4413      	add	r3, r2
 800375a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800375e:	461a      	mov	r2, r3
 8003760:	2310      	movs	r3, #16
 8003762:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800376e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800377a:	461a      	mov	r2, r3
 800377c:	2340      	movs	r3, #64	@ 0x40
 800377e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d023      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800378a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800378c:	6a38      	ldr	r0, [r7, #32]
 800378e:	f001 fe1f 	bl	80053d0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	3310      	adds	r3, #16
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	78db      	ldrb	r3, [r3, #3]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d108      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	4619      	mov	r1, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f005 f94c 	bl	8008a58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037cc:	461a      	mov	r2, r3
 80037ce:	2302      	movs	r3, #2
 80037d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fcbb 	bl	800415a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e6:	3301      	adds	r3, #1
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ec:	085b      	lsrs	r3, r3, #1
 80037ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f47f af2e 	bne.w	8003654 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fcfd 	bl	80061fc <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800380c:	d122      	bne.n	8003854 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800381c:	f023 0301 	bic.w	r3, r3, #1
 8003820:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003828:	2b01      	cmp	r3, #1
 800382a:	d108      	bne.n	800383e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003834:	2100      	movs	r1, #0
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fea2 	bl	8004580 <HAL_PCDEx_LPM_Callback>
 800383c:	e002      	b.n	8003844 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f005 f8ea 	bl	8008a18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695a      	ldr	r2, [r3, #20]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003852:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4618      	mov	r0, r3
 800385a:	f002 fccf 	bl	80061fc <USB_ReadInterrupts>
 800385e:	4603      	mov	r3, r0
 8003860:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003868:	d112      	bne.n	8003890 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b01      	cmp	r3, #1
 8003878:	d102      	bne.n	8003880 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f005 f8a6 	bl	80089cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695a      	ldr	r2, [r3, #20]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800388e:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4618      	mov	r0, r3
 8003896:	f002 fcb1 	bl	80061fc <USB_ReadInterrupts>
 800389a:	4603      	mov	r3, r0
 800389c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038a4:	f040 80b7 	bne.w	8003a16 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038b6:	f023 0301 	bic.w	r3, r3, #1
 80038ba:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2110      	movs	r1, #16
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 fd84 	bl	80053d0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c8:	2300      	movs	r3, #0
 80038ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038cc:	e046      	b.n	800395c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d0:	015a      	lsls	r2, r3, #5
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	4413      	add	r3, r2
 80038d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038da:	461a      	mov	r2, r3
 80038dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038e0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038f2:	0151      	lsls	r1, r2, #5
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	440a      	add	r2, r1
 80038f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003900:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003904:	015a      	lsls	r2, r3, #5
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	4413      	add	r3, r2
 800390a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800390e:	461a      	mov	r2, r3
 8003910:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003914:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	440a      	add	r2, r1
 800392c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003930:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003934:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003950:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003954:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003958:	3301      	adds	r3, #1
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	791b      	ldrb	r3, [r3, #4]
 8003960:	461a      	mov	r2, r3
 8003962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003964:	4293      	cmp	r3, r2
 8003966:	d3b2      	bcc.n	80038ce <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003976:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800397a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	7bdb      	ldrb	r3, [r3, #15]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d016      	beq.n	80039b2 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800398a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003994:	f043 030b 	orr.w	r3, r3, #11
 8003998:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039aa:	f043 030b 	orr.w	r3, r3, #11
 80039ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80039b0:	e015      	b.n	80039de <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039c4:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80039c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d8:	f043 030b 	orr.w	r3, r3, #11
 80039dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	69fa      	ldr	r2, [r7, #28]
 80039e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039ec:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6818      	ldr	r0, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003a00:	461a      	mov	r2, r3
 8003a02:	f002 fcbf 	bl	8006384 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695a      	ldr	r2, [r3, #20]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f002 fbee 	bl	80061fc <USB_ReadInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2a:	d123      	bne.n	8003a74 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 fc84 	bl	800633e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f001 fd41 	bl	80054c2 <USB_GetDevSpeed>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681c      	ldr	r4, [r3, #0]
 8003a4c:	f001 f9c8 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8003a50:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a56:	461a      	mov	r2, r3
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f001 fa45 	bl	8004ee8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f004 ff95 	bl	800898e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695a      	ldr	r2, [r3, #20]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a72:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f002 fbbf 	bl	80061fc <USB_ReadInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d10a      	bne.n	8003a9e <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f004 ff72 	bl	8008972 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f002 0208 	and.w	r2, r2, #8
 8003a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f002 fbaa 	bl	80061fc <USB_ReadInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aae:	2b80      	cmp	r3, #128	@ 0x80
 8003ab0:	d123      	bne.n	8003afa <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003abe:	2301      	movs	r3, #1
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac2:	e014      	b.n	8003aee <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fb08 	bl	80040f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aea:	3301      	adds	r3, #1
 8003aec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	791b      	ldrb	r3, [r3, #4]
 8003af2:	461a      	mov	r2, r3
 8003af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d3e4      	bcc.n	8003ac4 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f002 fb7c 	bl	80061fc <USB_ReadInterrupts>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b0e:	d13c      	bne.n	8003b8a <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b10:	2301      	movs	r3, #1
 8003b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b14:	e02b      	b.n	8003b6e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	3318      	adds	r3, #24
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d115      	bne.n	8003b68 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	da12      	bge.n	8003b68 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	3317      	adds	r3, #23
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4619      	mov	r1, r3
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fac8 	bl	80040f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	791b      	ldrb	r3, [r3, #4]
 8003b72:	461a      	mov	r2, r3
 8003b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d3cd      	bcc.n	8003b16 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f002 fb34 	bl	80061fc <USB_ReadInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b9e:	d156      	bne.n	8003c4e <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ba4:	e045      	b.n	8003c32 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bba:	4613      	mov	r3, r2
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d12e      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	da2b      	bge.n	8003c2c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003be0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d121      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c28:	6053      	str	r3, [r2, #4]
            break;
 8003c2a:	e008      	b.n	8003c3e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	3301      	adds	r3, #1
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	791b      	ldrb	r3, [r3, #4]
 8003c36:	461a      	mov	r2, r3
 8003c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d3b3      	bcc.n	8003ba6 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695a      	ldr	r2, [r3, #20]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f002 fad2 	bl	80061fc <USB_ReadInterrupts>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c62:	d10a      	bne.n	8003c7a <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f004 ff09 	bl	8008a7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f002 fabc 	bl	80061fc <USB_ReadInterrupts>
 8003c84:	4603      	mov	r3, r0
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d115      	bne.n	8003cba <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f004 fef9 	bl	8008a98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6859      	ldr	r1, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e000      	b.n	8003cba <HAL_PCD_IRQHandler+0x93c>
      return;
 8003cb8:	bf00      	nop
    }
  }
}
 8003cba:	3734      	adds	r7, #52	@ 0x34
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd90      	pop	{r4, r7, pc}

08003cc0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_SetAddress+0x1a>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e012      	b.n	8003d00 <HAL_PCD_SetAddress+0x40>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 fa1b 	bl	800612c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	4608      	mov	r0, r1
 8003d12:	4611      	mov	r1, r2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	70fb      	strb	r3, [r7, #3]
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	803b      	strh	r3, [r7, #0]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	da0f      	bge.n	8003d4e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 020f 	and.w	r2, r3, #15
 8003d34:	4613      	mov	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4413      	add	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	3310      	adds	r3, #16
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	4413      	add	r3, r2
 8003d42:	3304      	adds	r3, #4
 8003d44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	705a      	strb	r2, [r3, #1]
 8003d4c:	e00f      	b.n	8003d6e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4e:	78fb      	ldrb	r3, [r7, #3]
 8003d50:	f003 020f 	and.w	r2, r3, #15
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	3304      	adds	r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d7a:	883a      	ldrh	r2, [r7, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	78ba      	ldrb	r2, [r7, #2]
 8003d84:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	785b      	ldrb	r3, [r3, #1]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d004      	beq.n	8003d98 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d98:	78bb      	ldrb	r3, [r7, #2]
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d102      	bne.n	8003da4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d101      	bne.n	8003db2 <HAL_PCD_EP_Open+0xaa>
 8003dae:	2302      	movs	r3, #2
 8003db0:	e00e      	b.n	8003dd0 <HAL_PCD_EP_Open+0xc8>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2201      	movs	r2, #1
 8003db6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f001 fba3 	bl	800550c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003dce:	7afb      	ldrb	r3, [r7, #11]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da0f      	bge.n	8003e0c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dec:	78fb      	ldrb	r3, [r7, #3]
 8003dee:	f003 020f 	and.w	r2, r3, #15
 8003df2:	4613      	mov	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4413      	add	r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	4413      	add	r3, r2
 8003e00:	3304      	adds	r3, #4
 8003e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	705a      	strb	r2, [r3, #1]
 8003e0a:	e00f      	b.n	8003e2c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 020f 	and.w	r2, r3, #15
 8003e12:	4613      	mov	r3, r2
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	3304      	adds	r3, #4
 8003e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d101      	bne.n	8003e46 <HAL_PCD_EP_Close+0x6e>
 8003e42:	2302      	movs	r3, #2
 8003e44:	e00e      	b.n	8003e64 <HAL_PCD_EP_Close+0x8c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68f9      	ldr	r1, [r7, #12]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fbe1 	bl	800561c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	607a      	str	r2, [r7, #4]
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	460b      	mov	r3, r1
 8003e7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e7c:	7afb      	ldrb	r3, [r7, #11]
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4413      	add	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4413      	add	r3, r2
 8003e92:	3304      	adds	r3, #4
 8003e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eae:	7afb      	ldrb	r3, [r7, #11]
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	799b      	ldrb	r3, [r3, #6]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	799b      	ldrb	r3, [r3, #6]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6979      	ldr	r1, [r7, #20]
 8003ed4:	f001 fc7e 	bl	80057d4 <USB_EPStartXfer>

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	460b      	mov	r3, r1
 8003eec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 020f 	and.w	r2, r3, #15
 8003ef4:	6879      	ldr	r1, [r7, #4]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003f04:	681b      	ldr	r3, [r3, #0]
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b086      	sub	sp, #24
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	607a      	str	r2, [r7, #4]
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	460b      	mov	r3, r1
 8003f20:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f22:	7afb      	ldrb	r3, [r7, #11]
 8003f24:	f003 020f 	and.w	r2, r3, #15
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	3310      	adds	r3, #16
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f52:	7afb      	ldrb	r3, [r7, #11]
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	799b      	ldrb	r3, [r3, #6]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	799b      	ldrb	r3, [r3, #6]
 8003f74:	461a      	mov	r2, r3
 8003f76:	6979      	ldr	r1, [r7, #20]
 8003f78:	f001 fc2c 	bl	80057d4 <USB_EPStartXfer>

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3718      	adds	r7, #24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	7912      	ldrb	r2, [r2, #4]
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e04f      	b.n	8004044 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	da0f      	bge.n	8003fcc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 020f 	and.w	r2, r3, #15
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	3310      	adds	r3, #16
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	705a      	strb	r2, [r3, #1]
 8003fca:	e00d      	b.n	8003fe8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4413      	add	r3, r2
 8003fde:	3304      	adds	r3, #4
 8003fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_PCD_EP_SetStall+0x82>
 8004004:	2302      	movs	r3, #2
 8004006:	e01d      	b.n	8004044 <HAL_PCD_EP_SetStall+0xbe>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68f9      	ldr	r1, [r7, #12]
 8004016:	4618      	mov	r0, r3
 8004018:	f001 ffb4 	bl	8005f84 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6818      	ldr	r0, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	7999      	ldrb	r1, [r3, #6]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004034:	461a      	mov	r2, r3
 8004036:	f002 f9a5 	bl	8006384 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	7912      	ldrb	r2, [r2, #4]
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e042      	b.n	80040f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800406a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800406e:	2b00      	cmp	r3, #0
 8004070:	da0f      	bge.n	8004092 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	f003 020f 	and.w	r2, r3, #15
 8004078:	4613      	mov	r3, r2
 800407a:	00db      	lsls	r3, r3, #3
 800407c:	4413      	add	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	3310      	adds	r3, #16
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4413      	add	r3, r2
 8004086:	3304      	adds	r3, #4
 8004088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2201      	movs	r2, #1
 800408e:	705a      	strb	r2, [r3, #1]
 8004090:	e00f      	b.n	80040b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	4413      	add	r3, r2
 80040a8:	3304      	adds	r3, #4
 80040aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d101      	bne.n	80040d2 <HAL_PCD_EP_ClrStall+0x86>
 80040ce:	2302      	movs	r3, #2
 80040d0:	e00e      	b.n	80040f0 <HAL_PCD_EP_ClrStall+0xa4>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f001 ffbd 	bl	8006060 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3710      	adds	r7, #16
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004108:	2b00      	cmp	r3, #0
 800410a:	da0c      	bge.n	8004126 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800410c:	78fb      	ldrb	r3, [r7, #3]
 800410e:	f003 020f 	and.w	r2, r3, #15
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	3310      	adds	r3, #16
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
 8004120:	3304      	adds	r3, #4
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	e00c      	b.n	8004140 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	f003 020f 	and.w	r2, r3, #15
 800412c:	4613      	mov	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4413      	add	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	4618      	mov	r0, r3
 8004148:	f001 fddc 	bl	8005d04 <USB_EPStopXfer>
 800414c:	4603      	mov	r3, r0
 800414e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004150:	7afb      	ldrb	r3, [r7, #11]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}

0800415a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08a      	sub	sp, #40	@ 0x28
 800415e:	af02      	add	r7, sp, #8
 8004160:	6078      	str	r0, [r7, #4]
 8004162:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	4613      	mov	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	3310      	adds	r3, #16
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	3304      	adds	r3, #4
 8004180:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	695a      	ldr	r2, [r3, #20]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	429a      	cmp	r2, r3
 800418c:	d901      	bls.n	8004192 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e06b      	b.n	800426a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d902      	bls.n	80041ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3303      	adds	r3, #3
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041b6:	e02a      	b.n	800420e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	69fa      	ldr	r2, [r7, #28]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d902      	bls.n	80041d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	3303      	adds	r3, #3
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68d9      	ldr	r1, [r3, #12]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041ec:	9300      	str	r3, [sp, #0]
 80041ee:	4603      	mov	r3, r0
 80041f0:	6978      	ldr	r0, [r7, #20]
 80041f2:	f001 fe31 	bl	8005e58 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	68da      	ldr	r2, [r3, #12]
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	441a      	add	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	695a      	ldr	r2, [r3, #20]
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	441a      	add	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	429a      	cmp	r2, r3
 8004222:	d809      	bhi.n	8004238 <PCD_WriteEmptyTxFifo+0xde>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800422c:	429a      	cmp	r2, r3
 800422e:	d203      	bcs.n	8004238 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1bf      	bne.n	80041b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	429a      	cmp	r2, r3
 8004242:	d811      	bhi.n	8004268 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	2201      	movs	r2, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004258:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	43db      	mvns	r3, r3
 800425e:	6939      	ldr	r1, [r7, #16]
 8004260:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004264:	4013      	ands	r3, r2
 8004266:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3720      	adds	r7, #32
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
	...

08004274 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b088      	sub	sp, #32
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	333c      	adds	r3, #60	@ 0x3c
 800428c:	3304      	adds	r3, #4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	799b      	ldrb	r3, [r3, #6]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d17b      	bne.n	80043a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f003 0308 	and.w	r3, r3, #8
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d015      	beq.n	80042e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4a61      	ldr	r2, [pc, #388]	@ (800443c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	f240 80b9 	bls.w	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80b3 	beq.w	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042d6:	461a      	mov	r2, r3
 80042d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042dc:	6093      	str	r3, [r2, #8]
 80042de:	e0a7      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042f6:	461a      	mov	r2, r3
 80042f8:	2320      	movs	r3, #32
 80042fa:	6093      	str	r3, [r2, #8]
 80042fc:	e098      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 8093 	bne.w	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4a4b      	ldr	r2, [pc, #300]	@ (800443c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d90f      	bls.n	8004332 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432e:	6093      	str	r3, [r2, #8]
 8004330:	e07e      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4413      	add	r3, r2
 8004344:	3304      	adds	r3, #4
 8004346:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6a1a      	ldr	r2, [r3, #32]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	0159      	lsls	r1, r3, #5
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	440b      	add	r3, r1
 8004354:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800435e:	1ad2      	subs	r2, r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d114      	bne.n	8004394 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d109      	bne.n	8004386 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6818      	ldr	r0, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800437c:	461a      	mov	r2, r3
 800437e:	2101      	movs	r1, #1
 8004380:	f002 f800 	bl	8006384 <USB_EP0_OutStart>
 8004384:	e006      	b.n	8004394 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	441a      	add	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	4619      	mov	r1, r3
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f004 fab4 	bl	8008908 <HAL_PCD_DataOutStageCallback>
 80043a0:	e046      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4a26      	ldr	r2, [pc, #152]	@ (8004440 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d124      	bne.n	80043f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043c0:	461a      	mov	r2, r3
 80043c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043c6:	6093      	str	r3, [r2, #8]
 80043c8:	e032      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	2320      	movs	r3, #32
 80043e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f004 fa8b 	bl	8008908 <HAL_PCD_DataOutStageCallback>
 80043f2:	e01d      	b.n	8004430 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d114      	bne.n	8004424 <PCD_EP_OutXfrComplete_int+0x1b0>
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	683a      	ldr	r2, [r7, #0]
 80043fe:	4613      	mov	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4413      	add	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6818      	ldr	r0, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800441c:	461a      	mov	r2, r3
 800441e:	2100      	movs	r1, #0
 8004420:	f001 ffb0 	bl	8006384 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	b2db      	uxtb	r3, r3
 8004428:	4619      	mov	r1, r3
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f004 fa6c 	bl	8008908 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3720      	adds	r7, #32
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	4f54300a 	.word	0x4f54300a
 8004440:	4f54310a 	.word	0x4f54310a

08004444 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	333c      	adds	r3, #60	@ 0x3c
 800445c:	3304      	adds	r3, #4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <PCD_EP_OutSetupPacket_int+0x88>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d90e      	bls.n	8004498 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004490:	461a      	mov	r2, r3
 8004492:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004496:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f004 fa23 	bl	80088e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <PCD_EP_OutSetupPacket_int+0x88>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d90c      	bls.n	80044c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	799b      	ldrb	r3, [r3, #6]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d108      	bne.n	80044c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044b8:	461a      	mov	r2, r3
 80044ba:	2101      	movs	r1, #1
 80044bc:	f001 ff62 	bl	8006384 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	4f54300a 	.word	0x4f54300a

080044d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	70fb      	strb	r3, [r7, #3]
 80044dc:	4613      	mov	r3, r2
 80044de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d107      	bne.n	80044fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044ee:	883b      	ldrh	r3, [r7, #0]
 80044f0:	0419      	lsls	r1, r3, #16
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80044fc:	e028      	b.n	8004550 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4413      	add	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800450c:	2300      	movs	r3, #0
 800450e:	73fb      	strb	r3, [r7, #15]
 8004510:	e00d      	b.n	800452e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	7bfb      	ldrb	r3, [r7, #15]
 8004518:	3340      	adds	r3, #64	@ 0x40
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	0c1b      	lsrs	r3, r3, #16
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	4413      	add	r3, r2
 8004526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	3301      	adds	r3, #1
 800452c:	73fb      	strb	r3, [r7, #15]
 800452e:	7bfa      	ldrb	r2, [r7, #15]
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	3b01      	subs	r3, #1
 8004534:	429a      	cmp	r2, r3
 8004536:	d3ec      	bcc.n	8004512 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004538:	883b      	ldrh	r3, [r7, #0]
 800453a:	0418      	lsls	r0, r3, #16
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	78fb      	ldrb	r3, [r7, #3]
 8004542:	3b01      	subs	r3, #1
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4302      	orrs	r2, r0
 8004548:	3340      	adds	r3, #64	@ 0x40
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	440b      	add	r3, r1
 800454e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
 8004566:	460b      	mov	r3, r1
 8004568:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	460b      	mov	r3, r1
 800458a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e267      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d075      	beq.n	80046a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045b6:	4b88      	ldr	r3, [pc, #544]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 030c 	and.w	r3, r3, #12
 80045be:	2b04      	cmp	r3, #4
 80045c0:	d00c      	beq.n	80045dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c2:	4b85      	ldr	r3, [pc, #532]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d112      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ce:	4b82      	ldr	r3, [pc, #520]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045da:	d10b      	bne.n	80045f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	4b7e      	ldr	r3, [pc, #504]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d05b      	beq.n	80046a0 <HAL_RCC_OscConfig+0x108>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d157      	bne.n	80046a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e242      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d106      	bne.n	800460c <HAL_RCC_OscConfig+0x74>
 80045fe:	4b76      	ldr	r3, [pc, #472]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a75      	ldr	r2, [pc, #468]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e01d      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x98>
 8004616:	4b70      	ldr	r3, [pc, #448]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a6f      	ldr	r2, [pc, #444]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800461c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004620:	6013      	str	r3, [r2, #0]
 8004622:	4b6d      	ldr	r3, [pc, #436]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a6c      	ldr	r2, [pc, #432]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0xb0>
 8004630:	4b69      	ldr	r3, [pc, #420]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a68      	ldr	r2, [pc, #416]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	4b66      	ldr	r3, [pc, #408]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a65      	ldr	r2, [pc, #404]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004650:	f7fd f912 	bl	8001878 <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004656:	e008      	b.n	800466a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004658:	f7fd f90e 	bl	8001878 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	2b64      	cmp	r3, #100	@ 0x64
 8004664:	d901      	bls.n	800466a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e207      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b5b      	ldr	r3, [pc, #364]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0f0      	beq.n	8004658 <HAL_RCC_OscConfig+0xc0>
 8004676:	e014      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004678:	f7fd f8fe 	bl	8001878 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800467e:	e008      	b.n	8004692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004680:	f7fd f8fa 	bl	8001878 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b64      	cmp	r3, #100	@ 0x64
 800468c:	d901      	bls.n	8004692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e1f3      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	4b51      	ldr	r3, [pc, #324]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1f0      	bne.n	8004680 <HAL_RCC_OscConfig+0xe8>
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d063      	beq.n	8004776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ae:	4b4a      	ldr	r3, [pc, #296]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046ba:	4b47      	ldr	r3, [pc, #284]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d11c      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046c6:	4b44      	ldr	r3, [pc, #272]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d116      	bne.n	8004700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046d2:	4b41      	ldr	r3, [pc, #260]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e1c7      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ea:	4b3b      	ldr	r3, [pc, #236]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	00db      	lsls	r3, r3, #3
 80046f8:	4937      	ldr	r1, [pc, #220]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fe:	e03a      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004708:	4b34      	ldr	r3, [pc, #208]	@ (80047dc <HAL_RCC_OscConfig+0x244>)
 800470a:	2201      	movs	r2, #1
 800470c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fd f8b3 	bl	8001878 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd f8af 	bl	8001878 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e1a8      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	4b2b      	ldr	r3, [pc, #172]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b28      	ldr	r3, [pc, #160]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	00db      	lsls	r3, r3, #3
 8004742:	4925      	ldr	r1, [pc, #148]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 8004744:	4313      	orrs	r3, r2
 8004746:	600b      	str	r3, [r1, #0]
 8004748:	e015      	b.n	8004776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b24      	ldr	r3, [pc, #144]	@ (80047dc <HAL_RCC_OscConfig+0x244>)
 800474c:	2200      	movs	r2, #0
 800474e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fd f892 	bl	8001878 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004758:	f7fd f88e 	bl	8001878 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e187      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	4b1b      	ldr	r3, [pc, #108]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d036      	beq.n	80047f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d016      	beq.n	80047b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800478a:	4b15      	ldr	r3, [pc, #84]	@ (80047e0 <HAL_RCC_OscConfig+0x248>)
 800478c:	2201      	movs	r2, #1
 800478e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004790:	f7fd f872 	bl	8001878 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004798:	f7fd f86e 	bl	8001878 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e167      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <HAL_RCC_OscConfig+0x240>)
 80047ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d0f0      	beq.n	8004798 <HAL_RCC_OscConfig+0x200>
 80047b6:	e01b      	b.n	80047f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b8:	4b09      	ldr	r3, [pc, #36]	@ (80047e0 <HAL_RCC_OscConfig+0x248>)
 80047ba:	2200      	movs	r2, #0
 80047bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047be:	f7fd f85b 	bl	8001878 <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c4:	e00e      	b.n	80047e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c6:	f7fd f857 	bl	8001878 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d907      	bls.n	80047e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e150      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
 80047d8:	40023800 	.word	0x40023800
 80047dc:	42470000 	.word	0x42470000
 80047e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047e4:	4b88      	ldr	r3, [pc, #544]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80047e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1ea      	bne.n	80047c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 8097 	beq.w	800492c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047fe:	2300      	movs	r3, #0
 8004800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004802:	4b81      	ldr	r3, [pc, #516]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10f      	bne.n	800482e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800480e:	2300      	movs	r3, #0
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	4b7d      	ldr	r3, [pc, #500]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004816:	4a7c      	ldr	r2, [pc, #496]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481c:	6413      	str	r3, [r2, #64]	@ 0x40
 800481e:	4b7a      	ldr	r3, [pc, #488]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004826:	60bb      	str	r3, [r7, #8]
 8004828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800482a:	2301      	movs	r3, #1
 800482c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482e:	4b77      	ldr	r3, [pc, #476]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d118      	bne.n	800486c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800483a:	4b74      	ldr	r3, [pc, #464]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a73      	ldr	r2, [pc, #460]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004840:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004846:	f7fd f817 	bl	8001878 <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484e:	f7fd f813 	bl	8001878 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e10c      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004860:	4b6a      	ldr	r3, [pc, #424]	@ (8004a0c <HAL_RCC_OscConfig+0x474>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d0f0      	beq.n	800484e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d106      	bne.n	8004882 <HAL_RCC_OscConfig+0x2ea>
 8004874:	4b64      	ldr	r3, [pc, #400]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004878:	4a63      	ldr	r2, [pc, #396]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800487a:	f043 0301 	orr.w	r3, r3, #1
 800487e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004880:	e01c      	b.n	80048bc <HAL_RCC_OscConfig+0x324>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b05      	cmp	r3, #5
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x30c>
 800488a:	4b5f      	ldr	r3, [pc, #380]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800488c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488e:	4a5e      	ldr	r2, [pc, #376]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004890:	f043 0304 	orr.w	r3, r3, #4
 8004894:	6713      	str	r3, [r2, #112]	@ 0x70
 8004896:	4b5c      	ldr	r3, [pc, #368]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0x324>
 80048a4:	4b58      	ldr	r3, [pc, #352]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a8:	4a57      	ldr	r2, [pc, #348]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048aa:	f023 0301 	bic.w	r3, r3, #1
 80048ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b0:	4b55      	ldr	r3, [pc, #340]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048b4:	4a54      	ldr	r2, [pc, #336]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 0304 	bic.w	r3, r3, #4
 80048ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048c4:	f7fc ffd8 	bl	8001878 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048ca:	e00a      	b.n	80048e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048cc:	f7fc ffd4 	bl	8001878 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048da:	4293      	cmp	r3, r2
 80048dc:	d901      	bls.n	80048e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e0cb      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e2:	4b49      	ldr	r3, [pc, #292]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80048e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ee      	beq.n	80048cc <HAL_RCC_OscConfig+0x334>
 80048ee:	e014      	b.n	800491a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f0:	f7fc ffc2 	bl	8001878 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fc ffbe 	bl	8001878 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e0b5      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800490e:	4b3e      	ldr	r3, [pc, #248]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1ee      	bne.n	80048f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800491a:	7dfb      	ldrb	r3, [r7, #23]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d105      	bne.n	800492c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004920:	4b39      	ldr	r3, [pc, #228]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	4a38      	ldr	r2, [pc, #224]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004926:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699b      	ldr	r3, [r3, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80a1 	beq.w	8004a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004936:	4b34      	ldr	r3, [pc, #208]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
 800493e:	2b08      	cmp	r3, #8
 8004940:	d05c      	beq.n	80049fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b02      	cmp	r3, #2
 8004948:	d141      	bne.n	80049ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494a:	4b31      	ldr	r3, [pc, #196]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7fc ff92 	bl	8001878 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fc ff8e 	bl	8001878 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e087      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	4b27      	ldr	r3, [pc, #156]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69da      	ldr	r2, [r3, #28]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004984:	019b      	lsls	r3, r3, #6
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	085b      	lsrs	r3, r3, #1
 800498e:	3b01      	subs	r3, #1
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	431a      	orrs	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004998:	061b      	lsls	r3, r3, #24
 800499a:	491b      	ldr	r1, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 800499c:	4313      	orrs	r3, r2
 800499e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a6:	f7fc ff67 	bl	8001878 <HAL_GetTick>
 80049aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ae:	f7fc ff63 	bl	8001878 <HAL_GetTick>
 80049b2:	4602      	mov	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e05c      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c0:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d0f0      	beq.n	80049ae <HAL_RCC_OscConfig+0x416>
 80049cc:	e054      	b.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049ce:	4b10      	ldr	r3, [pc, #64]	@ (8004a10 <HAL_RCC_OscConfig+0x478>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d4:	f7fc ff50 	bl	8001878 <HAL_GetTick>
 80049d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049dc:	f7fc ff4c 	bl	8001878 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e045      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049ee:	4b06      	ldr	r3, [pc, #24]	@ (8004a08 <HAL_RCC_OscConfig+0x470>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x444>
 80049fa:	e03d      	b.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d107      	bne.n	8004a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e038      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a14:	4b1b      	ldr	r3, [pc, #108]	@ (8004a84 <HAL_RCC_OscConfig+0x4ec>)
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d028      	beq.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d121      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d11a      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a44:	4013      	ands	r3, r2
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d111      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5a:	085b      	lsrs	r3, r3, #1
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d107      	bne.n	8004a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	40023800 	.word	0x40023800

08004a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0cc      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b68      	ldr	r3, [pc, #416]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d90c      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b65      	ldr	r3, [pc, #404]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b63      	ldr	r3, [pc, #396]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0b8      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d020      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d005      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004adc:	4b59      	ldr	r3, [pc, #356]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	4a58      	ldr	r2, [pc, #352]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004af4:	4b53      	ldr	r3, [pc, #332]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a52      	ldr	r2, [pc, #328]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b00:	4b50      	ldr	r3, [pc, #320]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	494d      	ldr	r1, [pc, #308]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0301 	and.w	r3, r3, #1
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d044      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d107      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	4b47      	ldr	r3, [pc, #284]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d119      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e07f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d003      	beq.n	8004b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b46:	4b3f      	ldr	r3, [pc, #252]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e06f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b56:	4b3b      	ldr	r3, [pc, #236]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e067      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b37      	ldr	r3, [pc, #220]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4934      	ldr	r1, [pc, #208]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b78:	f7fc fe7e 	bl	8001878 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fc fe7a 	bl	8001878 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e04f      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	4b2b      	ldr	r3, [pc, #172]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 020c 	and.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1eb      	bne.n	8004b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d20c      	bcs.n	8004bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b22      	ldr	r3, [pc, #136]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b20      	ldr	r3, [pc, #128]	@ (8004c40 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e032      	b.n	8004c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d008      	beq.n	8004bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bdc:	4b19      	ldr	r3, [pc, #100]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	4916      	ldr	r1, [pc, #88]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d009      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bfa:	4b12      	ldr	r3, [pc, #72]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	490e      	ldr	r1, [pc, #56]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c0e:	f000 f821 	bl	8004c54 <HAL_RCC_GetSysClockFreq>
 8004c12:	4602      	mov	r2, r0
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <HAL_RCC_ClockConfig+0x1bc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	091b      	lsrs	r3, r3, #4
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	490a      	ldr	r1, [pc, #40]	@ (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	5ccb      	ldrb	r3, [r1, r3]
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	4a09      	ldr	r2, [pc, #36]	@ (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c2a:	4b09      	ldr	r3, [pc, #36]	@ (8004c50 <HAL_RCC_ClockConfig+0x1c8>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fc fdde 	bl	80017f0 <HAL_InitTick>

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40023c00 	.word	0x40023c00
 8004c44:	40023800 	.word	0x40023800
 8004c48:	0800ca20 	.word	0x0800ca20
 8004c4c:	20000000 	.word	0x20000000
 8004c50:	20000004 	.word	0x20000004

08004c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b090      	sub	sp, #64	@ 0x40
 8004c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c60:	2300      	movs	r3, #0
 8004c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c64:	2300      	movs	r3, #0
 8004c66:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c6c:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f003 030c 	and.w	r3, r3, #12
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d00d      	beq.n	8004c94 <HAL_RCC_GetSysClockFreq+0x40>
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	f200 80a1 	bhi.w	8004dc0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_RCC_GetSysClockFreq+0x34>
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d003      	beq.n	8004c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c86:	e09b      	b.n	8004dc0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c88:	4b53      	ldr	r3, [pc, #332]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004c8c:	e09b      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c8e:	4b53      	ldr	r3, [pc, #332]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8004c90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c92:	e098      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c94:	4b4f      	ldr	r3, [pc, #316]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c9c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c9e:	4b4d      	ldr	r3, [pc, #308]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d028      	beq.n	8004cfc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004caa:	4b4a      	ldr	r3, [pc, #296]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	623b      	str	r3, [r7, #32]
 8004cb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4b47      	ldr	r3, [pc, #284]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8004cc0:	fb03 f201 	mul.w	r2, r3, r1
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	4a43      	ldr	r2, [pc, #268]	@ (8004ddc <HAL_RCC_GetSysClockFreq+0x188>)
 8004cce:	fba0 1202 	umull	r1, r2, r0, r2
 8004cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cd4:	460a      	mov	r2, r1
 8004cd6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004cd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cda:	4413      	add	r3, r2
 8004cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	61bb      	str	r3, [r7, #24]
 8004ce4:	61fa      	str	r2, [r7, #28]
 8004ce6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004cee:	f7fb ff63 	bl	8000bb8 <__aeabi_uldivmod>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cfa:	e053      	b.n	8004da4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cfc:	4b35      	ldr	r3, [pc, #212]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	099b      	lsrs	r3, r3, #6
 8004d02:	2200      	movs	r2, #0
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	617a      	str	r2, [r7, #20]
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d0e:	f04f 0b00 	mov.w	fp, #0
 8004d12:	4652      	mov	r2, sl
 8004d14:	465b      	mov	r3, fp
 8004d16:	f04f 0000 	mov.w	r0, #0
 8004d1a:	f04f 0100 	mov.w	r1, #0
 8004d1e:	0159      	lsls	r1, r3, #5
 8004d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d24:	0150      	lsls	r0, r2, #5
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	ebb2 080a 	subs.w	r8, r2, sl
 8004d2e:	eb63 090b 	sbc.w	r9, r3, fp
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	f04f 0300 	mov.w	r3, #0
 8004d3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d46:	ebb2 0408 	subs.w	r4, r2, r8
 8004d4a:	eb63 0509 	sbc.w	r5, r3, r9
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	f04f 0300 	mov.w	r3, #0
 8004d56:	00eb      	lsls	r3, r5, #3
 8004d58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d5c:	00e2      	lsls	r2, r4, #3
 8004d5e:	4614      	mov	r4, r2
 8004d60:	461d      	mov	r5, r3
 8004d62:	eb14 030a 	adds.w	r3, r4, sl
 8004d66:	603b      	str	r3, [r7, #0]
 8004d68:	eb45 030b 	adc.w	r3, r5, fp
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	028b      	lsls	r3, r1, #10
 8004d7e:	4621      	mov	r1, r4
 8004d80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d84:	4621      	mov	r1, r4
 8004d86:	028a      	lsls	r2, r1, #10
 8004d88:	4610      	mov	r0, r2
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	60fa      	str	r2, [r7, #12]
 8004d94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d98:	f7fb ff0e 	bl	8000bb8 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004da4:	4b0b      	ldr	r3, [pc, #44]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	0c1b      	lsrs	r3, r3, #16
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	3301      	adds	r3, #1
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004db4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dc0:	4b05      	ldr	r3, [pc, #20]	@ (8004dd8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3740      	adds	r7, #64	@ 0x40
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	00f42400 	.word	0x00f42400
 8004ddc:	017d7840 	.word	0x017d7840

08004de0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004de4:	4b03      	ldr	r3, [pc, #12]	@ (8004df4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004de6:	681b      	ldr	r3, [r3, #0]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	20000000 	.word	0x20000000

08004df8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dfc:	f7ff fff0 	bl	8004de0 <HAL_RCC_GetHCLKFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	4b05      	ldr	r3, [pc, #20]	@ (8004e18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	0a9b      	lsrs	r3, r3, #10
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	4903      	ldr	r1, [pc, #12]	@ (8004e1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e0e:	5ccb      	ldrb	r3, [r1, r3]
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40023800 	.word	0x40023800
 8004e1c:	0800ca30 	.word	0x0800ca30

08004e20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e20:	b084      	sub	sp, #16
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	f107 001c 	add.w	r0, r7, #28
 8004e2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e32:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d123      	bne.n	8004e82 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d105      	bne.n	8004e76 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f001 fae2 	bl	8006440 <USB_CoreReset>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]
 8004e80:	e01b      	b.n	8004eba <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f001 fad6 	bl	8006440 <USB_CoreReset>
 8004e94:	4603      	mov	r3, r0
 8004e96:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e98:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d106      	bne.n	8004eae <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8004eac:	e005      	b.n	8004eba <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004eba:	7fbb      	ldrb	r3, [r7, #30]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d10b      	bne.n	8004ed8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f043 0206 	orr.w	r2, r3, #6
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f043 0220 	orr.w	r2, r3, #32
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ee4:	b004      	add	sp, #16
 8004ee6:	4770      	bx	lr

08004ee8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004ef6:	79fb      	ldrb	r3, [r7, #7]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d165      	bne.n	8004fc8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a41      	ldr	r2, [pc, #260]	@ (8005004 <USB_SetTurnaroundTime+0x11c>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d906      	bls.n	8004f12 <USB_SetTurnaroundTime+0x2a>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a40      	ldr	r2, [pc, #256]	@ (8005008 <USB_SetTurnaroundTime+0x120>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d202      	bcs.n	8004f12 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f0c:	230f      	movs	r3, #15
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	e062      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a3c      	ldr	r2, [pc, #240]	@ (8005008 <USB_SetTurnaroundTime+0x120>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d306      	bcc.n	8004f28 <USB_SetTurnaroundTime+0x40>
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	4a3b      	ldr	r2, [pc, #236]	@ (800500c <USB_SetTurnaroundTime+0x124>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d202      	bcs.n	8004f28 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f22:	230e      	movs	r3, #14
 8004f24:	617b      	str	r3, [r7, #20]
 8004f26:	e057      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a38      	ldr	r2, [pc, #224]	@ (800500c <USB_SetTurnaroundTime+0x124>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d306      	bcc.n	8004f3e <USB_SetTurnaroundTime+0x56>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4a37      	ldr	r2, [pc, #220]	@ (8005010 <USB_SetTurnaroundTime+0x128>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d202      	bcs.n	8004f3e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f38:	230d      	movs	r3, #13
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e04c      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a33      	ldr	r2, [pc, #204]	@ (8005010 <USB_SetTurnaroundTime+0x128>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d306      	bcc.n	8004f54 <USB_SetTurnaroundTime+0x6c>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4a32      	ldr	r2, [pc, #200]	@ (8005014 <USB_SetTurnaroundTime+0x12c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d802      	bhi.n	8004f54 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f4e:	230c      	movs	r3, #12
 8004f50:	617b      	str	r3, [r7, #20]
 8004f52:	e041      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a2f      	ldr	r2, [pc, #188]	@ (8005014 <USB_SetTurnaroundTime+0x12c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d906      	bls.n	8004f6a <USB_SetTurnaroundTime+0x82>
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8005018 <USB_SetTurnaroundTime+0x130>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d802      	bhi.n	8004f6a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f64:	230b      	movs	r3, #11
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e036      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8005018 <USB_SetTurnaroundTime+0x130>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d906      	bls.n	8004f80 <USB_SetTurnaroundTime+0x98>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	4a29      	ldr	r2, [pc, #164]	@ (800501c <USB_SetTurnaroundTime+0x134>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d802      	bhi.n	8004f80 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f7a:	230a      	movs	r3, #10
 8004f7c:	617b      	str	r3, [r7, #20]
 8004f7e:	e02b      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a26      	ldr	r2, [pc, #152]	@ (800501c <USB_SetTurnaroundTime+0x134>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d906      	bls.n	8004f96 <USB_SetTurnaroundTime+0xae>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	4a25      	ldr	r2, [pc, #148]	@ (8005020 <USB_SetTurnaroundTime+0x138>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d202      	bcs.n	8004f96 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f90:	2309      	movs	r3, #9
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	e020      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a21      	ldr	r2, [pc, #132]	@ (8005020 <USB_SetTurnaroundTime+0x138>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d306      	bcc.n	8004fac <USB_SetTurnaroundTime+0xc4>
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4a20      	ldr	r2, [pc, #128]	@ (8005024 <USB_SetTurnaroundTime+0x13c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d802      	bhi.n	8004fac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fa6:	2308      	movs	r3, #8
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e015      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a1d      	ldr	r2, [pc, #116]	@ (8005024 <USB_SetTurnaroundTime+0x13c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d906      	bls.n	8004fc2 <USB_SetTurnaroundTime+0xda>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8005028 <USB_SetTurnaroundTime+0x140>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d202      	bcs.n	8004fc2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fbc:	2307      	movs	r3, #7
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e00a      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	617b      	str	r3, [r7, #20]
 8004fc6:	e007      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fc8:	79fb      	ldrb	r3, [r7, #7]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fce:	2309      	movs	r3, #9
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e001      	b.n	8004fd8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fd4:	2309      	movs	r3, #9
 8004fd6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	029b      	lsls	r3, r3, #10
 8004fec:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	00d8acbf 	.word	0x00d8acbf
 8005008:	00e4e1c0 	.word	0x00e4e1c0
 800500c:	00f42400 	.word	0x00f42400
 8005010:	01067380 	.word	0x01067380
 8005014:	011a499f 	.word	0x011a499f
 8005018:	01312cff 	.word	0x01312cff
 800501c:	014ca43f 	.word	0x014ca43f
 8005020:	016e3600 	.word	0x016e3600
 8005024:	01a6ab1f 	.word	0x01a6ab1f
 8005028:	01e84800 	.word	0x01e84800

0800502c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f043 0201 	orr.w	r2, r3, #1
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f023 0201 	bic.w	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d115      	bne.n	80050be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800509e:	200a      	movs	r0, #10
 80050a0:	f7fc fbf6 	bl	8001890 <HAL_Delay>
      ms += 10U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	330a      	adds	r3, #10
 80050a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f001 f939 	bl	8006322 <USB_GetMode>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d01e      	beq.n	80050f4 <USB_SetCurrentMode+0x84>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80050ba:	d9f0      	bls.n	800509e <USB_SetCurrentMode+0x2e>
 80050bc:	e01a      	b.n	80050f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d115      	bne.n	80050f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050d0:	200a      	movs	r0, #10
 80050d2:	f7fc fbdd 	bl	8001890 <HAL_Delay>
      ms += 10U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	330a      	adds	r3, #10
 80050da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f001 f920 	bl	8006322 <USB_GetMode>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <USB_SetCurrentMode+0x84>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80050ec:	d9f0      	bls.n	80050d0 <USB_SetCurrentMode+0x60>
 80050ee:	e001      	b.n	80050f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e005      	b.n	8005100 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2bc8      	cmp	r3, #200	@ 0xc8
 80050f8:	d101      	bne.n	80050fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005108:	b084      	sub	sp, #16
 800510a:	b580      	push	{r7, lr}
 800510c:	b086      	sub	sp, #24
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
 8005112:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005116:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005122:	2300      	movs	r3, #0
 8005124:	613b      	str	r3, [r7, #16]
 8005126:	e009      	b.n	800513c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	3340      	adds	r3, #64	@ 0x40
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	2200      	movs	r2, #0
 8005134:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3301      	adds	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	2b0e      	cmp	r3, #14
 8005140:	d9f2      	bls.n	8005128 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005142:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11c      	bne.n	8005184 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005158:	f043 0302 	orr.w	r3, r3, #2
 800515c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800517a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	639a      	str	r2, [r3, #56]	@ 0x38
 8005182:	e00b      	b.n	800519c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005194:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051a2:	461a      	mov	r2, r3
 80051a4:	2300      	movs	r3, #0
 80051a6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d10d      	bne.n	80051cc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d104      	bne.n	80051c2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051b8:	2100      	movs	r1, #0
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f000 f968 	bl	8005490 <USB_SetDevSpeed>
 80051c0:	e008      	b.n	80051d4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051c2:	2101      	movs	r1, #1
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f963 	bl	8005490 <USB_SetDevSpeed>
 80051ca:	e003      	b.n	80051d4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051cc:	2103      	movs	r1, #3
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f95e 	bl	8005490 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051d4:	2110      	movs	r1, #16
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8fa 	bl	80053d0 <USB_FlushTxFifo>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d001      	beq.n	80051e6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f924 	bl	8005434 <USB_FlushRxFifo>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d001      	beq.n	80051f6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005208:	461a      	mov	r2, r3
 800520a:	2300      	movs	r3, #0
 800520c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005214:	461a      	mov	r2, r3
 8005216:	2300      	movs	r3, #0
 8005218:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	e043      	b.n	80052a8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005232:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005236:	d118      	bne.n	800526a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005250:	6013      	str	r3, [r2, #0]
 8005252:	e013      	b.n	800527c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005260:	461a      	mov	r2, r3
 8005262:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	e008      	b.n	800527c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	4413      	add	r3, r2
 8005272:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005276:	461a      	mov	r2, r3
 8005278:	2300      	movs	r3, #0
 800527a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005288:	461a      	mov	r2, r3
 800528a:	2300      	movs	r3, #0
 800528c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529a:	461a      	mov	r2, r3
 800529c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	3301      	adds	r3, #1
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80052ac:	461a      	mov	r2, r3
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d3b5      	bcc.n	8005220 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052b4:	2300      	movs	r3, #0
 80052b6:	613b      	str	r3, [r7, #16]
 80052b8:	e043      	b.n	8005342 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052d0:	d118      	bne.n	8005304 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10a      	bne.n	80052ee <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e4:	461a      	mov	r2, r3
 80052e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052ea:	6013      	str	r3, [r2, #0]
 80052ec:	e013      	b.n	8005316 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052fa:	461a      	mov	r2, r3
 80052fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e008      	b.n	8005316 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	015a      	lsls	r2, r3, #5
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005310:	461a      	mov	r2, r3
 8005312:	2300      	movs	r3, #0
 8005314:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	2300      	movs	r3, #0
 8005326:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800533a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	3301      	adds	r3, #1
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005346:	461a      	mov	r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4293      	cmp	r3, r2
 800534c:	d3b5      	bcc.n	80052ba <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800535c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005360:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800536e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005370:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f043 0210 	orr.w	r2, r3, #16
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699a      	ldr	r2, [r3, #24]
 8005388:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <USB_DevInit+0x2c4>)
 800538a:	4313      	orrs	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005390:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f043 0208 	orr.w	r2, r3, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053a4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d107      	bne.n	80053bc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053b4:	f043 0304 	orr.w	r3, r3, #4
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053c8:	b004      	add	sp, #16
 80053ca:	4770      	bx	lr
 80053cc:	803c3800 	.word	0x803c3800

080053d0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3301      	adds	r3, #1
 80053e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053ea:	d901      	bls.n	80053f0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e01b      	b.n	8005428 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	daf2      	bge.n	80053de <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053f8:	2300      	movs	r3, #0
 80053fa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	019b      	lsls	r3, r3, #6
 8005400:	f043 0220 	orr.w	r2, r3, #32
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	3301      	adds	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005414:	d901      	bls.n	800541a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e006      	b.n	8005428 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b20      	cmp	r3, #32
 8005424:	d0f0      	beq.n	8005408 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3301      	adds	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800544c:	d901      	bls.n	8005452 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e018      	b.n	8005484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	daf2      	bge.n	8005440 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2210      	movs	r2, #16
 8005462:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005470:	d901      	bls.n	8005476 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e006      	b.n	8005484 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d0f0      	beq.n	8005464 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	460b      	mov	r3, r1
 800549a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b087      	sub	sp, #28
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	f003 0306 	and.w	r3, r3, #6
 80054da:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d102      	bne.n	80054e8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]
 80054e6:	e00a      	b.n	80054fe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d002      	beq.n	80054f4 <USB_GetDevSpeed+0x32>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b06      	cmp	r3, #6
 80054f2:	d102      	bne.n	80054fa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054f4:	2302      	movs	r3, #2
 80054f6:	75fb      	strb	r3, [r7, #23]
 80054f8:	e001      	b.n	80054fe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054fa:	230f      	movs	r3, #15
 80054fc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005500:	4618      	mov	r0, r3
 8005502:	371c      	adds	r7, #28
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	785b      	ldrb	r3, [r3, #1]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d13a      	bne.n	800559e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	2101      	movs	r1, #1
 800553a:	fa01 f303 	lsl.w	r3, r1, r3
 800553e:	b29b      	uxth	r3, r3
 8005540:	68f9      	ldr	r1, [r7, #12]
 8005542:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005546:	4313      	orrs	r3, r2
 8005548:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d155      	bne.n	800560c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	791b      	ldrb	r3, [r3, #4]
 800557a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800557c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	059b      	lsls	r3, r3, #22
 8005582:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005584:	4313      	orrs	r3, r2
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	440a      	add	r2, r1
 800558e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	e036      	b.n	800560c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a4:	69da      	ldr	r2, [r3, #28]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	2101      	movs	r1, #1
 80055b0:	fa01 f303 	lsl.w	r3, r1, r3
 80055b4:	041b      	lsls	r3, r3, #16
 80055b6:	68f9      	ldr	r1, [r7, #12]
 80055b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055bc:	4313      	orrs	r3, r2
 80055be:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d11a      	bne.n	800560c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	791b      	ldrb	r3, [r3, #4]
 80055f0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055f2:	430b      	orrs	r3, r1
 80055f4:	4313      	orrs	r3, r2
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005606:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800560a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
	...

0800561c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	785b      	ldrb	r3, [r3, #1]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d161      	bne.n	80056fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800564a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564e:	d11f      	bne.n	8005690 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	440a      	add	r2, r1
 8005666:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800566a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800566e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800568a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800568e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005696:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	2101      	movs	r1, #1
 80056a2:	fa01 f303 	lsl.w	r3, r1, r3
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	43db      	mvns	r3, r3
 80056aa:	68f9      	ldr	r1, [r7, #12]
 80056ac:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056b0:	4013      	ands	r3, r2
 80056b2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 030f 	and.w	r3, r3, #15
 80056c4:	2101      	movs	r1, #1
 80056c6:	fa01 f303 	lsl.w	r3, r1, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	43db      	mvns	r3, r3
 80056ce:	68f9      	ldr	r1, [r7, #12]
 80056d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056d4:	4013      	ands	r3, r2
 80056d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	0159      	lsls	r1, r3, #5
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f2:	4619      	mov	r1, r3
 80056f4:	4b35      	ldr	r3, [pc, #212]	@ (80057cc <USB_DeactivateEndpoint+0x1b0>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	600b      	str	r3, [r1, #0]
 80056fa:	e060      	b.n	80057be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800570e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005712:	d11f      	bne.n	8005754 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	015a      	lsls	r2, r3, #5
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	0151      	lsls	r1, r2, #5
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	440a      	add	r2, r1
 800572a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800572e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005732:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	0151      	lsls	r1, r2, #5
 8005746:	68fa      	ldr	r2, [r7, #12]
 8005748:	440a      	add	r2, r1
 800574a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800574e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005752:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800575a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	f003 030f 	and.w	r3, r3, #15
 8005764:	2101      	movs	r1, #1
 8005766:	fa01 f303 	lsl.w	r3, r1, r3
 800576a:	041b      	lsls	r3, r3, #16
 800576c:	43db      	mvns	r3, r3
 800576e:	68f9      	ldr	r1, [r7, #12]
 8005770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005774:	4013      	ands	r3, r2
 8005776:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577e:	69da      	ldr	r2, [r3, #28]
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	041b      	lsls	r3, r3, #16
 8005790:	43db      	mvns	r3, r3
 8005792:	68f9      	ldr	r1, [r7, #12]
 8005794:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005798:	4013      	ands	r3, r2
 800579a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	0159      	lsls	r1, r3, #5
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	440b      	add	r3, r1
 80057b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b6:	4619      	mov	r1, r3
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <USB_DeactivateEndpoint+0x1b4>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	ec337800 	.word	0xec337800
 80057d0:	eff37800 	.word	0xeff37800

080057d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08a      	sub	sp, #40	@ 0x28
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	785b      	ldrb	r3, [r3, #1]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	f040 817a 	bne.w	8005aea <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d132      	bne.n	8005864 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005818:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800581c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005820:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	0151      	lsls	r1, r2, #5
 8005834:	69fa      	ldr	r2, [r7, #28]
 8005836:	440a      	add	r2, r1
 8005838:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800583c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005840:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	015a      	lsls	r2, r3, #5
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	4413      	add	r3, r2
 800584a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	0151      	lsls	r1, r2, #5
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	440a      	add	r2, r1
 8005858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800585c:	0cdb      	lsrs	r3, r3, #19
 800585e:	04db      	lsls	r3, r3, #19
 8005860:	6113      	str	r3, [r2, #16]
 8005862:	e092      	b.n	800598a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	4413      	add	r3, r2
 800586c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	0151      	lsls	r1, r2, #5
 8005876:	69fa      	ldr	r2, [r7, #28]
 8005878:	440a      	add	r2, r1
 800587a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800587e:	0cdb      	lsrs	r3, r3, #19
 8005880:	04db      	lsls	r3, r3, #19
 8005882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	015a      	lsls	r2, r3, #5
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	4413      	add	r3, r2
 800588c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	0151      	lsls	r1, r2, #5
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	440a      	add	r2, r1
 800589a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800589e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058a2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058a6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d11a      	bne.n	80058e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	691a      	ldr	r2, [r3, #16]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d903      	bls.n	80058c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ce:	691b      	ldr	r3, [r3, #16]
 80058d0:	69ba      	ldr	r2, [r7, #24]
 80058d2:	0151      	lsls	r1, r2, #5
 80058d4:	69fa      	ldr	r2, [r7, #28]
 80058d6:	440a      	add	r2, r1
 80058d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058e0:	6113      	str	r3, [r2, #16]
 80058e2:	e01b      	b.n	800591c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6919      	ldr	r1, [r3, #16]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	440b      	add	r3, r1
 80058fc:	1e59      	subs	r1, r3, #1
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	fbb1 f3f3 	udiv	r3, r1, r3
 8005906:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005908:	4ba2      	ldr	r3, [pc, #648]	@ (8005b94 <USB_EPStartXfer+0x3c0>)
 800590a:	400b      	ands	r3, r1
 800590c:	69b9      	ldr	r1, [r7, #24]
 800590e:	0148      	lsls	r0, r1, #5
 8005910:	69f9      	ldr	r1, [r7, #28]
 8005912:	4401      	add	r1, r0
 8005914:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005918:	4313      	orrs	r3, r2
 800591a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005932:	69b9      	ldr	r1, [r7, #24]
 8005934:	0148      	lsls	r0, r1, #5
 8005936:	69f9      	ldr	r1, [r7, #28]
 8005938:	4401      	add	r1, r0
 800593a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800593e:	4313      	orrs	r3, r2
 8005940:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	791b      	ldrb	r3, [r3, #4]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d11f      	bne.n	800598a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	69ba      	ldr	r2, [r7, #24]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	69fa      	ldr	r2, [r7, #28]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005964:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005968:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	69ba      	ldr	r2, [r7, #24]
 800597a:	0151      	lsls	r1, r2, #5
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	440a      	add	r2, r1
 8005980:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005984:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005988:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800598a:	79fb      	ldrb	r3, [r7, #7]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d14b      	bne.n	8005a28 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	69db      	ldr	r3, [r3, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a4:	461a      	mov	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	791b      	ldrb	r3, [r3, #4]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d128      	bne.n	8005a06 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d110      	bne.n	80059e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	69fa      	ldr	r2, [r7, #28]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059de:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e00f      	b.n	8005a06 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69ba      	ldr	r2, [r7, #24]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a04:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a24:	6013      	str	r3, [r2, #0]
 8005a26:	e165      	b.n	8005cf4 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	015a      	lsls	r2, r3, #5
 8005a2c:	69fb      	ldr	r3, [r7, #28]
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	0151      	lsls	r1, r2, #5
 8005a3a:	69fa      	ldr	r2, [r7, #28]
 8005a3c:	440a      	add	r2, r1
 8005a3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a42:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	791b      	ldrb	r3, [r3, #4]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d015      	beq.n	8005a7c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 814d 	beq.w	8005cf4 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a76:	4313      	orrs	r3, r2
 8005a78:	634b      	str	r3, [r1, #52]	@ 0x34
 8005a7a:	e13b      	b.n	8005cf4 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d110      	bne.n	8005aae <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	e00f      	b.n	8005ace <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	0151      	lsls	r1, r2, #5
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	440a      	add	r2, r1
 8005ac4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005acc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	68d9      	ldr	r1, [r3, #12]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	781a      	ldrb	r2, [r3, #0]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	b298      	uxth	r0, r3
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f9b8 	bl	8005e58 <USB_WritePacket>
 8005ae8:	e104      	b.n	8005cf4 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b04:	0cdb      	lsrs	r3, r3, #19
 8005b06:	04db      	lsls	r3, r3, #19
 8005b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b24:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b28:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b2c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d131      	bne.n	8005b98 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d003      	beq.n	8005b44 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b58:	691a      	ldr	r2, [r3, #16]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6a1b      	ldr	r3, [r3, #32]
 8005b5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b62:	69b9      	ldr	r1, [r7, #24]
 8005b64:	0148      	lsls	r0, r1, #5
 8005b66:	69f9      	ldr	r1, [r7, #28]
 8005b68:	4401      	add	r1, r0
 8005b6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	0151      	lsls	r1, r2, #5
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	440a      	add	r2, r1
 8005b88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b90:	6113      	str	r3, [r2, #16]
 8005b92:	e061      	b.n	8005c58 <USB_EPStartXfer+0x484>
 8005b94:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d123      	bne.n	8005be8 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bb6:	69b9      	ldr	r1, [r7, #24]
 8005bb8:	0148      	lsls	r0, r1, #5
 8005bba:	69f9      	ldr	r1, [r7, #28]
 8005bbc:	4401      	add	r1, r0
 8005bbe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	0151      	lsls	r1, r2, #5
 8005bd8:	69fa      	ldr	r2, [r7, #28]
 8005bda:	440a      	add	r2, r1
 8005bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005be0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005be4:	6113      	str	r3, [r2, #16]
 8005be6:	e037      	b.n	8005c58 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	691a      	ldr	r2, [r3, #16]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	1e5a      	subs	r2, r3, #1
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	8afa      	ldrh	r2, [r7, #22]
 8005c04:	fb03 f202 	mul.w	r2, r3, r2
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	015a      	lsls	r2, r3, #5
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	4413      	add	r3, r2
 8005c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c18:	691a      	ldr	r2, [r3, #16]
 8005c1a:	8afb      	ldrh	r3, [r7, #22]
 8005c1c:	04d9      	lsls	r1, r3, #19
 8005c1e:	4b38      	ldr	r3, [pc, #224]	@ (8005d00 <USB_EPStartXfer+0x52c>)
 8005c20:	400b      	ands	r3, r1
 8005c22:	69b9      	ldr	r1, [r7, #24]
 8005c24:	0148      	lsls	r0, r1, #5
 8005c26:	69f9      	ldr	r1, [r7, #28]
 8005c28:	4401      	add	r1, r0
 8005c2a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3e:	691a      	ldr	r2, [r3, #16]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	0148      	lsls	r0, r1, #5
 8005c4c:	69f9      	ldr	r1, [r7, #28]
 8005c4e:	4401      	add	r1, r0
 8005c50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c54:	4313      	orrs	r3, r2
 8005c56:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d10d      	bne.n	8005c7a <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d009      	beq.n	8005c7a <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	68d9      	ldr	r1, [r3, #12]
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c76:	460a      	mov	r2, r1
 8005c78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	791b      	ldrb	r3, [r3, #4]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d128      	bne.n	8005cd4 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d110      	bne.n	8005cb4 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	e00f      	b.n	8005cd4 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cf2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3720      	adds	r7, #32
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	1ff80000 	.word	0x1ff80000

08005d04 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	785b      	ldrb	r3, [r3, #1]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d14a      	bne.n	8005db8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	015a      	lsls	r2, r3, #5
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d3a:	f040 8086 	bne.w	8005e4a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	7812      	ldrb	r2, [r2, #0]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d60:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	683a      	ldr	r2, [r7, #0]
 8005d74:	7812      	ldrb	r2, [r2, #0]
 8005d76:	0151      	lsls	r1, r2, #5
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	440a      	add	r2, r1
 8005d7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d84:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d902      	bls.n	8005d9c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
          break;
 8005d9a:	e056      	b.n	8005e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005db4:	d0e7      	beq.n	8005d86 <USB_EPStopXfer+0x82>
 8005db6:	e048      	b.n	8005e4a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dd0:	d13b      	bne.n	8005e4a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	7812      	ldrb	r2, [r2, #0]
 8005de6:	0151      	lsls	r1, r2, #5
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	440a      	add	r2, r1
 8005dec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005df0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005df4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	7812      	ldrb	r2, [r2, #0]
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d902      	bls.n	8005e30 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005e2e:	e00c      	b.n	8005e4a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	015a      	lsls	r2, r3, #5
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e48:	d0e7      	beq.n	8005e1a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	@ 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	4611      	mov	r1, r2
 8005e64:	461a      	mov	r2, r3
 8005e66:	460b      	mov	r3, r1
 8005e68:	71fb      	strb	r3, [r7, #7]
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d123      	bne.n	8005ec6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e7e:	88bb      	ldrh	r3, [r7, #4]
 8005e80:	3303      	adds	r3, #3
 8005e82:	089b      	lsrs	r3, r3, #2
 8005e84:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	61bb      	str	r3, [r7, #24]
 8005e8a:	e018      	b.n	8005ebe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e8c:	79fb      	ldrb	r3, [r7, #7]
 8005e8e:	031a      	lsls	r2, r3, #12
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e98:	461a      	mov	r2, r3
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	61bb      	str	r3, [r7, #24]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d3e2      	bcc.n	8005e8c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3724      	adds	r7, #36	@ 0x24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b08b      	sub	sp, #44	@ 0x2c
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	089b      	lsrs	r3, r3, #2
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005efa:	2300      	movs	r3, #0
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	e014      	b.n	8005f2a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	3301      	adds	r3, #1
 8005f10:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	3301      	adds	r3, #1
 8005f16:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	3301      	adds	r3, #1
 8005f22:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005f24:	6a3b      	ldr	r3, [r7, #32]
 8005f26:	3301      	adds	r3, #1
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d3e6      	bcc.n	8005f00 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f32:	8bfb      	ldrh	r3, [r7, #30]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01e      	beq.n	8005f76 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f42:	461a      	mov	r2, r3
 8005f44:	f107 0310 	add.w	r3, r7, #16
 8005f48:	6812      	ldr	r2, [r2, #0]
 8005f4a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	fa22 f303 	lsr.w	r3, r2, r3
 8005f58:	b2da      	uxtb	r2, r3
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5c:	701a      	strb	r2, [r3, #0]
      i++;
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	3301      	adds	r3, #1
 8005f62:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	3301      	adds	r3, #1
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005f6a:	8bfb      	ldrh	r3, [r7, #30]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f70:	8bfb      	ldrh	r3, [r7, #30]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1ea      	bne.n	8005f4c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	372c      	adds	r7, #44	@ 0x2c
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d12c      	bne.n	8005ffa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	db12      	blt.n	8005fd8 <USB_EPSetStall+0x54>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68ba      	ldr	r2, [r7, #8]
 8005fc8:	0151      	lsls	r1, r2, #5
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	440a      	add	r2, r1
 8005fce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fd6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	0151      	lsls	r1, r2, #5
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	440a      	add	r2, r1
 8005fee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ff2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e02b      	b.n	8006052 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	db12      	blt.n	8006032 <USB_EPSetStall+0xae>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00f      	beq.n	8006032 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	0151      	lsls	r1, r2, #5
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	440a      	add	r2, r1
 8006028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800602c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006030:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4413      	add	r3, r2
 800603a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	440a      	add	r2, r1
 8006048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800604c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006050:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr

08006060 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785b      	ldrb	r3, [r3, #1]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d128      	bne.n	80060ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006096:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800609a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	791b      	ldrb	r3, [r3, #4]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d003      	beq.n	80060ac <USB_EPClearStall+0x4c>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	791b      	ldrb	r3, [r3, #4]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d138      	bne.n	800611e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e027      	b.n	800611e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	0151      	lsls	r1, r2, #5
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	440a      	add	r2, r1
 80060e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d003      	beq.n	80060fe <USB_EPClearStall+0x9e>
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	791b      	ldrb	r3, [r3, #4]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d10f      	bne.n	800611e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	015a      	lsls	r2, r3, #5
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	4413      	add	r3, r2
 8006106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	0151      	lsls	r1, r2, #5
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	440a      	add	r2, r1
 8006114:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800611c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800614a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800614e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006160:	68f9      	ldr	r1, [r7, #12]
 8006162:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	4618      	mov	r0, r3
 800616e:	3714      	adds	r7, #20
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	68fa      	ldr	r2, [r7, #12]
 80061a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061a6:	f023 0302 	bic.w	r3, r3, #2
 80061aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80061d4:	f023 0303 	bic.w	r3, r3, #3
 80061d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3714      	adds	r7, #20
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006222:	b480      	push	{r7}
 8006224:	b085      	sub	sp, #20
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	0c1b      	lsrs	r3, r3, #16
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006272:	69db      	ldr	r3, [r3, #28]
 8006274:	68ba      	ldr	r2, [r7, #8]
 8006276:	4013      	ands	r3, r2
 8006278:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	b29b      	uxth	r3, r3
}
 800627e:	4618      	mov	r0, r3
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800629a:	78fb      	ldrb	r3, [r7, #3]
 800629c:	015a      	lsls	r2, r3, #5
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062b8:	68bb      	ldr	r3, [r7, #8]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062ea:	78fb      	ldrb	r3, [r7, #3]
 80062ec:	f003 030f 	and.w	r3, r3, #15
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	fa22 f303 	lsr.w	r3, r2, r3
 80062f6:	01db      	lsls	r3, r3, #7
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006300:	78fb      	ldrb	r3, [r7, #3]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4013      	ands	r3, r2
 8006312:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006314:	68bb      	ldr	r3, [r7, #8]
}
 8006316:	4618      	mov	r0, r3
 8006318:	371c      	adds	r7, #28
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f003 0301 	and.w	r3, r3, #1
}
 8006332:	4618      	mov	r0, r3
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006358:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800635c:	f023 0307 	bic.w	r3, r3, #7
 8006360:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006370:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006374:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3714      	adds	r7, #20
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	460b      	mov	r3, r1
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	333c      	adds	r3, #60	@ 0x3c
 800639a:	3304      	adds	r3, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4a26      	ldr	r2, [pc, #152]	@ (800643c <USB_EP0_OutStart+0xb8>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d90a      	bls.n	80063be <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063b8:	d101      	bne.n	80063be <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063ba:	2300      	movs	r3, #0
 80063bc:	e037      	b.n	800642e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c4:	461a      	mov	r2, r3
 80063c6:	2300      	movs	r3, #0
 80063c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	697a      	ldr	r2, [r7, #20]
 80063d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ec:	f043 0318 	orr.w	r3, r3, #24
 80063f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006400:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006404:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006406:	7afb      	ldrb	r3, [r7, #11]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10f      	bne.n	800642c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006412:	461a      	mov	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006426:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800642a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800642c:	2300      	movs	r3, #0
}
 800642e:	4618      	mov	r0, r3
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	4f54300a 	.word	0x4f54300a

08006440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006458:	d901      	bls.n	800645e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e01b      	b.n	8006496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	daf2      	bge.n	800644c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f043 0201 	orr.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006482:	d901      	bls.n	8006488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e006      	b.n	8006496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b01      	cmp	r3, #1
 8006492:	d0f0      	beq.n	8006476 <USB_CoreReset+0x36>

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
	...

080064a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064b0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80064b4:	f002 fc88 	bl	8008dc8 <USBD_static_malloc>
 80064b8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d109      	bne.n	80064d4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	32b0      	adds	r2, #176	@ 0xb0
 80064ca:	2100      	movs	r1, #0
 80064cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064d0:	2302      	movs	r3, #2
 80064d2:	e0d4      	b.n	800667e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064d4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80064d8:	2100      	movs	r1, #0
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f003 fa35 	bl	800994a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	32b0      	adds	r2, #176	@ 0xb0
 80064ea:	68f9      	ldr	r1, [r7, #12]
 80064ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	32b0      	adds	r2, #176	@ 0xb0
 80064fa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	7c1b      	ldrb	r3, [r3, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d138      	bne.n	800657e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800650c:	4b5e      	ldr	r3, [pc, #376]	@ (8006688 <USBD_CDC_Init+0x1e4>)
 800650e:	7819      	ldrb	r1, [r3, #0]
 8006510:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006514:	2202      	movs	r2, #2
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f002 fb33 	bl	8008b82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800651c:	4b5a      	ldr	r3, [pc, #360]	@ (8006688 <USBD_CDC_Init+0x1e4>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	f003 020f 	and.w	r2, r3, #15
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	4613      	mov	r3, r2
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	4413      	add	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	440b      	add	r3, r1
 8006530:	3324      	adds	r3, #36	@ 0x24
 8006532:	2201      	movs	r2, #1
 8006534:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006536:	4b55      	ldr	r3, [pc, #340]	@ (800668c <USBD_CDC_Init+0x1e8>)
 8006538:	7819      	ldrb	r1, [r3, #0]
 800653a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800653e:	2202      	movs	r2, #2
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f002 fb1e 	bl	8008b82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006546:	4b51      	ldr	r3, [pc, #324]	@ (800668c <USBD_CDC_Init+0x1e8>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	f003 020f 	and.w	r2, r3, #15
 800654e:	6879      	ldr	r1, [r7, #4]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800655e:	2201      	movs	r2, #1
 8006560:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006562:	4b4b      	ldr	r3, [pc, #300]	@ (8006690 <USBD_CDC_Init+0x1ec>)
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	440b      	add	r3, r1
 8006576:	3326      	adds	r3, #38	@ 0x26
 8006578:	2210      	movs	r2, #16
 800657a:	801a      	strh	r2, [r3, #0]
 800657c:	e035      	b.n	80065ea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800657e:	4b42      	ldr	r3, [pc, #264]	@ (8006688 <USBD_CDC_Init+0x1e4>)
 8006580:	7819      	ldrb	r1, [r3, #0]
 8006582:	2340      	movs	r3, #64	@ 0x40
 8006584:	2202      	movs	r2, #2
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f002 fafb 	bl	8008b82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800658c:	4b3e      	ldr	r3, [pc, #248]	@ (8006688 <USBD_CDC_Init+0x1e4>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	6879      	ldr	r1, [r7, #4]
 8006596:	4613      	mov	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	440b      	add	r3, r1
 80065a0:	3324      	adds	r3, #36	@ 0x24
 80065a2:	2201      	movs	r2, #1
 80065a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80065a6:	4b39      	ldr	r3, [pc, #228]	@ (800668c <USBD_CDC_Init+0x1e8>)
 80065a8:	7819      	ldrb	r1, [r3, #0]
 80065aa:	2340      	movs	r3, #64	@ 0x40
 80065ac:	2202      	movs	r2, #2
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f002 fae7 	bl	8008b82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065b4:	4b35      	ldr	r3, [pc, #212]	@ (800668c <USBD_CDC_Init+0x1e8>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	6879      	ldr	r1, [r7, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065cc:	2201      	movs	r2, #1
 80065ce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065d0:	4b2f      	ldr	r3, [pc, #188]	@ (8006690 <USBD_CDC_Init+0x1ec>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	f003 020f 	and.w	r2, r3, #15
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	4613      	mov	r3, r2
 80065dc:	009b      	lsls	r3, r3, #2
 80065de:	4413      	add	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	440b      	add	r3, r1
 80065e4:	3326      	adds	r3, #38	@ 0x26
 80065e6:	2210      	movs	r2, #16
 80065e8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065ea:	4b29      	ldr	r3, [pc, #164]	@ (8006690 <USBD_CDC_Init+0x1ec>)
 80065ec:	7819      	ldrb	r1, [r3, #0]
 80065ee:	2308      	movs	r3, #8
 80065f0:	2203      	movs	r2, #3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f002 fac5 	bl	8008b82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065f8:	4b25      	ldr	r3, [pc, #148]	@ (8006690 <USBD_CDC_Init+0x1ec>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	f003 020f 	and.w	r2, r3, #15
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	4613      	mov	r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	440b      	add	r3, r1
 800660c:	3324      	adds	r3, #36	@ 0x24
 800660e:	2201      	movs	r2, #1
 8006610:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	33b0      	adds	r3, #176	@ 0xb0
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006648:	2302      	movs	r3, #2
 800664a:	e018      	b.n	800667e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	7c1b      	ldrb	r3, [r3, #16]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10a      	bne.n	800666a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006654:	4b0d      	ldr	r3, [pc, #52]	@ (800668c <USBD_CDC_Init+0x1e8>)
 8006656:	7819      	ldrb	r1, [r3, #0]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800665e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f002 fb7c 	bl	8008d60 <USBD_LL_PrepareReceive>
 8006668:	e008      	b.n	800667c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800666a:	4b08      	ldr	r3, [pc, #32]	@ (800668c <USBD_CDC_Init+0x1e8>)
 800666c:	7819      	ldrb	r1, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006674:	2340      	movs	r3, #64	@ 0x40
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f002 fb72 	bl	8008d60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20000093 	.word	0x20000093
 800668c:	20000094 	.word	0x20000094
 8006690:	20000095 	.word	0x20000095

08006694 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80066a0:	4b3a      	ldr	r3, [pc, #232]	@ (800678c <USBD_CDC_DeInit+0xf8>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	4619      	mov	r1, r3
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f002 fa91 	bl	8008bce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066ac:	4b37      	ldr	r3, [pc, #220]	@ (800678c <USBD_CDC_DeInit+0xf8>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f003 020f 	and.w	r2, r3, #15
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	4613      	mov	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	4413      	add	r3, r2
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	3324      	adds	r3, #36	@ 0x24
 80066c2:	2200      	movs	r2, #0
 80066c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066c6:	4b32      	ldr	r3, [pc, #200]	@ (8006790 <USBD_CDC_DeInit+0xfc>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f002 fa7e 	bl	8008bce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006790 <USBD_CDC_DeInit+0xfc>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	f003 020f 	and.w	r2, r3, #15
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	440b      	add	r3, r1
 80066e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066ea:	2200      	movs	r2, #0
 80066ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066ee:	4b29      	ldr	r3, [pc, #164]	@ (8006794 <USBD_CDC_DeInit+0x100>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f002 fa6a 	bl	8008bce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066fa:	4b26      	ldr	r3, [pc, #152]	@ (8006794 <USBD_CDC_DeInit+0x100>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	f003 020f 	and.w	r2, r3, #15
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	3324      	adds	r3, #36	@ 0x24
 8006710:	2200      	movs	r2, #0
 8006712:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006714:	4b1f      	ldr	r3, [pc, #124]	@ (8006794 <USBD_CDC_DeInit+0x100>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 020f 	and.w	r2, r3, #15
 800671c:	6879      	ldr	r1, [r7, #4]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	440b      	add	r3, r1
 8006728:	3326      	adds	r3, #38	@ 0x26
 800672a:	2200      	movs	r2, #0
 800672c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32b0      	adds	r2, #176	@ 0xb0
 8006738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d01f      	beq.n	8006780 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	33b0      	adds	r3, #176	@ 0xb0
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	32b0      	adds	r2, #176	@ 0xb0
 800675e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006762:	4618      	mov	r0, r3
 8006764:	f002 fb3e 	bl	8008de4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	32b0      	adds	r2, #176	@ 0xb0
 8006772:	2100      	movs	r1, #0
 8006774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000093 	.word	0x20000093
 8006790:	20000094 	.word	0x20000094
 8006794:	20000095 	.word	0x20000095

08006798 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	32b0      	adds	r2, #176	@ 0xb0
 80067ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067b6:	2300      	movs	r3, #0
 80067b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e0bf      	b.n	8006948 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d050      	beq.n	8006876 <USBD_CDC_Setup+0xde>
 80067d4:	2b20      	cmp	r3, #32
 80067d6:	f040 80af 	bne.w	8006938 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	88db      	ldrh	r3, [r3, #6]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d03a      	beq.n	8006858 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	b25b      	sxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	da1b      	bge.n	8006824 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	33b0      	adds	r3, #176	@ 0xb0
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006802:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	88d2      	ldrh	r2, [r2, #6]
 8006808:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	88db      	ldrh	r3, [r3, #6]
 800680e:	2b07      	cmp	r3, #7
 8006810:	bf28      	it	cs
 8006812:	2307      	movcs	r3, #7
 8006814:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	89fa      	ldrh	r2, [r7, #14]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 fd87 	bl	8008330 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006822:	e090      	b.n	8006946 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	785a      	ldrb	r2, [r3, #1]
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	88db      	ldrh	r3, [r3, #6]
 8006832:	2b3f      	cmp	r3, #63	@ 0x3f
 8006834:	d803      	bhi.n	800683e <USBD_CDC_Setup+0xa6>
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	88db      	ldrh	r3, [r3, #6]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	e000      	b.n	8006840 <USBD_CDC_Setup+0xa8>
 800683e:	2240      	movs	r2, #64	@ 0x40
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006846:	6939      	ldr	r1, [r7, #16]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800684e:	461a      	mov	r2, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fd99 	bl	8008388 <USBD_CtlPrepareRx>
      break;
 8006856:	e076      	b.n	8006946 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	33b0      	adds	r3, #176	@ 0xb0
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4413      	add	r3, r2
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	7850      	ldrb	r0, [r2, #1]
 800686e:	2200      	movs	r2, #0
 8006870:	6839      	ldr	r1, [r7, #0]
 8006872:	4798      	blx	r3
      break;
 8006874:	e067      	b.n	8006946 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	2b0b      	cmp	r3, #11
 800687c:	d851      	bhi.n	8006922 <USBD_CDC_Setup+0x18a>
 800687e:	a201      	add	r2, pc, #4	@ (adr r2, 8006884 <USBD_CDC_Setup+0xec>)
 8006880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006884:	080068b5 	.word	0x080068b5
 8006888:	08006931 	.word	0x08006931
 800688c:	08006923 	.word	0x08006923
 8006890:	08006923 	.word	0x08006923
 8006894:	08006923 	.word	0x08006923
 8006898:	08006923 	.word	0x08006923
 800689c:	08006923 	.word	0x08006923
 80068a0:	08006923 	.word	0x08006923
 80068a4:	08006923 	.word	0x08006923
 80068a8:	08006923 	.word	0x08006923
 80068ac:	080068df 	.word	0x080068df
 80068b0:	08006909 	.word	0x08006909
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d107      	bne.n	80068d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068c0:	f107 030a 	add.w	r3, r7, #10
 80068c4:	2202      	movs	r2, #2
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fd31 	bl	8008330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068ce:	e032      	b.n	8006936 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068d0:	6839      	ldr	r1, [r7, #0]
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f001 fcbb 	bl	800824e <USBD_CtlError>
            ret = USBD_FAIL;
 80068d8:	2303      	movs	r3, #3
 80068da:	75fb      	strb	r3, [r7, #23]
          break;
 80068dc:	e02b      	b.n	8006936 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b03      	cmp	r3, #3
 80068e8:	d107      	bne.n	80068fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068ea:	f107 030d 	add.w	r3, r7, #13
 80068ee:	2201      	movs	r2, #1
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f001 fd1c 	bl	8008330 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068f8:	e01d      	b.n	8006936 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068fa:	6839      	ldr	r1, [r7, #0]
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 fca6 	bl	800824e <USBD_CtlError>
            ret = USBD_FAIL;
 8006902:	2303      	movs	r3, #3
 8006904:	75fb      	strb	r3, [r7, #23]
          break;
 8006906:	e016      	b.n	8006936 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b03      	cmp	r3, #3
 8006912:	d00f      	beq.n	8006934 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f001 fc99 	bl	800824e <USBD_CtlError>
            ret = USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006920:	e008      	b.n	8006934 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f001 fc92 	bl	800824e <USBD_CtlError>
          ret = USBD_FAIL;
 800692a:	2303      	movs	r3, #3
 800692c:	75fb      	strb	r3, [r7, #23]
          break;
 800692e:	e002      	b.n	8006936 <USBD_CDC_Setup+0x19e>
          break;
 8006930:	bf00      	nop
 8006932:	e008      	b.n	8006946 <USBD_CDC_Setup+0x1ae>
          break;
 8006934:	bf00      	nop
      }
      break;
 8006936:	e006      	b.n	8006946 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f001 fc87 	bl	800824e <USBD_CtlError>
      ret = USBD_FAIL;
 8006940:	2303      	movs	r3, #3
 8006942:	75fb      	strb	r3, [r7, #23]
      break;
 8006944:	bf00      	nop
  }

  return (uint8_t)ret;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	460b      	mov	r3, r1
 800695a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006962:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	32b0      	adds	r2, #176	@ 0xb0
 800696e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006976:	2303      	movs	r3, #3
 8006978:	e065      	b.n	8006a46 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	32b0      	adds	r2, #176	@ 0xb0
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	f003 020f 	and.w	r2, r3, #15
 8006990:	6879      	ldr	r1, [r7, #4]
 8006992:	4613      	mov	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4413      	add	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	440b      	add	r3, r1
 800699c:	3318      	adds	r3, #24
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d02f      	beq.n	8006a04 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80069a4:	78fb      	ldrb	r3, [r7, #3]
 80069a6:	f003 020f 	and.w	r2, r3, #15
 80069aa:	6879      	ldr	r1, [r7, #4]
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	440b      	add	r3, r1
 80069b6:	3318      	adds	r3, #24
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	78fb      	ldrb	r3, [r7, #3]
 80069bc:	f003 010f 	and.w	r1, r3, #15
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	460b      	mov	r3, r1
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	440b      	add	r3, r1
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	4403      	add	r3, r0
 80069cc:	331c      	adds	r3, #28
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80069d4:	fb01 f303 	mul.w	r3, r1, r3
 80069d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d112      	bne.n	8006a04 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	f003 020f 	and.w	r2, r3, #15
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4413      	add	r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	3318      	adds	r3, #24
 80069f2:	2200      	movs	r2, #0
 80069f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069f6:	78f9      	ldrb	r1, [r7, #3]
 80069f8:	2300      	movs	r3, #0
 80069fa:	2200      	movs	r2, #0
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f002 f98e 	bl	8008d1e <USBD_LL_Transmit>
 8006a02:	e01f      	b.n	8006a44 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	33b0      	adds	r3, #176	@ 0xb0
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	4413      	add	r3, r2
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d010      	beq.n	8006a44 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	33b0      	adds	r3, #176	@ 0xb0
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	68ba      	ldr	r2, [r7, #8]
 8006a36:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006a40:	78fa      	ldrb	r2, [r7, #3]
 8006a42:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	32b0      	adds	r2, #176	@ 0xb0
 8006a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a68:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	32b0      	adds	r2, #176	@ 0xb0
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d101      	bne.n	8006a80 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e01a      	b.n	8006ab6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	4619      	mov	r1, r3
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 f98c 	bl	8008da2 <USBD_LL_GetRxDataSize>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	33b0      	adds	r3, #176	@ 0xb0
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4413      	add	r3, r2
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b084      	sub	sp, #16
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	32b0      	adds	r2, #176	@ 0xb0
 8006ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ad4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e024      	b.n	8006b2a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	33b0      	adds	r3, #176	@ 0xb0
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d019      	beq.n	8006b28 <USBD_CDC_EP0_RxReady+0x6a>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006afa:	2bff      	cmp	r3, #255	@ 0xff
 8006afc:	d014      	beq.n	8006b28 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	33b0      	adds	r3, #176	@ 0xb0
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	4413      	add	r3, r2
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b16:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b1e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	22ff      	movs	r2, #255	@ 0xff
 8006b24:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b3c:	2182      	movs	r1, #130	@ 0x82
 8006b3e:	4818      	ldr	r0, [pc, #96]	@ (8006ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b40:	f000 fd4f 	bl	80075e2 <USBD_GetEpDesc>
 8006b44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b46:	2101      	movs	r1, #1
 8006b48:	4815      	ldr	r0, [pc, #84]	@ (8006ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b4a:	f000 fd4a 	bl	80075e2 <USBD_GetEpDesc>
 8006b4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b50:	2181      	movs	r1, #129	@ 0x81
 8006b52:	4813      	ldr	r0, [pc, #76]	@ (8006ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b54:	f000 fd45 	bl	80075e2 <USBD_GetEpDesc>
 8006b58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	2210      	movs	r2, #16
 8006b64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b74:	711a      	strb	r2, [r3, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d006      	beq.n	8006b8e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b88:	711a      	strb	r2, [r3, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2243      	movs	r2, #67	@ 0x43
 8006b92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b94:	4b02      	ldr	r3, [pc, #8]	@ (8006ba0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3718      	adds	r7, #24
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000050 	.word	0x20000050

08006ba4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bac:	2182      	movs	r1, #130	@ 0x82
 8006bae:	4818      	ldr	r0, [pc, #96]	@ (8006c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bb0:	f000 fd17 	bl	80075e2 <USBD_GetEpDesc>
 8006bb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4815      	ldr	r0, [pc, #84]	@ (8006c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bba:	f000 fd12 	bl	80075e2 <USBD_GetEpDesc>
 8006bbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bc0:	2181      	movs	r1, #129	@ 0x81
 8006bc2:	4813      	ldr	r0, [pc, #76]	@ (8006c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bc4:	f000 fd0d 	bl	80075e2 <USBD_GetEpDesc>
 8006bc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	2210      	movs	r2, #16
 8006bd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d006      	beq.n	8006bea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	2200      	movs	r2, #0
 8006be0:	711a      	strb	r2, [r3, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f042 0202 	orr.w	r2, r2, #2
 8006be8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d006      	beq.n	8006bfe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	711a      	strb	r2, [r3, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f042 0202 	orr.w	r2, r2, #2
 8006bfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2243      	movs	r2, #67	@ 0x43
 8006c02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c04:	4b02      	ldr	r3, [pc, #8]	@ (8006c10 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3718      	adds	r7, #24
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000050 	.word	0x20000050

08006c14 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b086      	sub	sp, #24
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c1c:	2182      	movs	r1, #130	@ 0x82
 8006c1e:	4818      	ldr	r0, [pc, #96]	@ (8006c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c20:	f000 fcdf 	bl	80075e2 <USBD_GetEpDesc>
 8006c24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c26:	2101      	movs	r1, #1
 8006c28:	4815      	ldr	r0, [pc, #84]	@ (8006c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c2a:	f000 fcda 	bl	80075e2 <USBD_GetEpDesc>
 8006c2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c30:	2181      	movs	r1, #129	@ 0x81
 8006c32:	4813      	ldr	r0, [pc, #76]	@ (8006c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c34:	f000 fcd5 	bl	80075e2 <USBD_GetEpDesc>
 8006c38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2210      	movs	r2, #16
 8006c44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d006      	beq.n	8006c5a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c54:	711a      	strb	r2, [r3, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d006      	beq.n	8006c6e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c68:	711a      	strb	r2, [r3, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2243      	movs	r2, #67	@ 0x43
 8006c72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c74:	4b02      	ldr	r3, [pc, #8]	@ (8006c80 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	20000050 	.word	0x20000050

08006c84 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	220a      	movs	r2, #10
 8006c90:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c92:	4b03      	ldr	r3, [pc, #12]	@ (8006ca0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	2000000c 	.word	0x2000000c

08006ca4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d101      	bne.n	8006cb8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e009      	b.n	8006ccc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	33b0      	adds	r3, #176	@ 0xb0
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b087      	sub	sp, #28
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	32b0      	adds	r2, #176	@ 0xb0
 8006cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	e008      	b.n	8006d10 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	32b0      	adds	r2, #176	@ 0xb0
 8006d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e004      	b.n	8006d4a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32b0      	adds	r2, #176	@ 0xb0
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d70:	2301      	movs	r3, #1
 8006d72:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d101      	bne.n	8006d7e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e025      	b.n	8006dca <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d11f      	bne.n	8006dc8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d90:	4b10      	ldr	r3, [pc, #64]	@ (8006dd4 <USBD_CDC_TransmitPacket+0x7c>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	f003 020f 	and.w	r2, r3, #15
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	4413      	add	r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4403      	add	r3, r0
 8006daa:	3318      	adds	r3, #24
 8006dac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006dae:	4b09      	ldr	r3, [pc, #36]	@ (8006dd4 <USBD_CDC_TransmitPacket+0x7c>)
 8006db0:	7819      	ldrb	r1, [r3, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 ffad 	bl	8008d1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000093 	.word	0x20000093

08006dd8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	32b0      	adds	r2, #176	@ 0xb0
 8006dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32b0      	adds	r2, #176	@ 0xb0
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e018      	b.n	8006e38 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	7c1b      	ldrb	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10a      	bne.n	8006e24 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e40 <USBD_CDC_ReceivePacket+0x68>)
 8006e10:	7819      	ldrb	r1, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f001 ff9f 	bl	8008d60 <USBD_LL_PrepareReceive>
 8006e22:	e008      	b.n	8006e36 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e24:	4b06      	ldr	r3, [pc, #24]	@ (8006e40 <USBD_CDC_ReceivePacket+0x68>)
 8006e26:	7819      	ldrb	r1, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e2e:	2340      	movs	r3, #64	@ 0x40
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 ff95 	bl	8008d60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000094 	.word	0x20000094

08006e44 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d101      	bne.n	8006e5c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e01f      	b.n	8006e9c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	79fa      	ldrb	r2, [r7, #7]
 8006e8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f001 fe0f 	bl	8008ab4 <USBD_LL_Init>
 8006e96:	4603      	mov	r3, r0
 8006e98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e025      	b.n	8006f08 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	32ae      	adds	r2, #174	@ 0xae
 8006ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00f      	beq.n	8006ef8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	32ae      	adds	r2, #174	@ 0xae
 8006ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee8:	f107 020e 	add.w	r2, r7, #14
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 fe17 	bl	8008b4c <USBD_LL_Start>
 8006f1e:	4603      	mov	r3, r0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f30:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	370c      	adds	r7, #12
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f3e:	b580      	push	{r7, lr}
 8006f40:	b084      	sub	sp, #16
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d009      	beq.n	8006f6c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	78fa      	ldrb	r2, [r7, #3]
 8006f62:	4611      	mov	r1, r2
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	4798      	blx	r3
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b084      	sub	sp, #16
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	78fa      	ldrb	r2, [r7, #3]
 8006f90:	4611      	mov	r1, r2
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	4798      	blx	r3
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3710      	adds	r7, #16
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006fba:	6839      	ldr	r1, [r7, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f001 f90c 	bl	80081da <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d01a      	beq.n	800701c <USBD_LL_SetupStage+0x72>
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d822      	bhi.n	8007030 <USBD_LL_SetupStage+0x86>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <USBD_LL_SetupStage+0x4a>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d00a      	beq.n	8007008 <USBD_LL_SetupStage+0x5e>
 8006ff2:	e01d      	b.n	8007030 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 fb63 	bl	80076c8 <USBD_StdDevReq>
 8007002:	4603      	mov	r3, r0
 8007004:	73fb      	strb	r3, [r7, #15]
      break;
 8007006:	e020      	b.n	800704a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fbcb 	bl	80077ac <USBD_StdItfReq>
 8007016:	4603      	mov	r3, r0
 8007018:	73fb      	strb	r3, [r7, #15]
      break;
 800701a:	e016      	b.n	800704a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 fc2d 	bl	8007884 <USBD_StdEPReq>
 800702a:	4603      	mov	r3, r0
 800702c:	73fb      	strb	r3, [r7, #15]
      break;
 800702e:	e00c      	b.n	800704a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007036:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800703a:	b2db      	uxtb	r3, r3
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 fde4 	bl	8008c0c <USBD_LL_StallEP>
 8007044:	4603      	mov	r3, r0
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	bf00      	nop
  }

  return ret;
 800704a:	7bfb      	ldrb	r3, [r7, #15]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3710      	adds	r7, #16
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	460b      	mov	r3, r1
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d16e      	bne.n	800714a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007072:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800707a:	2b03      	cmp	r3, #3
 800707c:	f040 8098 	bne.w	80071b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	68db      	ldr	r3, [r3, #12]
 8007088:	429a      	cmp	r2, r3
 800708a:	d913      	bls.n	80070b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	689a      	ldr	r2, [r3, #8]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	1ad2      	subs	r2, r2, r3
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	4293      	cmp	r3, r2
 80070a4:	bf28      	it	cs
 80070a6:	4613      	movcs	r3, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f001 f988 	bl	80083c2 <USBD_CtlContinueRx>
 80070b2:	e07d      	b.n	80071b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d014      	beq.n	80070ec <USBD_LL_DataOutStage+0x98>
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d81d      	bhi.n	8007102 <USBD_LL_DataOutStage+0xae>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <USBD_LL_DataOutStage+0x7c>
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d003      	beq.n	80070d6 <USBD_LL_DataOutStage+0x82>
 80070ce:	e018      	b.n	8007102 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	75bb      	strb	r3, [r7, #22]
            break;
 80070d4:	e018      	b.n	8007108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	4619      	mov	r1, r3
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f000 fa64 	bl	80075ae <USBD_CoreFindIF>
 80070e6:	4603      	mov	r3, r0
 80070e8:	75bb      	strb	r3, [r7, #22]
            break;
 80070ea:	e00d      	b.n	8007108 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	4619      	mov	r1, r3
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f000 fa66 	bl	80075c8 <USBD_CoreFindEP>
 80070fc:	4603      	mov	r3, r0
 80070fe:	75bb      	strb	r3, [r7, #22]
            break;
 8007100:	e002      	b.n	8007108 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007102:	2300      	movs	r3, #0
 8007104:	75bb      	strb	r3, [r7, #22]
            break;
 8007106:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007108:	7dbb      	ldrb	r3, [r7, #22]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d119      	bne.n	8007142 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007114:	b2db      	uxtb	r3, r3
 8007116:	2b03      	cmp	r3, #3
 8007118:	d113      	bne.n	8007142 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800711a:	7dba      	ldrb	r2, [r7, #22]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	32ae      	adds	r2, #174	@ 0xae
 8007120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007124:	691b      	ldr	r3, [r3, #16]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00b      	beq.n	8007142 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800712a:	7dba      	ldrb	r2, [r7, #22]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007132:	7dba      	ldrb	r2, [r7, #22]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	32ae      	adds	r2, #174	@ 0xae
 8007138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f001 f94e 	bl	80083e4 <USBD_CtlSendStatus>
 8007148:	e032      	b.n	80071b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800714a:	7afb      	ldrb	r3, [r7, #11]
 800714c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007150:	b2db      	uxtb	r3, r3
 8007152:	4619      	mov	r1, r3
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fa37 	bl	80075c8 <USBD_CoreFindEP>
 800715a:	4603      	mov	r3, r0
 800715c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800715e:	7dbb      	ldrb	r3, [r7, #22]
 8007160:	2bff      	cmp	r3, #255	@ 0xff
 8007162:	d025      	beq.n	80071b0 <USBD_LL_DataOutStage+0x15c>
 8007164:	7dbb      	ldrb	r3, [r7, #22]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d122      	bne.n	80071b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007170:	b2db      	uxtb	r3, r3
 8007172:	2b03      	cmp	r3, #3
 8007174:	d117      	bne.n	80071a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007176:	7dba      	ldrb	r2, [r7, #22]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	32ae      	adds	r2, #174	@ 0xae
 800717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00f      	beq.n	80071a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007186:	7dba      	ldrb	r2, [r7, #22]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800718e:	7dba      	ldrb	r2, [r7, #22]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	32ae      	adds	r2, #174	@ 0xae
 8007194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007198:	699b      	ldr	r3, [r3, #24]
 800719a:	7afa      	ldrb	r2, [r7, #11]
 800719c:	4611      	mov	r1, r2
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	4798      	blx	r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071a6:	7dfb      	ldrb	r3, [r7, #23]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071ac:	7dfb      	ldrb	r3, [r7, #23]
 80071ae:	e000      	b.n	80071b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b086      	sub	sp, #24
 80071be:	af00      	add	r7, sp, #0
 80071c0:	60f8      	str	r0, [r7, #12]
 80071c2:	460b      	mov	r3, r1
 80071c4:	607a      	str	r2, [r7, #4]
 80071c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d16f      	bne.n	80072ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3314      	adds	r3, #20
 80071d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d15a      	bne.n	8007294 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	689a      	ldr	r2, [r3, #8]
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	429a      	cmp	r2, r3
 80071e8:	d914      	bls.n	8007214 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	689a      	ldr	r2, [r3, #8]
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	1ad2      	subs	r2, r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	461a      	mov	r2, r3
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f001 f8b0 	bl	8008366 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007206:	2300      	movs	r3, #0
 8007208:	2200      	movs	r2, #0
 800720a:	2100      	movs	r1, #0
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f001 fda7 	bl	8008d60 <USBD_LL_PrepareReceive>
 8007212:	e03f      	b.n	8007294 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	429a      	cmp	r2, r3
 800721e:	d11c      	bne.n	800725a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007228:	429a      	cmp	r2, r3
 800722a:	d316      	bcc.n	800725a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007236:	429a      	cmp	r2, r3
 8007238:	d20f      	bcs.n	800725a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f001 f891 	bl	8008366 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800724c:	2300      	movs	r3, #0
 800724e:	2200      	movs	r2, #0
 8007250:	2100      	movs	r1, #0
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f001 fd84 	bl	8008d60 <USBD_LL_PrepareReceive>
 8007258:	e01c      	b.n	8007294 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b03      	cmp	r3, #3
 8007264:	d10f      	bne.n	8007286 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d009      	beq.n	8007286 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007286:	2180      	movs	r1, #128	@ 0x80
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f001 fcbf 	bl	8008c0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800728e:	68f8      	ldr	r0, [r7, #12]
 8007290:	f001 f8bb 	bl	800840a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d03a      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f7ff fe42 	bl	8006f28 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072ac:	e032      	b.n	8007314 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	4619      	mov	r1, r3
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f000 f985 	bl	80075c8 <USBD_CoreFindEP>
 80072be:	4603      	mov	r3, r0
 80072c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072c2:	7dfb      	ldrb	r3, [r7, #23]
 80072c4:	2bff      	cmp	r3, #255	@ 0xff
 80072c6:	d025      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d122      	bne.n	8007314 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072d4:	b2db      	uxtb	r3, r3
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d11c      	bne.n	8007314 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072da:	7dfa      	ldrb	r2, [r7, #23]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	32ae      	adds	r2, #174	@ 0xae
 80072e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e4:	695b      	ldr	r3, [r3, #20]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d014      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072ea:	7dfa      	ldrb	r2, [r7, #23]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072f2:	7dfa      	ldrb	r2, [r7, #23]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	32ae      	adds	r2, #174	@ 0xae
 80072f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fc:	695b      	ldr	r3, [r3, #20]
 80072fe:	7afa      	ldrb	r2, [r7, #11]
 8007300:	4611      	mov	r1, r2
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	4798      	blx	r3
 8007306:	4603      	mov	r3, r0
 8007308:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800730a:	7dbb      	ldrb	r3, [r7, #22]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007310:	7dbb      	ldrb	r3, [r7, #22]
 8007312:	e000      	b.n	8007316 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3718      	adds	r7, #24
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b084      	sub	sp, #16
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007326:	2300      	movs	r3, #0
 8007328:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007356:	2b00      	cmp	r3, #0
 8007358:	d014      	beq.n	8007384 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00e      	beq.n	8007384 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6852      	ldr	r2, [r2, #4]
 8007372:	b2d2      	uxtb	r2, r2
 8007374:	4611      	mov	r1, r2
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007380:	2303      	movs	r3, #3
 8007382:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007384:	2340      	movs	r3, #64	@ 0x40
 8007386:	2200      	movs	r2, #0
 8007388:	2100      	movs	r1, #0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 fbf9 	bl	8008b82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2240      	movs	r2, #64	@ 0x40
 800739c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073a0:	2340      	movs	r3, #64	@ 0x40
 80073a2:	2200      	movs	r2, #0
 80073a4:	2180      	movs	r1, #128	@ 0x80
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f001 fbeb 	bl	8008b82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2201      	movs	r2, #1
 80073b0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2240      	movs	r2, #64	@ 0x40
 80073b6:	621a      	str	r2, [r3, #32]

  return ret;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	78fa      	ldrb	r2, [r7, #3]
 80073d2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d006      	beq.n	8007404 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073fc:	b2da      	uxtb	r2, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2204      	movs	r2, #4
 8007408:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800741a:	b480      	push	{r7}
 800741c:	b083      	sub	sp, #12
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b04      	cmp	r3, #4
 800742c:	d106      	bne.n	800743c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007434:	b2da      	uxtb	r2, r3
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b03      	cmp	r3, #3
 800745c:	d110      	bne.n	8007480 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	32ae      	adds	r2, #174	@ 0xae
 80074a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e01c      	b.n	80074e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d115      	bne.n	80074e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	32ae      	adds	r2, #174	@ 0xae
 80074c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	32ae      	adds	r2, #174	@ 0xae
 80074d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	4611      	mov	r1, r2
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3708      	adds	r7, #8
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b082      	sub	sp, #8
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	460b      	mov	r3, r1
 80074f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	32ae      	adds	r2, #174	@ 0xae
 8007504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d101      	bne.n	8007510 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800750c:	2303      	movs	r3, #3
 800750e:	e01c      	b.n	800754a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007516:	b2db      	uxtb	r3, r3
 8007518:	2b03      	cmp	r3, #3
 800751a:	d115      	bne.n	8007548 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	32ae      	adds	r2, #174	@ 0xae
 8007526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00b      	beq.n	8007548 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	32ae      	adds	r2, #174	@ 0xae
 800753a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007540:	78fa      	ldrb	r2, [r7, #3]
 8007542:	4611      	mov	r1, r2
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007570:	2300      	movs	r3, #0
 8007572:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00e      	beq.n	80075a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6852      	ldr	r2, [r2, #4]
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	4611      	mov	r1, r2
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	4798      	blx	r3
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d001      	beq.n	80075a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3710      	adds	r7, #16
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}

080075ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075bc:	4618      	mov	r0, r3
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b086      	sub	sp, #24
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	885b      	ldrh	r3, [r3, #2]
 80075fe:	b29b      	uxth	r3, r3
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	7812      	ldrb	r2, [r2, #0]
 8007604:	4293      	cmp	r3, r2
 8007606:	d91f      	bls.n	8007648 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800760e:	e013      	b.n	8007638 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007610:	f107 030a 	add.w	r3, r7, #10
 8007614:	4619      	mov	r1, r3
 8007616:	6978      	ldr	r0, [r7, #20]
 8007618:	f000 f81b 	bl	8007652 <USBD_GetNextDesc>
 800761c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	785b      	ldrb	r3, [r3, #1]
 8007622:	2b05      	cmp	r3, #5
 8007624:	d108      	bne.n	8007638 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	789b      	ldrb	r3, [r3, #2]
 800762e:	78fa      	ldrb	r2, [r7, #3]
 8007630:	429a      	cmp	r2, r3
 8007632:	d008      	beq.n	8007646 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007634:	2300      	movs	r3, #0
 8007636:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	885b      	ldrh	r3, [r3, #2]
 800763c:	b29a      	uxth	r2, r3
 800763e:	897b      	ldrh	r3, [r7, #10]
 8007640:	429a      	cmp	r2, r3
 8007642:	d8e5      	bhi.n	8007610 <USBD_GetEpDesc+0x2e>
 8007644:	e000      	b.n	8007648 <USBD_GetEpDesc+0x66>
          break;
 8007646:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007648:	693b      	ldr	r3, [r7, #16]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3718      	adds	r7, #24
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007652:	b480      	push	{r7}
 8007654:	b085      	sub	sp, #20
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	881b      	ldrh	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	7812      	ldrb	r2, [r2, #0]
 8007668:	4413      	add	r3, r2
 800766a:	b29a      	uxth	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	461a      	mov	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800767c:	68fb      	ldr	r3, [r7, #12]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800768a:	b480      	push	{r7}
 800768c:	b087      	sub	sp, #28
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	3301      	adds	r3, #1
 80076a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076a8:	8a3b      	ldrh	r3, [r7, #16]
 80076aa:	021b      	lsls	r3, r3, #8
 80076ac:	b21a      	sxth	r2, r3
 80076ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	b21b      	sxth	r3, r3
 80076b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076b8:	89fb      	ldrh	r3, [r7, #14]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
	...

080076c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076de:	2b40      	cmp	r3, #64	@ 0x40
 80076e0:	d005      	beq.n	80076ee <USBD_StdDevReq+0x26>
 80076e2:	2b40      	cmp	r3, #64	@ 0x40
 80076e4:	d857      	bhi.n	8007796 <USBD_StdDevReq+0xce>
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00f      	beq.n	800770a <USBD_StdDevReq+0x42>
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d153      	bne.n	8007796 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	32ae      	adds	r2, #174	@ 0xae
 80076f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	4798      	blx	r3
 8007704:	4603      	mov	r3, r0
 8007706:	73fb      	strb	r3, [r7, #15]
      break;
 8007708:	e04a      	b.n	80077a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	785b      	ldrb	r3, [r3, #1]
 800770e:	2b09      	cmp	r3, #9
 8007710:	d83b      	bhi.n	800778a <USBD_StdDevReq+0xc2>
 8007712:	a201      	add	r2, pc, #4	@ (adr r2, 8007718 <USBD_StdDevReq+0x50>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	0800776d 	.word	0x0800776d
 800771c:	08007781 	.word	0x08007781
 8007720:	0800778b 	.word	0x0800778b
 8007724:	08007777 	.word	0x08007777
 8007728:	0800778b 	.word	0x0800778b
 800772c:	0800774b 	.word	0x0800774b
 8007730:	08007741 	.word	0x08007741
 8007734:	0800778b 	.word	0x0800778b
 8007738:	08007763 	.word	0x08007763
 800773c:	08007755 	.word	0x08007755
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa3c 	bl	8007bc0 <USBD_GetDescriptor>
          break;
 8007748:	e024      	b.n	8007794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fba1 	bl	8007e94 <USBD_SetAddress>
          break;
 8007752:	e01f      	b.n	8007794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fbe0 	bl	8007f1c <USBD_SetConfig>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
          break;
 8007760:	e018      	b.n	8007794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc83 	bl	8008070 <USBD_GetConfig>
          break;
 800776a:	e013      	b.n	8007794 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 fcb4 	bl	80080dc <USBD_GetStatus>
          break;
 8007774:	e00e      	b.n	8007794 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fce3 	bl	8008144 <USBD_SetFeature>
          break;
 800777e:	e009      	b.n	8007794 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fd07 	bl	8008196 <USBD_ClrFeature>
          break;
 8007788:	e004      	b.n	8007794 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fd5e 	bl	800824e <USBD_CtlError>
          break;
 8007792:	bf00      	nop
      }
      break;
 8007794:	e004      	b.n	80077a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fd58 	bl	800824e <USBD_CtlError>
      break;
 800779e:	bf00      	nop
  }

  return ret;
 80077a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077c2:	2b40      	cmp	r3, #64	@ 0x40
 80077c4:	d005      	beq.n	80077d2 <USBD_StdItfReq+0x26>
 80077c6:	2b40      	cmp	r3, #64	@ 0x40
 80077c8:	d852      	bhi.n	8007870 <USBD_StdItfReq+0xc4>
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <USBD_StdItfReq+0x26>
 80077ce:	2b20      	cmp	r3, #32
 80077d0:	d14e      	bne.n	8007870 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	3b01      	subs	r3, #1
 80077dc:	2b02      	cmp	r3, #2
 80077de:	d840      	bhi.n	8007862 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	889b      	ldrh	r3, [r3, #4]
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d836      	bhi.n	8007858 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	889b      	ldrh	r3, [r3, #4]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fedb 	bl	80075ae <USBD_CoreFindIF>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2bff      	cmp	r3, #255	@ 0xff
 8007800:	d01d      	beq.n	800783e <USBD_StdItfReq+0x92>
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d11a      	bne.n	800783e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007808:	7bba      	ldrb	r2, [r7, #14]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	@ 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	689b      	ldr	r3, [r3, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007818:	7bba      	ldrb	r2, [r7, #14]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007820:	7bba      	ldrb	r2, [r7, #14]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	32ae      	adds	r2, #174	@ 0xae
 8007826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	4798      	blx	r3
 8007832:	4603      	mov	r3, r0
 8007834:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007836:	e004      	b.n	8007842 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800783c:	e001      	b.n	8007842 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800783e:	2303      	movs	r3, #3
 8007840:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	88db      	ldrh	r3, [r3, #6]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d110      	bne.n	800786c <USBD_StdItfReq+0xc0>
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10d      	bne.n	800786c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fdc7 	bl	80083e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007856:	e009      	b.n	800786c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fcf7 	bl	800824e <USBD_CtlError>
          break;
 8007860:	e004      	b.n	800786c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fcf2 	bl	800824e <USBD_CtlError>
          break;
 800786a:	e000      	b.n	800786e <USBD_StdItfReq+0xc2>
          break;
 800786c:	bf00      	nop
      }
      break;
 800786e:	e004      	b.n	800787a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007870:	6839      	ldr	r1, [r7, #0]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	f000 fceb 	bl	800824e <USBD_CtlError>
      break;
 8007878:	bf00      	nop
  }

  return ret;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	889b      	ldrh	r3, [r3, #4]
 8007896:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078a0:	2b40      	cmp	r3, #64	@ 0x40
 80078a2:	d007      	beq.n	80078b4 <USBD_StdEPReq+0x30>
 80078a4:	2b40      	cmp	r3, #64	@ 0x40
 80078a6:	f200 817f 	bhi.w	8007ba8 <USBD_StdEPReq+0x324>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d02a      	beq.n	8007904 <USBD_StdEPReq+0x80>
 80078ae:	2b20      	cmp	r3, #32
 80078b0:	f040 817a 	bne.w	8007ba8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff fe85 	bl	80075c8 <USBD_CoreFindEP>
 80078be:	4603      	mov	r3, r0
 80078c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078c2:	7b7b      	ldrb	r3, [r7, #13]
 80078c4:	2bff      	cmp	r3, #255	@ 0xff
 80078c6:	f000 8174 	beq.w	8007bb2 <USBD_StdEPReq+0x32e>
 80078ca:	7b7b      	ldrb	r3, [r7, #13]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f040 8170 	bne.w	8007bb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078d2:	7b7a      	ldrb	r2, [r7, #13]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078da:	7b7a      	ldrb	r2, [r7, #13]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	32ae      	adds	r2, #174	@ 0xae
 80078e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e4:	689b      	ldr	r3, [r3, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8163 	beq.w	8007bb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078ec:	7b7a      	ldrb	r2, [r7, #13]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	32ae      	adds	r2, #174	@ 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007902:	e156      	b.n	8007bb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	785b      	ldrb	r3, [r3, #1]
 8007908:	2b03      	cmp	r3, #3
 800790a:	d008      	beq.n	800791e <USBD_StdEPReq+0x9a>
 800790c:	2b03      	cmp	r3, #3
 800790e:	f300 8145 	bgt.w	8007b9c <USBD_StdEPReq+0x318>
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 809b 	beq.w	8007a4e <USBD_StdEPReq+0x1ca>
 8007918:	2b01      	cmp	r3, #1
 800791a:	d03c      	beq.n	8007996 <USBD_StdEPReq+0x112>
 800791c:	e13e      	b.n	8007b9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b02      	cmp	r3, #2
 8007928:	d002      	beq.n	8007930 <USBD_StdEPReq+0xac>
 800792a:	2b03      	cmp	r3, #3
 800792c:	d016      	beq.n	800795c <USBD_StdEPReq+0xd8>
 800792e:	e02c      	b.n	800798a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007930:	7bbb      	ldrb	r3, [r7, #14]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00d      	beq.n	8007952 <USBD_StdEPReq+0xce>
 8007936:	7bbb      	ldrb	r3, [r7, #14]
 8007938:	2b80      	cmp	r3, #128	@ 0x80
 800793a:	d00a      	beq.n	8007952 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800793c:	7bbb      	ldrb	r3, [r7, #14]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 f963 	bl	8008c0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007946:	2180      	movs	r1, #128	@ 0x80
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f001 f95f 	bl	8008c0c <USBD_LL_StallEP>
 800794e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007950:	e020      	b.n	8007994 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 fc7a 	bl	800824e <USBD_CtlError>
              break;
 800795a:	e01b      	b.n	8007994 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	885b      	ldrh	r3, [r3, #2]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10e      	bne.n	8007982 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007964:	7bbb      	ldrb	r3, [r7, #14]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d00b      	beq.n	8007982 <USBD_StdEPReq+0xfe>
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b80      	cmp	r3, #128	@ 0x80
 800796e:	d008      	beq.n	8007982 <USBD_StdEPReq+0xfe>
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	88db      	ldrh	r3, [r3, #6]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d104      	bne.n	8007982 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007978:	7bbb      	ldrb	r3, [r7, #14]
 800797a:	4619      	mov	r1, r3
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f945 	bl	8008c0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fd2e 	bl	80083e4 <USBD_CtlSendStatus>

              break;
 8007988:	e004      	b.n	8007994 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fc5e 	bl	800824e <USBD_CtlError>
              break;
 8007992:	bf00      	nop
          }
          break;
 8007994:	e107      	b.n	8007ba6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d002      	beq.n	80079a8 <USBD_StdEPReq+0x124>
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d016      	beq.n	80079d4 <USBD_StdEPReq+0x150>
 80079a6:	e04b      	b.n	8007a40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a8:	7bbb      	ldrb	r3, [r7, #14]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00d      	beq.n	80079ca <USBD_StdEPReq+0x146>
 80079ae:	7bbb      	ldrb	r3, [r7, #14]
 80079b0:	2b80      	cmp	r3, #128	@ 0x80
 80079b2:	d00a      	beq.n	80079ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f927 	bl	8008c0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079be:	2180      	movs	r1, #128	@ 0x80
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f923 	bl	8008c0c <USBD_LL_StallEP>
 80079c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c8:	e040      	b.n	8007a4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc3e 	bl	800824e <USBD_CtlError>
              break;
 80079d2:	e03b      	b.n	8007a4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d136      	bne.n	8007a4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d004      	beq.n	80079f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079e6:	7bbb      	ldrb	r3, [r7, #14]
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 f92d 	bl	8008c4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fcf7 	bl	80083e4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079f6:	7bbb      	ldrb	r3, [r7, #14]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fde4 	bl	80075c8 <USBD_CoreFindEP>
 8007a00:	4603      	mov	r3, r0
 8007a02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a04:	7b7b      	ldrb	r3, [r7, #13]
 8007a06:	2bff      	cmp	r3, #255	@ 0xff
 8007a08:	d01f      	beq.n	8007a4a <USBD_StdEPReq+0x1c6>
 8007a0a:	7b7b      	ldrb	r3, [r7, #13]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d11c      	bne.n	8007a4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a10:	7b7a      	ldrb	r2, [r7, #13]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a18:	7b7a      	ldrb	r2, [r7, #13]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	32ae      	adds	r2, #174	@ 0xae
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d010      	beq.n	8007a4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a28:	7b7a      	ldrb	r2, [r7, #13]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	32ae      	adds	r2, #174	@ 0xae
 8007a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	4798      	blx	r3
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a3e:	e004      	b.n	8007a4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a40:	6839      	ldr	r1, [r7, #0]
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fc03 	bl	800824e <USBD_CtlError>
              break;
 8007a48:	e000      	b.n	8007a4c <USBD_StdEPReq+0x1c8>
              break;
 8007a4a:	bf00      	nop
          }
          break;
 8007a4c:	e0ab      	b.n	8007ba6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d002      	beq.n	8007a60 <USBD_StdEPReq+0x1dc>
 8007a5a:	2b03      	cmp	r3, #3
 8007a5c:	d032      	beq.n	8007ac4 <USBD_StdEPReq+0x240>
 8007a5e:	e097      	b.n	8007b90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d007      	beq.n	8007a76 <USBD_StdEPReq+0x1f2>
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b80      	cmp	r3, #128	@ 0x80
 8007a6a:	d004      	beq.n	8007a76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a6c:	6839      	ldr	r1, [r7, #0]
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fbed 	bl	800824e <USBD_CtlError>
                break;
 8007a74:	e091      	b.n	8007b9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da0b      	bge.n	8007a96 <USBD_StdEPReq+0x212>
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a84:	4613      	mov	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	3310      	adds	r3, #16
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	3304      	adds	r3, #4
 8007a94:	e00b      	b.n	8007aae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4413      	add	r3, r2
 8007aac:	3304      	adds	r3, #4
 8007aae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	2202      	movs	r2, #2
 8007aba:	4619      	mov	r1, r3
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fc37 	bl	8008330 <USBD_CtlSendData>
              break;
 8007ac2:	e06a      	b.n	8007b9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da11      	bge.n	8007af0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007acc:	7bbb      	ldrb	r3, [r7, #14]
 8007ace:	f003 020f 	and.w	r2, r3, #15
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	440b      	add	r3, r1
 8007ade:	3324      	adds	r3, #36	@ 0x24
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d117      	bne.n	8007b16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fbb0 	bl	800824e <USBD_CtlError>
                  break;
 8007aee:	e054      	b.n	8007b9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	f003 020f 	and.w	r2, r3, #15
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	440b      	add	r3, r1
 8007b02:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d104      	bne.n	8007b16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b0c:	6839      	ldr	r1, [r7, #0]
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 fb9d 	bl	800824e <USBD_CtlError>
                  break;
 8007b14:	e041      	b.n	8007b9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	da0b      	bge.n	8007b36 <USBD_StdEPReq+0x2b2>
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b24:	4613      	mov	r3, r2
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	4413      	add	r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	3310      	adds	r3, #16
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	4413      	add	r3, r2
 8007b32:	3304      	adds	r3, #4
 8007b34:	e00b      	b.n	8007b4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b36:	7bbb      	ldrb	r3, [r7, #14]
 8007b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	4413      	add	r3, r2
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b50:	7bbb      	ldrb	r3, [r7, #14]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d002      	beq.n	8007b5c <USBD_StdEPReq+0x2d8>
 8007b56:	7bbb      	ldrb	r3, [r7, #14]
 8007b58:	2b80      	cmp	r3, #128	@ 0x80
 8007b5a:	d103      	bne.n	8007b64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	e00e      	b.n	8007b82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f88d 	bl	8008c88 <USBD_LL_IsStallEP>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2201      	movs	r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2202      	movs	r2, #2
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fbd1 	bl	8008330 <USBD_CtlSendData>
              break;
 8007b8e:	e004      	b.n	8007b9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fb5b 	bl	800824e <USBD_CtlError>
              break;
 8007b98:	bf00      	nop
          }
          break;
 8007b9a:	e004      	b.n	8007ba6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fb55 	bl	800824e <USBD_CtlError>
          break;
 8007ba4:	bf00      	nop
      }
      break;
 8007ba6:	e005      	b.n	8007bb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ba8:	6839      	ldr	r1, [r7, #0]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 fb4f 	bl	800824e <USBD_CtlError>
      break;
 8007bb0:	e000      	b.n	8007bb4 <USBD_StdEPReq+0x330>
      break;
 8007bb2:	bf00      	nop
  }

  return ret;
 8007bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
	...

08007bc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	885b      	ldrh	r3, [r3, #2]
 8007bda:	0a1b      	lsrs	r3, r3, #8
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	2b06      	cmp	r3, #6
 8007be2:	f200 8128 	bhi.w	8007e36 <USBD_GetDescriptor+0x276>
 8007be6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bec <USBD_GetDescriptor+0x2c>)
 8007be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bec:	08007c09 	.word	0x08007c09
 8007bf0:	08007c21 	.word	0x08007c21
 8007bf4:	08007c61 	.word	0x08007c61
 8007bf8:	08007e37 	.word	0x08007e37
 8007bfc:	08007e37 	.word	0x08007e37
 8007c00:	08007dd7 	.word	0x08007dd7
 8007c04:	08007e03 	.word	0x08007e03
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
      break;
 8007c1e:	e112      	b.n	8007e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7c1b      	ldrb	r3, [r3, #16]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d10d      	bne.n	8007c44 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c30:	f107 0208 	add.w	r2, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3301      	adds	r3, #1
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c42:	e100      	b.n	8007e46 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4c:	f107 0208 	add.w	r2, r7, #8
 8007c50:	4610      	mov	r0, r2
 8007c52:	4798      	blx	r3
 8007c54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	2202      	movs	r2, #2
 8007c5c:	701a      	strb	r2, [r3, #0]
      break;
 8007c5e:	e0f2      	b.n	8007e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	885b      	ldrh	r3, [r3, #2]
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b05      	cmp	r3, #5
 8007c68:	f200 80ac 	bhi.w	8007dc4 <USBD_GetDescriptor+0x204>
 8007c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8007c74 <USBD_GetDescriptor+0xb4>)
 8007c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c72:	bf00      	nop
 8007c74:	08007c8d 	.word	0x08007c8d
 8007c78:	08007cc1 	.word	0x08007cc1
 8007c7c:	08007cf5 	.word	0x08007cf5
 8007c80:	08007d29 	.word	0x08007d29
 8007c84:	08007d5d 	.word	0x08007d5d
 8007c88:	08007d91 	.word	0x08007d91
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00b      	beq.n	8007cb0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	7c12      	ldrb	r2, [r2, #16]
 8007ca4:	f107 0108 	add.w	r1, r7, #8
 8007ca8:	4610      	mov	r0, r2
 8007caa:	4798      	blx	r3
 8007cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cae:	e091      	b.n	8007dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 facb 	bl	800824e <USBD_CtlError>
            err++;
 8007cb8:	7afb      	ldrb	r3, [r7, #11]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cbe:	e089      	b.n	8007dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	7c12      	ldrb	r2, [r2, #16]
 8007cd8:	f107 0108 	add.w	r1, r7, #8
 8007cdc:	4610      	mov	r0, r2
 8007cde:	4798      	blx	r3
 8007ce0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ce2:	e077      	b.n	8007dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ce4:	6839      	ldr	r1, [r7, #0]
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fab1 	bl	800824e <USBD_CtlError>
            err++;
 8007cec:	7afb      	ldrb	r3, [r7, #11]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cf2:	e06f      	b.n	8007dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7c12      	ldrb	r2, [r2, #16]
 8007d0c:	f107 0108 	add.w	r1, r7, #8
 8007d10:	4610      	mov	r0, r2
 8007d12:	4798      	blx	r3
 8007d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d16:	e05d      	b.n	8007dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa97 	bl	800824e <USBD_CtlError>
            err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
          break;
 8007d26:	e055      	b.n	8007dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d00b      	beq.n	8007d4c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	7c12      	ldrb	r2, [r2, #16]
 8007d40:	f107 0108 	add.w	r1, r7, #8
 8007d44:	4610      	mov	r0, r2
 8007d46:	4798      	blx	r3
 8007d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d4a:	e043      	b.n	8007dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fa7d 	bl	800824e <USBD_CtlError>
            err++;
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	3301      	adds	r3, #1
 8007d58:	72fb      	strb	r3, [r7, #11]
          break;
 8007d5a:	e03b      	b.n	8007dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00b      	beq.n	8007d80 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7c12      	ldrb	r2, [r2, #16]
 8007d74:	f107 0108 	add.w	r1, r7, #8
 8007d78:	4610      	mov	r0, r2
 8007d7a:	4798      	blx	r3
 8007d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d7e:	e029      	b.n	8007dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 fa63 	bl	800824e <USBD_CtlError>
            err++;
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d8e:	e021      	b.n	8007dd4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	7c12      	ldrb	r2, [r2, #16]
 8007da8:	f107 0108 	add.w	r1, r7, #8
 8007dac:	4610      	mov	r0, r2
 8007dae:	4798      	blx	r3
 8007db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007db2:	e00f      	b.n	8007dd4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007db4:	6839      	ldr	r1, [r7, #0]
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 fa49 	bl	800824e <USBD_CtlError>
            err++;
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007dc2:	e007      	b.n	8007dd4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fa41 	bl	800824e <USBD_CtlError>
          err++;
 8007dcc:	7afb      	ldrb	r3, [r7, #11]
 8007dce:	3301      	adds	r3, #1
 8007dd0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007dd2:	bf00      	nop
      }
      break;
 8007dd4:	e037      	b.n	8007e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	7c1b      	ldrb	r3, [r3, #16]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007de6:	f107 0208 	add.w	r2, r7, #8
 8007dea:	4610      	mov	r0, r2
 8007dec:	4798      	blx	r3
 8007dee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df0:	e029      	b.n	8007e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 fa2a 	bl	800824e <USBD_CtlError>
        err++;
 8007dfa:	7afb      	ldrb	r3, [r7, #11]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	72fb      	strb	r3, [r7, #11]
      break;
 8007e00:	e021      	b.n	8007e46 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	7c1b      	ldrb	r3, [r3, #16]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10d      	bne.n	8007e26 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e12:	f107 0208 	add.w	r2, r7, #8
 8007e16:	4610      	mov	r0, r2
 8007e18:	4798      	blx	r3
 8007e1a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	2207      	movs	r2, #7
 8007e22:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e24:	e00f      	b.n	8007e46 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e26:	6839      	ldr	r1, [r7, #0]
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa10 	bl	800824e <USBD_CtlError>
        err++;
 8007e2e:	7afb      	ldrb	r3, [r7, #11]
 8007e30:	3301      	adds	r3, #1
 8007e32:	72fb      	strb	r3, [r7, #11]
      break;
 8007e34:	e007      	b.n	8007e46 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa08 	bl	800824e <USBD_CtlError>
      err++;
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	3301      	adds	r3, #1
 8007e42:	72fb      	strb	r3, [r7, #11]
      break;
 8007e44:	bf00      	nop
  }

  if (err != 0U)
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d11e      	bne.n	8007e8a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	88db      	ldrh	r3, [r3, #6]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d016      	beq.n	8007e82 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e54:	893b      	ldrh	r3, [r7, #8]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00e      	beq.n	8007e78 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	88da      	ldrh	r2, [r3, #6]
 8007e5e:	893b      	ldrh	r3, [r7, #8]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	bf28      	it	cs
 8007e64:	4613      	movcs	r3, r2
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e6a:	893b      	ldrh	r3, [r7, #8]
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	68f9      	ldr	r1, [r7, #12]
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fa5d 	bl	8008330 <USBD_CtlSendData>
 8007e76:	e009      	b.n	8007e8c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f9e7 	bl	800824e <USBD_CtlError>
 8007e80:	e004      	b.n	8007e8c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 faae 	bl	80083e4 <USBD_CtlSendStatus>
 8007e88:	e000      	b.n	8007e8c <USBD_GetDescriptor+0x2cc>
    return;
 8007e8a:	bf00      	nop
  }
}
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop

08007e94 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	889b      	ldrh	r3, [r3, #4]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d131      	bne.n	8007f0a <USBD_SetAddress+0x76>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	88db      	ldrh	r3, [r3, #6]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d12d      	bne.n	8007f0a <USBD_SetAddress+0x76>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	885b      	ldrh	r3, [r3, #2]
 8007eb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007eb4:	d829      	bhi.n	8007f0a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	885b      	ldrh	r3, [r3, #2]
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ec0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d104      	bne.n	8007ed8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f9bc 	bl	800824e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ed6:	e01d      	b.n	8007f14 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	7bfa      	ldrb	r2, [r7, #15]
 8007edc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 fefb 	bl	8008ce0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fa7a 	bl	80083e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d004      	beq.n	8007f00 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2202      	movs	r2, #2
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efe:	e009      	b.n	8007f14 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f08:	e004      	b.n	8007f14 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 f99e 	bl	800824e <USBD_CtlError>
  }
}
 8007f12:	bf00      	nop
 8007f14:	bf00      	nop
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b084      	sub	sp, #16
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	885b      	ldrh	r3, [r3, #2]
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	4b4e      	ldr	r3, [pc, #312]	@ (800806c <USBD_SetConfig+0x150>)
 8007f32:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f34:	4b4d      	ldr	r3, [pc, #308]	@ (800806c <USBD_SetConfig+0x150>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d905      	bls.n	8007f48 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f3c:	6839      	ldr	r1, [r7, #0]
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f985 	bl	800824e <USBD_CtlError>
    return USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e08c      	b.n	8008062 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d002      	beq.n	8007f5a <USBD_SetConfig+0x3e>
 8007f54:	2b03      	cmp	r3, #3
 8007f56:	d029      	beq.n	8007fac <USBD_SetConfig+0x90>
 8007f58:	e075      	b.n	8008046 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f5a:	4b44      	ldr	r3, [pc, #272]	@ (800806c <USBD_SetConfig+0x150>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d020      	beq.n	8007fa4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f62:	4b42      	ldr	r3, [pc, #264]	@ (800806c <USBD_SetConfig+0x150>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f6c:	4b3f      	ldr	r3, [pc, #252]	@ (800806c <USBD_SetConfig+0x150>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7fe ffe3 	bl	8006f3e <USBD_SetClassConfig>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f7c:	7bfb      	ldrb	r3, [r7, #15]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d008      	beq.n	8007f94 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f962 	bl	800824e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f92:	e065      	b.n	8008060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 fa25 	bl	80083e4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2203      	movs	r2, #3
 8007f9e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007fa2:	e05d      	b.n	8008060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fa1d 	bl	80083e4 <USBD_CtlSendStatus>
      break;
 8007faa:	e059      	b.n	8008060 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fac:	4b2f      	ldr	r3, [pc, #188]	@ (800806c <USBD_SetConfig+0x150>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d112      	bne.n	8007fda <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800806c <USBD_SetConfig+0x150>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fc6:	4b29      	ldr	r3, [pc, #164]	@ (800806c <USBD_SetConfig+0x150>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7fe ffd2 	bl	8006f76 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 fa06 	bl	80083e4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fd8:	e042      	b.n	8008060 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fda:	4b24      	ldr	r3, [pc, #144]	@ (800806c <USBD_SetConfig+0x150>)
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d02a      	beq.n	800803e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	4619      	mov	r1, r3
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7fe ffc0 	bl	8006f76 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <USBD_SetConfig+0x150>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008000:	4b1a      	ldr	r3, [pc, #104]	@ (800806c <USBD_SetConfig+0x150>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f7fe ff99 	bl	8006f3e <USBD_SetClassConfig>
 800800c:	4603      	mov	r3, r0
 800800e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00f      	beq.n	8008036 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008016:	6839      	ldr	r1, [r7, #0]
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f918 	bl	800824e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7fe ffa5 	bl	8006f76 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2202      	movs	r2, #2
 8008030:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008034:	e014      	b.n	8008060 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f9d4 	bl	80083e4 <USBD_CtlSendStatus>
      break;
 800803c:	e010      	b.n	8008060 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f9d0 	bl	80083e4 <USBD_CtlSendStatus>
      break;
 8008044:	e00c      	b.n	8008060 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f900 	bl	800824e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800804e:	4b07      	ldr	r3, [pc, #28]	@ (800806c <USBD_SetConfig+0x150>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	4619      	mov	r1, r3
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fe ff8e 	bl	8006f76 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	73fb      	strb	r3, [r7, #15]
      break;
 800805e:	bf00      	nop
  }

  return ret;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	200003d4 	.word	0x200003d4

08008070 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	88db      	ldrh	r3, [r3, #6]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d004      	beq.n	800808c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f8e2 	bl	800824e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800808a:	e023      	b.n	80080d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008092:	b2db      	uxtb	r3, r3
 8008094:	2b02      	cmp	r3, #2
 8008096:	dc02      	bgt.n	800809e <USBD_GetConfig+0x2e>
 8008098:	2b00      	cmp	r3, #0
 800809a:	dc03      	bgt.n	80080a4 <USBD_GetConfig+0x34>
 800809c:	e015      	b.n	80080ca <USBD_GetConfig+0x5a>
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d00b      	beq.n	80080ba <USBD_GetConfig+0x4a>
 80080a2:	e012      	b.n	80080ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	3308      	adds	r3, #8
 80080ae:	2201      	movs	r2, #1
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f93c 	bl	8008330 <USBD_CtlSendData>
        break;
 80080b8:	e00c      	b.n	80080d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	3304      	adds	r3, #4
 80080be:	2201      	movs	r2, #1
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f934 	bl	8008330 <USBD_CtlSendData>
        break;
 80080c8:	e004      	b.n	80080d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080ca:	6839      	ldr	r1, [r7, #0]
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f8be 	bl	800824e <USBD_CtlError>
        break;
 80080d2:	bf00      	nop
}
 80080d4:	bf00      	nop
 80080d6:	3708      	adds	r7, #8
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d81e      	bhi.n	8008132 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d004      	beq.n	8008106 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f8a5 	bl	800824e <USBD_CtlError>
        break;
 8008104:	e01a      	b.n	800813c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f043 0202 	orr.w	r2, r3, #2
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	330c      	adds	r3, #12
 8008126:	2202      	movs	r2, #2
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f900 	bl	8008330 <USBD_CtlSendData>
      break;
 8008130:	e004      	b.n	800813c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008132:	6839      	ldr	r1, [r7, #0]
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 f88a 	bl	800824e <USBD_CtlError>
      break;
 800813a:	bf00      	nop
  }
}
 800813c:	bf00      	nop
 800813e:	3708      	adds	r7, #8
 8008140:	46bd      	mov	sp, r7
 8008142:	bd80      	pop	{r7, pc}

08008144 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
 800814c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	885b      	ldrh	r3, [r3, #2]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d107      	bne.n	8008166 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2201      	movs	r2, #1
 800815a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 f940 	bl	80083e4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008164:	e013      	b.n	800818e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	885b      	ldrh	r3, [r3, #2]
 800816a:	2b02      	cmp	r3, #2
 800816c:	d10b      	bne.n	8008186 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	889b      	ldrh	r3, [r3, #4]
 8008172:	0a1b      	lsrs	r3, r3, #8
 8008174:	b29b      	uxth	r3, r3
 8008176:	b2da      	uxtb	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f930 	bl	80083e4 <USBD_CtlSendStatus>
}
 8008184:	e003      	b.n	800818e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f860 	bl	800824e <USBD_CtlError>
}
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b082      	sub	sp, #8
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	3b01      	subs	r3, #1
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d80b      	bhi.n	80081c6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	885b      	ldrh	r3, [r3, #2]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d10c      	bne.n	80081d0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f910 	bl	80083e4 <USBD_CtlSendStatus>
      }
      break;
 80081c4:	e004      	b.n	80081d0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f840 	bl	800824e <USBD_CtlError>
      break;
 80081ce:	e000      	b.n	80081d2 <USBD_ClrFeature+0x3c>
      break;
 80081d0:	bf00      	nop
  }
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b084      	sub	sp, #16
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
 80081e2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	781a      	ldrb	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3301      	adds	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008204:	68f8      	ldr	r0, [r7, #12]
 8008206:	f7ff fa40 	bl	800768a <SWAPBYTE>
 800820a:	4603      	mov	r3, r0
 800820c:	461a      	mov	r2, r3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3301      	adds	r3, #1
 8008216:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	3301      	adds	r3, #1
 800821c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff fa33 	bl	800768a <SWAPBYTE>
 8008224:	4603      	mov	r3, r0
 8008226:	461a      	mov	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	3301      	adds	r3, #1
 8008230:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008238:	68f8      	ldr	r0, [r7, #12]
 800823a:	f7ff fa26 	bl	800768a <SWAPBYTE>
 800823e:	4603      	mov	r3, r0
 8008240:	461a      	mov	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	80da      	strh	r2, [r3, #6]
}
 8008246:	bf00      	nop
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b082      	sub	sp, #8
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008258:	2180      	movs	r1, #128	@ 0x80
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fcd6 	bl	8008c0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008260:	2100      	movs	r1, #0
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fcd2 	bl	8008c0c <USBD_LL_StallEP>
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b086      	sub	sp, #24
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d036      	beq.n	80082f4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800828a:	6938      	ldr	r0, [r7, #16]
 800828c:	f000 f836 	bl	80082fc <USBD_GetLen>
 8008290:	4603      	mov	r3, r0
 8008292:	3301      	adds	r3, #1
 8008294:	b29b      	uxth	r3, r3
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	b29a      	uxth	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	4413      	add	r3, r2
 80082a4:	687a      	ldr	r2, [r7, #4]
 80082a6:	7812      	ldrb	r2, [r2, #0]
 80082a8:	701a      	strb	r2, [r3, #0]
  idx++;
 80082aa:	7dfb      	ldrb	r3, [r7, #23]
 80082ac:	3301      	adds	r3, #1
 80082ae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082b0:	7dfb      	ldrb	r3, [r7, #23]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	4413      	add	r3, r2
 80082b6:	2203      	movs	r2, #3
 80082b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	3301      	adds	r3, #1
 80082be:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082c0:	e013      	b.n	80082ea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082c2:	7dfb      	ldrb	r3, [r7, #23]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	4413      	add	r3, r2
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	7812      	ldrb	r2, [r2, #0]
 80082cc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	3301      	adds	r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
    idx++;
 80082d4:	7dfb      	ldrb	r3, [r7, #23]
 80082d6:	3301      	adds	r3, #1
 80082d8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	4413      	add	r3, r2
 80082e0:	2200      	movs	r2, #0
 80082e2:	701a      	strb	r2, [r3, #0]
    idx++;
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	3301      	adds	r3, #1
 80082e8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1e7      	bne.n	80082c2 <USBD_GetString+0x52>
 80082f2:	e000      	b.n	80082f6 <USBD_GetString+0x86>
    return;
 80082f4:	bf00      	nop
  }
}
 80082f6:	3718      	adds	r7, #24
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008304:	2300      	movs	r3, #0
 8008306:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800830c:	e005      	b.n	800831a <USBD_GetLen+0x1e>
  {
    len++;
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	3301      	adds	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	3301      	adds	r3, #1
 8008318:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1f5      	bne.n	800830e <USBD_GetLen+0x12>
  }

  return len;
 8008322:	7bfb      	ldrb	r3, [r7, #15]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2202      	movs	r2, #2
 8008340:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	687a      	ldr	r2, [r7, #4]
 800834e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	2100      	movs	r1, #0
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f000 fce1 	bl	8008d1e <USBD_LL_Transmit>

  return USBD_OK;
 800835c:	2300      	movs	r3, #0
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	2100      	movs	r1, #0
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 fcd0 	bl	8008d1e <USBD_LL_Transmit>

  return USBD_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2203      	movs	r2, #3
 8008398:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	2100      	movs	r1, #0
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f000 fcd4 	bl	8008d60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083c2:	b580      	push	{r7, lr}
 80083c4:	b084      	sub	sp, #16
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	60f8      	str	r0, [r7, #12]
 80083ca:	60b9      	str	r1, [r7, #8]
 80083cc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	2100      	movs	r1, #0
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f000 fcc3 	bl	8008d60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2204      	movs	r2, #4
 80083f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083f4:	2300      	movs	r3, #0
 80083f6:	2200      	movs	r2, #0
 80083f8:	2100      	movs	r1, #0
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 fc8f 	bl	8008d1e <USBD_LL_Transmit>

  return USBD_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2205      	movs	r2, #5
 8008416:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800841a:	2300      	movs	r3, #0
 800841c:	2200      	movs	r2, #0
 800841e:	2100      	movs	r1, #0
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fc9d 	bl	8008d60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008434:	2200      	movs	r2, #0
 8008436:	4912      	ldr	r1, [pc, #72]	@ (8008480 <MX_USB_DEVICE_Init+0x50>)
 8008438:	4812      	ldr	r0, [pc, #72]	@ (8008484 <MX_USB_DEVICE_Init+0x54>)
 800843a:	f7fe fd03 	bl	8006e44 <USBD_Init>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008444:	f7f8 ff9a 	bl	800137c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008448:	490f      	ldr	r1, [pc, #60]	@ (8008488 <MX_USB_DEVICE_Init+0x58>)
 800844a:	480e      	ldr	r0, [pc, #56]	@ (8008484 <MX_USB_DEVICE_Init+0x54>)
 800844c:	f7fe fd2a 	bl	8006ea4 <USBD_RegisterClass>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d001      	beq.n	800845a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008456:	f7f8 ff91 	bl	800137c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800845a:	490c      	ldr	r1, [pc, #48]	@ (800848c <MX_USB_DEVICE_Init+0x5c>)
 800845c:	4809      	ldr	r0, [pc, #36]	@ (8008484 <MX_USB_DEVICE_Init+0x54>)
 800845e:	f7fe fc21 	bl	8006ca4 <USBD_CDC_RegisterInterface>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d001      	beq.n	800846c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008468:	f7f8 ff88 	bl	800137c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800846c:	4805      	ldr	r0, [pc, #20]	@ (8008484 <MX_USB_DEVICE_Init+0x54>)
 800846e:	f7fe fd4f 	bl	8006f10 <USBD_Start>
 8008472:	4603      	mov	r3, r0
 8008474:	2b00      	cmp	r3, #0
 8008476:	d001      	beq.n	800847c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008478:	f7f8 ff80 	bl	800137c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800847c:	bf00      	nop
 800847e:	bd80      	pop	{r7, pc}
 8008480:	200000ac 	.word	0x200000ac
 8008484:	200003d8 	.word	0x200003d8
 8008488:	20000018 	.word	0x20000018
 800848c:	20000098 	.word	0x20000098

08008490 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008494:	2200      	movs	r2, #0
 8008496:	4905      	ldr	r1, [pc, #20]	@ (80084ac <CDC_Init_FS+0x1c>)
 8008498:	4805      	ldr	r0, [pc, #20]	@ (80084b0 <CDC_Init_FS+0x20>)
 800849a:	f7fe fc1d 	bl	8006cd8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800849e:	4905      	ldr	r1, [pc, #20]	@ (80084b4 <CDC_Init_FS+0x24>)
 80084a0:	4803      	ldr	r0, [pc, #12]	@ (80084b0 <CDC_Init_FS+0x20>)
 80084a2:	f7fe fc3b 	bl	8006d1c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80084a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	20000eb4 	.word	0x20000eb4
 80084b0:	200003d8 	.word	0x200003d8
 80084b4:	200006b4 	.word	0x200006b4

080084b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084be:	4618      	mov	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	6039      	str	r1, [r7, #0]
 80084d2:	71fb      	strb	r3, [r7, #7]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	2b23      	cmp	r3, #35	@ 0x23
 80084dc:	d84a      	bhi.n	8008574 <CDC_Control_FS+0xac>
 80084de:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <CDC_Control_FS+0x1c>)
 80084e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e4:	08008575 	.word	0x08008575
 80084e8:	08008575 	.word	0x08008575
 80084ec:	08008575 	.word	0x08008575
 80084f0:	08008575 	.word	0x08008575
 80084f4:	08008575 	.word	0x08008575
 80084f8:	08008575 	.word	0x08008575
 80084fc:	08008575 	.word	0x08008575
 8008500:	08008575 	.word	0x08008575
 8008504:	08008575 	.word	0x08008575
 8008508:	08008575 	.word	0x08008575
 800850c:	08008575 	.word	0x08008575
 8008510:	08008575 	.word	0x08008575
 8008514:	08008575 	.word	0x08008575
 8008518:	08008575 	.word	0x08008575
 800851c:	08008575 	.word	0x08008575
 8008520:	08008575 	.word	0x08008575
 8008524:	08008575 	.word	0x08008575
 8008528:	08008575 	.word	0x08008575
 800852c:	08008575 	.word	0x08008575
 8008530:	08008575 	.word	0x08008575
 8008534:	08008575 	.word	0x08008575
 8008538:	08008575 	.word	0x08008575
 800853c:	08008575 	.word	0x08008575
 8008540:	08008575 	.word	0x08008575
 8008544:	08008575 	.word	0x08008575
 8008548:	08008575 	.word	0x08008575
 800854c:	08008575 	.word	0x08008575
 8008550:	08008575 	.word	0x08008575
 8008554:	08008575 	.word	0x08008575
 8008558:	08008575 	.word	0x08008575
 800855c:	08008575 	.word	0x08008575
 8008560:	08008575 	.word	0x08008575
 8008564:	08008575 	.word	0x08008575
 8008568:	08008575 	.word	0x08008575
 800856c:	08008575 	.word	0x08008575
 8008570:	08008575 	.word	0x08008575
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008574:	bf00      	nop
  }

  return (USBD_OK);
 8008576:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008578:	4618      	mov	r0, r3
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	4805      	ldr	r0, [pc, #20]	@ (80085a8 <CDC_Receive_FS+0x24>)
 8008592:	f7fe fbc3 	bl	8006d1c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008596:	4804      	ldr	r0, [pc, #16]	@ (80085a8 <CDC_Receive_FS+0x24>)
 8008598:	f7fe fc1e 	bl	8006dd8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800859c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200003d8 	.word	0x200003d8

080085ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b084      	sub	sp, #16
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085bc:	4b0d      	ldr	r3, [pc, #52]	@ (80085f4 <CDC_Transmit_FS+0x48>)
 80085be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d001      	beq.n	80085d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e00b      	b.n	80085ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085d2:	887b      	ldrh	r3, [r7, #2]
 80085d4:	461a      	mov	r2, r3
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4806      	ldr	r0, [pc, #24]	@ (80085f4 <CDC_Transmit_FS+0x48>)
 80085da:	f7fe fb7d 	bl	8006cd8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085de:	4805      	ldr	r0, [pc, #20]	@ (80085f4 <CDC_Transmit_FS+0x48>)
 80085e0:	f7fe fbba 	bl	8006d58 <USBD_CDC_TransmitPacket>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}
 80085f2:	bf00      	nop
 80085f4:	200003d8 	.word	0x200003d8

080085f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	4613      	mov	r3, r2
 8008604:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800860a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800860e:	4618      	mov	r0, r3
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
	...

0800861c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	4603      	mov	r3, r0
 8008624:	6039      	str	r1, [r7, #0]
 8008626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	2212      	movs	r2, #18
 800862c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800862e:	4b03      	ldr	r3, [pc, #12]	@ (800863c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr
 800863c:	200000c8 	.word	0x200000c8

08008640 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	4603      	mov	r3, r0
 8008648:	6039      	str	r1, [r7, #0]
 800864a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	2204      	movs	r2, #4
 8008650:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008652:	4b03      	ldr	r3, [pc, #12]	@ (8008660 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008654:	4618      	mov	r0, r3
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	200000dc 	.word	0x200000dc

08008664 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	6039      	str	r1, [r7, #0]
 800866e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008670:	79fb      	ldrb	r3, [r7, #7]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d105      	bne.n	8008682 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008676:	683a      	ldr	r2, [r7, #0]
 8008678:	4907      	ldr	r1, [pc, #28]	@ (8008698 <USBD_FS_ProductStrDescriptor+0x34>)
 800867a:	4808      	ldr	r0, [pc, #32]	@ (800869c <USBD_FS_ProductStrDescriptor+0x38>)
 800867c:	f7ff fdf8 	bl	8008270 <USBD_GetString>
 8008680:	e004      	b.n	800868c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	4904      	ldr	r1, [pc, #16]	@ (8008698 <USBD_FS_ProductStrDescriptor+0x34>)
 8008686:	4805      	ldr	r0, [pc, #20]	@ (800869c <USBD_FS_ProductStrDescriptor+0x38>)
 8008688:	f7ff fdf2 	bl	8008270 <USBD_GetString>
  }
  return USBD_StrDesc;
 800868c:	4b02      	ldr	r3, [pc, #8]	@ (8008698 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800868e:	4618      	mov	r0, r3
 8008690:	3708      	adds	r7, #8
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	200016b4 	.word	0x200016b4
 800869c:	0800c9d8 	.word	0x0800c9d8

080086a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	6039      	str	r1, [r7, #0]
 80086aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086ac:	683a      	ldr	r2, [r7, #0]
 80086ae:	4904      	ldr	r1, [pc, #16]	@ (80086c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086b0:	4804      	ldr	r0, [pc, #16]	@ (80086c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086b2:	f7ff fddd 	bl	8008270 <USBD_GetString>
  return USBD_StrDesc;
 80086b6:	4b02      	ldr	r3, [pc, #8]	@ (80086c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	200016b4 	.word	0x200016b4
 80086c4:	0800c9f0 	.word	0x0800c9f0

080086c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	4603      	mov	r3, r0
 80086d0:	6039      	str	r1, [r7, #0]
 80086d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	221a      	movs	r2, #26
 80086d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086da:	f000 f843 	bl	8008764 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086de:	4b02      	ldr	r3, [pc, #8]	@ (80086e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	200000e0 	.word	0x200000e0

080086ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b082      	sub	sp, #8
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086f8:	79fb      	ldrb	r3, [r7, #7]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d105      	bne.n	800870a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	4907      	ldr	r1, [pc, #28]	@ (8008720 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008702:	4808      	ldr	r0, [pc, #32]	@ (8008724 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008704:	f7ff fdb4 	bl	8008270 <USBD_GetString>
 8008708:	e004      	b.n	8008714 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4904      	ldr	r1, [pc, #16]	@ (8008720 <USBD_FS_ConfigStrDescriptor+0x34>)
 800870e:	4805      	ldr	r0, [pc, #20]	@ (8008724 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008710:	f7ff fdae 	bl	8008270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008714:	4b02      	ldr	r3, [pc, #8]	@ (8008720 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	200016b4 	.word	0x200016b4
 8008724:	0800ca04 	.word	0x0800ca04

08008728 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	6039      	str	r1, [r7, #0]
 8008732:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d105      	bne.n	8008746 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800873a:	683a      	ldr	r2, [r7, #0]
 800873c:	4907      	ldr	r1, [pc, #28]	@ (800875c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800873e:	4808      	ldr	r0, [pc, #32]	@ (8008760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008740:	f7ff fd96 	bl	8008270 <USBD_GetString>
 8008744:	e004      	b.n	8008750 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4904      	ldr	r1, [pc, #16]	@ (800875c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800874a:	4805      	ldr	r0, [pc, #20]	@ (8008760 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800874c:	f7ff fd90 	bl	8008270 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008750:	4b02      	ldr	r3, [pc, #8]	@ (800875c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200016b4 	.word	0x200016b4
 8008760:	0800ca10 	.word	0x0800ca10

08008764 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800876a:	4b0f      	ldr	r3, [pc, #60]	@ (80087a8 <Get_SerialNum+0x44>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008770:	4b0e      	ldr	r3, [pc, #56]	@ (80087ac <Get_SerialNum+0x48>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008776:	4b0e      	ldr	r3, [pc, #56]	@ (80087b0 <Get_SerialNum+0x4c>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4413      	add	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d009      	beq.n	800879e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800878a:	2208      	movs	r2, #8
 800878c:	4909      	ldr	r1, [pc, #36]	@ (80087b4 <Get_SerialNum+0x50>)
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f814 	bl	80087bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008794:	2204      	movs	r2, #4
 8008796:	4908      	ldr	r1, [pc, #32]	@ (80087b8 <Get_SerialNum+0x54>)
 8008798:	68b8      	ldr	r0, [r7, #8]
 800879a:	f000 f80f 	bl	80087bc <IntToUnicode>
  }
}
 800879e:	bf00      	nop
 80087a0:	3710      	adds	r7, #16
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	bf00      	nop
 80087a8:	1fff7a10 	.word	0x1fff7a10
 80087ac:	1fff7a14 	.word	0x1fff7a14
 80087b0:	1fff7a18 	.word	0x1fff7a18
 80087b4:	200000e2 	.word	0x200000e2
 80087b8:	200000f2 	.word	0x200000f2

080087bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087bc:	b480      	push	{r7}
 80087be:	b087      	sub	sp, #28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087ce:	2300      	movs	r3, #0
 80087d0:	75fb      	strb	r3, [r7, #23]
 80087d2:	e027      	b.n	8008824 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	0f1b      	lsrs	r3, r3, #28
 80087d8:	2b09      	cmp	r3, #9
 80087da:	d80b      	bhi.n	80087f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	0f1b      	lsrs	r3, r3, #28
 80087e0:	b2da      	uxtb	r2, r3
 80087e2:	7dfb      	ldrb	r3, [r7, #23]
 80087e4:	005b      	lsls	r3, r3, #1
 80087e6:	4619      	mov	r1, r3
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	440b      	add	r3, r1
 80087ec:	3230      	adds	r2, #48	@ 0x30
 80087ee:	b2d2      	uxtb	r2, r2
 80087f0:	701a      	strb	r2, [r3, #0]
 80087f2:	e00a      	b.n	800880a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	0f1b      	lsrs	r3, r3, #28
 80087f8:	b2da      	uxtb	r2, r3
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	005b      	lsls	r3, r3, #1
 80087fe:	4619      	mov	r1, r3
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	440b      	add	r3, r1
 8008804:	3237      	adds	r2, #55	@ 0x37
 8008806:	b2d2      	uxtb	r2, r2
 8008808:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	3301      	adds	r3, #1
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	4413      	add	r3, r2
 800881a:	2200      	movs	r2, #0
 800881c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	3301      	adds	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
 8008824:	7dfa      	ldrb	r2, [r7, #23]
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	429a      	cmp	r2, r3
 800882a:	d3d3      	bcc.n	80087d4 <IntToUnicode+0x18>
  }
}
 800882c:	bf00      	nop
 800882e:	bf00      	nop
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
	...

0800883c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b08a      	sub	sp, #40	@ 0x28
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008844:	f107 0314 	add.w	r3, r7, #20
 8008848:	2200      	movs	r2, #0
 800884a:	601a      	str	r2, [r3, #0]
 800884c:	605a      	str	r2, [r3, #4]
 800884e:	609a      	str	r2, [r3, #8]
 8008850:	60da      	str	r2, [r3, #12]
 8008852:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800885c:	d13a      	bne.n	80088d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800885e:	2300      	movs	r3, #0
 8008860:	613b      	str	r3, [r7, #16]
 8008862:	4b1e      	ldr	r3, [pc, #120]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008866:	4a1d      	ldr	r2, [pc, #116]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 8008868:	f043 0301 	orr.w	r3, r3, #1
 800886c:	6313      	str	r3, [r2, #48]	@ 0x30
 800886e:	4b1b      	ldr	r3, [pc, #108]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 8008870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	613b      	str	r3, [r7, #16]
 8008878:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800887a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800887e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008880:	2302      	movs	r3, #2
 8008882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008884:	2300      	movs	r3, #0
 8008886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008888:	2303      	movs	r3, #3
 800888a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800888c:	230a      	movs	r3, #10
 800888e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008890:	f107 0314 	add.w	r3, r7, #20
 8008894:	4619      	mov	r1, r3
 8008896:	4812      	ldr	r0, [pc, #72]	@ (80088e0 <HAL_PCD_MspInit+0xa4>)
 8008898:	f7f9 fdd8 	bl	800244c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800889c:	4b0f      	ldr	r3, [pc, #60]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 800889e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a0:	4a0e      	ldr	r2, [pc, #56]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 80088a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80088a8:	2300      	movs	r3, #0
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	4b0b      	ldr	r3, [pc, #44]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 80088ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b0:	4a0a      	ldr	r2, [pc, #40]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 80088b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80088b8:	4b08      	ldr	r3, [pc, #32]	@ (80088dc <HAL_PCD_MspInit+0xa0>)
 80088ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088c4:	2200      	movs	r2, #0
 80088c6:	2100      	movs	r1, #0
 80088c8:	2043      	movs	r0, #67	@ 0x43
 80088ca:	f7f9 fd88 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088ce:	2043      	movs	r0, #67	@ 0x43
 80088d0:	f7f9 fda1 	bl	8002416 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088d4:	bf00      	nop
 80088d6:	3728      	adds	r7, #40	@ 0x28
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	40023800 	.word	0x40023800
 80088e0:	40020000 	.word	0x40020000

080088e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f7fe fb55 	bl	8006faa <USBD_LL_SetupStage>
}
 8008900:	bf00      	nop
 8008902:	3708      	adds	r7, #8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800891a:	78fa      	ldrb	r2, [r7, #3]
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	78fb      	ldrb	r3, [r7, #3]
 8008930:	4619      	mov	r1, r3
 8008932:	f7fe fb8f 	bl	8007054 <USBD_LL_DataOutStage>
}
 8008936:	bf00      	nop
 8008938:	3708      	adds	r7, #8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}

0800893e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b082      	sub	sp, #8
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	460b      	mov	r3, r1
 8008948:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008950:	78fa      	ldrb	r2, [r7, #3]
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	4613      	mov	r3, r2
 8008956:	00db      	lsls	r3, r3, #3
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	440b      	add	r3, r1
 800895e:	3320      	adds	r3, #32
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	4619      	mov	r1, r3
 8008966:	f7fe fc28 	bl	80071ba <USBD_LL_DataInStage>
}
 800896a:	bf00      	nop
 800896c:	3708      	adds	r7, #8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b082      	sub	sp, #8
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008980:	4618      	mov	r0, r3
 8008982:	f7fe fd62 	bl	800744a <USBD_LL_SOF>
}
 8008986:	bf00      	nop
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b084      	sub	sp, #16
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008996:	2301      	movs	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	79db      	ldrb	r3, [r3, #7]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d001      	beq.n	80089a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80089a2:	f7f8 fceb 	bl	800137c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089ac:	7bfa      	ldrb	r2, [r7, #15]
 80089ae:	4611      	mov	r1, r2
 80089b0:	4618      	mov	r0, r3
 80089b2:	f7fe fd06 	bl	80073c2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fcae 	bl	800731e <USBD_LL_Reset>
}
 80089c2:	bf00      	nop
 80089c4:	3710      	adds	r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
	...

080089cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd01 	bl	80073e2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6812      	ldr	r2, [r2, #0]
 80089ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7adb      	ldrb	r3, [r3, #11]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a00:	4b04      	ldr	r3, [pc, #16]	@ (8008a14 <HAL_PCD_SuspendCallback+0x48>)
 8008a02:	691b      	ldr	r3, [r3, #16]
 8008a04:	4a03      	ldr	r2, [pc, #12]	@ (8008a14 <HAL_PCD_SuspendCallback+0x48>)
 8008a06:	f043 0306 	orr.w	r3, r3, #6
 8008a0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}
 8008a14:	e000ed00 	.word	0xe000ed00

08008a18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fe fcf7 	bl	800741a <USBD_LL_Resume>
}
 8008a2c:	bf00      	nop
 8008a2e:	3708      	adds	r7, #8
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a46:	78fa      	ldrb	r2, [r7, #3]
 8008a48:	4611      	mov	r1, r2
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe fd4f 	bl	80074ee <USBD_LL_IsoOUTIncomplete>
}
 8008a50:	bf00      	nop
 8008a52:	3708      	adds	r7, #8
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}

08008a58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	460b      	mov	r3, r1
 8008a62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fe fd0b 	bl	800748a <USBD_LL_IsoINIncomplete>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fd61 	bl	8007552 <USBD_LL_DevConnected>
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b082      	sub	sp, #8
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fe fd5e 	bl	8007568 <USBD_LL_DevDisconnected>
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d13c      	bne.n	8008b3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ac4:	4a20      	ldr	r2, [pc, #128]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a1e      	ldr	r2, [pc, #120]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008ad0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008ad6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ada:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008adc:	4b1a      	ldr	r3, [pc, #104]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008ade:	2204      	movs	r2, #4
 8008ae0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ae2:	4b19      	ldr	r3, [pc, #100]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ae8:	4b17      	ldr	r3, [pc, #92]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008aea:	2200      	movs	r2, #0
 8008aec:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008aee:	4b16      	ldr	r3, [pc, #88]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008af0:	2202      	movs	r2, #2
 8008af2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008af4:	4b14      	ldr	r3, [pc, #80]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008af6:	2200      	movs	r2, #0
 8008af8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008afa:	4b13      	ldr	r3, [pc, #76]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008b00:	4b11      	ldr	r3, [pc, #68]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008b06:	4b10      	ldr	r3, [pc, #64]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008b08:	2200      	movs	r2, #0
 8008b0a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b12:	480d      	ldr	r0, [pc, #52]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008b14:	f7fa faef 	bl	80030f6 <HAL_PCD_Init>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b1e:	f7f8 fc2d 	bl	800137c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b22:	2180      	movs	r1, #128	@ 0x80
 8008b24:	4808      	ldr	r0, [pc, #32]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008b26:	f7fb fd1a 	bl	800455e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b2a:	2240      	movs	r2, #64	@ 0x40
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4806      	ldr	r0, [pc, #24]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008b30:	f7fb fcce 	bl	80044d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b34:	2280      	movs	r2, #128	@ 0x80
 8008b36:	2101      	movs	r1, #1
 8008b38:	4803      	ldr	r0, [pc, #12]	@ (8008b48 <USBD_LL_Init+0x94>)
 8008b3a:	f7fb fcc9 	bl	80044d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	200018b4 	.word	0x200018b4

08008b4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b54:	2300      	movs	r3, #0
 8008b56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fa fbd6 	bl	8003314 <HAL_PCD_Start>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 f942 	bl	8008df8 <USBD_Get_USB_Status>
 8008b74:	4603      	mov	r3, r0
 8008b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
 8008b8a:	4608      	mov	r0, r1
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	461a      	mov	r2, r3
 8008b90:	4603      	mov	r3, r0
 8008b92:	70fb      	strb	r3, [r7, #3]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70bb      	strb	r3, [r7, #2]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008baa:	78bb      	ldrb	r3, [r7, #2]
 8008bac:	883a      	ldrh	r2, [r7, #0]
 8008bae:	78f9      	ldrb	r1, [r7, #3]
 8008bb0:	f7fb f8aa 	bl	8003d08 <HAL_PCD_EP_Open>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f000 f91c 	bl	8008df8 <USBD_Get_USB_Status>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	460b      	mov	r3, r1
 8008bd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bde:	2300      	movs	r3, #0
 8008be0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008be8:	78fa      	ldrb	r2, [r7, #3]
 8008bea:	4611      	mov	r1, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fb f8f3 	bl	8003dd8 <HAL_PCD_EP_Close>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 f8fd 	bl	8008df8 <USBD_Get_USB_Status>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	4611      	mov	r1, r2
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fb f9ab 	bl	8003f86 <HAL_PCD_EP_SetStall>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 f8de 	bl	8008df8 <USBD_Get_USB_Status>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	460b      	mov	r3, r1
 8008c54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	4611      	mov	r1, r2
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fb f9ef 	bl	800404c <HAL_PCD_EP_ClrStall>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 f8bf 	bl	8008df8 <USBD_Get_USB_Status>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	460b      	mov	r3, r1
 8008c92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da0b      	bge.n	8008cbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	4613      	mov	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	3316      	adds	r3, #22
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	e00b      	b.n	8008cd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cc2:	68f9      	ldr	r1, [r7, #12]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	4413      	add	r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008cd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cfa:	78fa      	ldrb	r2, [r7, #3]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f7fa ffde 	bl	8003cc0 <HAL_PCD_SetAddress>
 8008d04:	4603      	mov	r3, r0
 8008d06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f000 f874 	bl	8008df8 <USBD_Get_USB_Status>
 8008d10:	4603      	mov	r3, r0
 8008d12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b086      	sub	sp, #24
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	60f8      	str	r0, [r7, #12]
 8008d26:	607a      	str	r2, [r7, #4]
 8008d28:	603b      	str	r3, [r7, #0]
 8008d2a:	460b      	mov	r3, r1
 8008d2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d3c:	7af9      	ldrb	r1, [r7, #11]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	f7fb f8e6 	bl	8003f12 <HAL_PCD_EP_Transmit>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f000 f853 	bl	8008df8 <USBD_Get_USB_Status>
 8008d52:	4603      	mov	r3, r0
 8008d54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d56:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3718      	adds	r7, #24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	607a      	str	r2, [r7, #4]
 8008d6a:	603b      	str	r3, [r7, #0]
 8008d6c:	460b      	mov	r3, r1
 8008d6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d7e:	7af9      	ldrb	r1, [r7, #11]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	f7fb f872 	bl	8003e6c <HAL_PCD_EP_Receive>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f000 f832 	bl	8008df8 <USBD_Get_USB_Status>
 8008d94:	4603      	mov	r3, r0
 8008d96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d98:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3718      	adds	r7, #24
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
 8008daa:	460b      	mov	r3, r1
 8008dac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008db4:	78fa      	ldrb	r2, [r7, #3]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fb f892 	bl	8003ee2 <HAL_PCD_EP_GetRxCount>
 8008dbe:	4603      	mov	r3, r0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008dd0:	4b03      	ldr	r3, [pc, #12]	@ (8008de0 <USBD_static_malloc+0x18>)
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	370c      	adds	r7, #12
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	20001d98 	.word	0x20001d98

08008de4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]

}
 8008dec:	bf00      	nop
 8008dee:	370c      	adds	r7, #12
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr

08008df8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b085      	sub	sp, #20
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d817      	bhi.n	8008e3c <USBD_Get_USB_Status+0x44>
 8008e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <USBD_Get_USB_Status+0x1c>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e25 	.word	0x08008e25
 8008e18:	08008e2b 	.word	0x08008e2b
 8008e1c:	08008e31 	.word	0x08008e31
 8008e20:	08008e37 	.word	0x08008e37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e24:	2300      	movs	r3, #0
 8008e26:	73fb      	strb	r3, [r7, #15]
    break;
 8008e28:	e00b      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2e:	e008      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e005      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e36:	2303      	movs	r3, #3
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	e002      	b.n	8008e42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	bf00      	nop
  }
  return usb_status;
 8008e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <__cvt>:
 8008e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e54:	ec57 6b10 	vmov	r6, r7, d0
 8008e58:	2f00      	cmp	r7, #0
 8008e5a:	460c      	mov	r4, r1
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	463b      	mov	r3, r7
 8008e60:	bfbb      	ittet	lt
 8008e62:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008e66:	461f      	movlt	r7, r3
 8008e68:	2300      	movge	r3, #0
 8008e6a:	232d      	movlt	r3, #45	@ 0x2d
 8008e6c:	700b      	strb	r3, [r1, #0]
 8008e6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e70:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008e74:	4691      	mov	r9, r2
 8008e76:	f023 0820 	bic.w	r8, r3, #32
 8008e7a:	bfbc      	itt	lt
 8008e7c:	4632      	movlt	r2, r6
 8008e7e:	4616      	movlt	r6, r2
 8008e80:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e84:	d005      	beq.n	8008e92 <__cvt+0x42>
 8008e86:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e8a:	d100      	bne.n	8008e8e <__cvt+0x3e>
 8008e8c:	3401      	adds	r4, #1
 8008e8e:	2102      	movs	r1, #2
 8008e90:	e000      	b.n	8008e94 <__cvt+0x44>
 8008e92:	2103      	movs	r1, #3
 8008e94:	ab03      	add	r3, sp, #12
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	ab02      	add	r3, sp, #8
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	ec47 6b10 	vmov	d0, r6, r7
 8008ea0:	4653      	mov	r3, sl
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	f000 fe5c 	bl	8009b60 <_dtoa_r>
 8008ea8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008eac:	4605      	mov	r5, r0
 8008eae:	d119      	bne.n	8008ee4 <__cvt+0x94>
 8008eb0:	f019 0f01 	tst.w	r9, #1
 8008eb4:	d00e      	beq.n	8008ed4 <__cvt+0x84>
 8008eb6:	eb00 0904 	add.w	r9, r0, r4
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	4639      	mov	r1, r7
 8008ec2:	f7f7 fe09 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ec6:	b108      	cbz	r0, 8008ecc <__cvt+0x7c>
 8008ec8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ecc:	2230      	movs	r2, #48	@ 0x30
 8008ece:	9b03      	ldr	r3, [sp, #12]
 8008ed0:	454b      	cmp	r3, r9
 8008ed2:	d31e      	bcc.n	8008f12 <__cvt+0xc2>
 8008ed4:	9b03      	ldr	r3, [sp, #12]
 8008ed6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ed8:	1b5b      	subs	r3, r3, r5
 8008eda:	4628      	mov	r0, r5
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	b004      	add	sp, #16
 8008ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ee4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ee8:	eb00 0904 	add.w	r9, r0, r4
 8008eec:	d1e5      	bne.n	8008eba <__cvt+0x6a>
 8008eee:	7803      	ldrb	r3, [r0, #0]
 8008ef0:	2b30      	cmp	r3, #48	@ 0x30
 8008ef2:	d10a      	bne.n	8008f0a <__cvt+0xba>
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	4639      	mov	r1, r7
 8008efc:	f7f7 fdec 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f00:	b918      	cbnz	r0, 8008f0a <__cvt+0xba>
 8008f02:	f1c4 0401 	rsb	r4, r4, #1
 8008f06:	f8ca 4000 	str.w	r4, [sl]
 8008f0a:	f8da 3000 	ldr.w	r3, [sl]
 8008f0e:	4499      	add	r9, r3
 8008f10:	e7d3      	b.n	8008eba <__cvt+0x6a>
 8008f12:	1c59      	adds	r1, r3, #1
 8008f14:	9103      	str	r1, [sp, #12]
 8008f16:	701a      	strb	r2, [r3, #0]
 8008f18:	e7d9      	b.n	8008ece <__cvt+0x7e>

08008f1a <__exponent>:
 8008f1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	bfba      	itte	lt
 8008f20:	4249      	neglt	r1, r1
 8008f22:	232d      	movlt	r3, #45	@ 0x2d
 8008f24:	232b      	movge	r3, #43	@ 0x2b
 8008f26:	2909      	cmp	r1, #9
 8008f28:	7002      	strb	r2, [r0, #0]
 8008f2a:	7043      	strb	r3, [r0, #1]
 8008f2c:	dd29      	ble.n	8008f82 <__exponent+0x68>
 8008f2e:	f10d 0307 	add.w	r3, sp, #7
 8008f32:	461d      	mov	r5, r3
 8008f34:	270a      	movs	r7, #10
 8008f36:	461a      	mov	r2, r3
 8008f38:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f3c:	fb07 1416 	mls	r4, r7, r6, r1
 8008f40:	3430      	adds	r4, #48	@ 0x30
 8008f42:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f46:	460c      	mov	r4, r1
 8008f48:	2c63      	cmp	r4, #99	@ 0x63
 8008f4a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f4e:	4631      	mov	r1, r6
 8008f50:	dcf1      	bgt.n	8008f36 <__exponent+0x1c>
 8008f52:	3130      	adds	r1, #48	@ 0x30
 8008f54:	1e94      	subs	r4, r2, #2
 8008f56:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f5a:	1c41      	adds	r1, r0, #1
 8008f5c:	4623      	mov	r3, r4
 8008f5e:	42ab      	cmp	r3, r5
 8008f60:	d30a      	bcc.n	8008f78 <__exponent+0x5e>
 8008f62:	f10d 0309 	add.w	r3, sp, #9
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	42ac      	cmp	r4, r5
 8008f6a:	bf88      	it	hi
 8008f6c:	2300      	movhi	r3, #0
 8008f6e:	3302      	adds	r3, #2
 8008f70:	4403      	add	r3, r0
 8008f72:	1a18      	subs	r0, r3, r0
 8008f74:	b003      	add	sp, #12
 8008f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f78:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f7c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f80:	e7ed      	b.n	8008f5e <__exponent+0x44>
 8008f82:	2330      	movs	r3, #48	@ 0x30
 8008f84:	3130      	adds	r1, #48	@ 0x30
 8008f86:	7083      	strb	r3, [r0, #2]
 8008f88:	70c1      	strb	r1, [r0, #3]
 8008f8a:	1d03      	adds	r3, r0, #4
 8008f8c:	e7f1      	b.n	8008f72 <__exponent+0x58>
	...

08008f90 <_printf_float>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	b08d      	sub	sp, #52	@ 0x34
 8008f96:	460c      	mov	r4, r1
 8008f98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	461f      	mov	r7, r3
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	f000 fcdb 	bl	800995c <_localeconv_r>
 8008fa6:	6803      	ldr	r3, [r0, #0]
 8008fa8:	9304      	str	r3, [sp, #16]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7f7 f968 	bl	8000280 <strlen>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	3307      	adds	r3, #7
 8008fbc:	f023 0307 	bic.w	r3, r3, #7
 8008fc0:	f103 0208 	add.w	r2, r3, #8
 8008fc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008fc8:	f8d4 b000 	ldr.w	fp, [r4]
 8008fcc:	f8c8 2000 	str.w	r2, [r8]
 8008fd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008fd8:	9307      	str	r3, [sp, #28]
 8008fda:	f8cd 8018 	str.w	r8, [sp, #24]
 8008fde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008fe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008fe6:	4b9c      	ldr	r3, [pc, #624]	@ (8009258 <_printf_float+0x2c8>)
 8008fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fec:	f7f7 fda6 	bl	8000b3c <__aeabi_dcmpun>
 8008ff0:	bb70      	cbnz	r0, 8009050 <_printf_float+0xc0>
 8008ff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ff6:	4b98      	ldr	r3, [pc, #608]	@ (8009258 <_printf_float+0x2c8>)
 8008ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ffc:	f7f7 fd80 	bl	8000b00 <__aeabi_dcmple>
 8009000:	bb30      	cbnz	r0, 8009050 <_printf_float+0xc0>
 8009002:	2200      	movs	r2, #0
 8009004:	2300      	movs	r3, #0
 8009006:	4640      	mov	r0, r8
 8009008:	4649      	mov	r1, r9
 800900a:	f7f7 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800900e:	b110      	cbz	r0, 8009016 <_printf_float+0x86>
 8009010:	232d      	movs	r3, #45	@ 0x2d
 8009012:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009016:	4a91      	ldr	r2, [pc, #580]	@ (800925c <_printf_float+0x2cc>)
 8009018:	4b91      	ldr	r3, [pc, #580]	@ (8009260 <_printf_float+0x2d0>)
 800901a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800901e:	bf94      	ite	ls
 8009020:	4690      	movls	r8, r2
 8009022:	4698      	movhi	r8, r3
 8009024:	2303      	movs	r3, #3
 8009026:	6123      	str	r3, [r4, #16]
 8009028:	f02b 0304 	bic.w	r3, fp, #4
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	9700      	str	r7, [sp, #0]
 8009034:	4633      	mov	r3, r6
 8009036:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009038:	4621      	mov	r1, r4
 800903a:	4628      	mov	r0, r5
 800903c:	f000 f9d2 	bl	80093e4 <_printf_common>
 8009040:	3001      	adds	r0, #1
 8009042:	f040 808d 	bne.w	8009160 <_printf_float+0x1d0>
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	b00d      	add	sp, #52	@ 0x34
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fd70 	bl	8000b3c <__aeabi_dcmpun>
 800905c:	b140      	cbz	r0, 8009070 <_printf_float+0xe0>
 800905e:	464b      	mov	r3, r9
 8009060:	2b00      	cmp	r3, #0
 8009062:	bfbc      	itt	lt
 8009064:	232d      	movlt	r3, #45	@ 0x2d
 8009066:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800906a:	4a7e      	ldr	r2, [pc, #504]	@ (8009264 <_printf_float+0x2d4>)
 800906c:	4b7e      	ldr	r3, [pc, #504]	@ (8009268 <_printf_float+0x2d8>)
 800906e:	e7d4      	b.n	800901a <_printf_float+0x8a>
 8009070:	6863      	ldr	r3, [r4, #4]
 8009072:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009076:	9206      	str	r2, [sp, #24]
 8009078:	1c5a      	adds	r2, r3, #1
 800907a:	d13b      	bne.n	80090f4 <_printf_float+0x164>
 800907c:	2306      	movs	r3, #6
 800907e:	6063      	str	r3, [r4, #4]
 8009080:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009084:	2300      	movs	r3, #0
 8009086:	6022      	str	r2, [r4, #0]
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	ab0a      	add	r3, sp, #40	@ 0x28
 800908c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009090:	ab09      	add	r3, sp, #36	@ 0x24
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	6861      	ldr	r1, [r4, #4]
 8009096:	ec49 8b10 	vmov	d0, r8, r9
 800909a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800909e:	4628      	mov	r0, r5
 80090a0:	f7ff fed6 	bl	8008e50 <__cvt>
 80090a4:	9b06      	ldr	r3, [sp, #24]
 80090a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80090a8:	2b47      	cmp	r3, #71	@ 0x47
 80090aa:	4680      	mov	r8, r0
 80090ac:	d129      	bne.n	8009102 <_printf_float+0x172>
 80090ae:	1cc8      	adds	r0, r1, #3
 80090b0:	db02      	blt.n	80090b8 <_printf_float+0x128>
 80090b2:	6863      	ldr	r3, [r4, #4]
 80090b4:	4299      	cmp	r1, r3
 80090b6:	dd41      	ble.n	800913c <_printf_float+0x1ac>
 80090b8:	f1aa 0a02 	sub.w	sl, sl, #2
 80090bc:	fa5f fa8a 	uxtb.w	sl, sl
 80090c0:	3901      	subs	r1, #1
 80090c2:	4652      	mov	r2, sl
 80090c4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090c8:	9109      	str	r1, [sp, #36]	@ 0x24
 80090ca:	f7ff ff26 	bl	8008f1a <__exponent>
 80090ce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80090d0:	1813      	adds	r3, r2, r0
 80090d2:	2a01      	cmp	r2, #1
 80090d4:	4681      	mov	r9, r0
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	dc02      	bgt.n	80090e0 <_printf_float+0x150>
 80090da:	6822      	ldr	r2, [r4, #0]
 80090dc:	07d2      	lsls	r2, r2, #31
 80090de:	d501      	bpl.n	80090e4 <_printf_float+0x154>
 80090e0:	3301      	adds	r3, #1
 80090e2:	6123      	str	r3, [r4, #16]
 80090e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d0a2      	beq.n	8009032 <_printf_float+0xa2>
 80090ec:	232d      	movs	r3, #45	@ 0x2d
 80090ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f2:	e79e      	b.n	8009032 <_printf_float+0xa2>
 80090f4:	9a06      	ldr	r2, [sp, #24]
 80090f6:	2a47      	cmp	r2, #71	@ 0x47
 80090f8:	d1c2      	bne.n	8009080 <_printf_float+0xf0>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d1c0      	bne.n	8009080 <_printf_float+0xf0>
 80090fe:	2301      	movs	r3, #1
 8009100:	e7bd      	b.n	800907e <_printf_float+0xee>
 8009102:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009106:	d9db      	bls.n	80090c0 <_printf_float+0x130>
 8009108:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800910c:	d118      	bne.n	8009140 <_printf_float+0x1b0>
 800910e:	2900      	cmp	r1, #0
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	dd0b      	ble.n	800912c <_printf_float+0x19c>
 8009114:	6121      	str	r1, [r4, #16]
 8009116:	b913      	cbnz	r3, 800911e <_printf_float+0x18e>
 8009118:	6822      	ldr	r2, [r4, #0]
 800911a:	07d0      	lsls	r0, r2, #31
 800911c:	d502      	bpl.n	8009124 <_printf_float+0x194>
 800911e:	3301      	adds	r3, #1
 8009120:	440b      	add	r3, r1
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009126:	f04f 0900 	mov.w	r9, #0
 800912a:	e7db      	b.n	80090e4 <_printf_float+0x154>
 800912c:	b913      	cbnz	r3, 8009134 <_printf_float+0x1a4>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	07d2      	lsls	r2, r2, #31
 8009132:	d501      	bpl.n	8009138 <_printf_float+0x1a8>
 8009134:	3302      	adds	r3, #2
 8009136:	e7f4      	b.n	8009122 <_printf_float+0x192>
 8009138:	2301      	movs	r3, #1
 800913a:	e7f2      	b.n	8009122 <_printf_float+0x192>
 800913c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009140:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009142:	4299      	cmp	r1, r3
 8009144:	db05      	blt.n	8009152 <_printf_float+0x1c2>
 8009146:	6823      	ldr	r3, [r4, #0]
 8009148:	6121      	str	r1, [r4, #16]
 800914a:	07d8      	lsls	r0, r3, #31
 800914c:	d5ea      	bpl.n	8009124 <_printf_float+0x194>
 800914e:	1c4b      	adds	r3, r1, #1
 8009150:	e7e7      	b.n	8009122 <_printf_float+0x192>
 8009152:	2900      	cmp	r1, #0
 8009154:	bfd4      	ite	le
 8009156:	f1c1 0202 	rsble	r2, r1, #2
 800915a:	2201      	movgt	r2, #1
 800915c:	4413      	add	r3, r2
 800915e:	e7e0      	b.n	8009122 <_printf_float+0x192>
 8009160:	6823      	ldr	r3, [r4, #0]
 8009162:	055a      	lsls	r2, r3, #21
 8009164:	d407      	bmi.n	8009176 <_printf_float+0x1e6>
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	4642      	mov	r2, r8
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	d12b      	bne.n	80091cc <_printf_float+0x23c>
 8009174:	e767      	b.n	8009046 <_printf_float+0xb6>
 8009176:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800917a:	f240 80dd 	bls.w	8009338 <_printf_float+0x3a8>
 800917e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009182:	2200      	movs	r2, #0
 8009184:	2300      	movs	r3, #0
 8009186:	f7f7 fca7 	bl	8000ad8 <__aeabi_dcmpeq>
 800918a:	2800      	cmp	r0, #0
 800918c:	d033      	beq.n	80091f6 <_printf_float+0x266>
 800918e:	4a37      	ldr	r2, [pc, #220]	@ (800926c <_printf_float+0x2dc>)
 8009190:	2301      	movs	r3, #1
 8009192:	4631      	mov	r1, r6
 8009194:	4628      	mov	r0, r5
 8009196:	47b8      	blx	r7
 8009198:	3001      	adds	r0, #1
 800919a:	f43f af54 	beq.w	8009046 <_printf_float+0xb6>
 800919e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80091a2:	4543      	cmp	r3, r8
 80091a4:	db02      	blt.n	80091ac <_printf_float+0x21c>
 80091a6:	6823      	ldr	r3, [r4, #0]
 80091a8:	07d8      	lsls	r0, r3, #31
 80091aa:	d50f      	bpl.n	80091cc <_printf_float+0x23c>
 80091ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091b0:	4631      	mov	r1, r6
 80091b2:	4628      	mov	r0, r5
 80091b4:	47b8      	blx	r7
 80091b6:	3001      	adds	r0, #1
 80091b8:	f43f af45 	beq.w	8009046 <_printf_float+0xb6>
 80091bc:	f04f 0900 	mov.w	r9, #0
 80091c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80091c4:	f104 0a1a 	add.w	sl, r4, #26
 80091c8:	45c8      	cmp	r8, r9
 80091ca:	dc09      	bgt.n	80091e0 <_printf_float+0x250>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	079b      	lsls	r3, r3, #30
 80091d0:	f100 8103 	bmi.w	80093da <_printf_float+0x44a>
 80091d4:	68e0      	ldr	r0, [r4, #12]
 80091d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091d8:	4298      	cmp	r0, r3
 80091da:	bfb8      	it	lt
 80091dc:	4618      	movlt	r0, r3
 80091de:	e734      	b.n	800904a <_printf_float+0xba>
 80091e0:	2301      	movs	r3, #1
 80091e2:	4652      	mov	r2, sl
 80091e4:	4631      	mov	r1, r6
 80091e6:	4628      	mov	r0, r5
 80091e8:	47b8      	blx	r7
 80091ea:	3001      	adds	r0, #1
 80091ec:	f43f af2b 	beq.w	8009046 <_printf_float+0xb6>
 80091f0:	f109 0901 	add.w	r9, r9, #1
 80091f4:	e7e8      	b.n	80091c8 <_printf_float+0x238>
 80091f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	dc39      	bgt.n	8009270 <_printf_float+0x2e0>
 80091fc:	4a1b      	ldr	r2, [pc, #108]	@ (800926c <_printf_float+0x2dc>)
 80091fe:	2301      	movs	r3, #1
 8009200:	4631      	mov	r1, r6
 8009202:	4628      	mov	r0, r5
 8009204:	47b8      	blx	r7
 8009206:	3001      	adds	r0, #1
 8009208:	f43f af1d 	beq.w	8009046 <_printf_float+0xb6>
 800920c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009210:	ea59 0303 	orrs.w	r3, r9, r3
 8009214:	d102      	bne.n	800921c <_printf_float+0x28c>
 8009216:	6823      	ldr	r3, [r4, #0]
 8009218:	07d9      	lsls	r1, r3, #31
 800921a:	d5d7      	bpl.n	80091cc <_printf_float+0x23c>
 800921c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009220:	4631      	mov	r1, r6
 8009222:	4628      	mov	r0, r5
 8009224:	47b8      	blx	r7
 8009226:	3001      	adds	r0, #1
 8009228:	f43f af0d 	beq.w	8009046 <_printf_float+0xb6>
 800922c:	f04f 0a00 	mov.w	sl, #0
 8009230:	f104 0b1a 	add.w	fp, r4, #26
 8009234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009236:	425b      	negs	r3, r3
 8009238:	4553      	cmp	r3, sl
 800923a:	dc01      	bgt.n	8009240 <_printf_float+0x2b0>
 800923c:	464b      	mov	r3, r9
 800923e:	e793      	b.n	8009168 <_printf_float+0x1d8>
 8009240:	2301      	movs	r3, #1
 8009242:	465a      	mov	r2, fp
 8009244:	4631      	mov	r1, r6
 8009246:	4628      	mov	r0, r5
 8009248:	47b8      	blx	r7
 800924a:	3001      	adds	r0, #1
 800924c:	f43f aefb 	beq.w	8009046 <_printf_float+0xb6>
 8009250:	f10a 0a01 	add.w	sl, sl, #1
 8009254:	e7ee      	b.n	8009234 <_printf_float+0x2a4>
 8009256:	bf00      	nop
 8009258:	7fefffff 	.word	0x7fefffff
 800925c:	0800ca38 	.word	0x0800ca38
 8009260:	0800ca3c 	.word	0x0800ca3c
 8009264:	0800ca40 	.word	0x0800ca40
 8009268:	0800ca44 	.word	0x0800ca44
 800926c:	0800ca48 	.word	0x0800ca48
 8009270:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009272:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009276:	4553      	cmp	r3, sl
 8009278:	bfa8      	it	ge
 800927a:	4653      	movge	r3, sl
 800927c:	2b00      	cmp	r3, #0
 800927e:	4699      	mov	r9, r3
 8009280:	dc36      	bgt.n	80092f0 <_printf_float+0x360>
 8009282:	f04f 0b00 	mov.w	fp, #0
 8009286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800928a:	f104 021a 	add.w	r2, r4, #26
 800928e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009290:	9306      	str	r3, [sp, #24]
 8009292:	eba3 0309 	sub.w	r3, r3, r9
 8009296:	455b      	cmp	r3, fp
 8009298:	dc31      	bgt.n	80092fe <_printf_float+0x36e>
 800929a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800929c:	459a      	cmp	sl, r3
 800929e:	dc3a      	bgt.n	8009316 <_printf_float+0x386>
 80092a0:	6823      	ldr	r3, [r4, #0]
 80092a2:	07da      	lsls	r2, r3, #31
 80092a4:	d437      	bmi.n	8009316 <_printf_float+0x386>
 80092a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092a8:	ebaa 0903 	sub.w	r9, sl, r3
 80092ac:	9b06      	ldr	r3, [sp, #24]
 80092ae:	ebaa 0303 	sub.w	r3, sl, r3
 80092b2:	4599      	cmp	r9, r3
 80092b4:	bfa8      	it	ge
 80092b6:	4699      	movge	r9, r3
 80092b8:	f1b9 0f00 	cmp.w	r9, #0
 80092bc:	dc33      	bgt.n	8009326 <_printf_float+0x396>
 80092be:	f04f 0800 	mov.w	r8, #0
 80092c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092c6:	f104 0b1a 	add.w	fp, r4, #26
 80092ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092cc:	ebaa 0303 	sub.w	r3, sl, r3
 80092d0:	eba3 0309 	sub.w	r3, r3, r9
 80092d4:	4543      	cmp	r3, r8
 80092d6:	f77f af79 	ble.w	80091cc <_printf_float+0x23c>
 80092da:	2301      	movs	r3, #1
 80092dc:	465a      	mov	r2, fp
 80092de:	4631      	mov	r1, r6
 80092e0:	4628      	mov	r0, r5
 80092e2:	47b8      	blx	r7
 80092e4:	3001      	adds	r0, #1
 80092e6:	f43f aeae 	beq.w	8009046 <_printf_float+0xb6>
 80092ea:	f108 0801 	add.w	r8, r8, #1
 80092ee:	e7ec      	b.n	80092ca <_printf_float+0x33a>
 80092f0:	4642      	mov	r2, r8
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	d1c2      	bne.n	8009282 <_printf_float+0x2f2>
 80092fc:	e6a3      	b.n	8009046 <_printf_float+0xb6>
 80092fe:	2301      	movs	r3, #1
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	9206      	str	r2, [sp, #24]
 8009306:	47b8      	blx	r7
 8009308:	3001      	adds	r0, #1
 800930a:	f43f ae9c 	beq.w	8009046 <_printf_float+0xb6>
 800930e:	9a06      	ldr	r2, [sp, #24]
 8009310:	f10b 0b01 	add.w	fp, fp, #1
 8009314:	e7bb      	b.n	800928e <_printf_float+0x2fe>
 8009316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800931a:	4631      	mov	r1, r6
 800931c:	4628      	mov	r0, r5
 800931e:	47b8      	blx	r7
 8009320:	3001      	adds	r0, #1
 8009322:	d1c0      	bne.n	80092a6 <_printf_float+0x316>
 8009324:	e68f      	b.n	8009046 <_printf_float+0xb6>
 8009326:	9a06      	ldr	r2, [sp, #24]
 8009328:	464b      	mov	r3, r9
 800932a:	4442      	add	r2, r8
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	d1c3      	bne.n	80092be <_printf_float+0x32e>
 8009336:	e686      	b.n	8009046 <_printf_float+0xb6>
 8009338:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800933c:	f1ba 0f01 	cmp.w	sl, #1
 8009340:	dc01      	bgt.n	8009346 <_printf_float+0x3b6>
 8009342:	07db      	lsls	r3, r3, #31
 8009344:	d536      	bpl.n	80093b4 <_printf_float+0x424>
 8009346:	2301      	movs	r3, #1
 8009348:	4642      	mov	r2, r8
 800934a:	4631      	mov	r1, r6
 800934c:	4628      	mov	r0, r5
 800934e:	47b8      	blx	r7
 8009350:	3001      	adds	r0, #1
 8009352:	f43f ae78 	beq.w	8009046 <_printf_float+0xb6>
 8009356:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	47b8      	blx	r7
 8009360:	3001      	adds	r0, #1
 8009362:	f43f ae70 	beq.w	8009046 <_printf_float+0xb6>
 8009366:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800936a:	2200      	movs	r2, #0
 800936c:	2300      	movs	r3, #0
 800936e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009372:	f7f7 fbb1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009376:	b9c0      	cbnz	r0, 80093aa <_printf_float+0x41a>
 8009378:	4653      	mov	r3, sl
 800937a:	f108 0201 	add.w	r2, r8, #1
 800937e:	4631      	mov	r1, r6
 8009380:	4628      	mov	r0, r5
 8009382:	47b8      	blx	r7
 8009384:	3001      	adds	r0, #1
 8009386:	d10c      	bne.n	80093a2 <_printf_float+0x412>
 8009388:	e65d      	b.n	8009046 <_printf_float+0xb6>
 800938a:	2301      	movs	r3, #1
 800938c:	465a      	mov	r2, fp
 800938e:	4631      	mov	r1, r6
 8009390:	4628      	mov	r0, r5
 8009392:	47b8      	blx	r7
 8009394:	3001      	adds	r0, #1
 8009396:	f43f ae56 	beq.w	8009046 <_printf_float+0xb6>
 800939a:	f108 0801 	add.w	r8, r8, #1
 800939e:	45d0      	cmp	r8, sl
 80093a0:	dbf3      	blt.n	800938a <_printf_float+0x3fa>
 80093a2:	464b      	mov	r3, r9
 80093a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093a8:	e6df      	b.n	800916a <_printf_float+0x1da>
 80093aa:	f04f 0800 	mov.w	r8, #0
 80093ae:	f104 0b1a 	add.w	fp, r4, #26
 80093b2:	e7f4      	b.n	800939e <_printf_float+0x40e>
 80093b4:	2301      	movs	r3, #1
 80093b6:	4642      	mov	r2, r8
 80093b8:	e7e1      	b.n	800937e <_printf_float+0x3ee>
 80093ba:	2301      	movs	r3, #1
 80093bc:	464a      	mov	r2, r9
 80093be:	4631      	mov	r1, r6
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b8      	blx	r7
 80093c4:	3001      	adds	r0, #1
 80093c6:	f43f ae3e 	beq.w	8009046 <_printf_float+0xb6>
 80093ca:	f108 0801 	add.w	r8, r8, #1
 80093ce:	68e3      	ldr	r3, [r4, #12]
 80093d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093d2:	1a5b      	subs	r3, r3, r1
 80093d4:	4543      	cmp	r3, r8
 80093d6:	dcf0      	bgt.n	80093ba <_printf_float+0x42a>
 80093d8:	e6fc      	b.n	80091d4 <_printf_float+0x244>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	f104 0919 	add.w	r9, r4, #25
 80093e2:	e7f4      	b.n	80093ce <_printf_float+0x43e>

080093e4 <_printf_common>:
 80093e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	4616      	mov	r6, r2
 80093ea:	4698      	mov	r8, r3
 80093ec:	688a      	ldr	r2, [r1, #8]
 80093ee:	690b      	ldr	r3, [r1, #16]
 80093f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80093f4:	4293      	cmp	r3, r2
 80093f6:	bfb8      	it	lt
 80093f8:	4613      	movlt	r3, r2
 80093fa:	6033      	str	r3, [r6, #0]
 80093fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009400:	4607      	mov	r7, r0
 8009402:	460c      	mov	r4, r1
 8009404:	b10a      	cbz	r2, 800940a <_printf_common+0x26>
 8009406:	3301      	adds	r3, #1
 8009408:	6033      	str	r3, [r6, #0]
 800940a:	6823      	ldr	r3, [r4, #0]
 800940c:	0699      	lsls	r1, r3, #26
 800940e:	bf42      	ittt	mi
 8009410:	6833      	ldrmi	r3, [r6, #0]
 8009412:	3302      	addmi	r3, #2
 8009414:	6033      	strmi	r3, [r6, #0]
 8009416:	6825      	ldr	r5, [r4, #0]
 8009418:	f015 0506 	ands.w	r5, r5, #6
 800941c:	d106      	bne.n	800942c <_printf_common+0x48>
 800941e:	f104 0a19 	add.w	sl, r4, #25
 8009422:	68e3      	ldr	r3, [r4, #12]
 8009424:	6832      	ldr	r2, [r6, #0]
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	42ab      	cmp	r3, r5
 800942a:	dc26      	bgt.n	800947a <_printf_common+0x96>
 800942c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009430:	6822      	ldr	r2, [r4, #0]
 8009432:	3b00      	subs	r3, #0
 8009434:	bf18      	it	ne
 8009436:	2301      	movne	r3, #1
 8009438:	0692      	lsls	r2, r2, #26
 800943a:	d42b      	bmi.n	8009494 <_printf_common+0xb0>
 800943c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009440:	4641      	mov	r1, r8
 8009442:	4638      	mov	r0, r7
 8009444:	47c8      	blx	r9
 8009446:	3001      	adds	r0, #1
 8009448:	d01e      	beq.n	8009488 <_printf_common+0xa4>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	6922      	ldr	r2, [r4, #16]
 800944e:	f003 0306 	and.w	r3, r3, #6
 8009452:	2b04      	cmp	r3, #4
 8009454:	bf02      	ittt	eq
 8009456:	68e5      	ldreq	r5, [r4, #12]
 8009458:	6833      	ldreq	r3, [r6, #0]
 800945a:	1aed      	subeq	r5, r5, r3
 800945c:	68a3      	ldr	r3, [r4, #8]
 800945e:	bf0c      	ite	eq
 8009460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009464:	2500      	movne	r5, #0
 8009466:	4293      	cmp	r3, r2
 8009468:	bfc4      	itt	gt
 800946a:	1a9b      	subgt	r3, r3, r2
 800946c:	18ed      	addgt	r5, r5, r3
 800946e:	2600      	movs	r6, #0
 8009470:	341a      	adds	r4, #26
 8009472:	42b5      	cmp	r5, r6
 8009474:	d11a      	bne.n	80094ac <_printf_common+0xc8>
 8009476:	2000      	movs	r0, #0
 8009478:	e008      	b.n	800948c <_printf_common+0xa8>
 800947a:	2301      	movs	r3, #1
 800947c:	4652      	mov	r2, sl
 800947e:	4641      	mov	r1, r8
 8009480:	4638      	mov	r0, r7
 8009482:	47c8      	blx	r9
 8009484:	3001      	adds	r0, #1
 8009486:	d103      	bne.n	8009490 <_printf_common+0xac>
 8009488:	f04f 30ff 	mov.w	r0, #4294967295
 800948c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009490:	3501      	adds	r5, #1
 8009492:	e7c6      	b.n	8009422 <_printf_common+0x3e>
 8009494:	18e1      	adds	r1, r4, r3
 8009496:	1c5a      	adds	r2, r3, #1
 8009498:	2030      	movs	r0, #48	@ 0x30
 800949a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800949e:	4422      	add	r2, r4
 80094a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094a8:	3302      	adds	r3, #2
 80094aa:	e7c7      	b.n	800943c <_printf_common+0x58>
 80094ac:	2301      	movs	r3, #1
 80094ae:	4622      	mov	r2, r4
 80094b0:	4641      	mov	r1, r8
 80094b2:	4638      	mov	r0, r7
 80094b4:	47c8      	blx	r9
 80094b6:	3001      	adds	r0, #1
 80094b8:	d0e6      	beq.n	8009488 <_printf_common+0xa4>
 80094ba:	3601      	adds	r6, #1
 80094bc:	e7d9      	b.n	8009472 <_printf_common+0x8e>
	...

080094c0 <_printf_i>:
 80094c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094c4:	7e0f      	ldrb	r7, [r1, #24]
 80094c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094c8:	2f78      	cmp	r7, #120	@ 0x78
 80094ca:	4691      	mov	r9, r2
 80094cc:	4680      	mov	r8, r0
 80094ce:	460c      	mov	r4, r1
 80094d0:	469a      	mov	sl, r3
 80094d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094d6:	d807      	bhi.n	80094e8 <_printf_i+0x28>
 80094d8:	2f62      	cmp	r7, #98	@ 0x62
 80094da:	d80a      	bhi.n	80094f2 <_printf_i+0x32>
 80094dc:	2f00      	cmp	r7, #0
 80094de:	f000 80d2 	beq.w	8009686 <_printf_i+0x1c6>
 80094e2:	2f58      	cmp	r7, #88	@ 0x58
 80094e4:	f000 80b9 	beq.w	800965a <_printf_i+0x19a>
 80094e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80094f0:	e03a      	b.n	8009568 <_printf_i+0xa8>
 80094f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80094f6:	2b15      	cmp	r3, #21
 80094f8:	d8f6      	bhi.n	80094e8 <_printf_i+0x28>
 80094fa:	a101      	add	r1, pc, #4	@ (adr r1, 8009500 <_printf_i+0x40>)
 80094fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009500:	08009559 	.word	0x08009559
 8009504:	0800956d 	.word	0x0800956d
 8009508:	080094e9 	.word	0x080094e9
 800950c:	080094e9 	.word	0x080094e9
 8009510:	080094e9 	.word	0x080094e9
 8009514:	080094e9 	.word	0x080094e9
 8009518:	0800956d 	.word	0x0800956d
 800951c:	080094e9 	.word	0x080094e9
 8009520:	080094e9 	.word	0x080094e9
 8009524:	080094e9 	.word	0x080094e9
 8009528:	080094e9 	.word	0x080094e9
 800952c:	0800966d 	.word	0x0800966d
 8009530:	08009597 	.word	0x08009597
 8009534:	08009627 	.word	0x08009627
 8009538:	080094e9 	.word	0x080094e9
 800953c:	080094e9 	.word	0x080094e9
 8009540:	0800968f 	.word	0x0800968f
 8009544:	080094e9 	.word	0x080094e9
 8009548:	08009597 	.word	0x08009597
 800954c:	080094e9 	.word	0x080094e9
 8009550:	080094e9 	.word	0x080094e9
 8009554:	0800962f 	.word	0x0800962f
 8009558:	6833      	ldr	r3, [r6, #0]
 800955a:	1d1a      	adds	r2, r3, #4
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6032      	str	r2, [r6, #0]
 8009560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009564:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009568:	2301      	movs	r3, #1
 800956a:	e09d      	b.n	80096a8 <_printf_i+0x1e8>
 800956c:	6833      	ldr	r3, [r6, #0]
 800956e:	6820      	ldr	r0, [r4, #0]
 8009570:	1d19      	adds	r1, r3, #4
 8009572:	6031      	str	r1, [r6, #0]
 8009574:	0606      	lsls	r6, r0, #24
 8009576:	d501      	bpl.n	800957c <_printf_i+0xbc>
 8009578:	681d      	ldr	r5, [r3, #0]
 800957a:	e003      	b.n	8009584 <_printf_i+0xc4>
 800957c:	0645      	lsls	r5, r0, #25
 800957e:	d5fb      	bpl.n	8009578 <_printf_i+0xb8>
 8009580:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009584:	2d00      	cmp	r5, #0
 8009586:	da03      	bge.n	8009590 <_printf_i+0xd0>
 8009588:	232d      	movs	r3, #45	@ 0x2d
 800958a:	426d      	negs	r5, r5
 800958c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009590:	4859      	ldr	r0, [pc, #356]	@ (80096f8 <_printf_i+0x238>)
 8009592:	230a      	movs	r3, #10
 8009594:	e011      	b.n	80095ba <_printf_i+0xfa>
 8009596:	6821      	ldr	r1, [r4, #0]
 8009598:	6833      	ldr	r3, [r6, #0]
 800959a:	0608      	lsls	r0, r1, #24
 800959c:	f853 5b04 	ldr.w	r5, [r3], #4
 80095a0:	d402      	bmi.n	80095a8 <_printf_i+0xe8>
 80095a2:	0649      	lsls	r1, r1, #25
 80095a4:	bf48      	it	mi
 80095a6:	b2ad      	uxthmi	r5, r5
 80095a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80095aa:	4853      	ldr	r0, [pc, #332]	@ (80096f8 <_printf_i+0x238>)
 80095ac:	6033      	str	r3, [r6, #0]
 80095ae:	bf14      	ite	ne
 80095b0:	230a      	movne	r3, #10
 80095b2:	2308      	moveq	r3, #8
 80095b4:	2100      	movs	r1, #0
 80095b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ba:	6866      	ldr	r6, [r4, #4]
 80095bc:	60a6      	str	r6, [r4, #8]
 80095be:	2e00      	cmp	r6, #0
 80095c0:	bfa2      	ittt	ge
 80095c2:	6821      	ldrge	r1, [r4, #0]
 80095c4:	f021 0104 	bicge.w	r1, r1, #4
 80095c8:	6021      	strge	r1, [r4, #0]
 80095ca:	b90d      	cbnz	r5, 80095d0 <_printf_i+0x110>
 80095cc:	2e00      	cmp	r6, #0
 80095ce:	d04b      	beq.n	8009668 <_printf_i+0x1a8>
 80095d0:	4616      	mov	r6, r2
 80095d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80095d6:	fb03 5711 	mls	r7, r3, r1, r5
 80095da:	5dc7      	ldrb	r7, [r0, r7]
 80095dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095e0:	462f      	mov	r7, r5
 80095e2:	42bb      	cmp	r3, r7
 80095e4:	460d      	mov	r5, r1
 80095e6:	d9f4      	bls.n	80095d2 <_printf_i+0x112>
 80095e8:	2b08      	cmp	r3, #8
 80095ea:	d10b      	bne.n	8009604 <_printf_i+0x144>
 80095ec:	6823      	ldr	r3, [r4, #0]
 80095ee:	07df      	lsls	r7, r3, #31
 80095f0:	d508      	bpl.n	8009604 <_printf_i+0x144>
 80095f2:	6923      	ldr	r3, [r4, #16]
 80095f4:	6861      	ldr	r1, [r4, #4]
 80095f6:	4299      	cmp	r1, r3
 80095f8:	bfde      	ittt	le
 80095fa:	2330      	movle	r3, #48	@ 0x30
 80095fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009600:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009604:	1b92      	subs	r2, r2, r6
 8009606:	6122      	str	r2, [r4, #16]
 8009608:	f8cd a000 	str.w	sl, [sp]
 800960c:	464b      	mov	r3, r9
 800960e:	aa03      	add	r2, sp, #12
 8009610:	4621      	mov	r1, r4
 8009612:	4640      	mov	r0, r8
 8009614:	f7ff fee6 	bl	80093e4 <_printf_common>
 8009618:	3001      	adds	r0, #1
 800961a:	d14a      	bne.n	80096b2 <_printf_i+0x1f2>
 800961c:	f04f 30ff 	mov.w	r0, #4294967295
 8009620:	b004      	add	sp, #16
 8009622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	f043 0320 	orr.w	r3, r3, #32
 800962c:	6023      	str	r3, [r4, #0]
 800962e:	4833      	ldr	r0, [pc, #204]	@ (80096fc <_printf_i+0x23c>)
 8009630:	2778      	movs	r7, #120	@ 0x78
 8009632:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	6831      	ldr	r1, [r6, #0]
 800963a:	061f      	lsls	r7, r3, #24
 800963c:	f851 5b04 	ldr.w	r5, [r1], #4
 8009640:	d402      	bmi.n	8009648 <_printf_i+0x188>
 8009642:	065f      	lsls	r7, r3, #25
 8009644:	bf48      	it	mi
 8009646:	b2ad      	uxthmi	r5, r5
 8009648:	6031      	str	r1, [r6, #0]
 800964a:	07d9      	lsls	r1, r3, #31
 800964c:	bf44      	itt	mi
 800964e:	f043 0320 	orrmi.w	r3, r3, #32
 8009652:	6023      	strmi	r3, [r4, #0]
 8009654:	b11d      	cbz	r5, 800965e <_printf_i+0x19e>
 8009656:	2310      	movs	r3, #16
 8009658:	e7ac      	b.n	80095b4 <_printf_i+0xf4>
 800965a:	4827      	ldr	r0, [pc, #156]	@ (80096f8 <_printf_i+0x238>)
 800965c:	e7e9      	b.n	8009632 <_printf_i+0x172>
 800965e:	6823      	ldr	r3, [r4, #0]
 8009660:	f023 0320 	bic.w	r3, r3, #32
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	e7f6      	b.n	8009656 <_printf_i+0x196>
 8009668:	4616      	mov	r6, r2
 800966a:	e7bd      	b.n	80095e8 <_printf_i+0x128>
 800966c:	6833      	ldr	r3, [r6, #0]
 800966e:	6825      	ldr	r5, [r4, #0]
 8009670:	6961      	ldr	r1, [r4, #20]
 8009672:	1d18      	adds	r0, r3, #4
 8009674:	6030      	str	r0, [r6, #0]
 8009676:	062e      	lsls	r6, r5, #24
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	d501      	bpl.n	8009680 <_printf_i+0x1c0>
 800967c:	6019      	str	r1, [r3, #0]
 800967e:	e002      	b.n	8009686 <_printf_i+0x1c6>
 8009680:	0668      	lsls	r0, r5, #25
 8009682:	d5fb      	bpl.n	800967c <_printf_i+0x1bc>
 8009684:	8019      	strh	r1, [r3, #0]
 8009686:	2300      	movs	r3, #0
 8009688:	6123      	str	r3, [r4, #16]
 800968a:	4616      	mov	r6, r2
 800968c:	e7bc      	b.n	8009608 <_printf_i+0x148>
 800968e:	6833      	ldr	r3, [r6, #0]
 8009690:	1d1a      	adds	r2, r3, #4
 8009692:	6032      	str	r2, [r6, #0]
 8009694:	681e      	ldr	r6, [r3, #0]
 8009696:	6862      	ldr	r2, [r4, #4]
 8009698:	2100      	movs	r1, #0
 800969a:	4630      	mov	r0, r6
 800969c:	f7f6 fda0 	bl	80001e0 <memchr>
 80096a0:	b108      	cbz	r0, 80096a6 <_printf_i+0x1e6>
 80096a2:	1b80      	subs	r0, r0, r6
 80096a4:	6060      	str	r0, [r4, #4]
 80096a6:	6863      	ldr	r3, [r4, #4]
 80096a8:	6123      	str	r3, [r4, #16]
 80096aa:	2300      	movs	r3, #0
 80096ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096b0:	e7aa      	b.n	8009608 <_printf_i+0x148>
 80096b2:	6923      	ldr	r3, [r4, #16]
 80096b4:	4632      	mov	r2, r6
 80096b6:	4649      	mov	r1, r9
 80096b8:	4640      	mov	r0, r8
 80096ba:	47d0      	blx	sl
 80096bc:	3001      	adds	r0, #1
 80096be:	d0ad      	beq.n	800961c <_printf_i+0x15c>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	079b      	lsls	r3, r3, #30
 80096c4:	d413      	bmi.n	80096ee <_printf_i+0x22e>
 80096c6:	68e0      	ldr	r0, [r4, #12]
 80096c8:	9b03      	ldr	r3, [sp, #12]
 80096ca:	4298      	cmp	r0, r3
 80096cc:	bfb8      	it	lt
 80096ce:	4618      	movlt	r0, r3
 80096d0:	e7a6      	b.n	8009620 <_printf_i+0x160>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4632      	mov	r2, r6
 80096d6:	4649      	mov	r1, r9
 80096d8:	4640      	mov	r0, r8
 80096da:	47d0      	blx	sl
 80096dc:	3001      	adds	r0, #1
 80096de:	d09d      	beq.n	800961c <_printf_i+0x15c>
 80096e0:	3501      	adds	r5, #1
 80096e2:	68e3      	ldr	r3, [r4, #12]
 80096e4:	9903      	ldr	r1, [sp, #12]
 80096e6:	1a5b      	subs	r3, r3, r1
 80096e8:	42ab      	cmp	r3, r5
 80096ea:	dcf2      	bgt.n	80096d2 <_printf_i+0x212>
 80096ec:	e7eb      	b.n	80096c6 <_printf_i+0x206>
 80096ee:	2500      	movs	r5, #0
 80096f0:	f104 0619 	add.w	r6, r4, #25
 80096f4:	e7f5      	b.n	80096e2 <_printf_i+0x222>
 80096f6:	bf00      	nop
 80096f8:	0800ca4a 	.word	0x0800ca4a
 80096fc:	0800ca5b 	.word	0x0800ca5b

08009700 <std>:
 8009700:	2300      	movs	r3, #0
 8009702:	b510      	push	{r4, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	e9c0 3300 	strd	r3, r3, [r0]
 800970a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800970e:	6083      	str	r3, [r0, #8]
 8009710:	8181      	strh	r1, [r0, #12]
 8009712:	6643      	str	r3, [r0, #100]	@ 0x64
 8009714:	81c2      	strh	r2, [r0, #14]
 8009716:	6183      	str	r3, [r0, #24]
 8009718:	4619      	mov	r1, r3
 800971a:	2208      	movs	r2, #8
 800971c:	305c      	adds	r0, #92	@ 0x5c
 800971e:	f000 f914 	bl	800994a <memset>
 8009722:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <std+0x58>)
 8009724:	6263      	str	r3, [r4, #36]	@ 0x24
 8009726:	4b0d      	ldr	r3, [pc, #52]	@ (800975c <std+0x5c>)
 8009728:	62a3      	str	r3, [r4, #40]	@ 0x28
 800972a:	4b0d      	ldr	r3, [pc, #52]	@ (8009760 <std+0x60>)
 800972c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800972e:	4b0d      	ldr	r3, [pc, #52]	@ (8009764 <std+0x64>)
 8009730:	6323      	str	r3, [r4, #48]	@ 0x30
 8009732:	4b0d      	ldr	r3, [pc, #52]	@ (8009768 <std+0x68>)
 8009734:	6224      	str	r4, [r4, #32]
 8009736:	429c      	cmp	r4, r3
 8009738:	d006      	beq.n	8009748 <std+0x48>
 800973a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800973e:	4294      	cmp	r4, r2
 8009740:	d002      	beq.n	8009748 <std+0x48>
 8009742:	33d0      	adds	r3, #208	@ 0xd0
 8009744:	429c      	cmp	r4, r3
 8009746:	d105      	bne.n	8009754 <std+0x54>
 8009748:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800974c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009750:	f000 b978 	b.w	8009a44 <__retarget_lock_init_recursive>
 8009754:	bd10      	pop	{r4, pc}
 8009756:	bf00      	nop
 8009758:	080098c5 	.word	0x080098c5
 800975c:	080098e7 	.word	0x080098e7
 8009760:	0800991f 	.word	0x0800991f
 8009764:	08009943 	.word	0x08009943
 8009768:	20001fb8 	.word	0x20001fb8

0800976c <stdio_exit_handler>:
 800976c:	4a02      	ldr	r2, [pc, #8]	@ (8009778 <stdio_exit_handler+0xc>)
 800976e:	4903      	ldr	r1, [pc, #12]	@ (800977c <stdio_exit_handler+0x10>)
 8009770:	4803      	ldr	r0, [pc, #12]	@ (8009780 <stdio_exit_handler+0x14>)
 8009772:	f000 b869 	b.w	8009848 <_fwalk_sglue>
 8009776:	bf00      	nop
 8009778:	200000fc 	.word	0x200000fc
 800977c:	0800b3a5 	.word	0x0800b3a5
 8009780:	2000010c 	.word	0x2000010c

08009784 <cleanup_stdio>:
 8009784:	6841      	ldr	r1, [r0, #4]
 8009786:	4b0c      	ldr	r3, [pc, #48]	@ (80097b8 <cleanup_stdio+0x34>)
 8009788:	4299      	cmp	r1, r3
 800978a:	b510      	push	{r4, lr}
 800978c:	4604      	mov	r4, r0
 800978e:	d001      	beq.n	8009794 <cleanup_stdio+0x10>
 8009790:	f001 fe08 	bl	800b3a4 <_fflush_r>
 8009794:	68a1      	ldr	r1, [r4, #8]
 8009796:	4b09      	ldr	r3, [pc, #36]	@ (80097bc <cleanup_stdio+0x38>)
 8009798:	4299      	cmp	r1, r3
 800979a:	d002      	beq.n	80097a2 <cleanup_stdio+0x1e>
 800979c:	4620      	mov	r0, r4
 800979e:	f001 fe01 	bl	800b3a4 <_fflush_r>
 80097a2:	68e1      	ldr	r1, [r4, #12]
 80097a4:	4b06      	ldr	r3, [pc, #24]	@ (80097c0 <cleanup_stdio+0x3c>)
 80097a6:	4299      	cmp	r1, r3
 80097a8:	d004      	beq.n	80097b4 <cleanup_stdio+0x30>
 80097aa:	4620      	mov	r0, r4
 80097ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097b0:	f001 bdf8 	b.w	800b3a4 <_fflush_r>
 80097b4:	bd10      	pop	{r4, pc}
 80097b6:	bf00      	nop
 80097b8:	20001fb8 	.word	0x20001fb8
 80097bc:	20002020 	.word	0x20002020
 80097c0:	20002088 	.word	0x20002088

080097c4 <global_stdio_init.part.0>:
 80097c4:	b510      	push	{r4, lr}
 80097c6:	4b0b      	ldr	r3, [pc, #44]	@ (80097f4 <global_stdio_init.part.0+0x30>)
 80097c8:	4c0b      	ldr	r4, [pc, #44]	@ (80097f8 <global_stdio_init.part.0+0x34>)
 80097ca:	4a0c      	ldr	r2, [pc, #48]	@ (80097fc <global_stdio_init.part.0+0x38>)
 80097cc:	601a      	str	r2, [r3, #0]
 80097ce:	4620      	mov	r0, r4
 80097d0:	2200      	movs	r2, #0
 80097d2:	2104      	movs	r1, #4
 80097d4:	f7ff ff94 	bl	8009700 <std>
 80097d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097dc:	2201      	movs	r2, #1
 80097de:	2109      	movs	r1, #9
 80097e0:	f7ff ff8e 	bl	8009700 <std>
 80097e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097e8:	2202      	movs	r2, #2
 80097ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097ee:	2112      	movs	r1, #18
 80097f0:	f7ff bf86 	b.w	8009700 <std>
 80097f4:	200020f0 	.word	0x200020f0
 80097f8:	20001fb8 	.word	0x20001fb8
 80097fc:	0800976d 	.word	0x0800976d

08009800 <__sfp_lock_acquire>:
 8009800:	4801      	ldr	r0, [pc, #4]	@ (8009808 <__sfp_lock_acquire+0x8>)
 8009802:	f000 b920 	b.w	8009a46 <__retarget_lock_acquire_recursive>
 8009806:	bf00      	nop
 8009808:	200020f9 	.word	0x200020f9

0800980c <__sfp_lock_release>:
 800980c:	4801      	ldr	r0, [pc, #4]	@ (8009814 <__sfp_lock_release+0x8>)
 800980e:	f000 b91b 	b.w	8009a48 <__retarget_lock_release_recursive>
 8009812:	bf00      	nop
 8009814:	200020f9 	.word	0x200020f9

08009818 <__sinit>:
 8009818:	b510      	push	{r4, lr}
 800981a:	4604      	mov	r4, r0
 800981c:	f7ff fff0 	bl	8009800 <__sfp_lock_acquire>
 8009820:	6a23      	ldr	r3, [r4, #32]
 8009822:	b11b      	cbz	r3, 800982c <__sinit+0x14>
 8009824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009828:	f7ff bff0 	b.w	800980c <__sfp_lock_release>
 800982c:	4b04      	ldr	r3, [pc, #16]	@ (8009840 <__sinit+0x28>)
 800982e:	6223      	str	r3, [r4, #32]
 8009830:	4b04      	ldr	r3, [pc, #16]	@ (8009844 <__sinit+0x2c>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d1f5      	bne.n	8009824 <__sinit+0xc>
 8009838:	f7ff ffc4 	bl	80097c4 <global_stdio_init.part.0>
 800983c:	e7f2      	b.n	8009824 <__sinit+0xc>
 800983e:	bf00      	nop
 8009840:	08009785 	.word	0x08009785
 8009844:	200020f0 	.word	0x200020f0

08009848 <_fwalk_sglue>:
 8009848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800984c:	4607      	mov	r7, r0
 800984e:	4688      	mov	r8, r1
 8009850:	4614      	mov	r4, r2
 8009852:	2600      	movs	r6, #0
 8009854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009858:	f1b9 0901 	subs.w	r9, r9, #1
 800985c:	d505      	bpl.n	800986a <_fwalk_sglue+0x22>
 800985e:	6824      	ldr	r4, [r4, #0]
 8009860:	2c00      	cmp	r4, #0
 8009862:	d1f7      	bne.n	8009854 <_fwalk_sglue+0xc>
 8009864:	4630      	mov	r0, r6
 8009866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986a:	89ab      	ldrh	r3, [r5, #12]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d907      	bls.n	8009880 <_fwalk_sglue+0x38>
 8009870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009874:	3301      	adds	r3, #1
 8009876:	d003      	beq.n	8009880 <_fwalk_sglue+0x38>
 8009878:	4629      	mov	r1, r5
 800987a:	4638      	mov	r0, r7
 800987c:	47c0      	blx	r8
 800987e:	4306      	orrs	r6, r0
 8009880:	3568      	adds	r5, #104	@ 0x68
 8009882:	e7e9      	b.n	8009858 <_fwalk_sglue+0x10>

08009884 <siprintf>:
 8009884:	b40e      	push	{r1, r2, r3}
 8009886:	b500      	push	{lr}
 8009888:	b09c      	sub	sp, #112	@ 0x70
 800988a:	ab1d      	add	r3, sp, #116	@ 0x74
 800988c:	9002      	str	r0, [sp, #8]
 800988e:	9006      	str	r0, [sp, #24]
 8009890:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009894:	4809      	ldr	r0, [pc, #36]	@ (80098bc <siprintf+0x38>)
 8009896:	9107      	str	r1, [sp, #28]
 8009898:	9104      	str	r1, [sp, #16]
 800989a:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <siprintf+0x3c>)
 800989c:	f853 2b04 	ldr.w	r2, [r3], #4
 80098a0:	9105      	str	r1, [sp, #20]
 80098a2:	6800      	ldr	r0, [r0, #0]
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	a902      	add	r1, sp, #8
 80098a8:	f001 fbfc 	bl	800b0a4 <_svfiprintf_r>
 80098ac:	9b02      	ldr	r3, [sp, #8]
 80098ae:	2200      	movs	r2, #0
 80098b0:	701a      	strb	r2, [r3, #0]
 80098b2:	b01c      	add	sp, #112	@ 0x70
 80098b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098b8:	b003      	add	sp, #12
 80098ba:	4770      	bx	lr
 80098bc:	20000108 	.word	0x20000108
 80098c0:	ffff0208 	.word	0xffff0208

080098c4 <__sread>:
 80098c4:	b510      	push	{r4, lr}
 80098c6:	460c      	mov	r4, r1
 80098c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098cc:	f000 f86c 	bl	80099a8 <_read_r>
 80098d0:	2800      	cmp	r0, #0
 80098d2:	bfab      	itete	ge
 80098d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098d6:	89a3      	ldrhlt	r3, [r4, #12]
 80098d8:	181b      	addge	r3, r3, r0
 80098da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80098de:	bfac      	ite	ge
 80098e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098e2:	81a3      	strhlt	r3, [r4, #12]
 80098e4:	bd10      	pop	{r4, pc}

080098e6 <__swrite>:
 80098e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ea:	461f      	mov	r7, r3
 80098ec:	898b      	ldrh	r3, [r1, #12]
 80098ee:	05db      	lsls	r3, r3, #23
 80098f0:	4605      	mov	r5, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	4616      	mov	r6, r2
 80098f6:	d505      	bpl.n	8009904 <__swrite+0x1e>
 80098f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fc:	2302      	movs	r3, #2
 80098fe:	2200      	movs	r2, #0
 8009900:	f000 f840 	bl	8009984 <_lseek_r>
 8009904:	89a3      	ldrh	r3, [r4, #12]
 8009906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800990a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	4632      	mov	r2, r6
 8009912:	463b      	mov	r3, r7
 8009914:	4628      	mov	r0, r5
 8009916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800991a:	f000 b857 	b.w	80099cc <_write_r>

0800991e <__sseek>:
 800991e:	b510      	push	{r4, lr}
 8009920:	460c      	mov	r4, r1
 8009922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009926:	f000 f82d 	bl	8009984 <_lseek_r>
 800992a:	1c43      	adds	r3, r0, #1
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	bf15      	itete	ne
 8009930:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800993a:	81a3      	strheq	r3, [r4, #12]
 800993c:	bf18      	it	ne
 800993e:	81a3      	strhne	r3, [r4, #12]
 8009940:	bd10      	pop	{r4, pc}

08009942 <__sclose>:
 8009942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009946:	f000 b80d 	b.w	8009964 <_close_r>

0800994a <memset>:
 800994a:	4402      	add	r2, r0
 800994c:	4603      	mov	r3, r0
 800994e:	4293      	cmp	r3, r2
 8009950:	d100      	bne.n	8009954 <memset+0xa>
 8009952:	4770      	bx	lr
 8009954:	f803 1b01 	strb.w	r1, [r3], #1
 8009958:	e7f9      	b.n	800994e <memset+0x4>
	...

0800995c <_localeconv_r>:
 800995c:	4800      	ldr	r0, [pc, #0]	@ (8009960 <_localeconv_r+0x4>)
 800995e:	4770      	bx	lr
 8009960:	20000248 	.word	0x20000248

08009964 <_close_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d06      	ldr	r5, [pc, #24]	@ (8009980 <_close_r+0x1c>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f7 fe76 	bl	8001660 <_close>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_close_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_close_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	200020f4 	.word	0x200020f4

08009984 <_lseek_r>:
 8009984:	b538      	push	{r3, r4, r5, lr}
 8009986:	4d07      	ldr	r5, [pc, #28]	@ (80099a4 <_lseek_r+0x20>)
 8009988:	4604      	mov	r4, r0
 800998a:	4608      	mov	r0, r1
 800998c:	4611      	mov	r1, r2
 800998e:	2200      	movs	r2, #0
 8009990:	602a      	str	r2, [r5, #0]
 8009992:	461a      	mov	r2, r3
 8009994:	f7f7 fe8b 	bl	80016ae <_lseek>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_lseek_r+0x1e>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_lseek_r+0x1e>
 80099a0:	6023      	str	r3, [r4, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	200020f4 	.word	0x200020f4

080099a8 <_read_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4d07      	ldr	r5, [pc, #28]	@ (80099c8 <_read_r+0x20>)
 80099ac:	4604      	mov	r4, r0
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	2200      	movs	r2, #0
 80099b4:	602a      	str	r2, [r5, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f7f7 fe19 	bl	80015ee <_read>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_read_r+0x1e>
 80099c0:	682b      	ldr	r3, [r5, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_read_r+0x1e>
 80099c4:	6023      	str	r3, [r4, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	200020f4 	.word	0x200020f4

080099cc <_write_r>:
 80099cc:	b538      	push	{r3, r4, r5, lr}
 80099ce:	4d07      	ldr	r5, [pc, #28]	@ (80099ec <_write_r+0x20>)
 80099d0:	4604      	mov	r4, r0
 80099d2:	4608      	mov	r0, r1
 80099d4:	4611      	mov	r1, r2
 80099d6:	2200      	movs	r2, #0
 80099d8:	602a      	str	r2, [r5, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	f7f7 fe24 	bl	8001628 <_write>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d102      	bne.n	80099ea <_write_r+0x1e>
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	b103      	cbz	r3, 80099ea <_write_r+0x1e>
 80099e8:	6023      	str	r3, [r4, #0]
 80099ea:	bd38      	pop	{r3, r4, r5, pc}
 80099ec:	200020f4 	.word	0x200020f4

080099f0 <__errno>:
 80099f0:	4b01      	ldr	r3, [pc, #4]	@ (80099f8 <__errno+0x8>)
 80099f2:	6818      	ldr	r0, [r3, #0]
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	20000108 	.word	0x20000108

080099fc <__libc_init_array>:
 80099fc:	b570      	push	{r4, r5, r6, lr}
 80099fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009a34 <__libc_init_array+0x38>)
 8009a00:	4c0d      	ldr	r4, [pc, #52]	@ (8009a38 <__libc_init_array+0x3c>)
 8009a02:	1b64      	subs	r4, r4, r5
 8009a04:	10a4      	asrs	r4, r4, #2
 8009a06:	2600      	movs	r6, #0
 8009a08:	42a6      	cmp	r6, r4
 8009a0a:	d109      	bne.n	8009a20 <__libc_init_array+0x24>
 8009a0c:	4d0b      	ldr	r5, [pc, #44]	@ (8009a3c <__libc_init_array+0x40>)
 8009a0e:	4c0c      	ldr	r4, [pc, #48]	@ (8009a40 <__libc_init_array+0x44>)
 8009a10:	f002 ffc4 	bl	800c99c <_init>
 8009a14:	1b64      	subs	r4, r4, r5
 8009a16:	10a4      	asrs	r4, r4, #2
 8009a18:	2600      	movs	r6, #0
 8009a1a:	42a6      	cmp	r6, r4
 8009a1c:	d105      	bne.n	8009a2a <__libc_init_array+0x2e>
 8009a1e:	bd70      	pop	{r4, r5, r6, pc}
 8009a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a24:	4798      	blx	r3
 8009a26:	3601      	adds	r6, #1
 8009a28:	e7ee      	b.n	8009a08 <__libc_init_array+0xc>
 8009a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a2e:	4798      	blx	r3
 8009a30:	3601      	adds	r6, #1
 8009a32:	e7f2      	b.n	8009a1a <__libc_init_array+0x1e>
 8009a34:	0800cde0 	.word	0x0800cde0
 8009a38:	0800cde0 	.word	0x0800cde0
 8009a3c:	0800cde0 	.word	0x0800cde0
 8009a40:	0800cde4 	.word	0x0800cde4

08009a44 <__retarget_lock_init_recursive>:
 8009a44:	4770      	bx	lr

08009a46 <__retarget_lock_acquire_recursive>:
 8009a46:	4770      	bx	lr

08009a48 <__retarget_lock_release_recursive>:
 8009a48:	4770      	bx	lr

08009a4a <quorem>:
 8009a4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4e:	6903      	ldr	r3, [r0, #16]
 8009a50:	690c      	ldr	r4, [r1, #16]
 8009a52:	42a3      	cmp	r3, r4
 8009a54:	4607      	mov	r7, r0
 8009a56:	db7e      	blt.n	8009b56 <quorem+0x10c>
 8009a58:	3c01      	subs	r4, #1
 8009a5a:	f101 0814 	add.w	r8, r1, #20
 8009a5e:	00a3      	lsls	r3, r4, #2
 8009a60:	f100 0514 	add.w	r5, r0, #20
 8009a64:	9300      	str	r3, [sp, #0]
 8009a66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a74:	3301      	adds	r3, #1
 8009a76:	429a      	cmp	r2, r3
 8009a78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a7c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a80:	d32e      	bcc.n	8009ae0 <quorem+0x96>
 8009a82:	f04f 0a00 	mov.w	sl, #0
 8009a86:	46c4      	mov	ip, r8
 8009a88:	46ae      	mov	lr, r5
 8009a8a:	46d3      	mov	fp, sl
 8009a8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a90:	b298      	uxth	r0, r3
 8009a92:	fb06 a000 	mla	r0, r6, r0, sl
 8009a96:	0c02      	lsrs	r2, r0, #16
 8009a98:	0c1b      	lsrs	r3, r3, #16
 8009a9a:	fb06 2303 	mla	r3, r6, r3, r2
 8009a9e:	f8de 2000 	ldr.w	r2, [lr]
 8009aa2:	b280      	uxth	r0, r0
 8009aa4:	b292      	uxth	r2, r2
 8009aa6:	1a12      	subs	r2, r2, r0
 8009aa8:	445a      	add	r2, fp
 8009aaa:	f8de 0000 	ldr.w	r0, [lr]
 8009aae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ab8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009abc:	b292      	uxth	r2, r2
 8009abe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ac2:	45e1      	cmp	r9, ip
 8009ac4:	f84e 2b04 	str.w	r2, [lr], #4
 8009ac8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009acc:	d2de      	bcs.n	8009a8c <quorem+0x42>
 8009ace:	9b00      	ldr	r3, [sp, #0]
 8009ad0:	58eb      	ldr	r3, [r5, r3]
 8009ad2:	b92b      	cbnz	r3, 8009ae0 <quorem+0x96>
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	3b04      	subs	r3, #4
 8009ad8:	429d      	cmp	r5, r3
 8009ada:	461a      	mov	r2, r3
 8009adc:	d32f      	bcc.n	8009b3e <quorem+0xf4>
 8009ade:	613c      	str	r4, [r7, #16]
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f001 f97b 	bl	800addc <__mcmp>
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	db25      	blt.n	8009b36 <quorem+0xec>
 8009aea:	4629      	mov	r1, r5
 8009aec:	2000      	movs	r0, #0
 8009aee:	f858 2b04 	ldr.w	r2, [r8], #4
 8009af2:	f8d1 c000 	ldr.w	ip, [r1]
 8009af6:	fa1f fe82 	uxth.w	lr, r2
 8009afa:	fa1f f38c 	uxth.w	r3, ip
 8009afe:	eba3 030e 	sub.w	r3, r3, lr
 8009b02:	4403      	add	r3, r0
 8009b04:	0c12      	lsrs	r2, r2, #16
 8009b06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b14:	45c1      	cmp	r9, r8
 8009b16:	f841 3b04 	str.w	r3, [r1], #4
 8009b1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b1e:	d2e6      	bcs.n	8009aee <quorem+0xa4>
 8009b20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b28:	b922      	cbnz	r2, 8009b34 <quorem+0xea>
 8009b2a:	3b04      	subs	r3, #4
 8009b2c:	429d      	cmp	r5, r3
 8009b2e:	461a      	mov	r2, r3
 8009b30:	d30b      	bcc.n	8009b4a <quorem+0x100>
 8009b32:	613c      	str	r4, [r7, #16]
 8009b34:	3601      	adds	r6, #1
 8009b36:	4630      	mov	r0, r6
 8009b38:	b003      	add	sp, #12
 8009b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3e:	6812      	ldr	r2, [r2, #0]
 8009b40:	3b04      	subs	r3, #4
 8009b42:	2a00      	cmp	r2, #0
 8009b44:	d1cb      	bne.n	8009ade <quorem+0x94>
 8009b46:	3c01      	subs	r4, #1
 8009b48:	e7c6      	b.n	8009ad8 <quorem+0x8e>
 8009b4a:	6812      	ldr	r2, [r2, #0]
 8009b4c:	3b04      	subs	r3, #4
 8009b4e:	2a00      	cmp	r2, #0
 8009b50:	d1ef      	bne.n	8009b32 <quorem+0xe8>
 8009b52:	3c01      	subs	r4, #1
 8009b54:	e7ea      	b.n	8009b2c <quorem+0xe2>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e7ee      	b.n	8009b38 <quorem+0xee>
 8009b5a:	0000      	movs	r0, r0
 8009b5c:	0000      	movs	r0, r0
	...

08009b60 <_dtoa_r>:
 8009b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b64:	69c7      	ldr	r7, [r0, #28]
 8009b66:	b099      	sub	sp, #100	@ 0x64
 8009b68:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b6c:	ec55 4b10 	vmov	r4, r5, d0
 8009b70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009b72:	9109      	str	r1, [sp, #36]	@ 0x24
 8009b74:	4683      	mov	fp, r0
 8009b76:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b7a:	b97f      	cbnz	r7, 8009b9c <_dtoa_r+0x3c>
 8009b7c:	2010      	movs	r0, #16
 8009b7e:	f000 fdfd 	bl	800a77c <malloc>
 8009b82:	4602      	mov	r2, r0
 8009b84:	f8cb 001c 	str.w	r0, [fp, #28]
 8009b88:	b920      	cbnz	r0, 8009b94 <_dtoa_r+0x34>
 8009b8a:	4ba7      	ldr	r3, [pc, #668]	@ (8009e28 <_dtoa_r+0x2c8>)
 8009b8c:	21ef      	movs	r1, #239	@ 0xef
 8009b8e:	48a7      	ldr	r0, [pc, #668]	@ (8009e2c <_dtoa_r+0x2cc>)
 8009b90:	f001 fc68 	bl	800b464 <__assert_func>
 8009b94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b98:	6007      	str	r7, [r0, #0]
 8009b9a:	60c7      	str	r7, [r0, #12]
 8009b9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ba0:	6819      	ldr	r1, [r3, #0]
 8009ba2:	b159      	cbz	r1, 8009bbc <_dtoa_r+0x5c>
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	604a      	str	r2, [r1, #4]
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4093      	lsls	r3, r2
 8009bac:	608b      	str	r3, [r1, #8]
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f000 feda 	bl	800a968 <_Bfree>
 8009bb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
 8009bbc:	1e2b      	subs	r3, r5, #0
 8009bbe:	bfb9      	ittee	lt
 8009bc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bc4:	9303      	strlt	r3, [sp, #12]
 8009bc6:	2300      	movge	r3, #0
 8009bc8:	6033      	strge	r3, [r6, #0]
 8009bca:	9f03      	ldr	r7, [sp, #12]
 8009bcc:	4b98      	ldr	r3, [pc, #608]	@ (8009e30 <_dtoa_r+0x2d0>)
 8009bce:	bfbc      	itt	lt
 8009bd0:	2201      	movlt	r2, #1
 8009bd2:	6032      	strlt	r2, [r6, #0]
 8009bd4:	43bb      	bics	r3, r7
 8009bd6:	d112      	bne.n	8009bfe <_dtoa_r+0x9e>
 8009bd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bda:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009bde:	6013      	str	r3, [r2, #0]
 8009be0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009be4:	4323      	orrs	r3, r4
 8009be6:	f000 854d 	beq.w	800a684 <_dtoa_r+0xb24>
 8009bea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009bec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009e44 <_dtoa_r+0x2e4>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 854f 	beq.w	800a694 <_dtoa_r+0xb34>
 8009bf6:	f10a 0303 	add.w	r3, sl, #3
 8009bfa:	f000 bd49 	b.w	800a690 <_dtoa_r+0xb30>
 8009bfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c02:	2200      	movs	r2, #0
 8009c04:	ec51 0b17 	vmov	r0, r1, d7
 8009c08:	2300      	movs	r3, #0
 8009c0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009c0e:	f7f6 ff63 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c12:	4680      	mov	r8, r0
 8009c14:	b158      	cbz	r0, 8009c2e <_dtoa_r+0xce>
 8009c16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009c18:	2301      	movs	r3, #1
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c1e:	b113      	cbz	r3, 8009c26 <_dtoa_r+0xc6>
 8009c20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c22:	4b84      	ldr	r3, [pc, #528]	@ (8009e34 <_dtoa_r+0x2d4>)
 8009c24:	6013      	str	r3, [r2, #0]
 8009c26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009e48 <_dtoa_r+0x2e8>
 8009c2a:	f000 bd33 	b.w	800a694 <_dtoa_r+0xb34>
 8009c2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009c32:	aa16      	add	r2, sp, #88	@ 0x58
 8009c34:	a917      	add	r1, sp, #92	@ 0x5c
 8009c36:	4658      	mov	r0, fp
 8009c38:	f001 f980 	bl	800af3c <__d2b>
 8009c3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009c40:	4681      	mov	r9, r0
 8009c42:	2e00      	cmp	r6, #0
 8009c44:	d077      	beq.n	8009d36 <_dtoa_r+0x1d6>
 8009c46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009c4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c60:	4619      	mov	r1, r3
 8009c62:	2200      	movs	r2, #0
 8009c64:	4b74      	ldr	r3, [pc, #464]	@ (8009e38 <_dtoa_r+0x2d8>)
 8009c66:	f7f6 fb17 	bl	8000298 <__aeabi_dsub>
 8009c6a:	a369      	add	r3, pc, #420	@ (adr r3, 8009e10 <_dtoa_r+0x2b0>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	f7f6 fcca 	bl	8000608 <__aeabi_dmul>
 8009c74:	a368      	add	r3, pc, #416	@ (adr r3, 8009e18 <_dtoa_r+0x2b8>)
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	f7f6 fb0f 	bl	800029c <__adddf3>
 8009c7e:	4604      	mov	r4, r0
 8009c80:	4630      	mov	r0, r6
 8009c82:	460d      	mov	r5, r1
 8009c84:	f7f6 fc56 	bl	8000534 <__aeabi_i2d>
 8009c88:	a365      	add	r3, pc, #404	@ (adr r3, 8009e20 <_dtoa_r+0x2c0>)
 8009c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8e:	f7f6 fcbb 	bl	8000608 <__aeabi_dmul>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4620      	mov	r0, r4
 8009c98:	4629      	mov	r1, r5
 8009c9a:	f7f6 faff 	bl	800029c <__adddf3>
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	460d      	mov	r5, r1
 8009ca2:	f7f6 ff61 	bl	8000b68 <__aeabi_d2iz>
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4607      	mov	r7, r0
 8009caa:	2300      	movs	r3, #0
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	f7f6 ff1c 	bl	8000aec <__aeabi_dcmplt>
 8009cb4:	b140      	cbz	r0, 8009cc8 <_dtoa_r+0x168>
 8009cb6:	4638      	mov	r0, r7
 8009cb8:	f7f6 fc3c 	bl	8000534 <__aeabi_i2d>
 8009cbc:	4622      	mov	r2, r4
 8009cbe:	462b      	mov	r3, r5
 8009cc0:	f7f6 ff0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cc4:	b900      	cbnz	r0, 8009cc8 <_dtoa_r+0x168>
 8009cc6:	3f01      	subs	r7, #1
 8009cc8:	2f16      	cmp	r7, #22
 8009cca:	d851      	bhi.n	8009d70 <_dtoa_r+0x210>
 8009ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8009e3c <_dtoa_r+0x2dc>)
 8009cce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cda:	f7f6 ff07 	bl	8000aec <__aeabi_dcmplt>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d048      	beq.n	8009d74 <_dtoa_r+0x214>
 8009ce2:	3f01      	subs	r7, #1
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	9312      	str	r3, [sp, #72]	@ 0x48
 8009ce8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cea:	1b9b      	subs	r3, r3, r6
 8009cec:	1e5a      	subs	r2, r3, #1
 8009cee:	bf44      	itt	mi
 8009cf0:	f1c3 0801 	rsbmi	r8, r3, #1
 8009cf4:	2300      	movmi	r3, #0
 8009cf6:	9208      	str	r2, [sp, #32]
 8009cf8:	bf54      	ite	pl
 8009cfa:	f04f 0800 	movpl.w	r8, #0
 8009cfe:	9308      	strmi	r3, [sp, #32]
 8009d00:	2f00      	cmp	r7, #0
 8009d02:	db39      	blt.n	8009d78 <_dtoa_r+0x218>
 8009d04:	9b08      	ldr	r3, [sp, #32]
 8009d06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009d08:	443b      	add	r3, r7
 8009d0a:	9308      	str	r3, [sp, #32]
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d12:	2b09      	cmp	r3, #9
 8009d14:	d864      	bhi.n	8009de0 <_dtoa_r+0x280>
 8009d16:	2b05      	cmp	r3, #5
 8009d18:	bfc4      	itt	gt
 8009d1a:	3b04      	subgt	r3, #4
 8009d1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d20:	f1a3 0302 	sub.w	r3, r3, #2
 8009d24:	bfcc      	ite	gt
 8009d26:	2400      	movgt	r4, #0
 8009d28:	2401      	movle	r4, #1
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	d863      	bhi.n	8009df6 <_dtoa_r+0x296>
 8009d2e:	e8df f003 	tbb	[pc, r3]
 8009d32:	372a      	.short	0x372a
 8009d34:	5535      	.short	0x5535
 8009d36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009d3a:	441e      	add	r6, r3
 8009d3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d40:	2b20      	cmp	r3, #32
 8009d42:	bfc1      	itttt	gt
 8009d44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d48:	409f      	lslgt	r7, r3
 8009d4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d52:	bfd6      	itet	le
 8009d54:	f1c3 0320 	rsble	r3, r3, #32
 8009d58:	ea47 0003 	orrgt.w	r0, r7, r3
 8009d5c:	fa04 f003 	lslle.w	r0, r4, r3
 8009d60:	f7f6 fbd8 	bl	8000514 <__aeabi_ui2d>
 8009d64:	2201      	movs	r2, #1
 8009d66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009d6a:	3e01      	subs	r6, #1
 8009d6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8009d6e:	e777      	b.n	8009c60 <_dtoa_r+0x100>
 8009d70:	2301      	movs	r3, #1
 8009d72:	e7b8      	b.n	8009ce6 <_dtoa_r+0x186>
 8009d74:	9012      	str	r0, [sp, #72]	@ 0x48
 8009d76:	e7b7      	b.n	8009ce8 <_dtoa_r+0x188>
 8009d78:	427b      	negs	r3, r7
 8009d7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	eba8 0807 	sub.w	r8, r8, r7
 8009d82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d84:	e7c4      	b.n	8009d10 <_dtoa_r+0x1b0>
 8009d86:	2300      	movs	r3, #0
 8009d88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	dc35      	bgt.n	8009dfc <_dtoa_r+0x29c>
 8009d90:	2301      	movs	r3, #1
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	9307      	str	r3, [sp, #28]
 8009d96:	461a      	mov	r2, r3
 8009d98:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d9a:	e00b      	b.n	8009db4 <_dtoa_r+0x254>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e7f3      	b.n	8009d88 <_dtoa_r+0x228>
 8009da0:	2300      	movs	r3, #0
 8009da2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009da4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009da6:	18fb      	adds	r3, r7, r3
 8009da8:	9300      	str	r3, [sp, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	bfb8      	it	lt
 8009db2:	2301      	movlt	r3, #1
 8009db4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009db8:	2100      	movs	r1, #0
 8009dba:	2204      	movs	r2, #4
 8009dbc:	f102 0514 	add.w	r5, r2, #20
 8009dc0:	429d      	cmp	r5, r3
 8009dc2:	d91f      	bls.n	8009e04 <_dtoa_r+0x2a4>
 8009dc4:	6041      	str	r1, [r0, #4]
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f000 fd8e 	bl	800a8e8 <_Balloc>
 8009dcc:	4682      	mov	sl, r0
 8009dce:	2800      	cmp	r0, #0
 8009dd0:	d13c      	bne.n	8009e4c <_dtoa_r+0x2ec>
 8009dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8009e40 <_dtoa_r+0x2e0>)
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8009dda:	e6d8      	b.n	8009b8e <_dtoa_r+0x2e>
 8009ddc:	2301      	movs	r3, #1
 8009dde:	e7e0      	b.n	8009da2 <_dtoa_r+0x242>
 8009de0:	2401      	movs	r4, #1
 8009de2:	2300      	movs	r3, #0
 8009de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009de6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009de8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dec:	9300      	str	r3, [sp, #0]
 8009dee:	9307      	str	r3, [sp, #28]
 8009df0:	2200      	movs	r2, #0
 8009df2:	2312      	movs	r3, #18
 8009df4:	e7d0      	b.n	8009d98 <_dtoa_r+0x238>
 8009df6:	2301      	movs	r3, #1
 8009df8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dfa:	e7f5      	b.n	8009de8 <_dtoa_r+0x288>
 8009dfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	9307      	str	r3, [sp, #28]
 8009e02:	e7d7      	b.n	8009db4 <_dtoa_r+0x254>
 8009e04:	3101      	adds	r1, #1
 8009e06:	0052      	lsls	r2, r2, #1
 8009e08:	e7d8      	b.n	8009dbc <_dtoa_r+0x25c>
 8009e0a:	bf00      	nop
 8009e0c:	f3af 8000 	nop.w
 8009e10:	636f4361 	.word	0x636f4361
 8009e14:	3fd287a7 	.word	0x3fd287a7
 8009e18:	8b60c8b3 	.word	0x8b60c8b3
 8009e1c:	3fc68a28 	.word	0x3fc68a28
 8009e20:	509f79fb 	.word	0x509f79fb
 8009e24:	3fd34413 	.word	0x3fd34413
 8009e28:	0800ca79 	.word	0x0800ca79
 8009e2c:	0800ca90 	.word	0x0800ca90
 8009e30:	7ff00000 	.word	0x7ff00000
 8009e34:	0800ca49 	.word	0x0800ca49
 8009e38:	3ff80000 	.word	0x3ff80000
 8009e3c:	0800cb88 	.word	0x0800cb88
 8009e40:	0800cae8 	.word	0x0800cae8
 8009e44:	0800ca75 	.word	0x0800ca75
 8009e48:	0800ca48 	.word	0x0800ca48
 8009e4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e50:	6018      	str	r0, [r3, #0]
 8009e52:	9b07      	ldr	r3, [sp, #28]
 8009e54:	2b0e      	cmp	r3, #14
 8009e56:	f200 80a4 	bhi.w	8009fa2 <_dtoa_r+0x442>
 8009e5a:	2c00      	cmp	r4, #0
 8009e5c:	f000 80a1 	beq.w	8009fa2 <_dtoa_r+0x442>
 8009e60:	2f00      	cmp	r7, #0
 8009e62:	dd33      	ble.n	8009ecc <_dtoa_r+0x36c>
 8009e64:	4bad      	ldr	r3, [pc, #692]	@ (800a11c <_dtoa_r+0x5bc>)
 8009e66:	f007 020f 	and.w	r2, r7, #15
 8009e6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e6e:	ed93 7b00 	vldr	d7, [r3]
 8009e72:	05f8      	lsls	r0, r7, #23
 8009e74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009e7c:	d516      	bpl.n	8009eac <_dtoa_r+0x34c>
 8009e7e:	4ba8      	ldr	r3, [pc, #672]	@ (800a120 <_dtoa_r+0x5c0>)
 8009e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009e88:	f7f6 fce8 	bl	800085c <__aeabi_ddiv>
 8009e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e90:	f004 040f 	and.w	r4, r4, #15
 8009e94:	2603      	movs	r6, #3
 8009e96:	4da2      	ldr	r5, [pc, #648]	@ (800a120 <_dtoa_r+0x5c0>)
 8009e98:	b954      	cbnz	r4, 8009eb0 <_dtoa_r+0x350>
 8009e9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea2:	f7f6 fcdb 	bl	800085c <__aeabi_ddiv>
 8009ea6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eaa:	e028      	b.n	8009efe <_dtoa_r+0x39e>
 8009eac:	2602      	movs	r6, #2
 8009eae:	e7f2      	b.n	8009e96 <_dtoa_r+0x336>
 8009eb0:	07e1      	lsls	r1, r4, #31
 8009eb2:	d508      	bpl.n	8009ec6 <_dtoa_r+0x366>
 8009eb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ebc:	f7f6 fba4 	bl	8000608 <__aeabi_dmul>
 8009ec0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ec4:	3601      	adds	r6, #1
 8009ec6:	1064      	asrs	r4, r4, #1
 8009ec8:	3508      	adds	r5, #8
 8009eca:	e7e5      	b.n	8009e98 <_dtoa_r+0x338>
 8009ecc:	f000 80d2 	beq.w	800a074 <_dtoa_r+0x514>
 8009ed0:	427c      	negs	r4, r7
 8009ed2:	4b92      	ldr	r3, [pc, #584]	@ (800a11c <_dtoa_r+0x5bc>)
 8009ed4:	4d92      	ldr	r5, [pc, #584]	@ (800a120 <_dtoa_r+0x5c0>)
 8009ed6:	f004 020f 	and.w	r2, r4, #15
 8009eda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ee6:	f7f6 fb8f 	bl	8000608 <__aeabi_dmul>
 8009eea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eee:	1124      	asrs	r4, r4, #4
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2602      	movs	r6, #2
 8009ef4:	2c00      	cmp	r4, #0
 8009ef6:	f040 80b2 	bne.w	800a05e <_dtoa_r+0x4fe>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d1d3      	bne.n	8009ea6 <_dtoa_r+0x346>
 8009efe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 80b7 	beq.w	800a078 <_dtoa_r+0x518>
 8009f0a:	4b86      	ldr	r3, [pc, #536]	@ (800a124 <_dtoa_r+0x5c4>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4620      	mov	r0, r4
 8009f10:	4629      	mov	r1, r5
 8009f12:	f7f6 fdeb 	bl	8000aec <__aeabi_dcmplt>
 8009f16:	2800      	cmp	r0, #0
 8009f18:	f000 80ae 	beq.w	800a078 <_dtoa_r+0x518>
 8009f1c:	9b07      	ldr	r3, [sp, #28]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 80aa 	beq.w	800a078 <_dtoa_r+0x518>
 8009f24:	9b00      	ldr	r3, [sp, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	dd37      	ble.n	8009f9a <_dtoa_r+0x43a>
 8009f2a:	1e7b      	subs	r3, r7, #1
 8009f2c:	9304      	str	r3, [sp, #16]
 8009f2e:	4620      	mov	r0, r4
 8009f30:	4b7d      	ldr	r3, [pc, #500]	@ (800a128 <_dtoa_r+0x5c8>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	4629      	mov	r1, r5
 8009f36:	f7f6 fb67 	bl	8000608 <__aeabi_dmul>
 8009f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f3e:	9c00      	ldr	r4, [sp, #0]
 8009f40:	3601      	adds	r6, #1
 8009f42:	4630      	mov	r0, r6
 8009f44:	f7f6 faf6 	bl	8000534 <__aeabi_i2d>
 8009f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f4c:	f7f6 fb5c 	bl	8000608 <__aeabi_dmul>
 8009f50:	4b76      	ldr	r3, [pc, #472]	@ (800a12c <_dtoa_r+0x5cc>)
 8009f52:	2200      	movs	r2, #0
 8009f54:	f7f6 f9a2 	bl	800029c <__adddf3>
 8009f58:	4605      	mov	r5, r0
 8009f5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f5e:	2c00      	cmp	r4, #0
 8009f60:	f040 808d 	bne.w	800a07e <_dtoa_r+0x51e>
 8009f64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f68:	4b71      	ldr	r3, [pc, #452]	@ (800a130 <_dtoa_r+0x5d0>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f7f6 f994 	bl	8000298 <__aeabi_dsub>
 8009f70:	4602      	mov	r2, r0
 8009f72:	460b      	mov	r3, r1
 8009f74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f78:	462a      	mov	r2, r5
 8009f7a:	4633      	mov	r3, r6
 8009f7c:	f7f6 fdd4 	bl	8000b28 <__aeabi_dcmpgt>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f040 828b 	bne.w	800a49c <_dtoa_r+0x93c>
 8009f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f8a:	462a      	mov	r2, r5
 8009f8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009f90:	f7f6 fdac 	bl	8000aec <__aeabi_dcmplt>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f040 8128 	bne.w	800a1ea <_dtoa_r+0x68a>
 8009f9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009f9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009fa2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f2c0 815a 	blt.w	800a25e <_dtoa_r+0x6fe>
 8009faa:	2f0e      	cmp	r7, #14
 8009fac:	f300 8157 	bgt.w	800a25e <_dtoa_r+0x6fe>
 8009fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800a11c <_dtoa_r+0x5bc>)
 8009fb2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fb6:	ed93 7b00 	vldr	d7, [r3]
 8009fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	ed8d 7b00 	vstr	d7, [sp]
 8009fc2:	da03      	bge.n	8009fcc <_dtoa_r+0x46c>
 8009fc4:	9b07      	ldr	r3, [sp, #28]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f340 8101 	ble.w	800a1ce <_dtoa_r+0x66e>
 8009fcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009fd0:	4656      	mov	r6, sl
 8009fd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fd6:	4620      	mov	r0, r4
 8009fd8:	4629      	mov	r1, r5
 8009fda:	f7f6 fc3f 	bl	800085c <__aeabi_ddiv>
 8009fde:	f7f6 fdc3 	bl	8000b68 <__aeabi_d2iz>
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	f7f6 faa6 	bl	8000534 <__aeabi_i2d>
 8009fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009fec:	f7f6 fb0c 	bl	8000608 <__aeabi_dmul>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	4629      	mov	r1, r5
 8009ff8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009ffc:	f7f6 f94c 	bl	8000298 <__aeabi_dsub>
 800a000:	f806 4b01 	strb.w	r4, [r6], #1
 800a004:	9d07      	ldr	r5, [sp, #28]
 800a006:	eba6 040a 	sub.w	r4, r6, sl
 800a00a:	42a5      	cmp	r5, r4
 800a00c:	4602      	mov	r2, r0
 800a00e:	460b      	mov	r3, r1
 800a010:	f040 8117 	bne.w	800a242 <_dtoa_r+0x6e2>
 800a014:	f7f6 f942 	bl	800029c <__adddf3>
 800a018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a01c:	4604      	mov	r4, r0
 800a01e:	460d      	mov	r5, r1
 800a020:	f7f6 fd82 	bl	8000b28 <__aeabi_dcmpgt>
 800a024:	2800      	cmp	r0, #0
 800a026:	f040 80f9 	bne.w	800a21c <_dtoa_r+0x6bc>
 800a02a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a02e:	4620      	mov	r0, r4
 800a030:	4629      	mov	r1, r5
 800a032:	f7f6 fd51 	bl	8000ad8 <__aeabi_dcmpeq>
 800a036:	b118      	cbz	r0, 800a040 <_dtoa_r+0x4e0>
 800a038:	f018 0f01 	tst.w	r8, #1
 800a03c:	f040 80ee 	bne.w	800a21c <_dtoa_r+0x6bc>
 800a040:	4649      	mov	r1, r9
 800a042:	4658      	mov	r0, fp
 800a044:	f000 fc90 	bl	800a968 <_Bfree>
 800a048:	2300      	movs	r3, #0
 800a04a:	7033      	strb	r3, [r6, #0]
 800a04c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a04e:	3701      	adds	r7, #1
 800a050:	601f      	str	r7, [r3, #0]
 800a052:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a054:	2b00      	cmp	r3, #0
 800a056:	f000 831d 	beq.w	800a694 <_dtoa_r+0xb34>
 800a05a:	601e      	str	r6, [r3, #0]
 800a05c:	e31a      	b.n	800a694 <_dtoa_r+0xb34>
 800a05e:	07e2      	lsls	r2, r4, #31
 800a060:	d505      	bpl.n	800a06e <_dtoa_r+0x50e>
 800a062:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a066:	f7f6 facf 	bl	8000608 <__aeabi_dmul>
 800a06a:	3601      	adds	r6, #1
 800a06c:	2301      	movs	r3, #1
 800a06e:	1064      	asrs	r4, r4, #1
 800a070:	3508      	adds	r5, #8
 800a072:	e73f      	b.n	8009ef4 <_dtoa_r+0x394>
 800a074:	2602      	movs	r6, #2
 800a076:	e742      	b.n	8009efe <_dtoa_r+0x39e>
 800a078:	9c07      	ldr	r4, [sp, #28]
 800a07a:	9704      	str	r7, [sp, #16]
 800a07c:	e761      	b.n	8009f42 <_dtoa_r+0x3e2>
 800a07e:	4b27      	ldr	r3, [pc, #156]	@ (800a11c <_dtoa_r+0x5bc>)
 800a080:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a086:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a08a:	4454      	add	r4, sl
 800a08c:	2900      	cmp	r1, #0
 800a08e:	d053      	beq.n	800a138 <_dtoa_r+0x5d8>
 800a090:	4928      	ldr	r1, [pc, #160]	@ (800a134 <_dtoa_r+0x5d4>)
 800a092:	2000      	movs	r0, #0
 800a094:	f7f6 fbe2 	bl	800085c <__aeabi_ddiv>
 800a098:	4633      	mov	r3, r6
 800a09a:	462a      	mov	r2, r5
 800a09c:	f7f6 f8fc 	bl	8000298 <__aeabi_dsub>
 800a0a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0a4:	4656      	mov	r6, sl
 800a0a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0aa:	f7f6 fd5d 	bl	8000b68 <__aeabi_d2iz>
 800a0ae:	4605      	mov	r5, r0
 800a0b0:	f7f6 fa40 	bl	8000534 <__aeabi_i2d>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0bc:	f7f6 f8ec 	bl	8000298 <__aeabi_dsub>
 800a0c0:	3530      	adds	r5, #48	@ 0x30
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a0ca:	f806 5b01 	strb.w	r5, [r6], #1
 800a0ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0d2:	f7f6 fd0b 	bl	8000aec <__aeabi_dcmplt>
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	d171      	bne.n	800a1be <_dtoa_r+0x65e>
 800a0da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0de:	4911      	ldr	r1, [pc, #68]	@ (800a124 <_dtoa_r+0x5c4>)
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	f7f6 f8d9 	bl	8000298 <__aeabi_dsub>
 800a0e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a0ea:	f7f6 fcff 	bl	8000aec <__aeabi_dcmplt>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	f040 8095 	bne.w	800a21e <_dtoa_r+0x6be>
 800a0f4:	42a6      	cmp	r6, r4
 800a0f6:	f43f af50 	beq.w	8009f9a <_dtoa_r+0x43a>
 800a0fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800a128 <_dtoa_r+0x5c8>)
 800a100:	2200      	movs	r2, #0
 800a102:	f7f6 fa81 	bl	8000608 <__aeabi_dmul>
 800a106:	4b08      	ldr	r3, [pc, #32]	@ (800a128 <_dtoa_r+0x5c8>)
 800a108:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a10c:	2200      	movs	r2, #0
 800a10e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a112:	f7f6 fa79 	bl	8000608 <__aeabi_dmul>
 800a116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a11a:	e7c4      	b.n	800a0a6 <_dtoa_r+0x546>
 800a11c:	0800cb88 	.word	0x0800cb88
 800a120:	0800cb60 	.word	0x0800cb60
 800a124:	3ff00000 	.word	0x3ff00000
 800a128:	40240000 	.word	0x40240000
 800a12c:	401c0000 	.word	0x401c0000
 800a130:	40140000 	.word	0x40140000
 800a134:	3fe00000 	.word	0x3fe00000
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	f7f6 fa64 	bl	8000608 <__aeabi_dmul>
 800a140:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a144:	9415      	str	r4, [sp, #84]	@ 0x54
 800a146:	4656      	mov	r6, sl
 800a148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a14c:	f7f6 fd0c 	bl	8000b68 <__aeabi_d2iz>
 800a150:	4605      	mov	r5, r0
 800a152:	f7f6 f9ef 	bl	8000534 <__aeabi_i2d>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15e:	f7f6 f89b 	bl	8000298 <__aeabi_dsub>
 800a162:	3530      	adds	r5, #48	@ 0x30
 800a164:	f806 5b01 	strb.w	r5, [r6], #1
 800a168:	4602      	mov	r2, r0
 800a16a:	460b      	mov	r3, r1
 800a16c:	42a6      	cmp	r6, r4
 800a16e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a172:	f04f 0200 	mov.w	r2, #0
 800a176:	d124      	bne.n	800a1c2 <_dtoa_r+0x662>
 800a178:	4bac      	ldr	r3, [pc, #688]	@ (800a42c <_dtoa_r+0x8cc>)
 800a17a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a17e:	f7f6 f88d 	bl	800029c <__adddf3>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a18a:	f7f6 fccd 	bl	8000b28 <__aeabi_dcmpgt>
 800a18e:	2800      	cmp	r0, #0
 800a190:	d145      	bne.n	800a21e <_dtoa_r+0x6be>
 800a192:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a196:	49a5      	ldr	r1, [pc, #660]	@ (800a42c <_dtoa_r+0x8cc>)
 800a198:	2000      	movs	r0, #0
 800a19a:	f7f6 f87d 	bl	8000298 <__aeabi_dsub>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1a6:	f7f6 fca1 	bl	8000aec <__aeabi_dcmplt>
 800a1aa:	2800      	cmp	r0, #0
 800a1ac:	f43f aef5 	beq.w	8009f9a <_dtoa_r+0x43a>
 800a1b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a1b2:	1e73      	subs	r3, r6, #1
 800a1b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800a1b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1ba:	2b30      	cmp	r3, #48	@ 0x30
 800a1bc:	d0f8      	beq.n	800a1b0 <_dtoa_r+0x650>
 800a1be:	9f04      	ldr	r7, [sp, #16]
 800a1c0:	e73e      	b.n	800a040 <_dtoa_r+0x4e0>
 800a1c2:	4b9b      	ldr	r3, [pc, #620]	@ (800a430 <_dtoa_r+0x8d0>)
 800a1c4:	f7f6 fa20 	bl	8000608 <__aeabi_dmul>
 800a1c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1cc:	e7bc      	b.n	800a148 <_dtoa_r+0x5e8>
 800a1ce:	d10c      	bne.n	800a1ea <_dtoa_r+0x68a>
 800a1d0:	4b98      	ldr	r3, [pc, #608]	@ (800a434 <_dtoa_r+0x8d4>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1d8:	f7f6 fa16 	bl	8000608 <__aeabi_dmul>
 800a1dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a1e0:	f7f6 fc98 	bl	8000b14 <__aeabi_dcmpge>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f000 8157 	beq.w	800a498 <_dtoa_r+0x938>
 800a1ea:	2400      	movs	r4, #0
 800a1ec:	4625      	mov	r5, r4
 800a1ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1f0:	43db      	mvns	r3, r3
 800a1f2:	9304      	str	r3, [sp, #16]
 800a1f4:	4656      	mov	r6, sl
 800a1f6:	2700      	movs	r7, #0
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4658      	mov	r0, fp
 800a1fc:	f000 fbb4 	bl	800a968 <_Bfree>
 800a200:	2d00      	cmp	r5, #0
 800a202:	d0dc      	beq.n	800a1be <_dtoa_r+0x65e>
 800a204:	b12f      	cbz	r7, 800a212 <_dtoa_r+0x6b2>
 800a206:	42af      	cmp	r7, r5
 800a208:	d003      	beq.n	800a212 <_dtoa_r+0x6b2>
 800a20a:	4639      	mov	r1, r7
 800a20c:	4658      	mov	r0, fp
 800a20e:	f000 fbab 	bl	800a968 <_Bfree>
 800a212:	4629      	mov	r1, r5
 800a214:	4658      	mov	r0, fp
 800a216:	f000 fba7 	bl	800a968 <_Bfree>
 800a21a:	e7d0      	b.n	800a1be <_dtoa_r+0x65e>
 800a21c:	9704      	str	r7, [sp, #16]
 800a21e:	4633      	mov	r3, r6
 800a220:	461e      	mov	r6, r3
 800a222:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a226:	2a39      	cmp	r2, #57	@ 0x39
 800a228:	d107      	bne.n	800a23a <_dtoa_r+0x6da>
 800a22a:	459a      	cmp	sl, r3
 800a22c:	d1f8      	bne.n	800a220 <_dtoa_r+0x6c0>
 800a22e:	9a04      	ldr	r2, [sp, #16]
 800a230:	3201      	adds	r2, #1
 800a232:	9204      	str	r2, [sp, #16]
 800a234:	2230      	movs	r2, #48	@ 0x30
 800a236:	f88a 2000 	strb.w	r2, [sl]
 800a23a:	781a      	ldrb	r2, [r3, #0]
 800a23c:	3201      	adds	r2, #1
 800a23e:	701a      	strb	r2, [r3, #0]
 800a240:	e7bd      	b.n	800a1be <_dtoa_r+0x65e>
 800a242:	4b7b      	ldr	r3, [pc, #492]	@ (800a430 <_dtoa_r+0x8d0>)
 800a244:	2200      	movs	r2, #0
 800a246:	f7f6 f9df 	bl	8000608 <__aeabi_dmul>
 800a24a:	2200      	movs	r2, #0
 800a24c:	2300      	movs	r3, #0
 800a24e:	4604      	mov	r4, r0
 800a250:	460d      	mov	r5, r1
 800a252:	f7f6 fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 800a256:	2800      	cmp	r0, #0
 800a258:	f43f aebb 	beq.w	8009fd2 <_dtoa_r+0x472>
 800a25c:	e6f0      	b.n	800a040 <_dtoa_r+0x4e0>
 800a25e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a260:	2a00      	cmp	r2, #0
 800a262:	f000 80db 	beq.w	800a41c <_dtoa_r+0x8bc>
 800a266:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a268:	2a01      	cmp	r2, #1
 800a26a:	f300 80bf 	bgt.w	800a3ec <_dtoa_r+0x88c>
 800a26e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a270:	2a00      	cmp	r2, #0
 800a272:	f000 80b7 	beq.w	800a3e4 <_dtoa_r+0x884>
 800a276:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a27a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a27c:	4646      	mov	r6, r8
 800a27e:	9a08      	ldr	r2, [sp, #32]
 800a280:	2101      	movs	r1, #1
 800a282:	441a      	add	r2, r3
 800a284:	4658      	mov	r0, fp
 800a286:	4498      	add	r8, r3
 800a288:	9208      	str	r2, [sp, #32]
 800a28a:	f000 fc21 	bl	800aad0 <__i2b>
 800a28e:	4605      	mov	r5, r0
 800a290:	b15e      	cbz	r6, 800a2aa <_dtoa_r+0x74a>
 800a292:	9b08      	ldr	r3, [sp, #32]
 800a294:	2b00      	cmp	r3, #0
 800a296:	dd08      	ble.n	800a2aa <_dtoa_r+0x74a>
 800a298:	42b3      	cmp	r3, r6
 800a29a:	9a08      	ldr	r2, [sp, #32]
 800a29c:	bfa8      	it	ge
 800a29e:	4633      	movge	r3, r6
 800a2a0:	eba8 0803 	sub.w	r8, r8, r3
 800a2a4:	1af6      	subs	r6, r6, r3
 800a2a6:	1ad3      	subs	r3, r2, r3
 800a2a8:	9308      	str	r3, [sp, #32]
 800a2aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ac:	b1f3      	cbz	r3, 800a2ec <_dtoa_r+0x78c>
 800a2ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 80b7 	beq.w	800a424 <_dtoa_r+0x8c4>
 800a2b6:	b18c      	cbz	r4, 800a2dc <_dtoa_r+0x77c>
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	4658      	mov	r0, fp
 800a2be:	f000 fcc7 	bl	800ac50 <__pow5mult>
 800a2c2:	464a      	mov	r2, r9
 800a2c4:	4601      	mov	r1, r0
 800a2c6:	4605      	mov	r5, r0
 800a2c8:	4658      	mov	r0, fp
 800a2ca:	f000 fc17 	bl	800aafc <__multiply>
 800a2ce:	4649      	mov	r1, r9
 800a2d0:	9004      	str	r0, [sp, #16]
 800a2d2:	4658      	mov	r0, fp
 800a2d4:	f000 fb48 	bl	800a968 <_Bfree>
 800a2d8:	9b04      	ldr	r3, [sp, #16]
 800a2da:	4699      	mov	r9, r3
 800a2dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2de:	1b1a      	subs	r2, r3, r4
 800a2e0:	d004      	beq.n	800a2ec <_dtoa_r+0x78c>
 800a2e2:	4649      	mov	r1, r9
 800a2e4:	4658      	mov	r0, fp
 800a2e6:	f000 fcb3 	bl	800ac50 <__pow5mult>
 800a2ea:	4681      	mov	r9, r0
 800a2ec:	2101      	movs	r1, #1
 800a2ee:	4658      	mov	r0, fp
 800a2f0:	f000 fbee 	bl	800aad0 <__i2b>
 800a2f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 81cf 	beq.w	800a69c <_dtoa_r+0xb3c>
 800a2fe:	461a      	mov	r2, r3
 800a300:	4601      	mov	r1, r0
 800a302:	4658      	mov	r0, fp
 800a304:	f000 fca4 	bl	800ac50 <__pow5mult>
 800a308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a30a:	2b01      	cmp	r3, #1
 800a30c:	4604      	mov	r4, r0
 800a30e:	f300 8095 	bgt.w	800a43c <_dtoa_r+0x8dc>
 800a312:	9b02      	ldr	r3, [sp, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f040 8087 	bne.w	800a428 <_dtoa_r+0x8c8>
 800a31a:	9b03      	ldr	r3, [sp, #12]
 800a31c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a320:	2b00      	cmp	r3, #0
 800a322:	f040 8089 	bne.w	800a438 <_dtoa_r+0x8d8>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a32c:	0d1b      	lsrs	r3, r3, #20
 800a32e:	051b      	lsls	r3, r3, #20
 800a330:	b12b      	cbz	r3, 800a33e <_dtoa_r+0x7de>
 800a332:	9b08      	ldr	r3, [sp, #32]
 800a334:	3301      	adds	r3, #1
 800a336:	9308      	str	r3, [sp, #32]
 800a338:	f108 0801 	add.w	r8, r8, #1
 800a33c:	2301      	movs	r3, #1
 800a33e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a340:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a342:	2b00      	cmp	r3, #0
 800a344:	f000 81b0 	beq.w	800a6a8 <_dtoa_r+0xb48>
 800a348:	6923      	ldr	r3, [r4, #16]
 800a34a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a34e:	6918      	ldr	r0, [r3, #16]
 800a350:	f000 fb72 	bl	800aa38 <__hi0bits>
 800a354:	f1c0 0020 	rsb	r0, r0, #32
 800a358:	9b08      	ldr	r3, [sp, #32]
 800a35a:	4418      	add	r0, r3
 800a35c:	f010 001f 	ands.w	r0, r0, #31
 800a360:	d077      	beq.n	800a452 <_dtoa_r+0x8f2>
 800a362:	f1c0 0320 	rsb	r3, r0, #32
 800a366:	2b04      	cmp	r3, #4
 800a368:	dd6b      	ble.n	800a442 <_dtoa_r+0x8e2>
 800a36a:	9b08      	ldr	r3, [sp, #32]
 800a36c:	f1c0 001c 	rsb	r0, r0, #28
 800a370:	4403      	add	r3, r0
 800a372:	4480      	add	r8, r0
 800a374:	4406      	add	r6, r0
 800a376:	9308      	str	r3, [sp, #32]
 800a378:	f1b8 0f00 	cmp.w	r8, #0
 800a37c:	dd05      	ble.n	800a38a <_dtoa_r+0x82a>
 800a37e:	4649      	mov	r1, r9
 800a380:	4642      	mov	r2, r8
 800a382:	4658      	mov	r0, fp
 800a384:	f000 fcbe 	bl	800ad04 <__lshift>
 800a388:	4681      	mov	r9, r0
 800a38a:	9b08      	ldr	r3, [sp, #32]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dd05      	ble.n	800a39c <_dtoa_r+0x83c>
 800a390:	4621      	mov	r1, r4
 800a392:	461a      	mov	r2, r3
 800a394:	4658      	mov	r0, fp
 800a396:	f000 fcb5 	bl	800ad04 <__lshift>
 800a39a:	4604      	mov	r4, r0
 800a39c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d059      	beq.n	800a456 <_dtoa_r+0x8f6>
 800a3a2:	4621      	mov	r1, r4
 800a3a4:	4648      	mov	r0, r9
 800a3a6:	f000 fd19 	bl	800addc <__mcmp>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	da53      	bge.n	800a456 <_dtoa_r+0x8f6>
 800a3ae:	1e7b      	subs	r3, r7, #1
 800a3b0:	9304      	str	r3, [sp, #16]
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	220a      	movs	r2, #10
 800a3b8:	4658      	mov	r0, fp
 800a3ba:	f000 faf7 	bl	800a9ac <__multadd>
 800a3be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3c0:	4681      	mov	r9, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 8172 	beq.w	800a6ac <_dtoa_r+0xb4c>
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	220a      	movs	r2, #10
 800a3ce:	4658      	mov	r0, fp
 800a3d0:	f000 faec 	bl	800a9ac <__multadd>
 800a3d4:	9b00      	ldr	r3, [sp, #0]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	4605      	mov	r5, r0
 800a3da:	dc67      	bgt.n	800a4ac <_dtoa_r+0x94c>
 800a3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	dc41      	bgt.n	800a466 <_dtoa_r+0x906>
 800a3e2:	e063      	b.n	800a4ac <_dtoa_r+0x94c>
 800a3e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a3e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a3ea:	e746      	b.n	800a27a <_dtoa_r+0x71a>
 800a3ec:	9b07      	ldr	r3, [sp, #28]
 800a3ee:	1e5c      	subs	r4, r3, #1
 800a3f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	bfbf      	itttt	lt
 800a3f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a3f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a3fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a3fc:	1ae3      	sublt	r3, r4, r3
 800a3fe:	bfb4      	ite	lt
 800a400:	18d2      	addlt	r2, r2, r3
 800a402:	1b1c      	subge	r4, r3, r4
 800a404:	9b07      	ldr	r3, [sp, #28]
 800a406:	bfbc      	itt	lt
 800a408:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a40a:	2400      	movlt	r4, #0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	bfb5      	itete	lt
 800a410:	eba8 0603 	sublt.w	r6, r8, r3
 800a414:	9b07      	ldrge	r3, [sp, #28]
 800a416:	2300      	movlt	r3, #0
 800a418:	4646      	movge	r6, r8
 800a41a:	e730      	b.n	800a27e <_dtoa_r+0x71e>
 800a41c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a41e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a420:	4646      	mov	r6, r8
 800a422:	e735      	b.n	800a290 <_dtoa_r+0x730>
 800a424:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a426:	e75c      	b.n	800a2e2 <_dtoa_r+0x782>
 800a428:	2300      	movs	r3, #0
 800a42a:	e788      	b.n	800a33e <_dtoa_r+0x7de>
 800a42c:	3fe00000 	.word	0x3fe00000
 800a430:	40240000 	.word	0x40240000
 800a434:	40140000 	.word	0x40140000
 800a438:	9b02      	ldr	r3, [sp, #8]
 800a43a:	e780      	b.n	800a33e <_dtoa_r+0x7de>
 800a43c:	2300      	movs	r3, #0
 800a43e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a440:	e782      	b.n	800a348 <_dtoa_r+0x7e8>
 800a442:	d099      	beq.n	800a378 <_dtoa_r+0x818>
 800a444:	9a08      	ldr	r2, [sp, #32]
 800a446:	331c      	adds	r3, #28
 800a448:	441a      	add	r2, r3
 800a44a:	4498      	add	r8, r3
 800a44c:	441e      	add	r6, r3
 800a44e:	9208      	str	r2, [sp, #32]
 800a450:	e792      	b.n	800a378 <_dtoa_r+0x818>
 800a452:	4603      	mov	r3, r0
 800a454:	e7f6      	b.n	800a444 <_dtoa_r+0x8e4>
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	9704      	str	r7, [sp, #16]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dc20      	bgt.n	800a4a0 <_dtoa_r+0x940>
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a462:	2b02      	cmp	r3, #2
 800a464:	dd1e      	ble.n	800a4a4 <_dtoa_r+0x944>
 800a466:	9b00      	ldr	r3, [sp, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f47f aec0 	bne.w	800a1ee <_dtoa_r+0x68e>
 800a46e:	4621      	mov	r1, r4
 800a470:	2205      	movs	r2, #5
 800a472:	4658      	mov	r0, fp
 800a474:	f000 fa9a 	bl	800a9ac <__multadd>
 800a478:	4601      	mov	r1, r0
 800a47a:	4604      	mov	r4, r0
 800a47c:	4648      	mov	r0, r9
 800a47e:	f000 fcad 	bl	800addc <__mcmp>
 800a482:	2800      	cmp	r0, #0
 800a484:	f77f aeb3 	ble.w	800a1ee <_dtoa_r+0x68e>
 800a488:	4656      	mov	r6, sl
 800a48a:	2331      	movs	r3, #49	@ 0x31
 800a48c:	f806 3b01 	strb.w	r3, [r6], #1
 800a490:	9b04      	ldr	r3, [sp, #16]
 800a492:	3301      	adds	r3, #1
 800a494:	9304      	str	r3, [sp, #16]
 800a496:	e6ae      	b.n	800a1f6 <_dtoa_r+0x696>
 800a498:	9c07      	ldr	r4, [sp, #28]
 800a49a:	9704      	str	r7, [sp, #16]
 800a49c:	4625      	mov	r5, r4
 800a49e:	e7f3      	b.n	800a488 <_dtoa_r+0x928>
 800a4a0:	9b07      	ldr	r3, [sp, #28]
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 8104 	beq.w	800a6b4 <_dtoa_r+0xb54>
 800a4ac:	2e00      	cmp	r6, #0
 800a4ae:	dd05      	ble.n	800a4bc <_dtoa_r+0x95c>
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	4632      	mov	r2, r6
 800a4b4:	4658      	mov	r0, fp
 800a4b6:	f000 fc25 	bl	800ad04 <__lshift>
 800a4ba:	4605      	mov	r5, r0
 800a4bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d05a      	beq.n	800a578 <_dtoa_r+0xa18>
 800a4c2:	6869      	ldr	r1, [r5, #4]
 800a4c4:	4658      	mov	r0, fp
 800a4c6:	f000 fa0f 	bl	800a8e8 <_Balloc>
 800a4ca:	4606      	mov	r6, r0
 800a4cc:	b928      	cbnz	r0, 800a4da <_dtoa_r+0x97a>
 800a4ce:	4b84      	ldr	r3, [pc, #528]	@ (800a6e0 <_dtoa_r+0xb80>)
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a4d6:	f7ff bb5a 	b.w	8009b8e <_dtoa_r+0x2e>
 800a4da:	692a      	ldr	r2, [r5, #16]
 800a4dc:	3202      	adds	r2, #2
 800a4de:	0092      	lsls	r2, r2, #2
 800a4e0:	f105 010c 	add.w	r1, r5, #12
 800a4e4:	300c      	adds	r0, #12
 800a4e6:	f000 ffaf 	bl	800b448 <memcpy>
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	4631      	mov	r1, r6
 800a4ee:	4658      	mov	r0, fp
 800a4f0:	f000 fc08 	bl	800ad04 <__lshift>
 800a4f4:	f10a 0301 	add.w	r3, sl, #1
 800a4f8:	9307      	str	r3, [sp, #28]
 800a4fa:	9b00      	ldr	r3, [sp, #0]
 800a4fc:	4453      	add	r3, sl
 800a4fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	462f      	mov	r7, r5
 800a508:	930a      	str	r3, [sp, #40]	@ 0x28
 800a50a:	4605      	mov	r5, r0
 800a50c:	9b07      	ldr	r3, [sp, #28]
 800a50e:	4621      	mov	r1, r4
 800a510:	3b01      	subs	r3, #1
 800a512:	4648      	mov	r0, r9
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	f7ff fa98 	bl	8009a4a <quorem>
 800a51a:	4639      	mov	r1, r7
 800a51c:	9002      	str	r0, [sp, #8]
 800a51e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a522:	4648      	mov	r0, r9
 800a524:	f000 fc5a 	bl	800addc <__mcmp>
 800a528:	462a      	mov	r2, r5
 800a52a:	9008      	str	r0, [sp, #32]
 800a52c:	4621      	mov	r1, r4
 800a52e:	4658      	mov	r0, fp
 800a530:	f000 fc70 	bl	800ae14 <__mdiff>
 800a534:	68c2      	ldr	r2, [r0, #12]
 800a536:	4606      	mov	r6, r0
 800a538:	bb02      	cbnz	r2, 800a57c <_dtoa_r+0xa1c>
 800a53a:	4601      	mov	r1, r0
 800a53c:	4648      	mov	r0, r9
 800a53e:	f000 fc4d 	bl	800addc <__mcmp>
 800a542:	4602      	mov	r2, r0
 800a544:	4631      	mov	r1, r6
 800a546:	4658      	mov	r0, fp
 800a548:	920e      	str	r2, [sp, #56]	@ 0x38
 800a54a:	f000 fa0d 	bl	800a968 <_Bfree>
 800a54e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a550:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a552:	9e07      	ldr	r6, [sp, #28]
 800a554:	ea43 0102 	orr.w	r1, r3, r2
 800a558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a55a:	4319      	orrs	r1, r3
 800a55c:	d110      	bne.n	800a580 <_dtoa_r+0xa20>
 800a55e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a562:	d029      	beq.n	800a5b8 <_dtoa_r+0xa58>
 800a564:	9b08      	ldr	r3, [sp, #32]
 800a566:	2b00      	cmp	r3, #0
 800a568:	dd02      	ble.n	800a570 <_dtoa_r+0xa10>
 800a56a:	9b02      	ldr	r3, [sp, #8]
 800a56c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a570:	9b00      	ldr	r3, [sp, #0]
 800a572:	f883 8000 	strb.w	r8, [r3]
 800a576:	e63f      	b.n	800a1f8 <_dtoa_r+0x698>
 800a578:	4628      	mov	r0, r5
 800a57a:	e7bb      	b.n	800a4f4 <_dtoa_r+0x994>
 800a57c:	2201      	movs	r2, #1
 800a57e:	e7e1      	b.n	800a544 <_dtoa_r+0x9e4>
 800a580:	9b08      	ldr	r3, [sp, #32]
 800a582:	2b00      	cmp	r3, #0
 800a584:	db04      	blt.n	800a590 <_dtoa_r+0xa30>
 800a586:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a588:	430b      	orrs	r3, r1
 800a58a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a58c:	430b      	orrs	r3, r1
 800a58e:	d120      	bne.n	800a5d2 <_dtoa_r+0xa72>
 800a590:	2a00      	cmp	r2, #0
 800a592:	dded      	ble.n	800a570 <_dtoa_r+0xa10>
 800a594:	4649      	mov	r1, r9
 800a596:	2201      	movs	r2, #1
 800a598:	4658      	mov	r0, fp
 800a59a:	f000 fbb3 	bl	800ad04 <__lshift>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4681      	mov	r9, r0
 800a5a2:	f000 fc1b 	bl	800addc <__mcmp>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	dc03      	bgt.n	800a5b2 <_dtoa_r+0xa52>
 800a5aa:	d1e1      	bne.n	800a570 <_dtoa_r+0xa10>
 800a5ac:	f018 0f01 	tst.w	r8, #1
 800a5b0:	d0de      	beq.n	800a570 <_dtoa_r+0xa10>
 800a5b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5b6:	d1d8      	bne.n	800a56a <_dtoa_r+0xa0a>
 800a5b8:	9a00      	ldr	r2, [sp, #0]
 800a5ba:	2339      	movs	r3, #57	@ 0x39
 800a5bc:	7013      	strb	r3, [r2, #0]
 800a5be:	4633      	mov	r3, r6
 800a5c0:	461e      	mov	r6, r3
 800a5c2:	3b01      	subs	r3, #1
 800a5c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a5c8:	2a39      	cmp	r2, #57	@ 0x39
 800a5ca:	d052      	beq.n	800a672 <_dtoa_r+0xb12>
 800a5cc:	3201      	adds	r2, #1
 800a5ce:	701a      	strb	r2, [r3, #0]
 800a5d0:	e612      	b.n	800a1f8 <_dtoa_r+0x698>
 800a5d2:	2a00      	cmp	r2, #0
 800a5d4:	dd07      	ble.n	800a5e6 <_dtoa_r+0xa86>
 800a5d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5da:	d0ed      	beq.n	800a5b8 <_dtoa_r+0xa58>
 800a5dc:	9a00      	ldr	r2, [sp, #0]
 800a5de:	f108 0301 	add.w	r3, r8, #1
 800a5e2:	7013      	strb	r3, [r2, #0]
 800a5e4:	e608      	b.n	800a1f8 <_dtoa_r+0x698>
 800a5e6:	9b07      	ldr	r3, [sp, #28]
 800a5e8:	9a07      	ldr	r2, [sp, #28]
 800a5ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a5ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d028      	beq.n	800a646 <_dtoa_r+0xae6>
 800a5f4:	4649      	mov	r1, r9
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	220a      	movs	r2, #10
 800a5fa:	4658      	mov	r0, fp
 800a5fc:	f000 f9d6 	bl	800a9ac <__multadd>
 800a600:	42af      	cmp	r7, r5
 800a602:	4681      	mov	r9, r0
 800a604:	f04f 0300 	mov.w	r3, #0
 800a608:	f04f 020a 	mov.w	r2, #10
 800a60c:	4639      	mov	r1, r7
 800a60e:	4658      	mov	r0, fp
 800a610:	d107      	bne.n	800a622 <_dtoa_r+0xac2>
 800a612:	f000 f9cb 	bl	800a9ac <__multadd>
 800a616:	4607      	mov	r7, r0
 800a618:	4605      	mov	r5, r0
 800a61a:	9b07      	ldr	r3, [sp, #28]
 800a61c:	3301      	adds	r3, #1
 800a61e:	9307      	str	r3, [sp, #28]
 800a620:	e774      	b.n	800a50c <_dtoa_r+0x9ac>
 800a622:	f000 f9c3 	bl	800a9ac <__multadd>
 800a626:	4629      	mov	r1, r5
 800a628:	4607      	mov	r7, r0
 800a62a:	2300      	movs	r3, #0
 800a62c:	220a      	movs	r2, #10
 800a62e:	4658      	mov	r0, fp
 800a630:	f000 f9bc 	bl	800a9ac <__multadd>
 800a634:	4605      	mov	r5, r0
 800a636:	e7f0      	b.n	800a61a <_dtoa_r+0xaba>
 800a638:	9b00      	ldr	r3, [sp, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	bfcc      	ite	gt
 800a63e:	461e      	movgt	r6, r3
 800a640:	2601      	movle	r6, #1
 800a642:	4456      	add	r6, sl
 800a644:	2700      	movs	r7, #0
 800a646:	4649      	mov	r1, r9
 800a648:	2201      	movs	r2, #1
 800a64a:	4658      	mov	r0, fp
 800a64c:	f000 fb5a 	bl	800ad04 <__lshift>
 800a650:	4621      	mov	r1, r4
 800a652:	4681      	mov	r9, r0
 800a654:	f000 fbc2 	bl	800addc <__mcmp>
 800a658:	2800      	cmp	r0, #0
 800a65a:	dcb0      	bgt.n	800a5be <_dtoa_r+0xa5e>
 800a65c:	d102      	bne.n	800a664 <_dtoa_r+0xb04>
 800a65e:	f018 0f01 	tst.w	r8, #1
 800a662:	d1ac      	bne.n	800a5be <_dtoa_r+0xa5e>
 800a664:	4633      	mov	r3, r6
 800a666:	461e      	mov	r6, r3
 800a668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a66c:	2a30      	cmp	r2, #48	@ 0x30
 800a66e:	d0fa      	beq.n	800a666 <_dtoa_r+0xb06>
 800a670:	e5c2      	b.n	800a1f8 <_dtoa_r+0x698>
 800a672:	459a      	cmp	sl, r3
 800a674:	d1a4      	bne.n	800a5c0 <_dtoa_r+0xa60>
 800a676:	9b04      	ldr	r3, [sp, #16]
 800a678:	3301      	adds	r3, #1
 800a67a:	9304      	str	r3, [sp, #16]
 800a67c:	2331      	movs	r3, #49	@ 0x31
 800a67e:	f88a 3000 	strb.w	r3, [sl]
 800a682:	e5b9      	b.n	800a1f8 <_dtoa_r+0x698>
 800a684:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a686:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a6e4 <_dtoa_r+0xb84>
 800a68a:	b11b      	cbz	r3, 800a694 <_dtoa_r+0xb34>
 800a68c:	f10a 0308 	add.w	r3, sl, #8
 800a690:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a692:	6013      	str	r3, [r2, #0]
 800a694:	4650      	mov	r0, sl
 800a696:	b019      	add	sp, #100	@ 0x64
 800a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	f77f ae37 	ble.w	800a312 <_dtoa_r+0x7b2>
 800a6a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6a8:	2001      	movs	r0, #1
 800a6aa:	e655      	b.n	800a358 <_dtoa_r+0x7f8>
 800a6ac:	9b00      	ldr	r3, [sp, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f77f aed6 	ble.w	800a460 <_dtoa_r+0x900>
 800a6b4:	4656      	mov	r6, sl
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	4648      	mov	r0, r9
 800a6ba:	f7ff f9c6 	bl	8009a4a <quorem>
 800a6be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6c2:	f806 8b01 	strb.w	r8, [r6], #1
 800a6c6:	9b00      	ldr	r3, [sp, #0]
 800a6c8:	eba6 020a 	sub.w	r2, r6, sl
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	ddb3      	ble.n	800a638 <_dtoa_r+0xad8>
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	220a      	movs	r2, #10
 800a6d6:	4658      	mov	r0, fp
 800a6d8:	f000 f968 	bl	800a9ac <__multadd>
 800a6dc:	4681      	mov	r9, r0
 800a6de:	e7ea      	b.n	800a6b6 <_dtoa_r+0xb56>
 800a6e0:	0800cae8 	.word	0x0800cae8
 800a6e4:	0800ca6c 	.word	0x0800ca6c

0800a6e8 <_free_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4605      	mov	r5, r0
 800a6ec:	2900      	cmp	r1, #0
 800a6ee:	d041      	beq.n	800a774 <_free_r+0x8c>
 800a6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6f4:	1f0c      	subs	r4, r1, #4
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	bfb8      	it	lt
 800a6fa:	18e4      	addlt	r4, r4, r3
 800a6fc:	f000 f8e8 	bl	800a8d0 <__malloc_lock>
 800a700:	4a1d      	ldr	r2, [pc, #116]	@ (800a778 <_free_r+0x90>)
 800a702:	6813      	ldr	r3, [r2, #0]
 800a704:	b933      	cbnz	r3, 800a714 <_free_r+0x2c>
 800a706:	6063      	str	r3, [r4, #4]
 800a708:	6014      	str	r4, [r2, #0]
 800a70a:	4628      	mov	r0, r5
 800a70c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a710:	f000 b8e4 	b.w	800a8dc <__malloc_unlock>
 800a714:	42a3      	cmp	r3, r4
 800a716:	d908      	bls.n	800a72a <_free_r+0x42>
 800a718:	6820      	ldr	r0, [r4, #0]
 800a71a:	1821      	adds	r1, r4, r0
 800a71c:	428b      	cmp	r3, r1
 800a71e:	bf01      	itttt	eq
 800a720:	6819      	ldreq	r1, [r3, #0]
 800a722:	685b      	ldreq	r3, [r3, #4]
 800a724:	1809      	addeq	r1, r1, r0
 800a726:	6021      	streq	r1, [r4, #0]
 800a728:	e7ed      	b.n	800a706 <_free_r+0x1e>
 800a72a:	461a      	mov	r2, r3
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	b10b      	cbz	r3, 800a734 <_free_r+0x4c>
 800a730:	42a3      	cmp	r3, r4
 800a732:	d9fa      	bls.n	800a72a <_free_r+0x42>
 800a734:	6811      	ldr	r1, [r2, #0]
 800a736:	1850      	adds	r0, r2, r1
 800a738:	42a0      	cmp	r0, r4
 800a73a:	d10b      	bne.n	800a754 <_free_r+0x6c>
 800a73c:	6820      	ldr	r0, [r4, #0]
 800a73e:	4401      	add	r1, r0
 800a740:	1850      	adds	r0, r2, r1
 800a742:	4283      	cmp	r3, r0
 800a744:	6011      	str	r1, [r2, #0]
 800a746:	d1e0      	bne.n	800a70a <_free_r+0x22>
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	6053      	str	r3, [r2, #4]
 800a74e:	4408      	add	r0, r1
 800a750:	6010      	str	r0, [r2, #0]
 800a752:	e7da      	b.n	800a70a <_free_r+0x22>
 800a754:	d902      	bls.n	800a75c <_free_r+0x74>
 800a756:	230c      	movs	r3, #12
 800a758:	602b      	str	r3, [r5, #0]
 800a75a:	e7d6      	b.n	800a70a <_free_r+0x22>
 800a75c:	6820      	ldr	r0, [r4, #0]
 800a75e:	1821      	adds	r1, r4, r0
 800a760:	428b      	cmp	r3, r1
 800a762:	bf04      	itt	eq
 800a764:	6819      	ldreq	r1, [r3, #0]
 800a766:	685b      	ldreq	r3, [r3, #4]
 800a768:	6063      	str	r3, [r4, #4]
 800a76a:	bf04      	itt	eq
 800a76c:	1809      	addeq	r1, r1, r0
 800a76e:	6021      	streq	r1, [r4, #0]
 800a770:	6054      	str	r4, [r2, #4]
 800a772:	e7ca      	b.n	800a70a <_free_r+0x22>
 800a774:	bd38      	pop	{r3, r4, r5, pc}
 800a776:	bf00      	nop
 800a778:	20002100 	.word	0x20002100

0800a77c <malloc>:
 800a77c:	4b02      	ldr	r3, [pc, #8]	@ (800a788 <malloc+0xc>)
 800a77e:	4601      	mov	r1, r0
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	f000 b825 	b.w	800a7d0 <_malloc_r>
 800a786:	bf00      	nop
 800a788:	20000108 	.word	0x20000108

0800a78c <sbrk_aligned>:
 800a78c:	b570      	push	{r4, r5, r6, lr}
 800a78e:	4e0f      	ldr	r6, [pc, #60]	@ (800a7cc <sbrk_aligned+0x40>)
 800a790:	460c      	mov	r4, r1
 800a792:	6831      	ldr	r1, [r6, #0]
 800a794:	4605      	mov	r5, r0
 800a796:	b911      	cbnz	r1, 800a79e <sbrk_aligned+0x12>
 800a798:	f000 fe46 	bl	800b428 <_sbrk_r>
 800a79c:	6030      	str	r0, [r6, #0]
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4628      	mov	r0, r5
 800a7a2:	f000 fe41 	bl	800b428 <_sbrk_r>
 800a7a6:	1c43      	adds	r3, r0, #1
 800a7a8:	d103      	bne.n	800a7b2 <sbrk_aligned+0x26>
 800a7aa:	f04f 34ff 	mov.w	r4, #4294967295
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	1cc4      	adds	r4, r0, #3
 800a7b4:	f024 0403 	bic.w	r4, r4, #3
 800a7b8:	42a0      	cmp	r0, r4
 800a7ba:	d0f8      	beq.n	800a7ae <sbrk_aligned+0x22>
 800a7bc:	1a21      	subs	r1, r4, r0
 800a7be:	4628      	mov	r0, r5
 800a7c0:	f000 fe32 	bl	800b428 <_sbrk_r>
 800a7c4:	3001      	adds	r0, #1
 800a7c6:	d1f2      	bne.n	800a7ae <sbrk_aligned+0x22>
 800a7c8:	e7ef      	b.n	800a7aa <sbrk_aligned+0x1e>
 800a7ca:	bf00      	nop
 800a7cc:	200020fc 	.word	0x200020fc

0800a7d0 <_malloc_r>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	1ccd      	adds	r5, r1, #3
 800a7d6:	f025 0503 	bic.w	r5, r5, #3
 800a7da:	3508      	adds	r5, #8
 800a7dc:	2d0c      	cmp	r5, #12
 800a7de:	bf38      	it	cc
 800a7e0:	250c      	movcc	r5, #12
 800a7e2:	2d00      	cmp	r5, #0
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	db01      	blt.n	800a7ec <_malloc_r+0x1c>
 800a7e8:	42a9      	cmp	r1, r5
 800a7ea:	d904      	bls.n	800a7f6 <_malloc_r+0x26>
 800a7ec:	230c      	movs	r3, #12
 800a7ee:	6033      	str	r3, [r6, #0]
 800a7f0:	2000      	movs	r0, #0
 800a7f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a8cc <_malloc_r+0xfc>
 800a7fa:	f000 f869 	bl	800a8d0 <__malloc_lock>
 800a7fe:	f8d8 3000 	ldr.w	r3, [r8]
 800a802:	461c      	mov	r4, r3
 800a804:	bb44      	cbnz	r4, 800a858 <_malloc_r+0x88>
 800a806:	4629      	mov	r1, r5
 800a808:	4630      	mov	r0, r6
 800a80a:	f7ff ffbf 	bl	800a78c <sbrk_aligned>
 800a80e:	1c43      	adds	r3, r0, #1
 800a810:	4604      	mov	r4, r0
 800a812:	d158      	bne.n	800a8c6 <_malloc_r+0xf6>
 800a814:	f8d8 4000 	ldr.w	r4, [r8]
 800a818:	4627      	mov	r7, r4
 800a81a:	2f00      	cmp	r7, #0
 800a81c:	d143      	bne.n	800a8a6 <_malloc_r+0xd6>
 800a81e:	2c00      	cmp	r4, #0
 800a820:	d04b      	beq.n	800a8ba <_malloc_r+0xea>
 800a822:	6823      	ldr	r3, [r4, #0]
 800a824:	4639      	mov	r1, r7
 800a826:	4630      	mov	r0, r6
 800a828:	eb04 0903 	add.w	r9, r4, r3
 800a82c:	f000 fdfc 	bl	800b428 <_sbrk_r>
 800a830:	4581      	cmp	r9, r0
 800a832:	d142      	bne.n	800a8ba <_malloc_r+0xea>
 800a834:	6821      	ldr	r1, [r4, #0]
 800a836:	1a6d      	subs	r5, r5, r1
 800a838:	4629      	mov	r1, r5
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7ff ffa6 	bl	800a78c <sbrk_aligned>
 800a840:	3001      	adds	r0, #1
 800a842:	d03a      	beq.n	800a8ba <_malloc_r+0xea>
 800a844:	6823      	ldr	r3, [r4, #0]
 800a846:	442b      	add	r3, r5
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	f8d8 3000 	ldr.w	r3, [r8]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	bb62      	cbnz	r2, 800a8ac <_malloc_r+0xdc>
 800a852:	f8c8 7000 	str.w	r7, [r8]
 800a856:	e00f      	b.n	800a878 <_malloc_r+0xa8>
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	1b52      	subs	r2, r2, r5
 800a85c:	d420      	bmi.n	800a8a0 <_malloc_r+0xd0>
 800a85e:	2a0b      	cmp	r2, #11
 800a860:	d917      	bls.n	800a892 <_malloc_r+0xc2>
 800a862:	1961      	adds	r1, r4, r5
 800a864:	42a3      	cmp	r3, r4
 800a866:	6025      	str	r5, [r4, #0]
 800a868:	bf18      	it	ne
 800a86a:	6059      	strne	r1, [r3, #4]
 800a86c:	6863      	ldr	r3, [r4, #4]
 800a86e:	bf08      	it	eq
 800a870:	f8c8 1000 	streq.w	r1, [r8]
 800a874:	5162      	str	r2, [r4, r5]
 800a876:	604b      	str	r3, [r1, #4]
 800a878:	4630      	mov	r0, r6
 800a87a:	f000 f82f 	bl	800a8dc <__malloc_unlock>
 800a87e:	f104 000b 	add.w	r0, r4, #11
 800a882:	1d23      	adds	r3, r4, #4
 800a884:	f020 0007 	bic.w	r0, r0, #7
 800a888:	1ac2      	subs	r2, r0, r3
 800a88a:	bf1c      	itt	ne
 800a88c:	1a1b      	subne	r3, r3, r0
 800a88e:	50a3      	strne	r3, [r4, r2]
 800a890:	e7af      	b.n	800a7f2 <_malloc_r+0x22>
 800a892:	6862      	ldr	r2, [r4, #4]
 800a894:	42a3      	cmp	r3, r4
 800a896:	bf0c      	ite	eq
 800a898:	f8c8 2000 	streq.w	r2, [r8]
 800a89c:	605a      	strne	r2, [r3, #4]
 800a89e:	e7eb      	b.n	800a878 <_malloc_r+0xa8>
 800a8a0:	4623      	mov	r3, r4
 800a8a2:	6864      	ldr	r4, [r4, #4]
 800a8a4:	e7ae      	b.n	800a804 <_malloc_r+0x34>
 800a8a6:	463c      	mov	r4, r7
 800a8a8:	687f      	ldr	r7, [r7, #4]
 800a8aa:	e7b6      	b.n	800a81a <_malloc_r+0x4a>
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	42a3      	cmp	r3, r4
 800a8b2:	d1fb      	bne.n	800a8ac <_malloc_r+0xdc>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	6053      	str	r3, [r2, #4]
 800a8b8:	e7de      	b.n	800a878 <_malloc_r+0xa8>
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	6033      	str	r3, [r6, #0]
 800a8be:	4630      	mov	r0, r6
 800a8c0:	f000 f80c 	bl	800a8dc <__malloc_unlock>
 800a8c4:	e794      	b.n	800a7f0 <_malloc_r+0x20>
 800a8c6:	6005      	str	r5, [r0, #0]
 800a8c8:	e7d6      	b.n	800a878 <_malloc_r+0xa8>
 800a8ca:	bf00      	nop
 800a8cc:	20002100 	.word	0x20002100

0800a8d0 <__malloc_lock>:
 800a8d0:	4801      	ldr	r0, [pc, #4]	@ (800a8d8 <__malloc_lock+0x8>)
 800a8d2:	f7ff b8b8 	b.w	8009a46 <__retarget_lock_acquire_recursive>
 800a8d6:	bf00      	nop
 800a8d8:	200020f8 	.word	0x200020f8

0800a8dc <__malloc_unlock>:
 800a8dc:	4801      	ldr	r0, [pc, #4]	@ (800a8e4 <__malloc_unlock+0x8>)
 800a8de:	f7ff b8b3 	b.w	8009a48 <__retarget_lock_release_recursive>
 800a8e2:	bf00      	nop
 800a8e4:	200020f8 	.word	0x200020f8

0800a8e8 <_Balloc>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	69c6      	ldr	r6, [r0, #28]
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	b976      	cbnz	r6, 800a910 <_Balloc+0x28>
 800a8f2:	2010      	movs	r0, #16
 800a8f4:	f7ff ff42 	bl	800a77c <malloc>
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	61e0      	str	r0, [r4, #28]
 800a8fc:	b920      	cbnz	r0, 800a908 <_Balloc+0x20>
 800a8fe:	4b18      	ldr	r3, [pc, #96]	@ (800a960 <_Balloc+0x78>)
 800a900:	4818      	ldr	r0, [pc, #96]	@ (800a964 <_Balloc+0x7c>)
 800a902:	216b      	movs	r1, #107	@ 0x6b
 800a904:	f000 fdae 	bl	800b464 <__assert_func>
 800a908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a90c:	6006      	str	r6, [r0, #0]
 800a90e:	60c6      	str	r6, [r0, #12]
 800a910:	69e6      	ldr	r6, [r4, #28]
 800a912:	68f3      	ldr	r3, [r6, #12]
 800a914:	b183      	cbz	r3, 800a938 <_Balloc+0x50>
 800a916:	69e3      	ldr	r3, [r4, #28]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a91e:	b9b8      	cbnz	r0, 800a950 <_Balloc+0x68>
 800a920:	2101      	movs	r1, #1
 800a922:	fa01 f605 	lsl.w	r6, r1, r5
 800a926:	1d72      	adds	r2, r6, #5
 800a928:	0092      	lsls	r2, r2, #2
 800a92a:	4620      	mov	r0, r4
 800a92c:	f000 fdb8 	bl	800b4a0 <_calloc_r>
 800a930:	b160      	cbz	r0, 800a94c <_Balloc+0x64>
 800a932:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a936:	e00e      	b.n	800a956 <_Balloc+0x6e>
 800a938:	2221      	movs	r2, #33	@ 0x21
 800a93a:	2104      	movs	r1, #4
 800a93c:	4620      	mov	r0, r4
 800a93e:	f000 fdaf 	bl	800b4a0 <_calloc_r>
 800a942:	69e3      	ldr	r3, [r4, #28]
 800a944:	60f0      	str	r0, [r6, #12]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e4      	bne.n	800a916 <_Balloc+0x2e>
 800a94c:	2000      	movs	r0, #0
 800a94e:	bd70      	pop	{r4, r5, r6, pc}
 800a950:	6802      	ldr	r2, [r0, #0]
 800a952:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a956:	2300      	movs	r3, #0
 800a958:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a95c:	e7f7      	b.n	800a94e <_Balloc+0x66>
 800a95e:	bf00      	nop
 800a960:	0800ca79 	.word	0x0800ca79
 800a964:	0800caf9 	.word	0x0800caf9

0800a968 <_Bfree>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	69c6      	ldr	r6, [r0, #28]
 800a96c:	4605      	mov	r5, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	b976      	cbnz	r6, 800a990 <_Bfree+0x28>
 800a972:	2010      	movs	r0, #16
 800a974:	f7ff ff02 	bl	800a77c <malloc>
 800a978:	4602      	mov	r2, r0
 800a97a:	61e8      	str	r0, [r5, #28]
 800a97c:	b920      	cbnz	r0, 800a988 <_Bfree+0x20>
 800a97e:	4b09      	ldr	r3, [pc, #36]	@ (800a9a4 <_Bfree+0x3c>)
 800a980:	4809      	ldr	r0, [pc, #36]	@ (800a9a8 <_Bfree+0x40>)
 800a982:	218f      	movs	r1, #143	@ 0x8f
 800a984:	f000 fd6e 	bl	800b464 <__assert_func>
 800a988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a98c:	6006      	str	r6, [r0, #0]
 800a98e:	60c6      	str	r6, [r0, #12]
 800a990:	b13c      	cbz	r4, 800a9a2 <_Bfree+0x3a>
 800a992:	69eb      	ldr	r3, [r5, #28]
 800a994:	6862      	ldr	r2, [r4, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a99c:	6021      	str	r1, [r4, #0]
 800a99e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9a2:	bd70      	pop	{r4, r5, r6, pc}
 800a9a4:	0800ca79 	.word	0x0800ca79
 800a9a8:	0800caf9 	.word	0x0800caf9

0800a9ac <__multadd>:
 800a9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b0:	690d      	ldr	r5, [r1, #16]
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	460c      	mov	r4, r1
 800a9b6:	461e      	mov	r6, r3
 800a9b8:	f101 0c14 	add.w	ip, r1, #20
 800a9bc:	2000      	movs	r0, #0
 800a9be:	f8dc 3000 	ldr.w	r3, [ip]
 800a9c2:	b299      	uxth	r1, r3
 800a9c4:	fb02 6101 	mla	r1, r2, r1, r6
 800a9c8:	0c1e      	lsrs	r6, r3, #16
 800a9ca:	0c0b      	lsrs	r3, r1, #16
 800a9cc:	fb02 3306 	mla	r3, r2, r6, r3
 800a9d0:	b289      	uxth	r1, r1
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a9d8:	4285      	cmp	r5, r0
 800a9da:	f84c 1b04 	str.w	r1, [ip], #4
 800a9de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a9e2:	dcec      	bgt.n	800a9be <__multadd+0x12>
 800a9e4:	b30e      	cbz	r6, 800aa2a <__multadd+0x7e>
 800a9e6:	68a3      	ldr	r3, [r4, #8]
 800a9e8:	42ab      	cmp	r3, r5
 800a9ea:	dc19      	bgt.n	800aa20 <__multadd+0x74>
 800a9ec:	6861      	ldr	r1, [r4, #4]
 800a9ee:	4638      	mov	r0, r7
 800a9f0:	3101      	adds	r1, #1
 800a9f2:	f7ff ff79 	bl	800a8e8 <_Balloc>
 800a9f6:	4680      	mov	r8, r0
 800a9f8:	b928      	cbnz	r0, 800aa06 <__multadd+0x5a>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	4b0c      	ldr	r3, [pc, #48]	@ (800aa30 <__multadd+0x84>)
 800a9fe:	480d      	ldr	r0, [pc, #52]	@ (800aa34 <__multadd+0x88>)
 800aa00:	21ba      	movs	r1, #186	@ 0xba
 800aa02:	f000 fd2f 	bl	800b464 <__assert_func>
 800aa06:	6922      	ldr	r2, [r4, #16]
 800aa08:	3202      	adds	r2, #2
 800aa0a:	f104 010c 	add.w	r1, r4, #12
 800aa0e:	0092      	lsls	r2, r2, #2
 800aa10:	300c      	adds	r0, #12
 800aa12:	f000 fd19 	bl	800b448 <memcpy>
 800aa16:	4621      	mov	r1, r4
 800aa18:	4638      	mov	r0, r7
 800aa1a:	f7ff ffa5 	bl	800a968 <_Bfree>
 800aa1e:	4644      	mov	r4, r8
 800aa20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa24:	3501      	adds	r5, #1
 800aa26:	615e      	str	r6, [r3, #20]
 800aa28:	6125      	str	r5, [r4, #16]
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	0800cae8 	.word	0x0800cae8
 800aa34:	0800caf9 	.word	0x0800caf9

0800aa38 <__hi0bits>:
 800aa38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	bf36      	itet	cc
 800aa40:	0403      	lslcc	r3, r0, #16
 800aa42:	2000      	movcs	r0, #0
 800aa44:	2010      	movcc	r0, #16
 800aa46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa4a:	bf3c      	itt	cc
 800aa4c:	021b      	lslcc	r3, r3, #8
 800aa4e:	3008      	addcc	r0, #8
 800aa50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa54:	bf3c      	itt	cc
 800aa56:	011b      	lslcc	r3, r3, #4
 800aa58:	3004      	addcc	r0, #4
 800aa5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa5e:	bf3c      	itt	cc
 800aa60:	009b      	lslcc	r3, r3, #2
 800aa62:	3002      	addcc	r0, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	db05      	blt.n	800aa74 <__hi0bits+0x3c>
 800aa68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa6c:	f100 0001 	add.w	r0, r0, #1
 800aa70:	bf08      	it	eq
 800aa72:	2020      	moveq	r0, #32
 800aa74:	4770      	bx	lr

0800aa76 <__lo0bits>:
 800aa76:	6803      	ldr	r3, [r0, #0]
 800aa78:	4602      	mov	r2, r0
 800aa7a:	f013 0007 	ands.w	r0, r3, #7
 800aa7e:	d00b      	beq.n	800aa98 <__lo0bits+0x22>
 800aa80:	07d9      	lsls	r1, r3, #31
 800aa82:	d421      	bmi.n	800aac8 <__lo0bits+0x52>
 800aa84:	0798      	lsls	r0, r3, #30
 800aa86:	bf49      	itett	mi
 800aa88:	085b      	lsrmi	r3, r3, #1
 800aa8a:	089b      	lsrpl	r3, r3, #2
 800aa8c:	2001      	movmi	r0, #1
 800aa8e:	6013      	strmi	r3, [r2, #0]
 800aa90:	bf5c      	itt	pl
 800aa92:	6013      	strpl	r3, [r2, #0]
 800aa94:	2002      	movpl	r0, #2
 800aa96:	4770      	bx	lr
 800aa98:	b299      	uxth	r1, r3
 800aa9a:	b909      	cbnz	r1, 800aaa0 <__lo0bits+0x2a>
 800aa9c:	0c1b      	lsrs	r3, r3, #16
 800aa9e:	2010      	movs	r0, #16
 800aaa0:	b2d9      	uxtb	r1, r3
 800aaa2:	b909      	cbnz	r1, 800aaa8 <__lo0bits+0x32>
 800aaa4:	3008      	adds	r0, #8
 800aaa6:	0a1b      	lsrs	r3, r3, #8
 800aaa8:	0719      	lsls	r1, r3, #28
 800aaaa:	bf04      	itt	eq
 800aaac:	091b      	lsreq	r3, r3, #4
 800aaae:	3004      	addeq	r0, #4
 800aab0:	0799      	lsls	r1, r3, #30
 800aab2:	bf04      	itt	eq
 800aab4:	089b      	lsreq	r3, r3, #2
 800aab6:	3002      	addeq	r0, #2
 800aab8:	07d9      	lsls	r1, r3, #31
 800aaba:	d403      	bmi.n	800aac4 <__lo0bits+0x4e>
 800aabc:	085b      	lsrs	r3, r3, #1
 800aabe:	f100 0001 	add.w	r0, r0, #1
 800aac2:	d003      	beq.n	800aacc <__lo0bits+0x56>
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	4770      	bx	lr
 800aac8:	2000      	movs	r0, #0
 800aaca:	4770      	bx	lr
 800aacc:	2020      	movs	r0, #32
 800aace:	4770      	bx	lr

0800aad0 <__i2b>:
 800aad0:	b510      	push	{r4, lr}
 800aad2:	460c      	mov	r4, r1
 800aad4:	2101      	movs	r1, #1
 800aad6:	f7ff ff07 	bl	800a8e8 <_Balloc>
 800aada:	4602      	mov	r2, r0
 800aadc:	b928      	cbnz	r0, 800aaea <__i2b+0x1a>
 800aade:	4b05      	ldr	r3, [pc, #20]	@ (800aaf4 <__i2b+0x24>)
 800aae0:	4805      	ldr	r0, [pc, #20]	@ (800aaf8 <__i2b+0x28>)
 800aae2:	f240 1145 	movw	r1, #325	@ 0x145
 800aae6:	f000 fcbd 	bl	800b464 <__assert_func>
 800aaea:	2301      	movs	r3, #1
 800aaec:	6144      	str	r4, [r0, #20]
 800aaee:	6103      	str	r3, [r0, #16]
 800aaf0:	bd10      	pop	{r4, pc}
 800aaf2:	bf00      	nop
 800aaf4:	0800cae8 	.word	0x0800cae8
 800aaf8:	0800caf9 	.word	0x0800caf9

0800aafc <__multiply>:
 800aafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab00:	4614      	mov	r4, r2
 800ab02:	690a      	ldr	r2, [r1, #16]
 800ab04:	6923      	ldr	r3, [r4, #16]
 800ab06:	429a      	cmp	r2, r3
 800ab08:	bfa8      	it	ge
 800ab0a:	4623      	movge	r3, r4
 800ab0c:	460f      	mov	r7, r1
 800ab0e:	bfa4      	itt	ge
 800ab10:	460c      	movge	r4, r1
 800ab12:	461f      	movge	r7, r3
 800ab14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab1c:	68a3      	ldr	r3, [r4, #8]
 800ab1e:	6861      	ldr	r1, [r4, #4]
 800ab20:	eb0a 0609 	add.w	r6, sl, r9
 800ab24:	42b3      	cmp	r3, r6
 800ab26:	b085      	sub	sp, #20
 800ab28:	bfb8      	it	lt
 800ab2a:	3101      	addlt	r1, #1
 800ab2c:	f7ff fedc 	bl	800a8e8 <_Balloc>
 800ab30:	b930      	cbnz	r0, 800ab40 <__multiply+0x44>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4b44      	ldr	r3, [pc, #272]	@ (800ac48 <__multiply+0x14c>)
 800ab36:	4845      	ldr	r0, [pc, #276]	@ (800ac4c <__multiply+0x150>)
 800ab38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab3c:	f000 fc92 	bl	800b464 <__assert_func>
 800ab40:	f100 0514 	add.w	r5, r0, #20
 800ab44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab48:	462b      	mov	r3, r5
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	4543      	cmp	r3, r8
 800ab4e:	d321      	bcc.n	800ab94 <__multiply+0x98>
 800ab50:	f107 0114 	add.w	r1, r7, #20
 800ab54:	f104 0214 	add.w	r2, r4, #20
 800ab58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab60:	9302      	str	r3, [sp, #8]
 800ab62:	1b13      	subs	r3, r2, r4
 800ab64:	3b15      	subs	r3, #21
 800ab66:	f023 0303 	bic.w	r3, r3, #3
 800ab6a:	3304      	adds	r3, #4
 800ab6c:	f104 0715 	add.w	r7, r4, #21
 800ab70:	42ba      	cmp	r2, r7
 800ab72:	bf38      	it	cc
 800ab74:	2304      	movcc	r3, #4
 800ab76:	9301      	str	r3, [sp, #4]
 800ab78:	9b02      	ldr	r3, [sp, #8]
 800ab7a:	9103      	str	r1, [sp, #12]
 800ab7c:	428b      	cmp	r3, r1
 800ab7e:	d80c      	bhi.n	800ab9a <__multiply+0x9e>
 800ab80:	2e00      	cmp	r6, #0
 800ab82:	dd03      	ble.n	800ab8c <__multiply+0x90>
 800ab84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d05b      	beq.n	800ac44 <__multiply+0x148>
 800ab8c:	6106      	str	r6, [r0, #16]
 800ab8e:	b005      	add	sp, #20
 800ab90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab94:	f843 2b04 	str.w	r2, [r3], #4
 800ab98:	e7d8      	b.n	800ab4c <__multiply+0x50>
 800ab9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab9e:	f1ba 0f00 	cmp.w	sl, #0
 800aba2:	d024      	beq.n	800abee <__multiply+0xf2>
 800aba4:	f104 0e14 	add.w	lr, r4, #20
 800aba8:	46a9      	mov	r9, r5
 800abaa:	f04f 0c00 	mov.w	ip, #0
 800abae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abb2:	f8d9 3000 	ldr.w	r3, [r9]
 800abb6:	fa1f fb87 	uxth.w	fp, r7
 800abba:	b29b      	uxth	r3, r3
 800abbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800abc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800abc4:	f8d9 7000 	ldr.w	r7, [r9]
 800abc8:	4463      	add	r3, ip
 800abca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abce:	fb0a c70b 	mla	r7, sl, fp, ip
 800abd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abdc:	4572      	cmp	r2, lr
 800abde:	f849 3b04 	str.w	r3, [r9], #4
 800abe2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abe6:	d8e2      	bhi.n	800abae <__multiply+0xb2>
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	f845 c003 	str.w	ip, [r5, r3]
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800abf4:	3104      	adds	r1, #4
 800abf6:	f1b9 0f00 	cmp.w	r9, #0
 800abfa:	d021      	beq.n	800ac40 <__multiply+0x144>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	f104 0c14 	add.w	ip, r4, #20
 800ac02:	46ae      	mov	lr, r5
 800ac04:	f04f 0a00 	mov.w	sl, #0
 800ac08:	f8bc b000 	ldrh.w	fp, [ip]
 800ac0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac10:	fb09 770b 	mla	r7, r9, fp, r7
 800ac14:	4457      	add	r7, sl
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac1c:	f84e 3b04 	str.w	r3, [lr], #4
 800ac20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac28:	f8be 3000 	ldrh.w	r3, [lr]
 800ac2c:	fb09 330a 	mla	r3, r9, sl, r3
 800ac30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac34:	4562      	cmp	r2, ip
 800ac36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac3a:	d8e5      	bhi.n	800ac08 <__multiply+0x10c>
 800ac3c:	9f01      	ldr	r7, [sp, #4]
 800ac3e:	51eb      	str	r3, [r5, r7]
 800ac40:	3504      	adds	r5, #4
 800ac42:	e799      	b.n	800ab78 <__multiply+0x7c>
 800ac44:	3e01      	subs	r6, #1
 800ac46:	e79b      	b.n	800ab80 <__multiply+0x84>
 800ac48:	0800cae8 	.word	0x0800cae8
 800ac4c:	0800caf9 	.word	0x0800caf9

0800ac50 <__pow5mult>:
 800ac50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac54:	4615      	mov	r5, r2
 800ac56:	f012 0203 	ands.w	r2, r2, #3
 800ac5a:	4607      	mov	r7, r0
 800ac5c:	460e      	mov	r6, r1
 800ac5e:	d007      	beq.n	800ac70 <__pow5mult+0x20>
 800ac60:	4c25      	ldr	r4, [pc, #148]	@ (800acf8 <__pow5mult+0xa8>)
 800ac62:	3a01      	subs	r2, #1
 800ac64:	2300      	movs	r3, #0
 800ac66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac6a:	f7ff fe9f 	bl	800a9ac <__multadd>
 800ac6e:	4606      	mov	r6, r0
 800ac70:	10ad      	asrs	r5, r5, #2
 800ac72:	d03d      	beq.n	800acf0 <__pow5mult+0xa0>
 800ac74:	69fc      	ldr	r4, [r7, #28]
 800ac76:	b97c      	cbnz	r4, 800ac98 <__pow5mult+0x48>
 800ac78:	2010      	movs	r0, #16
 800ac7a:	f7ff fd7f 	bl	800a77c <malloc>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	61f8      	str	r0, [r7, #28]
 800ac82:	b928      	cbnz	r0, 800ac90 <__pow5mult+0x40>
 800ac84:	4b1d      	ldr	r3, [pc, #116]	@ (800acfc <__pow5mult+0xac>)
 800ac86:	481e      	ldr	r0, [pc, #120]	@ (800ad00 <__pow5mult+0xb0>)
 800ac88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac8c:	f000 fbea 	bl	800b464 <__assert_func>
 800ac90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac94:	6004      	str	r4, [r0, #0]
 800ac96:	60c4      	str	r4, [r0, #12]
 800ac98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aca0:	b94c      	cbnz	r4, 800acb6 <__pow5mult+0x66>
 800aca2:	f240 2171 	movw	r1, #625	@ 0x271
 800aca6:	4638      	mov	r0, r7
 800aca8:	f7ff ff12 	bl	800aad0 <__i2b>
 800acac:	2300      	movs	r3, #0
 800acae:	f8c8 0008 	str.w	r0, [r8, #8]
 800acb2:	4604      	mov	r4, r0
 800acb4:	6003      	str	r3, [r0, #0]
 800acb6:	f04f 0900 	mov.w	r9, #0
 800acba:	07eb      	lsls	r3, r5, #31
 800acbc:	d50a      	bpl.n	800acd4 <__pow5mult+0x84>
 800acbe:	4631      	mov	r1, r6
 800acc0:	4622      	mov	r2, r4
 800acc2:	4638      	mov	r0, r7
 800acc4:	f7ff ff1a 	bl	800aafc <__multiply>
 800acc8:	4631      	mov	r1, r6
 800acca:	4680      	mov	r8, r0
 800accc:	4638      	mov	r0, r7
 800acce:	f7ff fe4b 	bl	800a968 <_Bfree>
 800acd2:	4646      	mov	r6, r8
 800acd4:	106d      	asrs	r5, r5, #1
 800acd6:	d00b      	beq.n	800acf0 <__pow5mult+0xa0>
 800acd8:	6820      	ldr	r0, [r4, #0]
 800acda:	b938      	cbnz	r0, 800acec <__pow5mult+0x9c>
 800acdc:	4622      	mov	r2, r4
 800acde:	4621      	mov	r1, r4
 800ace0:	4638      	mov	r0, r7
 800ace2:	f7ff ff0b 	bl	800aafc <__multiply>
 800ace6:	6020      	str	r0, [r4, #0]
 800ace8:	f8c0 9000 	str.w	r9, [r0]
 800acec:	4604      	mov	r4, r0
 800acee:	e7e4      	b.n	800acba <__pow5mult+0x6a>
 800acf0:	4630      	mov	r0, r6
 800acf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acf6:	bf00      	nop
 800acf8:	0800cb54 	.word	0x0800cb54
 800acfc:	0800ca79 	.word	0x0800ca79
 800ad00:	0800caf9 	.word	0x0800caf9

0800ad04 <__lshift>:
 800ad04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad08:	460c      	mov	r4, r1
 800ad0a:	6849      	ldr	r1, [r1, #4]
 800ad0c:	6923      	ldr	r3, [r4, #16]
 800ad0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad12:	68a3      	ldr	r3, [r4, #8]
 800ad14:	4607      	mov	r7, r0
 800ad16:	4691      	mov	r9, r2
 800ad18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad1c:	f108 0601 	add.w	r6, r8, #1
 800ad20:	42b3      	cmp	r3, r6
 800ad22:	db0b      	blt.n	800ad3c <__lshift+0x38>
 800ad24:	4638      	mov	r0, r7
 800ad26:	f7ff fddf 	bl	800a8e8 <_Balloc>
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	b948      	cbnz	r0, 800ad42 <__lshift+0x3e>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	4b28      	ldr	r3, [pc, #160]	@ (800add4 <__lshift+0xd0>)
 800ad32:	4829      	ldr	r0, [pc, #164]	@ (800add8 <__lshift+0xd4>)
 800ad34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad38:	f000 fb94 	bl	800b464 <__assert_func>
 800ad3c:	3101      	adds	r1, #1
 800ad3e:	005b      	lsls	r3, r3, #1
 800ad40:	e7ee      	b.n	800ad20 <__lshift+0x1c>
 800ad42:	2300      	movs	r3, #0
 800ad44:	f100 0114 	add.w	r1, r0, #20
 800ad48:	f100 0210 	add.w	r2, r0, #16
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	4553      	cmp	r3, sl
 800ad50:	db33      	blt.n	800adba <__lshift+0xb6>
 800ad52:	6920      	ldr	r0, [r4, #16]
 800ad54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad58:	f104 0314 	add.w	r3, r4, #20
 800ad5c:	f019 091f 	ands.w	r9, r9, #31
 800ad60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad68:	d02b      	beq.n	800adc2 <__lshift+0xbe>
 800ad6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ad6e:	468a      	mov	sl, r1
 800ad70:	2200      	movs	r2, #0
 800ad72:	6818      	ldr	r0, [r3, #0]
 800ad74:	fa00 f009 	lsl.w	r0, r0, r9
 800ad78:	4310      	orrs	r0, r2
 800ad7a:	f84a 0b04 	str.w	r0, [sl], #4
 800ad7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad82:	459c      	cmp	ip, r3
 800ad84:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad88:	d8f3      	bhi.n	800ad72 <__lshift+0x6e>
 800ad8a:	ebac 0304 	sub.w	r3, ip, r4
 800ad8e:	3b15      	subs	r3, #21
 800ad90:	f023 0303 	bic.w	r3, r3, #3
 800ad94:	3304      	adds	r3, #4
 800ad96:	f104 0015 	add.w	r0, r4, #21
 800ad9a:	4584      	cmp	ip, r0
 800ad9c:	bf38      	it	cc
 800ad9e:	2304      	movcc	r3, #4
 800ada0:	50ca      	str	r2, [r1, r3]
 800ada2:	b10a      	cbz	r2, 800ada8 <__lshift+0xa4>
 800ada4:	f108 0602 	add.w	r6, r8, #2
 800ada8:	3e01      	subs	r6, #1
 800adaa:	4638      	mov	r0, r7
 800adac:	612e      	str	r6, [r5, #16]
 800adae:	4621      	mov	r1, r4
 800adb0:	f7ff fdda 	bl	800a968 <_Bfree>
 800adb4:	4628      	mov	r0, r5
 800adb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adba:	f842 0f04 	str.w	r0, [r2, #4]!
 800adbe:	3301      	adds	r3, #1
 800adc0:	e7c5      	b.n	800ad4e <__lshift+0x4a>
 800adc2:	3904      	subs	r1, #4
 800adc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800adcc:	459c      	cmp	ip, r3
 800adce:	d8f9      	bhi.n	800adc4 <__lshift+0xc0>
 800add0:	e7ea      	b.n	800ada8 <__lshift+0xa4>
 800add2:	bf00      	nop
 800add4:	0800cae8 	.word	0x0800cae8
 800add8:	0800caf9 	.word	0x0800caf9

0800addc <__mcmp>:
 800addc:	690a      	ldr	r2, [r1, #16]
 800adde:	4603      	mov	r3, r0
 800ade0:	6900      	ldr	r0, [r0, #16]
 800ade2:	1a80      	subs	r0, r0, r2
 800ade4:	b530      	push	{r4, r5, lr}
 800ade6:	d10e      	bne.n	800ae06 <__mcmp+0x2a>
 800ade8:	3314      	adds	r3, #20
 800adea:	3114      	adds	r1, #20
 800adec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800adf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800adf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800adf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800adfc:	4295      	cmp	r5, r2
 800adfe:	d003      	beq.n	800ae08 <__mcmp+0x2c>
 800ae00:	d205      	bcs.n	800ae0e <__mcmp+0x32>
 800ae02:	f04f 30ff 	mov.w	r0, #4294967295
 800ae06:	bd30      	pop	{r4, r5, pc}
 800ae08:	42a3      	cmp	r3, r4
 800ae0a:	d3f3      	bcc.n	800adf4 <__mcmp+0x18>
 800ae0c:	e7fb      	b.n	800ae06 <__mcmp+0x2a>
 800ae0e:	2001      	movs	r0, #1
 800ae10:	e7f9      	b.n	800ae06 <__mcmp+0x2a>
	...

0800ae14 <__mdiff>:
 800ae14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae18:	4689      	mov	r9, r1
 800ae1a:	4606      	mov	r6, r0
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	4648      	mov	r0, r9
 800ae20:	4614      	mov	r4, r2
 800ae22:	f7ff ffdb 	bl	800addc <__mcmp>
 800ae26:	1e05      	subs	r5, r0, #0
 800ae28:	d112      	bne.n	800ae50 <__mdiff+0x3c>
 800ae2a:	4629      	mov	r1, r5
 800ae2c:	4630      	mov	r0, r6
 800ae2e:	f7ff fd5b 	bl	800a8e8 <_Balloc>
 800ae32:	4602      	mov	r2, r0
 800ae34:	b928      	cbnz	r0, 800ae42 <__mdiff+0x2e>
 800ae36:	4b3f      	ldr	r3, [pc, #252]	@ (800af34 <__mdiff+0x120>)
 800ae38:	f240 2137 	movw	r1, #567	@ 0x237
 800ae3c:	483e      	ldr	r0, [pc, #248]	@ (800af38 <__mdiff+0x124>)
 800ae3e:	f000 fb11 	bl	800b464 <__assert_func>
 800ae42:	2301      	movs	r3, #1
 800ae44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae48:	4610      	mov	r0, r2
 800ae4a:	b003      	add	sp, #12
 800ae4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae50:	bfbc      	itt	lt
 800ae52:	464b      	movlt	r3, r9
 800ae54:	46a1      	movlt	r9, r4
 800ae56:	4630      	mov	r0, r6
 800ae58:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae5c:	bfba      	itte	lt
 800ae5e:	461c      	movlt	r4, r3
 800ae60:	2501      	movlt	r5, #1
 800ae62:	2500      	movge	r5, #0
 800ae64:	f7ff fd40 	bl	800a8e8 <_Balloc>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	b918      	cbnz	r0, 800ae74 <__mdiff+0x60>
 800ae6c:	4b31      	ldr	r3, [pc, #196]	@ (800af34 <__mdiff+0x120>)
 800ae6e:	f240 2145 	movw	r1, #581	@ 0x245
 800ae72:	e7e3      	b.n	800ae3c <__mdiff+0x28>
 800ae74:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae78:	6926      	ldr	r6, [r4, #16]
 800ae7a:	60c5      	str	r5, [r0, #12]
 800ae7c:	f109 0310 	add.w	r3, r9, #16
 800ae80:	f109 0514 	add.w	r5, r9, #20
 800ae84:	f104 0e14 	add.w	lr, r4, #20
 800ae88:	f100 0b14 	add.w	fp, r0, #20
 800ae8c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae90:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae94:	9301      	str	r3, [sp, #4]
 800ae96:	46d9      	mov	r9, fp
 800ae98:	f04f 0c00 	mov.w	ip, #0
 800ae9c:	9b01      	ldr	r3, [sp, #4]
 800ae9e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aea2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aea6:	9301      	str	r3, [sp, #4]
 800aea8:	fa1f f38a 	uxth.w	r3, sl
 800aeac:	4619      	mov	r1, r3
 800aeae:	b283      	uxth	r3, r0
 800aeb0:	1acb      	subs	r3, r1, r3
 800aeb2:	0c00      	lsrs	r0, r0, #16
 800aeb4:	4463      	add	r3, ip
 800aeb6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aeba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aec4:	4576      	cmp	r6, lr
 800aec6:	f849 3b04 	str.w	r3, [r9], #4
 800aeca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aece:	d8e5      	bhi.n	800ae9c <__mdiff+0x88>
 800aed0:	1b33      	subs	r3, r6, r4
 800aed2:	3b15      	subs	r3, #21
 800aed4:	f023 0303 	bic.w	r3, r3, #3
 800aed8:	3415      	adds	r4, #21
 800aeda:	3304      	adds	r3, #4
 800aedc:	42a6      	cmp	r6, r4
 800aede:	bf38      	it	cc
 800aee0:	2304      	movcc	r3, #4
 800aee2:	441d      	add	r5, r3
 800aee4:	445b      	add	r3, fp
 800aee6:	461e      	mov	r6, r3
 800aee8:	462c      	mov	r4, r5
 800aeea:	4544      	cmp	r4, r8
 800aeec:	d30e      	bcc.n	800af0c <__mdiff+0xf8>
 800aeee:	f108 0103 	add.w	r1, r8, #3
 800aef2:	1b49      	subs	r1, r1, r5
 800aef4:	f021 0103 	bic.w	r1, r1, #3
 800aef8:	3d03      	subs	r5, #3
 800aefa:	45a8      	cmp	r8, r5
 800aefc:	bf38      	it	cc
 800aefe:	2100      	movcc	r1, #0
 800af00:	440b      	add	r3, r1
 800af02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af06:	b191      	cbz	r1, 800af2e <__mdiff+0x11a>
 800af08:	6117      	str	r7, [r2, #16]
 800af0a:	e79d      	b.n	800ae48 <__mdiff+0x34>
 800af0c:	f854 1b04 	ldr.w	r1, [r4], #4
 800af10:	46e6      	mov	lr, ip
 800af12:	0c08      	lsrs	r0, r1, #16
 800af14:	fa1c fc81 	uxtah	ip, ip, r1
 800af18:	4471      	add	r1, lr
 800af1a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af1e:	b289      	uxth	r1, r1
 800af20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af24:	f846 1b04 	str.w	r1, [r6], #4
 800af28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af2c:	e7dd      	b.n	800aeea <__mdiff+0xd6>
 800af2e:	3f01      	subs	r7, #1
 800af30:	e7e7      	b.n	800af02 <__mdiff+0xee>
 800af32:	bf00      	nop
 800af34:	0800cae8 	.word	0x0800cae8
 800af38:	0800caf9 	.word	0x0800caf9

0800af3c <__d2b>:
 800af3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af40:	460f      	mov	r7, r1
 800af42:	2101      	movs	r1, #1
 800af44:	ec59 8b10 	vmov	r8, r9, d0
 800af48:	4616      	mov	r6, r2
 800af4a:	f7ff fccd 	bl	800a8e8 <_Balloc>
 800af4e:	4604      	mov	r4, r0
 800af50:	b930      	cbnz	r0, 800af60 <__d2b+0x24>
 800af52:	4602      	mov	r2, r0
 800af54:	4b23      	ldr	r3, [pc, #140]	@ (800afe4 <__d2b+0xa8>)
 800af56:	4824      	ldr	r0, [pc, #144]	@ (800afe8 <__d2b+0xac>)
 800af58:	f240 310f 	movw	r1, #783	@ 0x30f
 800af5c:	f000 fa82 	bl	800b464 <__assert_func>
 800af60:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af68:	b10d      	cbz	r5, 800af6e <__d2b+0x32>
 800af6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af6e:	9301      	str	r3, [sp, #4]
 800af70:	f1b8 0300 	subs.w	r3, r8, #0
 800af74:	d023      	beq.n	800afbe <__d2b+0x82>
 800af76:	4668      	mov	r0, sp
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	f7ff fd7c 	bl	800aa76 <__lo0bits>
 800af7e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af82:	b1d0      	cbz	r0, 800afba <__d2b+0x7e>
 800af84:	f1c0 0320 	rsb	r3, r0, #32
 800af88:	fa02 f303 	lsl.w	r3, r2, r3
 800af8c:	430b      	orrs	r3, r1
 800af8e:	40c2      	lsrs	r2, r0
 800af90:	6163      	str	r3, [r4, #20]
 800af92:	9201      	str	r2, [sp, #4]
 800af94:	9b01      	ldr	r3, [sp, #4]
 800af96:	61a3      	str	r3, [r4, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bf0c      	ite	eq
 800af9c:	2201      	moveq	r2, #1
 800af9e:	2202      	movne	r2, #2
 800afa0:	6122      	str	r2, [r4, #16]
 800afa2:	b1a5      	cbz	r5, 800afce <__d2b+0x92>
 800afa4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800afa8:	4405      	add	r5, r0
 800afaa:	603d      	str	r5, [r7, #0]
 800afac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800afb0:	6030      	str	r0, [r6, #0]
 800afb2:	4620      	mov	r0, r4
 800afb4:	b003      	add	sp, #12
 800afb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800afba:	6161      	str	r1, [r4, #20]
 800afbc:	e7ea      	b.n	800af94 <__d2b+0x58>
 800afbe:	a801      	add	r0, sp, #4
 800afc0:	f7ff fd59 	bl	800aa76 <__lo0bits>
 800afc4:	9b01      	ldr	r3, [sp, #4]
 800afc6:	6163      	str	r3, [r4, #20]
 800afc8:	3020      	adds	r0, #32
 800afca:	2201      	movs	r2, #1
 800afcc:	e7e8      	b.n	800afa0 <__d2b+0x64>
 800afce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800afd6:	6038      	str	r0, [r7, #0]
 800afd8:	6918      	ldr	r0, [r3, #16]
 800afda:	f7ff fd2d 	bl	800aa38 <__hi0bits>
 800afde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afe2:	e7e5      	b.n	800afb0 <__d2b+0x74>
 800afe4:	0800cae8 	.word	0x0800cae8
 800afe8:	0800caf9 	.word	0x0800caf9

0800afec <__ssputs_r>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	688e      	ldr	r6, [r1, #8]
 800aff2:	461f      	mov	r7, r3
 800aff4:	42be      	cmp	r6, r7
 800aff6:	680b      	ldr	r3, [r1, #0]
 800aff8:	4682      	mov	sl, r0
 800affa:	460c      	mov	r4, r1
 800affc:	4690      	mov	r8, r2
 800affe:	d82d      	bhi.n	800b05c <__ssputs_r+0x70>
 800b000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b004:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b008:	d026      	beq.n	800b058 <__ssputs_r+0x6c>
 800b00a:	6965      	ldr	r5, [r4, #20]
 800b00c:	6909      	ldr	r1, [r1, #16]
 800b00e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b012:	eba3 0901 	sub.w	r9, r3, r1
 800b016:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b01a:	1c7b      	adds	r3, r7, #1
 800b01c:	444b      	add	r3, r9
 800b01e:	106d      	asrs	r5, r5, #1
 800b020:	429d      	cmp	r5, r3
 800b022:	bf38      	it	cc
 800b024:	461d      	movcc	r5, r3
 800b026:	0553      	lsls	r3, r2, #21
 800b028:	d527      	bpl.n	800b07a <__ssputs_r+0x8e>
 800b02a:	4629      	mov	r1, r5
 800b02c:	f7ff fbd0 	bl	800a7d0 <_malloc_r>
 800b030:	4606      	mov	r6, r0
 800b032:	b360      	cbz	r0, 800b08e <__ssputs_r+0xa2>
 800b034:	6921      	ldr	r1, [r4, #16]
 800b036:	464a      	mov	r2, r9
 800b038:	f000 fa06 	bl	800b448 <memcpy>
 800b03c:	89a3      	ldrh	r3, [r4, #12]
 800b03e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b042:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b046:	81a3      	strh	r3, [r4, #12]
 800b048:	6126      	str	r6, [r4, #16]
 800b04a:	6165      	str	r5, [r4, #20]
 800b04c:	444e      	add	r6, r9
 800b04e:	eba5 0509 	sub.w	r5, r5, r9
 800b052:	6026      	str	r6, [r4, #0]
 800b054:	60a5      	str	r5, [r4, #8]
 800b056:	463e      	mov	r6, r7
 800b058:	42be      	cmp	r6, r7
 800b05a:	d900      	bls.n	800b05e <__ssputs_r+0x72>
 800b05c:	463e      	mov	r6, r7
 800b05e:	6820      	ldr	r0, [r4, #0]
 800b060:	4632      	mov	r2, r6
 800b062:	4641      	mov	r1, r8
 800b064:	f000 f9c6 	bl	800b3f4 <memmove>
 800b068:	68a3      	ldr	r3, [r4, #8]
 800b06a:	1b9b      	subs	r3, r3, r6
 800b06c:	60a3      	str	r3, [r4, #8]
 800b06e:	6823      	ldr	r3, [r4, #0]
 800b070:	4433      	add	r3, r6
 800b072:	6023      	str	r3, [r4, #0]
 800b074:	2000      	movs	r0, #0
 800b076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b07a:	462a      	mov	r2, r5
 800b07c:	f000 fa36 	bl	800b4ec <_realloc_r>
 800b080:	4606      	mov	r6, r0
 800b082:	2800      	cmp	r0, #0
 800b084:	d1e0      	bne.n	800b048 <__ssputs_r+0x5c>
 800b086:	6921      	ldr	r1, [r4, #16]
 800b088:	4650      	mov	r0, sl
 800b08a:	f7ff fb2d 	bl	800a6e8 <_free_r>
 800b08e:	230c      	movs	r3, #12
 800b090:	f8ca 3000 	str.w	r3, [sl]
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b09a:	81a3      	strh	r3, [r4, #12]
 800b09c:	f04f 30ff 	mov.w	r0, #4294967295
 800b0a0:	e7e9      	b.n	800b076 <__ssputs_r+0x8a>
	...

0800b0a4 <_svfiprintf_r>:
 800b0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a8:	4698      	mov	r8, r3
 800b0aa:	898b      	ldrh	r3, [r1, #12]
 800b0ac:	061b      	lsls	r3, r3, #24
 800b0ae:	b09d      	sub	sp, #116	@ 0x74
 800b0b0:	4607      	mov	r7, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	d510      	bpl.n	800b0da <_svfiprintf_r+0x36>
 800b0b8:	690b      	ldr	r3, [r1, #16]
 800b0ba:	b973      	cbnz	r3, 800b0da <_svfiprintf_r+0x36>
 800b0bc:	2140      	movs	r1, #64	@ 0x40
 800b0be:	f7ff fb87 	bl	800a7d0 <_malloc_r>
 800b0c2:	6028      	str	r0, [r5, #0]
 800b0c4:	6128      	str	r0, [r5, #16]
 800b0c6:	b930      	cbnz	r0, 800b0d6 <_svfiprintf_r+0x32>
 800b0c8:	230c      	movs	r3, #12
 800b0ca:	603b      	str	r3, [r7, #0]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	b01d      	add	sp, #116	@ 0x74
 800b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d6:	2340      	movs	r3, #64	@ 0x40
 800b0d8:	616b      	str	r3, [r5, #20]
 800b0da:	2300      	movs	r3, #0
 800b0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0de:	2320      	movs	r3, #32
 800b0e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b0e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0e8:	2330      	movs	r3, #48	@ 0x30
 800b0ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b288 <_svfiprintf_r+0x1e4>
 800b0ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0f2:	f04f 0901 	mov.w	r9, #1
 800b0f6:	4623      	mov	r3, r4
 800b0f8:	469a      	mov	sl, r3
 800b0fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0fe:	b10a      	cbz	r2, 800b104 <_svfiprintf_r+0x60>
 800b100:	2a25      	cmp	r2, #37	@ 0x25
 800b102:	d1f9      	bne.n	800b0f8 <_svfiprintf_r+0x54>
 800b104:	ebba 0b04 	subs.w	fp, sl, r4
 800b108:	d00b      	beq.n	800b122 <_svfiprintf_r+0x7e>
 800b10a:	465b      	mov	r3, fp
 800b10c:	4622      	mov	r2, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	4638      	mov	r0, r7
 800b112:	f7ff ff6b 	bl	800afec <__ssputs_r>
 800b116:	3001      	adds	r0, #1
 800b118:	f000 80a7 	beq.w	800b26a <_svfiprintf_r+0x1c6>
 800b11c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b11e:	445a      	add	r2, fp
 800b120:	9209      	str	r2, [sp, #36]	@ 0x24
 800b122:	f89a 3000 	ldrb.w	r3, [sl]
 800b126:	2b00      	cmp	r3, #0
 800b128:	f000 809f 	beq.w	800b26a <_svfiprintf_r+0x1c6>
 800b12c:	2300      	movs	r3, #0
 800b12e:	f04f 32ff 	mov.w	r2, #4294967295
 800b132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b136:	f10a 0a01 	add.w	sl, sl, #1
 800b13a:	9304      	str	r3, [sp, #16]
 800b13c:	9307      	str	r3, [sp, #28]
 800b13e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b142:	931a      	str	r3, [sp, #104]	@ 0x68
 800b144:	4654      	mov	r4, sl
 800b146:	2205      	movs	r2, #5
 800b148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14c:	484e      	ldr	r0, [pc, #312]	@ (800b288 <_svfiprintf_r+0x1e4>)
 800b14e:	f7f5 f847 	bl	80001e0 <memchr>
 800b152:	9a04      	ldr	r2, [sp, #16]
 800b154:	b9d8      	cbnz	r0, 800b18e <_svfiprintf_r+0xea>
 800b156:	06d0      	lsls	r0, r2, #27
 800b158:	bf44      	itt	mi
 800b15a:	2320      	movmi	r3, #32
 800b15c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b160:	0711      	lsls	r1, r2, #28
 800b162:	bf44      	itt	mi
 800b164:	232b      	movmi	r3, #43	@ 0x2b
 800b166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b16a:	f89a 3000 	ldrb.w	r3, [sl]
 800b16e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b170:	d015      	beq.n	800b19e <_svfiprintf_r+0xfa>
 800b172:	9a07      	ldr	r2, [sp, #28]
 800b174:	4654      	mov	r4, sl
 800b176:	2000      	movs	r0, #0
 800b178:	f04f 0c0a 	mov.w	ip, #10
 800b17c:	4621      	mov	r1, r4
 800b17e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b182:	3b30      	subs	r3, #48	@ 0x30
 800b184:	2b09      	cmp	r3, #9
 800b186:	d94b      	bls.n	800b220 <_svfiprintf_r+0x17c>
 800b188:	b1b0      	cbz	r0, 800b1b8 <_svfiprintf_r+0x114>
 800b18a:	9207      	str	r2, [sp, #28]
 800b18c:	e014      	b.n	800b1b8 <_svfiprintf_r+0x114>
 800b18e:	eba0 0308 	sub.w	r3, r0, r8
 800b192:	fa09 f303 	lsl.w	r3, r9, r3
 800b196:	4313      	orrs	r3, r2
 800b198:	9304      	str	r3, [sp, #16]
 800b19a:	46a2      	mov	sl, r4
 800b19c:	e7d2      	b.n	800b144 <_svfiprintf_r+0xa0>
 800b19e:	9b03      	ldr	r3, [sp, #12]
 800b1a0:	1d19      	adds	r1, r3, #4
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	9103      	str	r1, [sp, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	bfbb      	ittet	lt
 800b1aa:	425b      	neglt	r3, r3
 800b1ac:	f042 0202 	orrlt.w	r2, r2, #2
 800b1b0:	9307      	strge	r3, [sp, #28]
 800b1b2:	9307      	strlt	r3, [sp, #28]
 800b1b4:	bfb8      	it	lt
 800b1b6:	9204      	strlt	r2, [sp, #16]
 800b1b8:	7823      	ldrb	r3, [r4, #0]
 800b1ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1bc:	d10a      	bne.n	800b1d4 <_svfiprintf_r+0x130>
 800b1be:	7863      	ldrb	r3, [r4, #1]
 800b1c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1c2:	d132      	bne.n	800b22a <_svfiprintf_r+0x186>
 800b1c4:	9b03      	ldr	r3, [sp, #12]
 800b1c6:	1d1a      	adds	r2, r3, #4
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	9203      	str	r2, [sp, #12]
 800b1cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b1d0:	3402      	adds	r4, #2
 800b1d2:	9305      	str	r3, [sp, #20]
 800b1d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b298 <_svfiprintf_r+0x1f4>
 800b1d8:	7821      	ldrb	r1, [r4, #0]
 800b1da:	2203      	movs	r2, #3
 800b1dc:	4650      	mov	r0, sl
 800b1de:	f7f4 ffff 	bl	80001e0 <memchr>
 800b1e2:	b138      	cbz	r0, 800b1f4 <_svfiprintf_r+0x150>
 800b1e4:	9b04      	ldr	r3, [sp, #16]
 800b1e6:	eba0 000a 	sub.w	r0, r0, sl
 800b1ea:	2240      	movs	r2, #64	@ 0x40
 800b1ec:	4082      	lsls	r2, r0
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	3401      	adds	r4, #1
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f8:	4824      	ldr	r0, [pc, #144]	@ (800b28c <_svfiprintf_r+0x1e8>)
 800b1fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1fe:	2206      	movs	r2, #6
 800b200:	f7f4 ffee 	bl	80001e0 <memchr>
 800b204:	2800      	cmp	r0, #0
 800b206:	d036      	beq.n	800b276 <_svfiprintf_r+0x1d2>
 800b208:	4b21      	ldr	r3, [pc, #132]	@ (800b290 <_svfiprintf_r+0x1ec>)
 800b20a:	bb1b      	cbnz	r3, 800b254 <_svfiprintf_r+0x1b0>
 800b20c:	9b03      	ldr	r3, [sp, #12]
 800b20e:	3307      	adds	r3, #7
 800b210:	f023 0307 	bic.w	r3, r3, #7
 800b214:	3308      	adds	r3, #8
 800b216:	9303      	str	r3, [sp, #12]
 800b218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b21a:	4433      	add	r3, r6
 800b21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b21e:	e76a      	b.n	800b0f6 <_svfiprintf_r+0x52>
 800b220:	fb0c 3202 	mla	r2, ip, r2, r3
 800b224:	460c      	mov	r4, r1
 800b226:	2001      	movs	r0, #1
 800b228:	e7a8      	b.n	800b17c <_svfiprintf_r+0xd8>
 800b22a:	2300      	movs	r3, #0
 800b22c:	3401      	adds	r4, #1
 800b22e:	9305      	str	r3, [sp, #20]
 800b230:	4619      	mov	r1, r3
 800b232:	f04f 0c0a 	mov.w	ip, #10
 800b236:	4620      	mov	r0, r4
 800b238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b23c:	3a30      	subs	r2, #48	@ 0x30
 800b23e:	2a09      	cmp	r2, #9
 800b240:	d903      	bls.n	800b24a <_svfiprintf_r+0x1a6>
 800b242:	2b00      	cmp	r3, #0
 800b244:	d0c6      	beq.n	800b1d4 <_svfiprintf_r+0x130>
 800b246:	9105      	str	r1, [sp, #20]
 800b248:	e7c4      	b.n	800b1d4 <_svfiprintf_r+0x130>
 800b24a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b24e:	4604      	mov	r4, r0
 800b250:	2301      	movs	r3, #1
 800b252:	e7f0      	b.n	800b236 <_svfiprintf_r+0x192>
 800b254:	ab03      	add	r3, sp, #12
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	462a      	mov	r2, r5
 800b25a:	4b0e      	ldr	r3, [pc, #56]	@ (800b294 <_svfiprintf_r+0x1f0>)
 800b25c:	a904      	add	r1, sp, #16
 800b25e:	4638      	mov	r0, r7
 800b260:	f7fd fe96 	bl	8008f90 <_printf_float>
 800b264:	1c42      	adds	r2, r0, #1
 800b266:	4606      	mov	r6, r0
 800b268:	d1d6      	bne.n	800b218 <_svfiprintf_r+0x174>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	065b      	lsls	r3, r3, #25
 800b26e:	f53f af2d 	bmi.w	800b0cc <_svfiprintf_r+0x28>
 800b272:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b274:	e72c      	b.n	800b0d0 <_svfiprintf_r+0x2c>
 800b276:	ab03      	add	r3, sp, #12
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	462a      	mov	r2, r5
 800b27c:	4b05      	ldr	r3, [pc, #20]	@ (800b294 <_svfiprintf_r+0x1f0>)
 800b27e:	a904      	add	r1, sp, #16
 800b280:	4638      	mov	r0, r7
 800b282:	f7fe f91d 	bl	80094c0 <_printf_i>
 800b286:	e7ed      	b.n	800b264 <_svfiprintf_r+0x1c0>
 800b288:	0800cc50 	.word	0x0800cc50
 800b28c:	0800cc5a 	.word	0x0800cc5a
 800b290:	08008f91 	.word	0x08008f91
 800b294:	0800afed 	.word	0x0800afed
 800b298:	0800cc56 	.word	0x0800cc56

0800b29c <__sflush_r>:
 800b29c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2a4:	0716      	lsls	r6, r2, #28
 800b2a6:	4605      	mov	r5, r0
 800b2a8:	460c      	mov	r4, r1
 800b2aa:	d454      	bmi.n	800b356 <__sflush_r+0xba>
 800b2ac:	684b      	ldr	r3, [r1, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	dc02      	bgt.n	800b2b8 <__sflush_r+0x1c>
 800b2b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dd48      	ble.n	800b34a <__sflush_r+0xae>
 800b2b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2ba:	2e00      	cmp	r6, #0
 800b2bc:	d045      	beq.n	800b34a <__sflush_r+0xae>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2c4:	682f      	ldr	r7, [r5, #0]
 800b2c6:	6a21      	ldr	r1, [r4, #32]
 800b2c8:	602b      	str	r3, [r5, #0]
 800b2ca:	d030      	beq.n	800b32e <__sflush_r+0x92>
 800b2cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2ce:	89a3      	ldrh	r3, [r4, #12]
 800b2d0:	0759      	lsls	r1, r3, #29
 800b2d2:	d505      	bpl.n	800b2e0 <__sflush_r+0x44>
 800b2d4:	6863      	ldr	r3, [r4, #4]
 800b2d6:	1ad2      	subs	r2, r2, r3
 800b2d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2da:	b10b      	cbz	r3, 800b2e0 <__sflush_r+0x44>
 800b2dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2de:	1ad2      	subs	r2, r2, r3
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2e4:	6a21      	ldr	r1, [r4, #32]
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	47b0      	blx	r6
 800b2ea:	1c43      	adds	r3, r0, #1
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	d106      	bne.n	800b2fe <__sflush_r+0x62>
 800b2f0:	6829      	ldr	r1, [r5, #0]
 800b2f2:	291d      	cmp	r1, #29
 800b2f4:	d82b      	bhi.n	800b34e <__sflush_r+0xb2>
 800b2f6:	4a2a      	ldr	r2, [pc, #168]	@ (800b3a0 <__sflush_r+0x104>)
 800b2f8:	410a      	asrs	r2, r1
 800b2fa:	07d6      	lsls	r6, r2, #31
 800b2fc:	d427      	bmi.n	800b34e <__sflush_r+0xb2>
 800b2fe:	2200      	movs	r2, #0
 800b300:	6062      	str	r2, [r4, #4]
 800b302:	04d9      	lsls	r1, r3, #19
 800b304:	6922      	ldr	r2, [r4, #16]
 800b306:	6022      	str	r2, [r4, #0]
 800b308:	d504      	bpl.n	800b314 <__sflush_r+0x78>
 800b30a:	1c42      	adds	r2, r0, #1
 800b30c:	d101      	bne.n	800b312 <__sflush_r+0x76>
 800b30e:	682b      	ldr	r3, [r5, #0]
 800b310:	b903      	cbnz	r3, 800b314 <__sflush_r+0x78>
 800b312:	6560      	str	r0, [r4, #84]	@ 0x54
 800b314:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b316:	602f      	str	r7, [r5, #0]
 800b318:	b1b9      	cbz	r1, 800b34a <__sflush_r+0xae>
 800b31a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b31e:	4299      	cmp	r1, r3
 800b320:	d002      	beq.n	800b328 <__sflush_r+0x8c>
 800b322:	4628      	mov	r0, r5
 800b324:	f7ff f9e0 	bl	800a6e8 <_free_r>
 800b328:	2300      	movs	r3, #0
 800b32a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b32c:	e00d      	b.n	800b34a <__sflush_r+0xae>
 800b32e:	2301      	movs	r3, #1
 800b330:	4628      	mov	r0, r5
 800b332:	47b0      	blx	r6
 800b334:	4602      	mov	r2, r0
 800b336:	1c50      	adds	r0, r2, #1
 800b338:	d1c9      	bne.n	800b2ce <__sflush_r+0x32>
 800b33a:	682b      	ldr	r3, [r5, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d0c6      	beq.n	800b2ce <__sflush_r+0x32>
 800b340:	2b1d      	cmp	r3, #29
 800b342:	d001      	beq.n	800b348 <__sflush_r+0xac>
 800b344:	2b16      	cmp	r3, #22
 800b346:	d11e      	bne.n	800b386 <__sflush_r+0xea>
 800b348:	602f      	str	r7, [r5, #0]
 800b34a:	2000      	movs	r0, #0
 800b34c:	e022      	b.n	800b394 <__sflush_r+0xf8>
 800b34e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b352:	b21b      	sxth	r3, r3
 800b354:	e01b      	b.n	800b38e <__sflush_r+0xf2>
 800b356:	690f      	ldr	r7, [r1, #16]
 800b358:	2f00      	cmp	r7, #0
 800b35a:	d0f6      	beq.n	800b34a <__sflush_r+0xae>
 800b35c:	0793      	lsls	r3, r2, #30
 800b35e:	680e      	ldr	r6, [r1, #0]
 800b360:	bf08      	it	eq
 800b362:	694b      	ldreq	r3, [r1, #20]
 800b364:	600f      	str	r7, [r1, #0]
 800b366:	bf18      	it	ne
 800b368:	2300      	movne	r3, #0
 800b36a:	eba6 0807 	sub.w	r8, r6, r7
 800b36e:	608b      	str	r3, [r1, #8]
 800b370:	f1b8 0f00 	cmp.w	r8, #0
 800b374:	dde9      	ble.n	800b34a <__sflush_r+0xae>
 800b376:	6a21      	ldr	r1, [r4, #32]
 800b378:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b37a:	4643      	mov	r3, r8
 800b37c:	463a      	mov	r2, r7
 800b37e:	4628      	mov	r0, r5
 800b380:	47b0      	blx	r6
 800b382:	2800      	cmp	r0, #0
 800b384:	dc08      	bgt.n	800b398 <__sflush_r+0xfc>
 800b386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b38e:	81a3      	strh	r3, [r4, #12]
 800b390:	f04f 30ff 	mov.w	r0, #4294967295
 800b394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b398:	4407      	add	r7, r0
 800b39a:	eba8 0800 	sub.w	r8, r8, r0
 800b39e:	e7e7      	b.n	800b370 <__sflush_r+0xd4>
 800b3a0:	dfbffffe 	.word	0xdfbffffe

0800b3a4 <_fflush_r>:
 800b3a4:	b538      	push	{r3, r4, r5, lr}
 800b3a6:	690b      	ldr	r3, [r1, #16]
 800b3a8:	4605      	mov	r5, r0
 800b3aa:	460c      	mov	r4, r1
 800b3ac:	b913      	cbnz	r3, 800b3b4 <_fflush_r+0x10>
 800b3ae:	2500      	movs	r5, #0
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	b118      	cbz	r0, 800b3be <_fflush_r+0x1a>
 800b3b6:	6a03      	ldr	r3, [r0, #32]
 800b3b8:	b90b      	cbnz	r3, 800b3be <_fflush_r+0x1a>
 800b3ba:	f7fe fa2d 	bl	8009818 <__sinit>
 800b3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d0f3      	beq.n	800b3ae <_fflush_r+0xa>
 800b3c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3c8:	07d0      	lsls	r0, r2, #31
 800b3ca:	d404      	bmi.n	800b3d6 <_fflush_r+0x32>
 800b3cc:	0599      	lsls	r1, r3, #22
 800b3ce:	d402      	bmi.n	800b3d6 <_fflush_r+0x32>
 800b3d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3d2:	f7fe fb38 	bl	8009a46 <__retarget_lock_acquire_recursive>
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	4621      	mov	r1, r4
 800b3da:	f7ff ff5f 	bl	800b29c <__sflush_r>
 800b3de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3e0:	07da      	lsls	r2, r3, #31
 800b3e2:	4605      	mov	r5, r0
 800b3e4:	d4e4      	bmi.n	800b3b0 <_fflush_r+0xc>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	059b      	lsls	r3, r3, #22
 800b3ea:	d4e1      	bmi.n	800b3b0 <_fflush_r+0xc>
 800b3ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ee:	f7fe fb2b 	bl	8009a48 <__retarget_lock_release_recursive>
 800b3f2:	e7dd      	b.n	800b3b0 <_fflush_r+0xc>

0800b3f4 <memmove>:
 800b3f4:	4288      	cmp	r0, r1
 800b3f6:	b510      	push	{r4, lr}
 800b3f8:	eb01 0402 	add.w	r4, r1, r2
 800b3fc:	d902      	bls.n	800b404 <memmove+0x10>
 800b3fe:	4284      	cmp	r4, r0
 800b400:	4623      	mov	r3, r4
 800b402:	d807      	bhi.n	800b414 <memmove+0x20>
 800b404:	1e43      	subs	r3, r0, #1
 800b406:	42a1      	cmp	r1, r4
 800b408:	d008      	beq.n	800b41c <memmove+0x28>
 800b40a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b40e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b412:	e7f8      	b.n	800b406 <memmove+0x12>
 800b414:	4402      	add	r2, r0
 800b416:	4601      	mov	r1, r0
 800b418:	428a      	cmp	r2, r1
 800b41a:	d100      	bne.n	800b41e <memmove+0x2a>
 800b41c:	bd10      	pop	{r4, pc}
 800b41e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b422:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b426:	e7f7      	b.n	800b418 <memmove+0x24>

0800b428 <_sbrk_r>:
 800b428:	b538      	push	{r3, r4, r5, lr}
 800b42a:	4d06      	ldr	r5, [pc, #24]	@ (800b444 <_sbrk_r+0x1c>)
 800b42c:	2300      	movs	r3, #0
 800b42e:	4604      	mov	r4, r0
 800b430:	4608      	mov	r0, r1
 800b432:	602b      	str	r3, [r5, #0]
 800b434:	f7f6 f948 	bl	80016c8 <_sbrk>
 800b438:	1c43      	adds	r3, r0, #1
 800b43a:	d102      	bne.n	800b442 <_sbrk_r+0x1a>
 800b43c:	682b      	ldr	r3, [r5, #0]
 800b43e:	b103      	cbz	r3, 800b442 <_sbrk_r+0x1a>
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	bd38      	pop	{r3, r4, r5, pc}
 800b444:	200020f4 	.word	0x200020f4

0800b448 <memcpy>:
 800b448:	440a      	add	r2, r1
 800b44a:	4291      	cmp	r1, r2
 800b44c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b450:	d100      	bne.n	800b454 <memcpy+0xc>
 800b452:	4770      	bx	lr
 800b454:	b510      	push	{r4, lr}
 800b456:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b45a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b45e:	4291      	cmp	r1, r2
 800b460:	d1f9      	bne.n	800b456 <memcpy+0xe>
 800b462:	bd10      	pop	{r4, pc}

0800b464 <__assert_func>:
 800b464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b466:	4614      	mov	r4, r2
 800b468:	461a      	mov	r2, r3
 800b46a:	4b09      	ldr	r3, [pc, #36]	@ (800b490 <__assert_func+0x2c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4605      	mov	r5, r0
 800b470:	68d8      	ldr	r0, [r3, #12]
 800b472:	b954      	cbnz	r4, 800b48a <__assert_func+0x26>
 800b474:	4b07      	ldr	r3, [pc, #28]	@ (800b494 <__assert_func+0x30>)
 800b476:	461c      	mov	r4, r3
 800b478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b47c:	9100      	str	r1, [sp, #0]
 800b47e:	462b      	mov	r3, r5
 800b480:	4905      	ldr	r1, [pc, #20]	@ (800b498 <__assert_func+0x34>)
 800b482:	f000 f86f 	bl	800b564 <fiprintf>
 800b486:	f000 f87f 	bl	800b588 <abort>
 800b48a:	4b04      	ldr	r3, [pc, #16]	@ (800b49c <__assert_func+0x38>)
 800b48c:	e7f4      	b.n	800b478 <__assert_func+0x14>
 800b48e:	bf00      	nop
 800b490:	20000108 	.word	0x20000108
 800b494:	0800cca6 	.word	0x0800cca6
 800b498:	0800cc78 	.word	0x0800cc78
 800b49c:	0800cc6b 	.word	0x0800cc6b

0800b4a0 <_calloc_r>:
 800b4a0:	b570      	push	{r4, r5, r6, lr}
 800b4a2:	fba1 5402 	umull	r5, r4, r1, r2
 800b4a6:	b93c      	cbnz	r4, 800b4b8 <_calloc_r+0x18>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7ff f991 	bl	800a7d0 <_malloc_r>
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	b928      	cbnz	r0, 800b4be <_calloc_r+0x1e>
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	bd70      	pop	{r4, r5, r6, pc}
 800b4b8:	220c      	movs	r2, #12
 800b4ba:	6002      	str	r2, [r0, #0]
 800b4bc:	e7f9      	b.n	800b4b2 <_calloc_r+0x12>
 800b4be:	462a      	mov	r2, r5
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	f7fe fa42 	bl	800994a <memset>
 800b4c6:	e7f5      	b.n	800b4b4 <_calloc_r+0x14>

0800b4c8 <__ascii_mbtowc>:
 800b4c8:	b082      	sub	sp, #8
 800b4ca:	b901      	cbnz	r1, 800b4ce <__ascii_mbtowc+0x6>
 800b4cc:	a901      	add	r1, sp, #4
 800b4ce:	b142      	cbz	r2, 800b4e2 <__ascii_mbtowc+0x1a>
 800b4d0:	b14b      	cbz	r3, 800b4e6 <__ascii_mbtowc+0x1e>
 800b4d2:	7813      	ldrb	r3, [r2, #0]
 800b4d4:	600b      	str	r3, [r1, #0]
 800b4d6:	7812      	ldrb	r2, [r2, #0]
 800b4d8:	1e10      	subs	r0, r2, #0
 800b4da:	bf18      	it	ne
 800b4dc:	2001      	movne	r0, #1
 800b4de:	b002      	add	sp, #8
 800b4e0:	4770      	bx	lr
 800b4e2:	4610      	mov	r0, r2
 800b4e4:	e7fb      	b.n	800b4de <__ascii_mbtowc+0x16>
 800b4e6:	f06f 0001 	mvn.w	r0, #1
 800b4ea:	e7f8      	b.n	800b4de <__ascii_mbtowc+0x16>

0800b4ec <_realloc_r>:
 800b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f0:	4680      	mov	r8, r0
 800b4f2:	4615      	mov	r5, r2
 800b4f4:	460c      	mov	r4, r1
 800b4f6:	b921      	cbnz	r1, 800b502 <_realloc_r+0x16>
 800b4f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	f7ff b967 	b.w	800a7d0 <_malloc_r>
 800b502:	b92a      	cbnz	r2, 800b510 <_realloc_r+0x24>
 800b504:	f7ff f8f0 	bl	800a6e8 <_free_r>
 800b508:	2400      	movs	r4, #0
 800b50a:	4620      	mov	r0, r4
 800b50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b510:	f000 f841 	bl	800b596 <_malloc_usable_size_r>
 800b514:	4285      	cmp	r5, r0
 800b516:	4606      	mov	r6, r0
 800b518:	d802      	bhi.n	800b520 <_realloc_r+0x34>
 800b51a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b51e:	d8f4      	bhi.n	800b50a <_realloc_r+0x1e>
 800b520:	4629      	mov	r1, r5
 800b522:	4640      	mov	r0, r8
 800b524:	f7ff f954 	bl	800a7d0 <_malloc_r>
 800b528:	4607      	mov	r7, r0
 800b52a:	2800      	cmp	r0, #0
 800b52c:	d0ec      	beq.n	800b508 <_realloc_r+0x1c>
 800b52e:	42b5      	cmp	r5, r6
 800b530:	462a      	mov	r2, r5
 800b532:	4621      	mov	r1, r4
 800b534:	bf28      	it	cs
 800b536:	4632      	movcs	r2, r6
 800b538:	f7ff ff86 	bl	800b448 <memcpy>
 800b53c:	4621      	mov	r1, r4
 800b53e:	4640      	mov	r0, r8
 800b540:	f7ff f8d2 	bl	800a6e8 <_free_r>
 800b544:	463c      	mov	r4, r7
 800b546:	e7e0      	b.n	800b50a <_realloc_r+0x1e>

0800b548 <__ascii_wctomb>:
 800b548:	4603      	mov	r3, r0
 800b54a:	4608      	mov	r0, r1
 800b54c:	b141      	cbz	r1, 800b560 <__ascii_wctomb+0x18>
 800b54e:	2aff      	cmp	r2, #255	@ 0xff
 800b550:	d904      	bls.n	800b55c <__ascii_wctomb+0x14>
 800b552:	228a      	movs	r2, #138	@ 0x8a
 800b554:	601a      	str	r2, [r3, #0]
 800b556:	f04f 30ff 	mov.w	r0, #4294967295
 800b55a:	4770      	bx	lr
 800b55c:	700a      	strb	r2, [r1, #0]
 800b55e:	2001      	movs	r0, #1
 800b560:	4770      	bx	lr
	...

0800b564 <fiprintf>:
 800b564:	b40e      	push	{r1, r2, r3}
 800b566:	b503      	push	{r0, r1, lr}
 800b568:	4601      	mov	r1, r0
 800b56a:	ab03      	add	r3, sp, #12
 800b56c:	4805      	ldr	r0, [pc, #20]	@ (800b584 <fiprintf+0x20>)
 800b56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b572:	6800      	ldr	r0, [r0, #0]
 800b574:	9301      	str	r3, [sp, #4]
 800b576:	f000 f83f 	bl	800b5f8 <_vfiprintf_r>
 800b57a:	b002      	add	sp, #8
 800b57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b580:	b003      	add	sp, #12
 800b582:	4770      	bx	lr
 800b584:	20000108 	.word	0x20000108

0800b588 <abort>:
 800b588:	b508      	push	{r3, lr}
 800b58a:	2006      	movs	r0, #6
 800b58c:	f000 fa08 	bl	800b9a0 <raise>
 800b590:	2001      	movs	r0, #1
 800b592:	f7f6 f821 	bl	80015d8 <_exit>

0800b596 <_malloc_usable_size_r>:
 800b596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b59a:	1f18      	subs	r0, r3, #4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	bfbc      	itt	lt
 800b5a0:	580b      	ldrlt	r3, [r1, r0]
 800b5a2:	18c0      	addlt	r0, r0, r3
 800b5a4:	4770      	bx	lr

0800b5a6 <__sfputc_r>:
 800b5a6:	6893      	ldr	r3, [r2, #8]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	b410      	push	{r4}
 800b5ae:	6093      	str	r3, [r2, #8]
 800b5b0:	da08      	bge.n	800b5c4 <__sfputc_r+0x1e>
 800b5b2:	6994      	ldr	r4, [r2, #24]
 800b5b4:	42a3      	cmp	r3, r4
 800b5b6:	db01      	blt.n	800b5bc <__sfputc_r+0x16>
 800b5b8:	290a      	cmp	r1, #10
 800b5ba:	d103      	bne.n	800b5c4 <__sfputc_r+0x1e>
 800b5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5c0:	f000 b932 	b.w	800b828 <__swbuf_r>
 800b5c4:	6813      	ldr	r3, [r2, #0]
 800b5c6:	1c58      	adds	r0, r3, #1
 800b5c8:	6010      	str	r0, [r2, #0]
 800b5ca:	7019      	strb	r1, [r3, #0]
 800b5cc:	4608      	mov	r0, r1
 800b5ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <__sfputs_r>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	460f      	mov	r7, r1
 800b5da:	4614      	mov	r4, r2
 800b5dc:	18d5      	adds	r5, r2, r3
 800b5de:	42ac      	cmp	r4, r5
 800b5e0:	d101      	bne.n	800b5e6 <__sfputs_r+0x12>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e007      	b.n	800b5f6 <__sfputs_r+0x22>
 800b5e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ea:	463a      	mov	r2, r7
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f7ff ffda 	bl	800b5a6 <__sfputc_r>
 800b5f2:	1c43      	adds	r3, r0, #1
 800b5f4:	d1f3      	bne.n	800b5de <__sfputs_r+0xa>
 800b5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5f8 <_vfiprintf_r>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	460d      	mov	r5, r1
 800b5fe:	b09d      	sub	sp, #116	@ 0x74
 800b600:	4614      	mov	r4, r2
 800b602:	4698      	mov	r8, r3
 800b604:	4606      	mov	r6, r0
 800b606:	b118      	cbz	r0, 800b610 <_vfiprintf_r+0x18>
 800b608:	6a03      	ldr	r3, [r0, #32]
 800b60a:	b90b      	cbnz	r3, 800b610 <_vfiprintf_r+0x18>
 800b60c:	f7fe f904 	bl	8009818 <__sinit>
 800b610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b612:	07d9      	lsls	r1, r3, #31
 800b614:	d405      	bmi.n	800b622 <_vfiprintf_r+0x2a>
 800b616:	89ab      	ldrh	r3, [r5, #12]
 800b618:	059a      	lsls	r2, r3, #22
 800b61a:	d402      	bmi.n	800b622 <_vfiprintf_r+0x2a>
 800b61c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b61e:	f7fe fa12 	bl	8009a46 <__retarget_lock_acquire_recursive>
 800b622:	89ab      	ldrh	r3, [r5, #12]
 800b624:	071b      	lsls	r3, r3, #28
 800b626:	d501      	bpl.n	800b62c <_vfiprintf_r+0x34>
 800b628:	692b      	ldr	r3, [r5, #16]
 800b62a:	b99b      	cbnz	r3, 800b654 <_vfiprintf_r+0x5c>
 800b62c:	4629      	mov	r1, r5
 800b62e:	4630      	mov	r0, r6
 800b630:	f000 f938 	bl	800b8a4 <__swsetup_r>
 800b634:	b170      	cbz	r0, 800b654 <_vfiprintf_r+0x5c>
 800b636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b638:	07dc      	lsls	r4, r3, #31
 800b63a:	d504      	bpl.n	800b646 <_vfiprintf_r+0x4e>
 800b63c:	f04f 30ff 	mov.w	r0, #4294967295
 800b640:	b01d      	add	sp, #116	@ 0x74
 800b642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b646:	89ab      	ldrh	r3, [r5, #12]
 800b648:	0598      	lsls	r0, r3, #22
 800b64a:	d4f7      	bmi.n	800b63c <_vfiprintf_r+0x44>
 800b64c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b64e:	f7fe f9fb 	bl	8009a48 <__retarget_lock_release_recursive>
 800b652:	e7f3      	b.n	800b63c <_vfiprintf_r+0x44>
 800b654:	2300      	movs	r3, #0
 800b656:	9309      	str	r3, [sp, #36]	@ 0x24
 800b658:	2320      	movs	r3, #32
 800b65a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b65e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b662:	2330      	movs	r3, #48	@ 0x30
 800b664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b814 <_vfiprintf_r+0x21c>
 800b668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b66c:	f04f 0901 	mov.w	r9, #1
 800b670:	4623      	mov	r3, r4
 800b672:	469a      	mov	sl, r3
 800b674:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b678:	b10a      	cbz	r2, 800b67e <_vfiprintf_r+0x86>
 800b67a:	2a25      	cmp	r2, #37	@ 0x25
 800b67c:	d1f9      	bne.n	800b672 <_vfiprintf_r+0x7a>
 800b67e:	ebba 0b04 	subs.w	fp, sl, r4
 800b682:	d00b      	beq.n	800b69c <_vfiprintf_r+0xa4>
 800b684:	465b      	mov	r3, fp
 800b686:	4622      	mov	r2, r4
 800b688:	4629      	mov	r1, r5
 800b68a:	4630      	mov	r0, r6
 800b68c:	f7ff ffa2 	bl	800b5d4 <__sfputs_r>
 800b690:	3001      	adds	r0, #1
 800b692:	f000 80a7 	beq.w	800b7e4 <_vfiprintf_r+0x1ec>
 800b696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b698:	445a      	add	r2, fp
 800b69a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b69c:	f89a 3000 	ldrb.w	r3, [sl]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f000 809f 	beq.w	800b7e4 <_vfiprintf_r+0x1ec>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6b0:	f10a 0a01 	add.w	sl, sl, #1
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	9307      	str	r3, [sp, #28]
 800b6b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6be:	4654      	mov	r4, sl
 800b6c0:	2205      	movs	r2, #5
 800b6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c6:	4853      	ldr	r0, [pc, #332]	@ (800b814 <_vfiprintf_r+0x21c>)
 800b6c8:	f7f4 fd8a 	bl	80001e0 <memchr>
 800b6cc:	9a04      	ldr	r2, [sp, #16]
 800b6ce:	b9d8      	cbnz	r0, 800b708 <_vfiprintf_r+0x110>
 800b6d0:	06d1      	lsls	r1, r2, #27
 800b6d2:	bf44      	itt	mi
 800b6d4:	2320      	movmi	r3, #32
 800b6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6da:	0713      	lsls	r3, r2, #28
 800b6dc:	bf44      	itt	mi
 800b6de:	232b      	movmi	r3, #43	@ 0x2b
 800b6e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b6e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ea:	d015      	beq.n	800b718 <_vfiprintf_r+0x120>
 800b6ec:	9a07      	ldr	r2, [sp, #28]
 800b6ee:	4654      	mov	r4, sl
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f04f 0c0a 	mov.w	ip, #10
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6fc:	3b30      	subs	r3, #48	@ 0x30
 800b6fe:	2b09      	cmp	r3, #9
 800b700:	d94b      	bls.n	800b79a <_vfiprintf_r+0x1a2>
 800b702:	b1b0      	cbz	r0, 800b732 <_vfiprintf_r+0x13a>
 800b704:	9207      	str	r2, [sp, #28]
 800b706:	e014      	b.n	800b732 <_vfiprintf_r+0x13a>
 800b708:	eba0 0308 	sub.w	r3, r0, r8
 800b70c:	fa09 f303 	lsl.w	r3, r9, r3
 800b710:	4313      	orrs	r3, r2
 800b712:	9304      	str	r3, [sp, #16]
 800b714:	46a2      	mov	sl, r4
 800b716:	e7d2      	b.n	800b6be <_vfiprintf_r+0xc6>
 800b718:	9b03      	ldr	r3, [sp, #12]
 800b71a:	1d19      	adds	r1, r3, #4
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	9103      	str	r1, [sp, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	bfbb      	ittet	lt
 800b724:	425b      	neglt	r3, r3
 800b726:	f042 0202 	orrlt.w	r2, r2, #2
 800b72a:	9307      	strge	r3, [sp, #28]
 800b72c:	9307      	strlt	r3, [sp, #28]
 800b72e:	bfb8      	it	lt
 800b730:	9204      	strlt	r2, [sp, #16]
 800b732:	7823      	ldrb	r3, [r4, #0]
 800b734:	2b2e      	cmp	r3, #46	@ 0x2e
 800b736:	d10a      	bne.n	800b74e <_vfiprintf_r+0x156>
 800b738:	7863      	ldrb	r3, [r4, #1]
 800b73a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b73c:	d132      	bne.n	800b7a4 <_vfiprintf_r+0x1ac>
 800b73e:	9b03      	ldr	r3, [sp, #12]
 800b740:	1d1a      	adds	r2, r3, #4
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	9203      	str	r2, [sp, #12]
 800b746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b74a:	3402      	adds	r4, #2
 800b74c:	9305      	str	r3, [sp, #20]
 800b74e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b824 <_vfiprintf_r+0x22c>
 800b752:	7821      	ldrb	r1, [r4, #0]
 800b754:	2203      	movs	r2, #3
 800b756:	4650      	mov	r0, sl
 800b758:	f7f4 fd42 	bl	80001e0 <memchr>
 800b75c:	b138      	cbz	r0, 800b76e <_vfiprintf_r+0x176>
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	eba0 000a 	sub.w	r0, r0, sl
 800b764:	2240      	movs	r2, #64	@ 0x40
 800b766:	4082      	lsls	r2, r0
 800b768:	4313      	orrs	r3, r2
 800b76a:	3401      	adds	r4, #1
 800b76c:	9304      	str	r3, [sp, #16]
 800b76e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b772:	4829      	ldr	r0, [pc, #164]	@ (800b818 <_vfiprintf_r+0x220>)
 800b774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b778:	2206      	movs	r2, #6
 800b77a:	f7f4 fd31 	bl	80001e0 <memchr>
 800b77e:	2800      	cmp	r0, #0
 800b780:	d03f      	beq.n	800b802 <_vfiprintf_r+0x20a>
 800b782:	4b26      	ldr	r3, [pc, #152]	@ (800b81c <_vfiprintf_r+0x224>)
 800b784:	bb1b      	cbnz	r3, 800b7ce <_vfiprintf_r+0x1d6>
 800b786:	9b03      	ldr	r3, [sp, #12]
 800b788:	3307      	adds	r3, #7
 800b78a:	f023 0307 	bic.w	r3, r3, #7
 800b78e:	3308      	adds	r3, #8
 800b790:	9303      	str	r3, [sp, #12]
 800b792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b794:	443b      	add	r3, r7
 800b796:	9309      	str	r3, [sp, #36]	@ 0x24
 800b798:	e76a      	b.n	800b670 <_vfiprintf_r+0x78>
 800b79a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b79e:	460c      	mov	r4, r1
 800b7a0:	2001      	movs	r0, #1
 800b7a2:	e7a8      	b.n	800b6f6 <_vfiprintf_r+0xfe>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	3401      	adds	r4, #1
 800b7a8:	9305      	str	r3, [sp, #20]
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	f04f 0c0a 	mov.w	ip, #10
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7b6:	3a30      	subs	r2, #48	@ 0x30
 800b7b8:	2a09      	cmp	r2, #9
 800b7ba:	d903      	bls.n	800b7c4 <_vfiprintf_r+0x1cc>
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d0c6      	beq.n	800b74e <_vfiprintf_r+0x156>
 800b7c0:	9105      	str	r1, [sp, #20]
 800b7c2:	e7c4      	b.n	800b74e <_vfiprintf_r+0x156>
 800b7c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7c8:	4604      	mov	r4, r0
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e7f0      	b.n	800b7b0 <_vfiprintf_r+0x1b8>
 800b7ce:	ab03      	add	r3, sp, #12
 800b7d0:	9300      	str	r3, [sp, #0]
 800b7d2:	462a      	mov	r2, r5
 800b7d4:	4b12      	ldr	r3, [pc, #72]	@ (800b820 <_vfiprintf_r+0x228>)
 800b7d6:	a904      	add	r1, sp, #16
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7fd fbd9 	bl	8008f90 <_printf_float>
 800b7de:	4607      	mov	r7, r0
 800b7e0:	1c78      	adds	r0, r7, #1
 800b7e2:	d1d6      	bne.n	800b792 <_vfiprintf_r+0x19a>
 800b7e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b7e6:	07d9      	lsls	r1, r3, #31
 800b7e8:	d405      	bmi.n	800b7f6 <_vfiprintf_r+0x1fe>
 800b7ea:	89ab      	ldrh	r3, [r5, #12]
 800b7ec:	059a      	lsls	r2, r3, #22
 800b7ee:	d402      	bmi.n	800b7f6 <_vfiprintf_r+0x1fe>
 800b7f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7f2:	f7fe f929 	bl	8009a48 <__retarget_lock_release_recursive>
 800b7f6:	89ab      	ldrh	r3, [r5, #12]
 800b7f8:	065b      	lsls	r3, r3, #25
 800b7fa:	f53f af1f 	bmi.w	800b63c <_vfiprintf_r+0x44>
 800b7fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b800:	e71e      	b.n	800b640 <_vfiprintf_r+0x48>
 800b802:	ab03      	add	r3, sp, #12
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	462a      	mov	r2, r5
 800b808:	4b05      	ldr	r3, [pc, #20]	@ (800b820 <_vfiprintf_r+0x228>)
 800b80a:	a904      	add	r1, sp, #16
 800b80c:	4630      	mov	r0, r6
 800b80e:	f7fd fe57 	bl	80094c0 <_printf_i>
 800b812:	e7e4      	b.n	800b7de <_vfiprintf_r+0x1e6>
 800b814:	0800cc50 	.word	0x0800cc50
 800b818:	0800cc5a 	.word	0x0800cc5a
 800b81c:	08008f91 	.word	0x08008f91
 800b820:	0800b5d5 	.word	0x0800b5d5
 800b824:	0800cc56 	.word	0x0800cc56

0800b828 <__swbuf_r>:
 800b828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82a:	460e      	mov	r6, r1
 800b82c:	4614      	mov	r4, r2
 800b82e:	4605      	mov	r5, r0
 800b830:	b118      	cbz	r0, 800b83a <__swbuf_r+0x12>
 800b832:	6a03      	ldr	r3, [r0, #32]
 800b834:	b90b      	cbnz	r3, 800b83a <__swbuf_r+0x12>
 800b836:	f7fd ffef 	bl	8009818 <__sinit>
 800b83a:	69a3      	ldr	r3, [r4, #24]
 800b83c:	60a3      	str	r3, [r4, #8]
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	071a      	lsls	r2, r3, #28
 800b842:	d501      	bpl.n	800b848 <__swbuf_r+0x20>
 800b844:	6923      	ldr	r3, [r4, #16]
 800b846:	b943      	cbnz	r3, 800b85a <__swbuf_r+0x32>
 800b848:	4621      	mov	r1, r4
 800b84a:	4628      	mov	r0, r5
 800b84c:	f000 f82a 	bl	800b8a4 <__swsetup_r>
 800b850:	b118      	cbz	r0, 800b85a <__swbuf_r+0x32>
 800b852:	f04f 37ff 	mov.w	r7, #4294967295
 800b856:	4638      	mov	r0, r7
 800b858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	6922      	ldr	r2, [r4, #16]
 800b85e:	1a98      	subs	r0, r3, r2
 800b860:	6963      	ldr	r3, [r4, #20]
 800b862:	b2f6      	uxtb	r6, r6
 800b864:	4283      	cmp	r3, r0
 800b866:	4637      	mov	r7, r6
 800b868:	dc05      	bgt.n	800b876 <__swbuf_r+0x4e>
 800b86a:	4621      	mov	r1, r4
 800b86c:	4628      	mov	r0, r5
 800b86e:	f7ff fd99 	bl	800b3a4 <_fflush_r>
 800b872:	2800      	cmp	r0, #0
 800b874:	d1ed      	bne.n	800b852 <__swbuf_r+0x2a>
 800b876:	68a3      	ldr	r3, [r4, #8]
 800b878:	3b01      	subs	r3, #1
 800b87a:	60a3      	str	r3, [r4, #8]
 800b87c:	6823      	ldr	r3, [r4, #0]
 800b87e:	1c5a      	adds	r2, r3, #1
 800b880:	6022      	str	r2, [r4, #0]
 800b882:	701e      	strb	r6, [r3, #0]
 800b884:	6962      	ldr	r2, [r4, #20]
 800b886:	1c43      	adds	r3, r0, #1
 800b888:	429a      	cmp	r2, r3
 800b88a:	d004      	beq.n	800b896 <__swbuf_r+0x6e>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	07db      	lsls	r3, r3, #31
 800b890:	d5e1      	bpl.n	800b856 <__swbuf_r+0x2e>
 800b892:	2e0a      	cmp	r6, #10
 800b894:	d1df      	bne.n	800b856 <__swbuf_r+0x2e>
 800b896:	4621      	mov	r1, r4
 800b898:	4628      	mov	r0, r5
 800b89a:	f7ff fd83 	bl	800b3a4 <_fflush_r>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d0d9      	beq.n	800b856 <__swbuf_r+0x2e>
 800b8a2:	e7d6      	b.n	800b852 <__swbuf_r+0x2a>

0800b8a4 <__swsetup_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4b29      	ldr	r3, [pc, #164]	@ (800b94c <__swsetup_r+0xa8>)
 800b8a8:	4605      	mov	r5, r0
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	b118      	cbz	r0, 800b8b8 <__swsetup_r+0x14>
 800b8b0:	6a03      	ldr	r3, [r0, #32]
 800b8b2:	b90b      	cbnz	r3, 800b8b8 <__swsetup_r+0x14>
 800b8b4:	f7fd ffb0 	bl	8009818 <__sinit>
 800b8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8bc:	0719      	lsls	r1, r3, #28
 800b8be:	d422      	bmi.n	800b906 <__swsetup_r+0x62>
 800b8c0:	06da      	lsls	r2, r3, #27
 800b8c2:	d407      	bmi.n	800b8d4 <__swsetup_r+0x30>
 800b8c4:	2209      	movs	r2, #9
 800b8c6:	602a      	str	r2, [r5, #0]
 800b8c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8cc:	81a3      	strh	r3, [r4, #12]
 800b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b8d2:	e033      	b.n	800b93c <__swsetup_r+0x98>
 800b8d4:	0758      	lsls	r0, r3, #29
 800b8d6:	d512      	bpl.n	800b8fe <__swsetup_r+0x5a>
 800b8d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8da:	b141      	cbz	r1, 800b8ee <__swsetup_r+0x4a>
 800b8dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b8e0:	4299      	cmp	r1, r3
 800b8e2:	d002      	beq.n	800b8ea <__swsetup_r+0x46>
 800b8e4:	4628      	mov	r0, r5
 800b8e6:	f7fe feff 	bl	800a6e8 <_free_r>
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	6063      	str	r3, [r4, #4]
 800b8fa:	6923      	ldr	r3, [r4, #16]
 800b8fc:	6023      	str	r3, [r4, #0]
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	f043 0308 	orr.w	r3, r3, #8
 800b904:	81a3      	strh	r3, [r4, #12]
 800b906:	6923      	ldr	r3, [r4, #16]
 800b908:	b94b      	cbnz	r3, 800b91e <__swsetup_r+0x7a>
 800b90a:	89a3      	ldrh	r3, [r4, #12]
 800b90c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b914:	d003      	beq.n	800b91e <__swsetup_r+0x7a>
 800b916:	4621      	mov	r1, r4
 800b918:	4628      	mov	r0, r5
 800b91a:	f000 f883 	bl	800ba24 <__smakebuf_r>
 800b91e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b922:	f013 0201 	ands.w	r2, r3, #1
 800b926:	d00a      	beq.n	800b93e <__swsetup_r+0x9a>
 800b928:	2200      	movs	r2, #0
 800b92a:	60a2      	str	r2, [r4, #8]
 800b92c:	6962      	ldr	r2, [r4, #20]
 800b92e:	4252      	negs	r2, r2
 800b930:	61a2      	str	r2, [r4, #24]
 800b932:	6922      	ldr	r2, [r4, #16]
 800b934:	b942      	cbnz	r2, 800b948 <__swsetup_r+0xa4>
 800b936:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b93a:	d1c5      	bne.n	800b8c8 <__swsetup_r+0x24>
 800b93c:	bd38      	pop	{r3, r4, r5, pc}
 800b93e:	0799      	lsls	r1, r3, #30
 800b940:	bf58      	it	pl
 800b942:	6962      	ldrpl	r2, [r4, #20]
 800b944:	60a2      	str	r2, [r4, #8]
 800b946:	e7f4      	b.n	800b932 <__swsetup_r+0x8e>
 800b948:	2000      	movs	r0, #0
 800b94a:	e7f7      	b.n	800b93c <__swsetup_r+0x98>
 800b94c:	20000108 	.word	0x20000108

0800b950 <_raise_r>:
 800b950:	291f      	cmp	r1, #31
 800b952:	b538      	push	{r3, r4, r5, lr}
 800b954:	4605      	mov	r5, r0
 800b956:	460c      	mov	r4, r1
 800b958:	d904      	bls.n	800b964 <_raise_r+0x14>
 800b95a:	2316      	movs	r3, #22
 800b95c:	6003      	str	r3, [r0, #0]
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295
 800b962:	bd38      	pop	{r3, r4, r5, pc}
 800b964:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b966:	b112      	cbz	r2, 800b96e <_raise_r+0x1e>
 800b968:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b96c:	b94b      	cbnz	r3, 800b982 <_raise_r+0x32>
 800b96e:	4628      	mov	r0, r5
 800b970:	f000 f830 	bl	800b9d4 <_getpid_r>
 800b974:	4622      	mov	r2, r4
 800b976:	4601      	mov	r1, r0
 800b978:	4628      	mov	r0, r5
 800b97a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b97e:	f000 b817 	b.w	800b9b0 <_kill_r>
 800b982:	2b01      	cmp	r3, #1
 800b984:	d00a      	beq.n	800b99c <_raise_r+0x4c>
 800b986:	1c59      	adds	r1, r3, #1
 800b988:	d103      	bne.n	800b992 <_raise_r+0x42>
 800b98a:	2316      	movs	r3, #22
 800b98c:	6003      	str	r3, [r0, #0]
 800b98e:	2001      	movs	r0, #1
 800b990:	e7e7      	b.n	800b962 <_raise_r+0x12>
 800b992:	2100      	movs	r1, #0
 800b994:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b998:	4620      	mov	r0, r4
 800b99a:	4798      	blx	r3
 800b99c:	2000      	movs	r0, #0
 800b99e:	e7e0      	b.n	800b962 <_raise_r+0x12>

0800b9a0 <raise>:
 800b9a0:	4b02      	ldr	r3, [pc, #8]	@ (800b9ac <raise+0xc>)
 800b9a2:	4601      	mov	r1, r0
 800b9a4:	6818      	ldr	r0, [r3, #0]
 800b9a6:	f7ff bfd3 	b.w	800b950 <_raise_r>
 800b9aa:	bf00      	nop
 800b9ac:	20000108 	.word	0x20000108

0800b9b0 <_kill_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d07      	ldr	r5, [pc, #28]	@ (800b9d0 <_kill_r+0x20>)
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	4611      	mov	r1, r2
 800b9bc:	602b      	str	r3, [r5, #0]
 800b9be:	f7f5 fdfb 	bl	80015b8 <_kill>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	d102      	bne.n	800b9cc <_kill_r+0x1c>
 800b9c6:	682b      	ldr	r3, [r5, #0]
 800b9c8:	b103      	cbz	r3, 800b9cc <_kill_r+0x1c>
 800b9ca:	6023      	str	r3, [r4, #0]
 800b9cc:	bd38      	pop	{r3, r4, r5, pc}
 800b9ce:	bf00      	nop
 800b9d0:	200020f4 	.word	0x200020f4

0800b9d4 <_getpid_r>:
 800b9d4:	f7f5 bde8 	b.w	80015a8 <_getpid>

0800b9d8 <__swhatbuf_r>:
 800b9d8:	b570      	push	{r4, r5, r6, lr}
 800b9da:	460c      	mov	r4, r1
 800b9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	b096      	sub	sp, #88	@ 0x58
 800b9e4:	4615      	mov	r5, r2
 800b9e6:	461e      	mov	r6, r3
 800b9e8:	da0d      	bge.n	800ba06 <__swhatbuf_r+0x2e>
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b9f0:	f04f 0100 	mov.w	r1, #0
 800b9f4:	bf14      	ite	ne
 800b9f6:	2340      	movne	r3, #64	@ 0x40
 800b9f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b9fc:	2000      	movs	r0, #0
 800b9fe:	6031      	str	r1, [r6, #0]
 800ba00:	602b      	str	r3, [r5, #0]
 800ba02:	b016      	add	sp, #88	@ 0x58
 800ba04:	bd70      	pop	{r4, r5, r6, pc}
 800ba06:	466a      	mov	r2, sp
 800ba08:	f000 f848 	bl	800ba9c <_fstat_r>
 800ba0c:	2800      	cmp	r0, #0
 800ba0e:	dbec      	blt.n	800b9ea <__swhatbuf_r+0x12>
 800ba10:	9901      	ldr	r1, [sp, #4]
 800ba12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba1a:	4259      	negs	r1, r3
 800ba1c:	4159      	adcs	r1, r3
 800ba1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba22:	e7eb      	b.n	800b9fc <__swhatbuf_r+0x24>

0800ba24 <__smakebuf_r>:
 800ba24:	898b      	ldrh	r3, [r1, #12]
 800ba26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba28:	079d      	lsls	r5, r3, #30
 800ba2a:	4606      	mov	r6, r0
 800ba2c:	460c      	mov	r4, r1
 800ba2e:	d507      	bpl.n	800ba40 <__smakebuf_r+0x1c>
 800ba30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	6123      	str	r3, [r4, #16]
 800ba38:	2301      	movs	r3, #1
 800ba3a:	6163      	str	r3, [r4, #20]
 800ba3c:	b003      	add	sp, #12
 800ba3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba40:	ab01      	add	r3, sp, #4
 800ba42:	466a      	mov	r2, sp
 800ba44:	f7ff ffc8 	bl	800b9d8 <__swhatbuf_r>
 800ba48:	9f00      	ldr	r7, [sp, #0]
 800ba4a:	4605      	mov	r5, r0
 800ba4c:	4639      	mov	r1, r7
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f7fe febe 	bl	800a7d0 <_malloc_r>
 800ba54:	b948      	cbnz	r0, 800ba6a <__smakebuf_r+0x46>
 800ba56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba5a:	059a      	lsls	r2, r3, #22
 800ba5c:	d4ee      	bmi.n	800ba3c <__smakebuf_r+0x18>
 800ba5e:	f023 0303 	bic.w	r3, r3, #3
 800ba62:	f043 0302 	orr.w	r3, r3, #2
 800ba66:	81a3      	strh	r3, [r4, #12]
 800ba68:	e7e2      	b.n	800ba30 <__smakebuf_r+0xc>
 800ba6a:	89a3      	ldrh	r3, [r4, #12]
 800ba6c:	6020      	str	r0, [r4, #0]
 800ba6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba72:	81a3      	strh	r3, [r4, #12]
 800ba74:	9b01      	ldr	r3, [sp, #4]
 800ba76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba7a:	b15b      	cbz	r3, 800ba94 <__smakebuf_r+0x70>
 800ba7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba80:	4630      	mov	r0, r6
 800ba82:	f000 f81d 	bl	800bac0 <_isatty_r>
 800ba86:	b128      	cbz	r0, 800ba94 <__smakebuf_r+0x70>
 800ba88:	89a3      	ldrh	r3, [r4, #12]
 800ba8a:	f023 0303 	bic.w	r3, r3, #3
 800ba8e:	f043 0301 	orr.w	r3, r3, #1
 800ba92:	81a3      	strh	r3, [r4, #12]
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	431d      	orrs	r5, r3
 800ba98:	81a5      	strh	r5, [r4, #12]
 800ba9a:	e7cf      	b.n	800ba3c <__smakebuf_r+0x18>

0800ba9c <_fstat_r>:
 800ba9c:	b538      	push	{r3, r4, r5, lr}
 800ba9e:	4d07      	ldr	r5, [pc, #28]	@ (800babc <_fstat_r+0x20>)
 800baa0:	2300      	movs	r3, #0
 800baa2:	4604      	mov	r4, r0
 800baa4:	4608      	mov	r0, r1
 800baa6:	4611      	mov	r1, r2
 800baa8:	602b      	str	r3, [r5, #0]
 800baaa:	f7f5 fde5 	bl	8001678 <_fstat>
 800baae:	1c43      	adds	r3, r0, #1
 800bab0:	d102      	bne.n	800bab8 <_fstat_r+0x1c>
 800bab2:	682b      	ldr	r3, [r5, #0]
 800bab4:	b103      	cbz	r3, 800bab8 <_fstat_r+0x1c>
 800bab6:	6023      	str	r3, [r4, #0]
 800bab8:	bd38      	pop	{r3, r4, r5, pc}
 800baba:	bf00      	nop
 800babc:	200020f4 	.word	0x200020f4

0800bac0 <_isatty_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	4d06      	ldr	r5, [pc, #24]	@ (800badc <_isatty_r+0x1c>)
 800bac4:	2300      	movs	r3, #0
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	602b      	str	r3, [r5, #0]
 800bacc:	f7f5 fde4 	bl	8001698 <_isatty>
 800bad0:	1c43      	adds	r3, r0, #1
 800bad2:	d102      	bne.n	800bada <_isatty_r+0x1a>
 800bad4:	682b      	ldr	r3, [r5, #0]
 800bad6:	b103      	cbz	r3, 800bada <_isatty_r+0x1a>
 800bad8:	6023      	str	r3, [r4, #0]
 800bada:	bd38      	pop	{r3, r4, r5, pc}
 800badc:	200020f4 	.word	0x200020f4

0800bae0 <pow>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	ed2d 8b02 	vpush	{d8}
 800bae6:	eeb0 8a40 	vmov.f32	s16, s0
 800baea:	eef0 8a60 	vmov.f32	s17, s1
 800baee:	ec55 4b11 	vmov	r4, r5, d1
 800baf2:	f000 f871 	bl	800bbd8 <__ieee754_pow>
 800baf6:	4622      	mov	r2, r4
 800baf8:	462b      	mov	r3, r5
 800bafa:	4620      	mov	r0, r4
 800bafc:	4629      	mov	r1, r5
 800bafe:	ec57 6b10 	vmov	r6, r7, d0
 800bb02:	f7f5 f81b 	bl	8000b3c <__aeabi_dcmpun>
 800bb06:	2800      	cmp	r0, #0
 800bb08:	d13b      	bne.n	800bb82 <pow+0xa2>
 800bb0a:	ec51 0b18 	vmov	r0, r1, d8
 800bb0e:	2200      	movs	r2, #0
 800bb10:	2300      	movs	r3, #0
 800bb12:	f7f4 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb16:	b1b8      	cbz	r0, 800bb48 <pow+0x68>
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	4620      	mov	r0, r4
 800bb1e:	4629      	mov	r1, r5
 800bb20:	f7f4 ffda 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb24:	2800      	cmp	r0, #0
 800bb26:	d146      	bne.n	800bbb6 <pow+0xd6>
 800bb28:	ec45 4b10 	vmov	d0, r4, r5
 800bb2c:	f000 f848 	bl	800bbc0 <finite>
 800bb30:	b338      	cbz	r0, 800bb82 <pow+0xa2>
 800bb32:	2200      	movs	r2, #0
 800bb34:	2300      	movs	r3, #0
 800bb36:	4620      	mov	r0, r4
 800bb38:	4629      	mov	r1, r5
 800bb3a:	f7f4 ffd7 	bl	8000aec <__aeabi_dcmplt>
 800bb3e:	b300      	cbz	r0, 800bb82 <pow+0xa2>
 800bb40:	f7fd ff56 	bl	80099f0 <__errno>
 800bb44:	2322      	movs	r3, #34	@ 0x22
 800bb46:	e01b      	b.n	800bb80 <pow+0xa0>
 800bb48:	ec47 6b10 	vmov	d0, r6, r7
 800bb4c:	f000 f838 	bl	800bbc0 <finite>
 800bb50:	b9e0      	cbnz	r0, 800bb8c <pow+0xac>
 800bb52:	eeb0 0a48 	vmov.f32	s0, s16
 800bb56:	eef0 0a68 	vmov.f32	s1, s17
 800bb5a:	f000 f831 	bl	800bbc0 <finite>
 800bb5e:	b1a8      	cbz	r0, 800bb8c <pow+0xac>
 800bb60:	ec45 4b10 	vmov	d0, r4, r5
 800bb64:	f000 f82c 	bl	800bbc0 <finite>
 800bb68:	b180      	cbz	r0, 800bb8c <pow+0xac>
 800bb6a:	4632      	mov	r2, r6
 800bb6c:	463b      	mov	r3, r7
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 ffe3 	bl	8000b3c <__aeabi_dcmpun>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	d0e2      	beq.n	800bb40 <pow+0x60>
 800bb7a:	f7fd ff39 	bl	80099f0 <__errno>
 800bb7e:	2321      	movs	r3, #33	@ 0x21
 800bb80:	6003      	str	r3, [r0, #0]
 800bb82:	ecbd 8b02 	vpop	{d8}
 800bb86:	ec47 6b10 	vmov	d0, r6, r7
 800bb8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2300      	movs	r3, #0
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	d0f2      	beq.n	800bb82 <pow+0xa2>
 800bb9c:	eeb0 0a48 	vmov.f32	s0, s16
 800bba0:	eef0 0a68 	vmov.f32	s1, s17
 800bba4:	f000 f80c 	bl	800bbc0 <finite>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d0ea      	beq.n	800bb82 <pow+0xa2>
 800bbac:	ec45 4b10 	vmov	d0, r4, r5
 800bbb0:	f000 f806 	bl	800bbc0 <finite>
 800bbb4:	e7c3      	b.n	800bb3e <pow+0x5e>
 800bbb6:	4f01      	ldr	r7, [pc, #4]	@ (800bbbc <pow+0xdc>)
 800bbb8:	2600      	movs	r6, #0
 800bbba:	e7e2      	b.n	800bb82 <pow+0xa2>
 800bbbc:	3ff00000 	.word	0x3ff00000

0800bbc0 <finite>:
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	ed8d 0b00 	vstr	d0, [sp]
 800bbc6:	9801      	ldr	r0, [sp, #4]
 800bbc8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bbcc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bbd0:	0fc0      	lsrs	r0, r0, #31
 800bbd2:	b002      	add	sp, #8
 800bbd4:	4770      	bx	lr
	...

0800bbd8 <__ieee754_pow>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	b091      	sub	sp, #68	@ 0x44
 800bbde:	ed8d 1b00 	vstr	d1, [sp]
 800bbe2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bbe6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bbea:	ea5a 0001 	orrs.w	r0, sl, r1
 800bbee:	ec57 6b10 	vmov	r6, r7, d0
 800bbf2:	d113      	bne.n	800bc1c <__ieee754_pow+0x44>
 800bbf4:	19b3      	adds	r3, r6, r6
 800bbf6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bbfa:	4152      	adcs	r2, r2
 800bbfc:	4298      	cmp	r0, r3
 800bbfe:	4b98      	ldr	r3, [pc, #608]	@ (800be60 <__ieee754_pow+0x288>)
 800bc00:	4193      	sbcs	r3, r2
 800bc02:	f080 84ea 	bcs.w	800c5da <__ieee754_pow+0xa02>
 800bc06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc0a:	4630      	mov	r0, r6
 800bc0c:	4639      	mov	r1, r7
 800bc0e:	f7f4 fb45 	bl	800029c <__adddf3>
 800bc12:	ec41 0b10 	vmov	d0, r0, r1
 800bc16:	b011      	add	sp, #68	@ 0x44
 800bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc1c:	4a91      	ldr	r2, [pc, #580]	@ (800be64 <__ieee754_pow+0x28c>)
 800bc1e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bc22:	4590      	cmp	r8, r2
 800bc24:	463d      	mov	r5, r7
 800bc26:	4633      	mov	r3, r6
 800bc28:	d806      	bhi.n	800bc38 <__ieee754_pow+0x60>
 800bc2a:	d101      	bne.n	800bc30 <__ieee754_pow+0x58>
 800bc2c:	2e00      	cmp	r6, #0
 800bc2e:	d1ea      	bne.n	800bc06 <__ieee754_pow+0x2e>
 800bc30:	4592      	cmp	sl, r2
 800bc32:	d801      	bhi.n	800bc38 <__ieee754_pow+0x60>
 800bc34:	d10e      	bne.n	800bc54 <__ieee754_pow+0x7c>
 800bc36:	b169      	cbz	r1, 800bc54 <__ieee754_pow+0x7c>
 800bc38:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bc3c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bc40:	431d      	orrs	r5, r3
 800bc42:	d1e0      	bne.n	800bc06 <__ieee754_pow+0x2e>
 800bc44:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bc48:	18db      	adds	r3, r3, r3
 800bc4a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bc4e:	4152      	adcs	r2, r2
 800bc50:	429d      	cmp	r5, r3
 800bc52:	e7d4      	b.n	800bbfe <__ieee754_pow+0x26>
 800bc54:	2d00      	cmp	r5, #0
 800bc56:	46c3      	mov	fp, r8
 800bc58:	da3a      	bge.n	800bcd0 <__ieee754_pow+0xf8>
 800bc5a:	4a83      	ldr	r2, [pc, #524]	@ (800be68 <__ieee754_pow+0x290>)
 800bc5c:	4592      	cmp	sl, r2
 800bc5e:	d84d      	bhi.n	800bcfc <__ieee754_pow+0x124>
 800bc60:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bc64:	4592      	cmp	sl, r2
 800bc66:	f240 84c7 	bls.w	800c5f8 <__ieee754_pow+0xa20>
 800bc6a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800bc6e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bc72:	2a14      	cmp	r2, #20
 800bc74:	dd0f      	ble.n	800bc96 <__ieee754_pow+0xbe>
 800bc76:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bc7a:	fa21 f402 	lsr.w	r4, r1, r2
 800bc7e:	fa04 f202 	lsl.w	r2, r4, r2
 800bc82:	428a      	cmp	r2, r1
 800bc84:	f040 84b8 	bne.w	800c5f8 <__ieee754_pow+0xa20>
 800bc88:	f004 0401 	and.w	r4, r4, #1
 800bc8c:	f1c4 0402 	rsb	r4, r4, #2
 800bc90:	2900      	cmp	r1, #0
 800bc92:	d158      	bne.n	800bd46 <__ieee754_pow+0x16e>
 800bc94:	e00e      	b.n	800bcb4 <__ieee754_pow+0xdc>
 800bc96:	2900      	cmp	r1, #0
 800bc98:	d154      	bne.n	800bd44 <__ieee754_pow+0x16c>
 800bc9a:	f1c2 0214 	rsb	r2, r2, #20
 800bc9e:	fa4a f402 	asr.w	r4, sl, r2
 800bca2:	fa04 f202 	lsl.w	r2, r4, r2
 800bca6:	4552      	cmp	r2, sl
 800bca8:	f040 84a3 	bne.w	800c5f2 <__ieee754_pow+0xa1a>
 800bcac:	f004 0401 	and.w	r4, r4, #1
 800bcb0:	f1c4 0402 	rsb	r4, r4, #2
 800bcb4:	4a6d      	ldr	r2, [pc, #436]	@ (800be6c <__ieee754_pow+0x294>)
 800bcb6:	4592      	cmp	sl, r2
 800bcb8:	d12e      	bne.n	800bd18 <__ieee754_pow+0x140>
 800bcba:	f1b9 0f00 	cmp.w	r9, #0
 800bcbe:	f280 8494 	bge.w	800c5ea <__ieee754_pow+0xa12>
 800bcc2:	496a      	ldr	r1, [pc, #424]	@ (800be6c <__ieee754_pow+0x294>)
 800bcc4:	4632      	mov	r2, r6
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	2000      	movs	r0, #0
 800bcca:	f7f4 fdc7 	bl	800085c <__aeabi_ddiv>
 800bcce:	e7a0      	b.n	800bc12 <__ieee754_pow+0x3a>
 800bcd0:	2400      	movs	r4, #0
 800bcd2:	bbc1      	cbnz	r1, 800bd46 <__ieee754_pow+0x16e>
 800bcd4:	4a63      	ldr	r2, [pc, #396]	@ (800be64 <__ieee754_pow+0x28c>)
 800bcd6:	4592      	cmp	sl, r2
 800bcd8:	d1ec      	bne.n	800bcb4 <__ieee754_pow+0xdc>
 800bcda:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bcde:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bce2:	431a      	orrs	r2, r3
 800bce4:	f000 8479 	beq.w	800c5da <__ieee754_pow+0xa02>
 800bce8:	4b61      	ldr	r3, [pc, #388]	@ (800be70 <__ieee754_pow+0x298>)
 800bcea:	4598      	cmp	r8, r3
 800bcec:	d908      	bls.n	800bd00 <__ieee754_pow+0x128>
 800bcee:	f1b9 0f00 	cmp.w	r9, #0
 800bcf2:	f2c0 8476 	blt.w	800c5e2 <__ieee754_pow+0xa0a>
 800bcf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bcfa:	e78a      	b.n	800bc12 <__ieee754_pow+0x3a>
 800bcfc:	2402      	movs	r4, #2
 800bcfe:	e7e8      	b.n	800bcd2 <__ieee754_pow+0xfa>
 800bd00:	f1b9 0f00 	cmp.w	r9, #0
 800bd04:	f04f 0000 	mov.w	r0, #0
 800bd08:	f04f 0100 	mov.w	r1, #0
 800bd0c:	da81      	bge.n	800bc12 <__ieee754_pow+0x3a>
 800bd0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bd12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bd16:	e77c      	b.n	800bc12 <__ieee754_pow+0x3a>
 800bd18:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bd1c:	d106      	bne.n	800bd2c <__ieee754_pow+0x154>
 800bd1e:	4632      	mov	r2, r6
 800bd20:	463b      	mov	r3, r7
 800bd22:	4630      	mov	r0, r6
 800bd24:	4639      	mov	r1, r7
 800bd26:	f7f4 fc6f 	bl	8000608 <__aeabi_dmul>
 800bd2a:	e772      	b.n	800bc12 <__ieee754_pow+0x3a>
 800bd2c:	4a51      	ldr	r2, [pc, #324]	@ (800be74 <__ieee754_pow+0x29c>)
 800bd2e:	4591      	cmp	r9, r2
 800bd30:	d109      	bne.n	800bd46 <__ieee754_pow+0x16e>
 800bd32:	2d00      	cmp	r5, #0
 800bd34:	db07      	blt.n	800bd46 <__ieee754_pow+0x16e>
 800bd36:	ec47 6b10 	vmov	d0, r6, r7
 800bd3a:	b011      	add	sp, #68	@ 0x44
 800bd3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	f000 bd52 	b.w	800c7e8 <__ieee754_sqrt>
 800bd44:	2400      	movs	r4, #0
 800bd46:	ec47 6b10 	vmov	d0, r6, r7
 800bd4a:	9302      	str	r3, [sp, #8]
 800bd4c:	f000 fc88 	bl	800c660 <fabs>
 800bd50:	9b02      	ldr	r3, [sp, #8]
 800bd52:	ec51 0b10 	vmov	r0, r1, d0
 800bd56:	bb53      	cbnz	r3, 800bdae <__ieee754_pow+0x1d6>
 800bd58:	4b44      	ldr	r3, [pc, #272]	@ (800be6c <__ieee754_pow+0x294>)
 800bd5a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d002      	beq.n	800bd68 <__ieee754_pow+0x190>
 800bd62:	f1b8 0f00 	cmp.w	r8, #0
 800bd66:	d122      	bne.n	800bdae <__ieee754_pow+0x1d6>
 800bd68:	f1b9 0f00 	cmp.w	r9, #0
 800bd6c:	da05      	bge.n	800bd7a <__ieee754_pow+0x1a2>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	460b      	mov	r3, r1
 800bd72:	2000      	movs	r0, #0
 800bd74:	493d      	ldr	r1, [pc, #244]	@ (800be6c <__ieee754_pow+0x294>)
 800bd76:	f7f4 fd71 	bl	800085c <__aeabi_ddiv>
 800bd7a:	2d00      	cmp	r5, #0
 800bd7c:	f6bf af49 	bge.w	800bc12 <__ieee754_pow+0x3a>
 800bd80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bd84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bd88:	ea58 0804 	orrs.w	r8, r8, r4
 800bd8c:	d108      	bne.n	800bda0 <__ieee754_pow+0x1c8>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4610      	mov	r0, r2
 800bd94:	4619      	mov	r1, r3
 800bd96:	f7f4 fa7f 	bl	8000298 <__aeabi_dsub>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	e794      	b.n	800bcca <__ieee754_pow+0xf2>
 800bda0:	2c01      	cmp	r4, #1
 800bda2:	f47f af36 	bne.w	800bc12 <__ieee754_pow+0x3a>
 800bda6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bdaa:	4619      	mov	r1, r3
 800bdac:	e731      	b.n	800bc12 <__ieee754_pow+0x3a>
 800bdae:	0feb      	lsrs	r3, r5, #31
 800bdb0:	3b01      	subs	r3, #1
 800bdb2:	ea53 0204 	orrs.w	r2, r3, r4
 800bdb6:	d102      	bne.n	800bdbe <__ieee754_pow+0x1e6>
 800bdb8:	4632      	mov	r2, r6
 800bdba:	463b      	mov	r3, r7
 800bdbc:	e7e9      	b.n	800bd92 <__ieee754_pow+0x1ba>
 800bdbe:	3c01      	subs	r4, #1
 800bdc0:	431c      	orrs	r4, r3
 800bdc2:	d016      	beq.n	800bdf2 <__ieee754_pow+0x21a>
 800bdc4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800be50 <__ieee754_pow+0x278>
 800bdc8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800bdcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bdd0:	f240 8112 	bls.w	800bff8 <__ieee754_pow+0x420>
 800bdd4:	4b28      	ldr	r3, [pc, #160]	@ (800be78 <__ieee754_pow+0x2a0>)
 800bdd6:	459a      	cmp	sl, r3
 800bdd8:	4b25      	ldr	r3, [pc, #148]	@ (800be70 <__ieee754_pow+0x298>)
 800bdda:	d916      	bls.n	800be0a <__ieee754_pow+0x232>
 800bddc:	4598      	cmp	r8, r3
 800bdde:	d80b      	bhi.n	800bdf8 <__ieee754_pow+0x220>
 800bde0:	f1b9 0f00 	cmp.w	r9, #0
 800bde4:	da0b      	bge.n	800bdfe <__ieee754_pow+0x226>
 800bde6:	2000      	movs	r0, #0
 800bde8:	b011      	add	sp, #68	@ 0x44
 800bdea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdee:	f000 bcf3 	b.w	800c7d8 <__math_oflow>
 800bdf2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800be58 <__ieee754_pow+0x280>
 800bdf6:	e7e7      	b.n	800bdc8 <__ieee754_pow+0x1f0>
 800bdf8:	f1b9 0f00 	cmp.w	r9, #0
 800bdfc:	dcf3      	bgt.n	800bde6 <__ieee754_pow+0x20e>
 800bdfe:	2000      	movs	r0, #0
 800be00:	b011      	add	sp, #68	@ 0x44
 800be02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be06:	f000 bcdf 	b.w	800c7c8 <__math_uflow>
 800be0a:	4598      	cmp	r8, r3
 800be0c:	d20c      	bcs.n	800be28 <__ieee754_pow+0x250>
 800be0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be12:	2200      	movs	r2, #0
 800be14:	2300      	movs	r3, #0
 800be16:	f7f4 fe69 	bl	8000aec <__aeabi_dcmplt>
 800be1a:	3800      	subs	r0, #0
 800be1c:	bf18      	it	ne
 800be1e:	2001      	movne	r0, #1
 800be20:	f1b9 0f00 	cmp.w	r9, #0
 800be24:	daec      	bge.n	800be00 <__ieee754_pow+0x228>
 800be26:	e7df      	b.n	800bde8 <__ieee754_pow+0x210>
 800be28:	4b10      	ldr	r3, [pc, #64]	@ (800be6c <__ieee754_pow+0x294>)
 800be2a:	4598      	cmp	r8, r3
 800be2c:	f04f 0200 	mov.w	r2, #0
 800be30:	d924      	bls.n	800be7c <__ieee754_pow+0x2a4>
 800be32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be36:	2300      	movs	r3, #0
 800be38:	f7f4 fe58 	bl	8000aec <__aeabi_dcmplt>
 800be3c:	3800      	subs	r0, #0
 800be3e:	bf18      	it	ne
 800be40:	2001      	movne	r0, #1
 800be42:	f1b9 0f00 	cmp.w	r9, #0
 800be46:	dccf      	bgt.n	800bde8 <__ieee754_pow+0x210>
 800be48:	e7da      	b.n	800be00 <__ieee754_pow+0x228>
 800be4a:	bf00      	nop
 800be4c:	f3af 8000 	nop.w
 800be50:	00000000 	.word	0x00000000
 800be54:	3ff00000 	.word	0x3ff00000
 800be58:	00000000 	.word	0x00000000
 800be5c:	bff00000 	.word	0xbff00000
 800be60:	fff00000 	.word	0xfff00000
 800be64:	7ff00000 	.word	0x7ff00000
 800be68:	433fffff 	.word	0x433fffff
 800be6c:	3ff00000 	.word	0x3ff00000
 800be70:	3fefffff 	.word	0x3fefffff
 800be74:	3fe00000 	.word	0x3fe00000
 800be78:	43f00000 	.word	0x43f00000
 800be7c:	4b5a      	ldr	r3, [pc, #360]	@ (800bfe8 <__ieee754_pow+0x410>)
 800be7e:	f7f4 fa0b 	bl	8000298 <__aeabi_dsub>
 800be82:	a351      	add	r3, pc, #324	@ (adr r3, 800bfc8 <__ieee754_pow+0x3f0>)
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	4604      	mov	r4, r0
 800be8a:	460d      	mov	r5, r1
 800be8c:	f7f4 fbbc 	bl	8000608 <__aeabi_dmul>
 800be90:	a34f      	add	r3, pc, #316	@ (adr r3, 800bfd0 <__ieee754_pow+0x3f8>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	4606      	mov	r6, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	4620      	mov	r0, r4
 800be9c:	4629      	mov	r1, r5
 800be9e:	f7f4 fbb3 	bl	8000608 <__aeabi_dmul>
 800bea2:	4b52      	ldr	r3, [pc, #328]	@ (800bfec <__ieee754_pow+0x414>)
 800bea4:	4682      	mov	sl, r0
 800bea6:	468b      	mov	fp, r1
 800bea8:	2200      	movs	r2, #0
 800beaa:	4620      	mov	r0, r4
 800beac:	4629      	mov	r1, r5
 800beae:	f7f4 fbab 	bl	8000608 <__aeabi_dmul>
 800beb2:	4602      	mov	r2, r0
 800beb4:	460b      	mov	r3, r1
 800beb6:	a148      	add	r1, pc, #288	@ (adr r1, 800bfd8 <__ieee754_pow+0x400>)
 800beb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bebc:	f7f4 f9ec 	bl	8000298 <__aeabi_dsub>
 800bec0:	4622      	mov	r2, r4
 800bec2:	462b      	mov	r3, r5
 800bec4:	f7f4 fba0 	bl	8000608 <__aeabi_dmul>
 800bec8:	4602      	mov	r2, r0
 800beca:	460b      	mov	r3, r1
 800becc:	2000      	movs	r0, #0
 800bece:	4948      	ldr	r1, [pc, #288]	@ (800bff0 <__ieee754_pow+0x418>)
 800bed0:	f7f4 f9e2 	bl	8000298 <__aeabi_dsub>
 800bed4:	4622      	mov	r2, r4
 800bed6:	4680      	mov	r8, r0
 800bed8:	4689      	mov	r9, r1
 800beda:	462b      	mov	r3, r5
 800bedc:	4620      	mov	r0, r4
 800bede:	4629      	mov	r1, r5
 800bee0:	f7f4 fb92 	bl	8000608 <__aeabi_dmul>
 800bee4:	4602      	mov	r2, r0
 800bee6:	460b      	mov	r3, r1
 800bee8:	4640      	mov	r0, r8
 800beea:	4649      	mov	r1, r9
 800beec:	f7f4 fb8c 	bl	8000608 <__aeabi_dmul>
 800bef0:	a33b      	add	r3, pc, #236	@ (adr r3, 800bfe0 <__ieee754_pow+0x408>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	f7f4 fb87 	bl	8000608 <__aeabi_dmul>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	4650      	mov	r0, sl
 800bf00:	4659      	mov	r1, fp
 800bf02:	f7f4 f9c9 	bl	8000298 <__aeabi_dsub>
 800bf06:	4602      	mov	r2, r0
 800bf08:	460b      	mov	r3, r1
 800bf0a:	4680      	mov	r8, r0
 800bf0c:	4689      	mov	r9, r1
 800bf0e:	4630      	mov	r0, r6
 800bf10:	4639      	mov	r1, r7
 800bf12:	f7f4 f9c3 	bl	800029c <__adddf3>
 800bf16:	2400      	movs	r4, #0
 800bf18:	4632      	mov	r2, r6
 800bf1a:	463b      	mov	r3, r7
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	460d      	mov	r5, r1
 800bf20:	f7f4 f9ba 	bl	8000298 <__aeabi_dsub>
 800bf24:	4602      	mov	r2, r0
 800bf26:	460b      	mov	r3, r1
 800bf28:	4640      	mov	r0, r8
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	f7f4 f9b4 	bl	8000298 <__aeabi_dsub>
 800bf30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf38:	2300      	movs	r3, #0
 800bf3a:	9304      	str	r3, [sp, #16]
 800bf3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bf40:	4606      	mov	r6, r0
 800bf42:	460f      	mov	r7, r1
 800bf44:	4652      	mov	r2, sl
 800bf46:	465b      	mov	r3, fp
 800bf48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf4c:	f7f4 f9a4 	bl	8000298 <__aeabi_dsub>
 800bf50:	4622      	mov	r2, r4
 800bf52:	462b      	mov	r3, r5
 800bf54:	f7f4 fb58 	bl	8000608 <__aeabi_dmul>
 800bf58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf5c:	4680      	mov	r8, r0
 800bf5e:	4689      	mov	r9, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 fb50 	bl	8000608 <__aeabi_dmul>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	460b      	mov	r3, r1
 800bf6c:	4640      	mov	r0, r8
 800bf6e:	4649      	mov	r1, r9
 800bf70:	f7f4 f994 	bl	800029c <__adddf3>
 800bf74:	4652      	mov	r2, sl
 800bf76:	465b      	mov	r3, fp
 800bf78:	4606      	mov	r6, r0
 800bf7a:	460f      	mov	r7, r1
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	4629      	mov	r1, r5
 800bf80:	f7f4 fb42 	bl	8000608 <__aeabi_dmul>
 800bf84:	460b      	mov	r3, r1
 800bf86:	4602      	mov	r2, r0
 800bf88:	4680      	mov	r8, r0
 800bf8a:	4689      	mov	r9, r1
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	4639      	mov	r1, r7
 800bf90:	f7f4 f984 	bl	800029c <__adddf3>
 800bf94:	4b17      	ldr	r3, [pc, #92]	@ (800bff4 <__ieee754_pow+0x41c>)
 800bf96:	4299      	cmp	r1, r3
 800bf98:	4604      	mov	r4, r0
 800bf9a:	460d      	mov	r5, r1
 800bf9c:	468a      	mov	sl, r1
 800bf9e:	468b      	mov	fp, r1
 800bfa0:	f340 82ef 	ble.w	800c582 <__ieee754_pow+0x9aa>
 800bfa4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bfa8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bfac:	4303      	orrs	r3, r0
 800bfae:	f000 81e8 	beq.w	800c382 <__ieee754_pow+0x7aa>
 800bfb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	2300      	movs	r3, #0
 800bfba:	f7f4 fd97 	bl	8000aec <__aeabi_dcmplt>
 800bfbe:	3800      	subs	r0, #0
 800bfc0:	bf18      	it	ne
 800bfc2:	2001      	movne	r0, #1
 800bfc4:	e710      	b.n	800bde8 <__ieee754_pow+0x210>
 800bfc6:	bf00      	nop
 800bfc8:	60000000 	.word	0x60000000
 800bfcc:	3ff71547 	.word	0x3ff71547
 800bfd0:	f85ddf44 	.word	0xf85ddf44
 800bfd4:	3e54ae0b 	.word	0x3e54ae0b
 800bfd8:	55555555 	.word	0x55555555
 800bfdc:	3fd55555 	.word	0x3fd55555
 800bfe0:	652b82fe 	.word	0x652b82fe
 800bfe4:	3ff71547 	.word	0x3ff71547
 800bfe8:	3ff00000 	.word	0x3ff00000
 800bfec:	3fd00000 	.word	0x3fd00000
 800bff0:	3fe00000 	.word	0x3fe00000
 800bff4:	408fffff 	.word	0x408fffff
 800bff8:	4bd5      	ldr	r3, [pc, #852]	@ (800c350 <__ieee754_pow+0x778>)
 800bffa:	402b      	ands	r3, r5
 800bffc:	2200      	movs	r2, #0
 800bffe:	b92b      	cbnz	r3, 800c00c <__ieee754_pow+0x434>
 800c000:	4bd4      	ldr	r3, [pc, #848]	@ (800c354 <__ieee754_pow+0x77c>)
 800c002:	f7f4 fb01 	bl	8000608 <__aeabi_dmul>
 800c006:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c00a:	468b      	mov	fp, r1
 800c00c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c010:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c014:	4413      	add	r3, r2
 800c016:	930a      	str	r3, [sp, #40]	@ 0x28
 800c018:	4bcf      	ldr	r3, [pc, #828]	@ (800c358 <__ieee754_pow+0x780>)
 800c01a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c01e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c022:	459b      	cmp	fp, r3
 800c024:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c028:	dd08      	ble.n	800c03c <__ieee754_pow+0x464>
 800c02a:	4bcc      	ldr	r3, [pc, #816]	@ (800c35c <__ieee754_pow+0x784>)
 800c02c:	459b      	cmp	fp, r3
 800c02e:	f340 81a5 	ble.w	800c37c <__ieee754_pow+0x7a4>
 800c032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c034:	3301      	adds	r3, #1
 800c036:	930a      	str	r3, [sp, #40]	@ 0x28
 800c038:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c03c:	f04f 0a00 	mov.w	sl, #0
 800c040:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c044:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c046:	4bc6      	ldr	r3, [pc, #792]	@ (800c360 <__ieee754_pow+0x788>)
 800c048:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c04c:	ed93 7b00 	vldr	d7, [r3]
 800c050:	4629      	mov	r1, r5
 800c052:	ec53 2b17 	vmov	r2, r3, d7
 800c056:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c05a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c05e:	f7f4 f91b 	bl	8000298 <__aeabi_dsub>
 800c062:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c066:	4606      	mov	r6, r0
 800c068:	460f      	mov	r7, r1
 800c06a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c06e:	f7f4 f915 	bl	800029c <__adddf3>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	2000      	movs	r0, #0
 800c078:	49ba      	ldr	r1, [pc, #744]	@ (800c364 <__ieee754_pow+0x78c>)
 800c07a:	f7f4 fbef 	bl	800085c <__aeabi_ddiv>
 800c07e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4630      	mov	r0, r6
 800c088:	4639      	mov	r1, r7
 800c08a:	f7f4 fabd 	bl	8000608 <__aeabi_dmul>
 800c08e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c092:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c096:	106d      	asrs	r5, r5, #1
 800c098:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c09c:	f04f 0b00 	mov.w	fp, #0
 800c0a0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c0a4:	4661      	mov	r1, ip
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c0ac:	4658      	mov	r0, fp
 800c0ae:	46e1      	mov	r9, ip
 800c0b0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c0b4:	4614      	mov	r4, r2
 800c0b6:	461d      	mov	r5, r3
 800c0b8:	f7f4 faa6 	bl	8000608 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	4639      	mov	r1, r7
 800c0c4:	f7f4 f8e8 	bl	8000298 <__aeabi_dsub>
 800c0c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0cc:	4606      	mov	r6, r0
 800c0ce:	460f      	mov	r7, r1
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f7f4 f8e0 	bl	8000298 <__aeabi_dsub>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0e0:	f7f4 f8da 	bl	8000298 <__aeabi_dsub>
 800c0e4:	465a      	mov	r2, fp
 800c0e6:	464b      	mov	r3, r9
 800c0e8:	f7f4 fa8e 	bl	8000608 <__aeabi_dmul>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4630      	mov	r0, r6
 800c0f2:	4639      	mov	r1, r7
 800c0f4:	f7f4 f8d0 	bl	8000298 <__aeabi_dsub>
 800c0f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c0fc:	f7f4 fa84 	bl	8000608 <__aeabi_dmul>
 800c100:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c104:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c108:	4610      	mov	r0, r2
 800c10a:	4619      	mov	r1, r3
 800c10c:	f7f4 fa7c 	bl	8000608 <__aeabi_dmul>
 800c110:	a37d      	add	r3, pc, #500	@ (adr r3, 800c308 <__ieee754_pow+0x730>)
 800c112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c116:	4604      	mov	r4, r0
 800c118:	460d      	mov	r5, r1
 800c11a:	f7f4 fa75 	bl	8000608 <__aeabi_dmul>
 800c11e:	a37c      	add	r3, pc, #496	@ (adr r3, 800c310 <__ieee754_pow+0x738>)
 800c120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c124:	f7f4 f8ba 	bl	800029c <__adddf3>
 800c128:	4622      	mov	r2, r4
 800c12a:	462b      	mov	r3, r5
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	a379      	add	r3, pc, #484	@ (adr r3, 800c318 <__ieee754_pow+0x740>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f7f4 f8b1 	bl	800029c <__adddf3>
 800c13a:	4622      	mov	r2, r4
 800c13c:	462b      	mov	r3, r5
 800c13e:	f7f4 fa63 	bl	8000608 <__aeabi_dmul>
 800c142:	a377      	add	r3, pc, #476	@ (adr r3, 800c320 <__ieee754_pow+0x748>)
 800c144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c148:	f7f4 f8a8 	bl	800029c <__adddf3>
 800c14c:	4622      	mov	r2, r4
 800c14e:	462b      	mov	r3, r5
 800c150:	f7f4 fa5a 	bl	8000608 <__aeabi_dmul>
 800c154:	a374      	add	r3, pc, #464	@ (adr r3, 800c328 <__ieee754_pow+0x750>)
 800c156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15a:	f7f4 f89f 	bl	800029c <__adddf3>
 800c15e:	4622      	mov	r2, r4
 800c160:	462b      	mov	r3, r5
 800c162:	f7f4 fa51 	bl	8000608 <__aeabi_dmul>
 800c166:	a372      	add	r3, pc, #456	@ (adr r3, 800c330 <__ieee754_pow+0x758>)
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	f7f4 f896 	bl	800029c <__adddf3>
 800c170:	4622      	mov	r2, r4
 800c172:	4606      	mov	r6, r0
 800c174:	460f      	mov	r7, r1
 800c176:	462b      	mov	r3, r5
 800c178:	4620      	mov	r0, r4
 800c17a:	4629      	mov	r1, r5
 800c17c:	f7f4 fa44 	bl	8000608 <__aeabi_dmul>
 800c180:	4602      	mov	r2, r0
 800c182:	460b      	mov	r3, r1
 800c184:	4630      	mov	r0, r6
 800c186:	4639      	mov	r1, r7
 800c188:	f7f4 fa3e 	bl	8000608 <__aeabi_dmul>
 800c18c:	465a      	mov	r2, fp
 800c18e:	4604      	mov	r4, r0
 800c190:	460d      	mov	r5, r1
 800c192:	464b      	mov	r3, r9
 800c194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c198:	f7f4 f880 	bl	800029c <__adddf3>
 800c19c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1a0:	f7f4 fa32 	bl	8000608 <__aeabi_dmul>
 800c1a4:	4622      	mov	r2, r4
 800c1a6:	462b      	mov	r3, r5
 800c1a8:	f7f4 f878 	bl	800029c <__adddf3>
 800c1ac:	465a      	mov	r2, fp
 800c1ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1b2:	464b      	mov	r3, r9
 800c1b4:	4658      	mov	r0, fp
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	f7f4 fa26 	bl	8000608 <__aeabi_dmul>
 800c1bc:	4b6a      	ldr	r3, [pc, #424]	@ (800c368 <__ieee754_pow+0x790>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	4606      	mov	r6, r0
 800c1c2:	460f      	mov	r7, r1
 800c1c4:	f7f4 f86a 	bl	800029c <__adddf3>
 800c1c8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c1cc:	f7f4 f866 	bl	800029c <__adddf3>
 800c1d0:	46d8      	mov	r8, fp
 800c1d2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c1d6:	460d      	mov	r5, r1
 800c1d8:	465a      	mov	r2, fp
 800c1da:	460b      	mov	r3, r1
 800c1dc:	4640      	mov	r0, r8
 800c1de:	4649      	mov	r1, r9
 800c1e0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c1e4:	f7f4 fa10 	bl	8000608 <__aeabi_dmul>
 800c1e8:	465c      	mov	r4, fp
 800c1ea:	4680      	mov	r8, r0
 800c1ec:	4689      	mov	r9, r1
 800c1ee:	4b5e      	ldr	r3, [pc, #376]	@ (800c368 <__ieee754_pow+0x790>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	4629      	mov	r1, r5
 800c1f6:	f7f4 f84f 	bl	8000298 <__aeabi_dsub>
 800c1fa:	4632      	mov	r2, r6
 800c1fc:	463b      	mov	r3, r7
 800c1fe:	f7f4 f84b 	bl	8000298 <__aeabi_dsub>
 800c202:	4602      	mov	r2, r0
 800c204:	460b      	mov	r3, r1
 800c206:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c20a:	f7f4 f845 	bl	8000298 <__aeabi_dsub>
 800c20e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c212:	f7f4 f9f9 	bl	8000608 <__aeabi_dmul>
 800c216:	4622      	mov	r2, r4
 800c218:	4606      	mov	r6, r0
 800c21a:	460f      	mov	r7, r1
 800c21c:	462b      	mov	r3, r5
 800c21e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c222:	f7f4 f9f1 	bl	8000608 <__aeabi_dmul>
 800c226:	4602      	mov	r2, r0
 800c228:	460b      	mov	r3, r1
 800c22a:	4630      	mov	r0, r6
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 f835 	bl	800029c <__adddf3>
 800c232:	4606      	mov	r6, r0
 800c234:	460f      	mov	r7, r1
 800c236:	4602      	mov	r2, r0
 800c238:	460b      	mov	r3, r1
 800c23a:	4640      	mov	r0, r8
 800c23c:	4649      	mov	r1, r9
 800c23e:	f7f4 f82d 	bl	800029c <__adddf3>
 800c242:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c246:	a33c      	add	r3, pc, #240	@ (adr r3, 800c338 <__ieee754_pow+0x760>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	4658      	mov	r0, fp
 800c24e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c252:	460d      	mov	r5, r1
 800c254:	f7f4 f9d8 	bl	8000608 <__aeabi_dmul>
 800c258:	465c      	mov	r4, fp
 800c25a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c25e:	4642      	mov	r2, r8
 800c260:	464b      	mov	r3, r9
 800c262:	4620      	mov	r0, r4
 800c264:	4629      	mov	r1, r5
 800c266:	f7f4 f817 	bl	8000298 <__aeabi_dsub>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	4630      	mov	r0, r6
 800c270:	4639      	mov	r1, r7
 800c272:	f7f4 f811 	bl	8000298 <__aeabi_dsub>
 800c276:	a332      	add	r3, pc, #200	@ (adr r3, 800c340 <__ieee754_pow+0x768>)
 800c278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c27c:	f7f4 f9c4 	bl	8000608 <__aeabi_dmul>
 800c280:	a331      	add	r3, pc, #196	@ (adr r3, 800c348 <__ieee754_pow+0x770>)
 800c282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c286:	4606      	mov	r6, r0
 800c288:	460f      	mov	r7, r1
 800c28a:	4620      	mov	r0, r4
 800c28c:	4629      	mov	r1, r5
 800c28e:	f7f4 f9bb 	bl	8000608 <__aeabi_dmul>
 800c292:	4602      	mov	r2, r0
 800c294:	460b      	mov	r3, r1
 800c296:	4630      	mov	r0, r6
 800c298:	4639      	mov	r1, r7
 800c29a:	f7f3 ffff 	bl	800029c <__adddf3>
 800c29e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2a0:	4b32      	ldr	r3, [pc, #200]	@ (800c36c <__ieee754_pow+0x794>)
 800c2a2:	4413      	add	r3, r2
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f7f3 fff8 	bl	800029c <__adddf3>
 800c2ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c2b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c2b2:	f7f4 f93f 	bl	8000534 <__aeabi_i2d>
 800c2b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2b8:	4b2d      	ldr	r3, [pc, #180]	@ (800c370 <__ieee754_pow+0x798>)
 800c2ba:	4413      	add	r3, r2
 800c2bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2c0:	4606      	mov	r6, r0
 800c2c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2c6:	460f      	mov	r7, r1
 800c2c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2cc:	f7f3 ffe6 	bl	800029c <__adddf3>
 800c2d0:	4642      	mov	r2, r8
 800c2d2:	464b      	mov	r3, r9
 800c2d4:	f7f3 ffe2 	bl	800029c <__adddf3>
 800c2d8:	4632      	mov	r2, r6
 800c2da:	463b      	mov	r3, r7
 800c2dc:	f7f3 ffde 	bl	800029c <__adddf3>
 800c2e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c2e4:	4632      	mov	r2, r6
 800c2e6:	463b      	mov	r3, r7
 800c2e8:	4658      	mov	r0, fp
 800c2ea:	460d      	mov	r5, r1
 800c2ec:	f7f3 ffd4 	bl	8000298 <__aeabi_dsub>
 800c2f0:	4642      	mov	r2, r8
 800c2f2:	464b      	mov	r3, r9
 800c2f4:	f7f3 ffd0 	bl	8000298 <__aeabi_dsub>
 800c2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c2fc:	f7f3 ffcc 	bl	8000298 <__aeabi_dsub>
 800c300:	465c      	mov	r4, fp
 800c302:	4602      	mov	r2, r0
 800c304:	e036      	b.n	800c374 <__ieee754_pow+0x79c>
 800c306:	bf00      	nop
 800c308:	4a454eef 	.word	0x4a454eef
 800c30c:	3fca7e28 	.word	0x3fca7e28
 800c310:	93c9db65 	.word	0x93c9db65
 800c314:	3fcd864a 	.word	0x3fcd864a
 800c318:	a91d4101 	.word	0xa91d4101
 800c31c:	3fd17460 	.word	0x3fd17460
 800c320:	518f264d 	.word	0x518f264d
 800c324:	3fd55555 	.word	0x3fd55555
 800c328:	db6fabff 	.word	0xdb6fabff
 800c32c:	3fdb6db6 	.word	0x3fdb6db6
 800c330:	33333303 	.word	0x33333303
 800c334:	3fe33333 	.word	0x3fe33333
 800c338:	e0000000 	.word	0xe0000000
 800c33c:	3feec709 	.word	0x3feec709
 800c340:	dc3a03fd 	.word	0xdc3a03fd
 800c344:	3feec709 	.word	0x3feec709
 800c348:	145b01f5 	.word	0x145b01f5
 800c34c:	be3e2fe0 	.word	0xbe3e2fe0
 800c350:	7ff00000 	.word	0x7ff00000
 800c354:	43400000 	.word	0x43400000
 800c358:	0003988e 	.word	0x0003988e
 800c35c:	000bb679 	.word	0x000bb679
 800c360:	0800cdc8 	.word	0x0800cdc8
 800c364:	3ff00000 	.word	0x3ff00000
 800c368:	40080000 	.word	0x40080000
 800c36c:	0800cda8 	.word	0x0800cda8
 800c370:	0800cdb8 	.word	0x0800cdb8
 800c374:	460b      	mov	r3, r1
 800c376:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c37a:	e5d7      	b.n	800bf2c <__ieee754_pow+0x354>
 800c37c:	f04f 0a01 	mov.w	sl, #1
 800c380:	e65e      	b.n	800c040 <__ieee754_pow+0x468>
 800c382:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c654 <__ieee754_pow+0xa7c>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	4630      	mov	r0, r6
 800c38a:	4639      	mov	r1, r7
 800c38c:	f7f3 ff86 	bl	800029c <__adddf3>
 800c390:	4642      	mov	r2, r8
 800c392:	e9cd 0100 	strd	r0, r1, [sp]
 800c396:	464b      	mov	r3, r9
 800c398:	4620      	mov	r0, r4
 800c39a:	4629      	mov	r1, r5
 800c39c:	f7f3 ff7c 	bl	8000298 <__aeabi_dsub>
 800c3a0:	4602      	mov	r2, r0
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c3a8:	f7f4 fbbe 	bl	8000b28 <__aeabi_dcmpgt>
 800c3ac:	2800      	cmp	r0, #0
 800c3ae:	f47f ae00 	bne.w	800bfb2 <__ieee754_pow+0x3da>
 800c3b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c3b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c3ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c3be:	fa43 fa0a 	asr.w	sl, r3, sl
 800c3c2:	44da      	add	sl, fp
 800c3c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c3c8:	489d      	ldr	r0, [pc, #628]	@ (800c640 <__ieee754_pow+0xa68>)
 800c3ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c3ce:	4108      	asrs	r0, r1
 800c3d0:	ea00 030a 	and.w	r3, r0, sl
 800c3d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c3d8:	f1c1 0114 	rsb	r1, r1, #20
 800c3dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c3e0:	fa4a fa01 	asr.w	sl, sl, r1
 800c3e4:	f1bb 0f00 	cmp.w	fp, #0
 800c3e8:	4640      	mov	r0, r8
 800c3ea:	4649      	mov	r1, r9
 800c3ec:	f04f 0200 	mov.w	r2, #0
 800c3f0:	bfb8      	it	lt
 800c3f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800c3f6:	f7f3 ff4f 	bl	8000298 <__aeabi_dsub>
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	4689      	mov	r9, r1
 800c3fe:	4632      	mov	r2, r6
 800c400:	463b      	mov	r3, r7
 800c402:	4640      	mov	r0, r8
 800c404:	4649      	mov	r1, r9
 800c406:	f7f3 ff49 	bl	800029c <__adddf3>
 800c40a:	2400      	movs	r4, #0
 800c40c:	a37c      	add	r3, pc, #496	@ (adr r3, 800c600 <__ieee754_pow+0xa28>)
 800c40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c412:	4620      	mov	r0, r4
 800c414:	460d      	mov	r5, r1
 800c416:	f7f4 f8f7 	bl	8000608 <__aeabi_dmul>
 800c41a:	4642      	mov	r2, r8
 800c41c:	e9cd 0100 	strd	r0, r1, [sp]
 800c420:	464b      	mov	r3, r9
 800c422:	4620      	mov	r0, r4
 800c424:	4629      	mov	r1, r5
 800c426:	f7f3 ff37 	bl	8000298 <__aeabi_dsub>
 800c42a:	4602      	mov	r2, r0
 800c42c:	460b      	mov	r3, r1
 800c42e:	4630      	mov	r0, r6
 800c430:	4639      	mov	r1, r7
 800c432:	f7f3 ff31 	bl	8000298 <__aeabi_dsub>
 800c436:	a374      	add	r3, pc, #464	@ (adr r3, 800c608 <__ieee754_pow+0xa30>)
 800c438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43c:	f7f4 f8e4 	bl	8000608 <__aeabi_dmul>
 800c440:	a373      	add	r3, pc, #460	@ (adr r3, 800c610 <__ieee754_pow+0xa38>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	4680      	mov	r8, r0
 800c448:	4689      	mov	r9, r1
 800c44a:	4620      	mov	r0, r4
 800c44c:	4629      	mov	r1, r5
 800c44e:	f7f4 f8db 	bl	8000608 <__aeabi_dmul>
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4640      	mov	r0, r8
 800c458:	4649      	mov	r1, r9
 800c45a:	f7f3 ff1f 	bl	800029c <__adddf3>
 800c45e:	4604      	mov	r4, r0
 800c460:	460d      	mov	r5, r1
 800c462:	4602      	mov	r2, r0
 800c464:	460b      	mov	r3, r1
 800c466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c46a:	f7f3 ff17 	bl	800029c <__adddf3>
 800c46e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c472:	4680      	mov	r8, r0
 800c474:	4689      	mov	r9, r1
 800c476:	f7f3 ff0f 	bl	8000298 <__aeabi_dsub>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	4620      	mov	r0, r4
 800c480:	4629      	mov	r1, r5
 800c482:	f7f3 ff09 	bl	8000298 <__aeabi_dsub>
 800c486:	4642      	mov	r2, r8
 800c488:	4606      	mov	r6, r0
 800c48a:	460f      	mov	r7, r1
 800c48c:	464b      	mov	r3, r9
 800c48e:	4640      	mov	r0, r8
 800c490:	4649      	mov	r1, r9
 800c492:	f7f4 f8b9 	bl	8000608 <__aeabi_dmul>
 800c496:	a360      	add	r3, pc, #384	@ (adr r3, 800c618 <__ieee754_pow+0xa40>)
 800c498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c49c:	4604      	mov	r4, r0
 800c49e:	460d      	mov	r5, r1
 800c4a0:	f7f4 f8b2 	bl	8000608 <__aeabi_dmul>
 800c4a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800c620 <__ieee754_pow+0xa48>)
 800c4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4aa:	f7f3 fef5 	bl	8000298 <__aeabi_dsub>
 800c4ae:	4622      	mov	r2, r4
 800c4b0:	462b      	mov	r3, r5
 800c4b2:	f7f4 f8a9 	bl	8000608 <__aeabi_dmul>
 800c4b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800c628 <__ieee754_pow+0xa50>)
 800c4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4bc:	f7f3 feee 	bl	800029c <__adddf3>
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	462b      	mov	r3, r5
 800c4c4:	f7f4 f8a0 	bl	8000608 <__aeabi_dmul>
 800c4c8:	a359      	add	r3, pc, #356	@ (adr r3, 800c630 <__ieee754_pow+0xa58>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f3 fee3 	bl	8000298 <__aeabi_dsub>
 800c4d2:	4622      	mov	r2, r4
 800c4d4:	462b      	mov	r3, r5
 800c4d6:	f7f4 f897 	bl	8000608 <__aeabi_dmul>
 800c4da:	a357      	add	r3, pc, #348	@ (adr r3, 800c638 <__ieee754_pow+0xa60>)
 800c4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e0:	f7f3 fedc 	bl	800029c <__adddf3>
 800c4e4:	4622      	mov	r2, r4
 800c4e6:	462b      	mov	r3, r5
 800c4e8:	f7f4 f88e 	bl	8000608 <__aeabi_dmul>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	4640      	mov	r0, r8
 800c4f2:	4649      	mov	r1, r9
 800c4f4:	f7f3 fed0 	bl	8000298 <__aeabi_dsub>
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	460d      	mov	r5, r1
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	460b      	mov	r3, r1
 800c500:	4640      	mov	r0, r8
 800c502:	4649      	mov	r1, r9
 800c504:	f7f4 f880 	bl	8000608 <__aeabi_dmul>
 800c508:	2200      	movs	r2, #0
 800c50a:	e9cd 0100 	strd	r0, r1, [sp]
 800c50e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c512:	4620      	mov	r0, r4
 800c514:	4629      	mov	r1, r5
 800c516:	f7f3 febf 	bl	8000298 <__aeabi_dsub>
 800c51a:	4602      	mov	r2, r0
 800c51c:	460b      	mov	r3, r1
 800c51e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c522:	f7f4 f99b 	bl	800085c <__aeabi_ddiv>
 800c526:	4632      	mov	r2, r6
 800c528:	4604      	mov	r4, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	463b      	mov	r3, r7
 800c52e:	4640      	mov	r0, r8
 800c530:	4649      	mov	r1, r9
 800c532:	f7f4 f869 	bl	8000608 <__aeabi_dmul>
 800c536:	4632      	mov	r2, r6
 800c538:	463b      	mov	r3, r7
 800c53a:	f7f3 feaf 	bl	800029c <__adddf3>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4620      	mov	r0, r4
 800c544:	4629      	mov	r1, r5
 800c546:	f7f3 fea7 	bl	8000298 <__aeabi_dsub>
 800c54a:	4642      	mov	r2, r8
 800c54c:	464b      	mov	r3, r9
 800c54e:	f7f3 fea3 	bl	8000298 <__aeabi_dsub>
 800c552:	460b      	mov	r3, r1
 800c554:	4602      	mov	r2, r0
 800c556:	493b      	ldr	r1, [pc, #236]	@ (800c644 <__ieee754_pow+0xa6c>)
 800c558:	2000      	movs	r0, #0
 800c55a:	f7f3 fe9d 	bl	8000298 <__aeabi_dsub>
 800c55e:	ec41 0b10 	vmov	d0, r0, r1
 800c562:	ee10 3a90 	vmov	r3, s1
 800c566:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c56a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c56e:	da30      	bge.n	800c5d2 <__ieee754_pow+0x9fa>
 800c570:	4650      	mov	r0, sl
 800c572:	f000 f87d 	bl	800c670 <scalbn>
 800c576:	ec51 0b10 	vmov	r0, r1, d0
 800c57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c57e:	f7ff bbd2 	b.w	800bd26 <__ieee754_pow+0x14e>
 800c582:	4c31      	ldr	r4, [pc, #196]	@ (800c648 <__ieee754_pow+0xa70>)
 800c584:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c588:	42a3      	cmp	r3, r4
 800c58a:	d91a      	bls.n	800c5c2 <__ieee754_pow+0x9ea>
 800c58c:	4b2f      	ldr	r3, [pc, #188]	@ (800c64c <__ieee754_pow+0xa74>)
 800c58e:	440b      	add	r3, r1
 800c590:	4303      	orrs	r3, r0
 800c592:	d009      	beq.n	800c5a8 <__ieee754_pow+0x9d0>
 800c594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c598:	2200      	movs	r2, #0
 800c59a:	2300      	movs	r3, #0
 800c59c:	f7f4 faa6 	bl	8000aec <__aeabi_dcmplt>
 800c5a0:	3800      	subs	r0, #0
 800c5a2:	bf18      	it	ne
 800c5a4:	2001      	movne	r0, #1
 800c5a6:	e42b      	b.n	800be00 <__ieee754_pow+0x228>
 800c5a8:	4642      	mov	r2, r8
 800c5aa:	464b      	mov	r3, r9
 800c5ac:	f7f3 fe74 	bl	8000298 <__aeabi_dsub>
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	463b      	mov	r3, r7
 800c5b4:	f7f4 faae 	bl	8000b14 <__aeabi_dcmpge>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d1eb      	bne.n	800c594 <__ieee754_pow+0x9bc>
 800c5bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c65c <__ieee754_pow+0xa84>
 800c5c0:	e6f7      	b.n	800c3b2 <__ieee754_pow+0x7da>
 800c5c2:	469a      	mov	sl, r3
 800c5c4:	4b22      	ldr	r3, [pc, #136]	@ (800c650 <__ieee754_pow+0xa78>)
 800c5c6:	459a      	cmp	sl, r3
 800c5c8:	f63f aef3 	bhi.w	800c3b2 <__ieee754_pow+0x7da>
 800c5cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c5d0:	e715      	b.n	800c3fe <__ieee754_pow+0x826>
 800c5d2:	ec51 0b10 	vmov	r0, r1, d0
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	e7cf      	b.n	800c57a <__ieee754_pow+0x9a2>
 800c5da:	491a      	ldr	r1, [pc, #104]	@ (800c644 <__ieee754_pow+0xa6c>)
 800c5dc:	2000      	movs	r0, #0
 800c5de:	f7ff bb18 	b.w	800bc12 <__ieee754_pow+0x3a>
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	f7ff bb14 	b.w	800bc12 <__ieee754_pow+0x3a>
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	f7ff bb10 	b.w	800bc12 <__ieee754_pow+0x3a>
 800c5f2:	460c      	mov	r4, r1
 800c5f4:	f7ff bb5e 	b.w	800bcb4 <__ieee754_pow+0xdc>
 800c5f8:	2400      	movs	r4, #0
 800c5fa:	f7ff bb49 	b.w	800bc90 <__ieee754_pow+0xb8>
 800c5fe:	bf00      	nop
 800c600:	00000000 	.word	0x00000000
 800c604:	3fe62e43 	.word	0x3fe62e43
 800c608:	fefa39ef 	.word	0xfefa39ef
 800c60c:	3fe62e42 	.word	0x3fe62e42
 800c610:	0ca86c39 	.word	0x0ca86c39
 800c614:	be205c61 	.word	0xbe205c61
 800c618:	72bea4d0 	.word	0x72bea4d0
 800c61c:	3e663769 	.word	0x3e663769
 800c620:	c5d26bf1 	.word	0xc5d26bf1
 800c624:	3ebbbd41 	.word	0x3ebbbd41
 800c628:	af25de2c 	.word	0xaf25de2c
 800c62c:	3f11566a 	.word	0x3f11566a
 800c630:	16bebd93 	.word	0x16bebd93
 800c634:	3f66c16c 	.word	0x3f66c16c
 800c638:	5555553e 	.word	0x5555553e
 800c63c:	3fc55555 	.word	0x3fc55555
 800c640:	fff00000 	.word	0xfff00000
 800c644:	3ff00000 	.word	0x3ff00000
 800c648:	4090cbff 	.word	0x4090cbff
 800c64c:	3f6f3400 	.word	0x3f6f3400
 800c650:	3fe00000 	.word	0x3fe00000
 800c654:	652b82fe 	.word	0x652b82fe
 800c658:	3c971547 	.word	0x3c971547
 800c65c:	4090cc00 	.word	0x4090cc00

0800c660 <fabs>:
 800c660:	ec51 0b10 	vmov	r0, r1, d0
 800c664:	4602      	mov	r2, r0
 800c666:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c66a:	ec43 2b10 	vmov	d0, r2, r3
 800c66e:	4770      	bx	lr

0800c670 <scalbn>:
 800c670:	b570      	push	{r4, r5, r6, lr}
 800c672:	ec55 4b10 	vmov	r4, r5, d0
 800c676:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c67a:	4606      	mov	r6, r0
 800c67c:	462b      	mov	r3, r5
 800c67e:	b991      	cbnz	r1, 800c6a6 <scalbn+0x36>
 800c680:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c684:	4323      	orrs	r3, r4
 800c686:	d03d      	beq.n	800c704 <scalbn+0x94>
 800c688:	4b35      	ldr	r3, [pc, #212]	@ (800c760 <scalbn+0xf0>)
 800c68a:	4620      	mov	r0, r4
 800c68c:	4629      	mov	r1, r5
 800c68e:	2200      	movs	r2, #0
 800c690:	f7f3 ffba 	bl	8000608 <__aeabi_dmul>
 800c694:	4b33      	ldr	r3, [pc, #204]	@ (800c764 <scalbn+0xf4>)
 800c696:	429e      	cmp	r6, r3
 800c698:	4604      	mov	r4, r0
 800c69a:	460d      	mov	r5, r1
 800c69c:	da0f      	bge.n	800c6be <scalbn+0x4e>
 800c69e:	a328      	add	r3, pc, #160	@ (adr r3, 800c740 <scalbn+0xd0>)
 800c6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a4:	e01e      	b.n	800c6e4 <scalbn+0x74>
 800c6a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c6aa:	4291      	cmp	r1, r2
 800c6ac:	d10b      	bne.n	800c6c6 <scalbn+0x56>
 800c6ae:	4622      	mov	r2, r4
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	f7f3 fdf2 	bl	800029c <__adddf3>
 800c6b8:	4604      	mov	r4, r0
 800c6ba:	460d      	mov	r5, r1
 800c6bc:	e022      	b.n	800c704 <scalbn+0x94>
 800c6be:	460b      	mov	r3, r1
 800c6c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c6c4:	3936      	subs	r1, #54	@ 0x36
 800c6c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c6ca:	4296      	cmp	r6, r2
 800c6cc:	dd0d      	ble.n	800c6ea <scalbn+0x7a>
 800c6ce:	2d00      	cmp	r5, #0
 800c6d0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c748 <scalbn+0xd8>)
 800c6d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6d6:	da02      	bge.n	800c6de <scalbn+0x6e>
 800c6d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800c750 <scalbn+0xe0>)
 800c6da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6de:	a31a      	add	r3, pc, #104	@ (adr r3, 800c748 <scalbn+0xd8>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 ff90 	bl	8000608 <__aeabi_dmul>
 800c6e8:	e7e6      	b.n	800c6b8 <scalbn+0x48>
 800c6ea:	1872      	adds	r2, r6, r1
 800c6ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c6f0:	428a      	cmp	r2, r1
 800c6f2:	dcec      	bgt.n	800c6ce <scalbn+0x5e>
 800c6f4:	2a00      	cmp	r2, #0
 800c6f6:	dd08      	ble.n	800c70a <scalbn+0x9a>
 800c6f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c6fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c700:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c704:	ec45 4b10 	vmov	d0, r4, r5
 800c708:	bd70      	pop	{r4, r5, r6, pc}
 800c70a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c70e:	da08      	bge.n	800c722 <scalbn+0xb2>
 800c710:	2d00      	cmp	r5, #0
 800c712:	a10b      	add	r1, pc, #44	@ (adr r1, 800c740 <scalbn+0xd0>)
 800c714:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c718:	dac1      	bge.n	800c69e <scalbn+0x2e>
 800c71a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c758 <scalbn+0xe8>)
 800c71c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c720:	e7bd      	b.n	800c69e <scalbn+0x2e>
 800c722:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c726:	3236      	adds	r2, #54	@ 0x36
 800c728:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c72c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c730:	4620      	mov	r0, r4
 800c732:	4b0d      	ldr	r3, [pc, #52]	@ (800c768 <scalbn+0xf8>)
 800c734:	4629      	mov	r1, r5
 800c736:	2200      	movs	r2, #0
 800c738:	e7d4      	b.n	800c6e4 <scalbn+0x74>
 800c73a:	bf00      	nop
 800c73c:	f3af 8000 	nop.w
 800c740:	c2f8f359 	.word	0xc2f8f359
 800c744:	01a56e1f 	.word	0x01a56e1f
 800c748:	8800759c 	.word	0x8800759c
 800c74c:	7e37e43c 	.word	0x7e37e43c
 800c750:	8800759c 	.word	0x8800759c
 800c754:	fe37e43c 	.word	0xfe37e43c
 800c758:	c2f8f359 	.word	0xc2f8f359
 800c75c:	81a56e1f 	.word	0x81a56e1f
 800c760:	43500000 	.word	0x43500000
 800c764:	ffff3cb0 	.word	0xffff3cb0
 800c768:	3c900000 	.word	0x3c900000

0800c76c <with_errno>:
 800c76c:	b510      	push	{r4, lr}
 800c76e:	ed2d 8b02 	vpush	{d8}
 800c772:	eeb0 8a40 	vmov.f32	s16, s0
 800c776:	eef0 8a60 	vmov.f32	s17, s1
 800c77a:	4604      	mov	r4, r0
 800c77c:	f7fd f938 	bl	80099f0 <__errno>
 800c780:	eeb0 0a48 	vmov.f32	s0, s16
 800c784:	eef0 0a68 	vmov.f32	s1, s17
 800c788:	ecbd 8b02 	vpop	{d8}
 800c78c:	6004      	str	r4, [r0, #0]
 800c78e:	bd10      	pop	{r4, pc}

0800c790 <xflow>:
 800c790:	4603      	mov	r3, r0
 800c792:	b507      	push	{r0, r1, r2, lr}
 800c794:	ec51 0b10 	vmov	r0, r1, d0
 800c798:	b183      	cbz	r3, 800c7bc <xflow+0x2c>
 800c79a:	4602      	mov	r2, r0
 800c79c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c7a0:	e9cd 2300 	strd	r2, r3, [sp]
 800c7a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7a8:	f7f3 ff2e 	bl	8000608 <__aeabi_dmul>
 800c7ac:	ec41 0b10 	vmov	d0, r0, r1
 800c7b0:	2022      	movs	r0, #34	@ 0x22
 800c7b2:	b003      	add	sp, #12
 800c7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7b8:	f7ff bfd8 	b.w	800c76c <with_errno>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	460b      	mov	r3, r1
 800c7c0:	e7ee      	b.n	800c7a0 <xflow+0x10>
 800c7c2:	0000      	movs	r0, r0
 800c7c4:	0000      	movs	r0, r0
	...

0800c7c8 <__math_uflow>:
 800c7c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c7d0 <__math_uflow+0x8>
 800c7cc:	f7ff bfe0 	b.w	800c790 <xflow>
 800c7d0:	00000000 	.word	0x00000000
 800c7d4:	10000000 	.word	0x10000000

0800c7d8 <__math_oflow>:
 800c7d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c7e0 <__math_oflow+0x8>
 800c7dc:	f7ff bfd8 	b.w	800c790 <xflow>
 800c7e0:	00000000 	.word	0x00000000
 800c7e4:	70000000 	.word	0x70000000

0800c7e8 <__ieee754_sqrt>:
 800c7e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ec:	4a68      	ldr	r2, [pc, #416]	@ (800c990 <__ieee754_sqrt+0x1a8>)
 800c7ee:	ec55 4b10 	vmov	r4, r5, d0
 800c7f2:	43aa      	bics	r2, r5
 800c7f4:	462b      	mov	r3, r5
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	d110      	bne.n	800c81c <__ieee754_sqrt+0x34>
 800c7fa:	4622      	mov	r2, r4
 800c7fc:	4620      	mov	r0, r4
 800c7fe:	4629      	mov	r1, r5
 800c800:	f7f3 ff02 	bl	8000608 <__aeabi_dmul>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4620      	mov	r0, r4
 800c80a:	4629      	mov	r1, r5
 800c80c:	f7f3 fd46 	bl	800029c <__adddf3>
 800c810:	4604      	mov	r4, r0
 800c812:	460d      	mov	r5, r1
 800c814:	ec45 4b10 	vmov	d0, r4, r5
 800c818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	dc0e      	bgt.n	800c83e <__ieee754_sqrt+0x56>
 800c820:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c824:	4322      	orrs	r2, r4
 800c826:	d0f5      	beq.n	800c814 <__ieee754_sqrt+0x2c>
 800c828:	b19d      	cbz	r5, 800c852 <__ieee754_sqrt+0x6a>
 800c82a:	4622      	mov	r2, r4
 800c82c:	4620      	mov	r0, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	f7f3 fd32 	bl	8000298 <__aeabi_dsub>
 800c834:	4602      	mov	r2, r0
 800c836:	460b      	mov	r3, r1
 800c838:	f7f4 f810 	bl	800085c <__aeabi_ddiv>
 800c83c:	e7e8      	b.n	800c810 <__ieee754_sqrt+0x28>
 800c83e:	152a      	asrs	r2, r5, #20
 800c840:	d115      	bne.n	800c86e <__ieee754_sqrt+0x86>
 800c842:	2000      	movs	r0, #0
 800c844:	e009      	b.n	800c85a <__ieee754_sqrt+0x72>
 800c846:	0acb      	lsrs	r3, r1, #11
 800c848:	3a15      	subs	r2, #21
 800c84a:	0549      	lsls	r1, r1, #21
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d0fa      	beq.n	800c846 <__ieee754_sqrt+0x5e>
 800c850:	e7f7      	b.n	800c842 <__ieee754_sqrt+0x5a>
 800c852:	462a      	mov	r2, r5
 800c854:	e7fa      	b.n	800c84c <__ieee754_sqrt+0x64>
 800c856:	005b      	lsls	r3, r3, #1
 800c858:	3001      	adds	r0, #1
 800c85a:	02dc      	lsls	r4, r3, #11
 800c85c:	d5fb      	bpl.n	800c856 <__ieee754_sqrt+0x6e>
 800c85e:	1e44      	subs	r4, r0, #1
 800c860:	1b12      	subs	r2, r2, r4
 800c862:	f1c0 0420 	rsb	r4, r0, #32
 800c866:	fa21 f404 	lsr.w	r4, r1, r4
 800c86a:	4323      	orrs	r3, r4
 800c86c:	4081      	lsls	r1, r0
 800c86e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c872:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c876:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c87a:	07d2      	lsls	r2, r2, #31
 800c87c:	bf5c      	itt	pl
 800c87e:	005b      	lslpl	r3, r3, #1
 800c880:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c884:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c888:	bf58      	it	pl
 800c88a:	0049      	lslpl	r1, r1, #1
 800c88c:	2600      	movs	r6, #0
 800c88e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c892:	106d      	asrs	r5, r5, #1
 800c894:	0049      	lsls	r1, r1, #1
 800c896:	2016      	movs	r0, #22
 800c898:	4632      	mov	r2, r6
 800c89a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c89e:	1917      	adds	r7, r2, r4
 800c8a0:	429f      	cmp	r7, r3
 800c8a2:	bfde      	ittt	le
 800c8a4:	193a      	addle	r2, r7, r4
 800c8a6:	1bdb      	suble	r3, r3, r7
 800c8a8:	1936      	addle	r6, r6, r4
 800c8aa:	0fcf      	lsrs	r7, r1, #31
 800c8ac:	3801      	subs	r0, #1
 800c8ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c8b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c8b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c8ba:	d1f0      	bne.n	800c89e <__ieee754_sqrt+0xb6>
 800c8bc:	4604      	mov	r4, r0
 800c8be:	2720      	movs	r7, #32
 800c8c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	eb00 0e0c 	add.w	lr, r0, ip
 800c8ca:	db02      	blt.n	800c8d2 <__ieee754_sqrt+0xea>
 800c8cc:	d113      	bne.n	800c8f6 <__ieee754_sqrt+0x10e>
 800c8ce:	458e      	cmp	lr, r1
 800c8d0:	d811      	bhi.n	800c8f6 <__ieee754_sqrt+0x10e>
 800c8d2:	f1be 0f00 	cmp.w	lr, #0
 800c8d6:	eb0e 000c 	add.w	r0, lr, ip
 800c8da:	da42      	bge.n	800c962 <__ieee754_sqrt+0x17a>
 800c8dc:	2800      	cmp	r0, #0
 800c8de:	db40      	blt.n	800c962 <__ieee754_sqrt+0x17a>
 800c8e0:	f102 0801 	add.w	r8, r2, #1
 800c8e4:	1a9b      	subs	r3, r3, r2
 800c8e6:	458e      	cmp	lr, r1
 800c8e8:	bf88      	it	hi
 800c8ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c8ee:	eba1 010e 	sub.w	r1, r1, lr
 800c8f2:	4464      	add	r4, ip
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c8fa:	3f01      	subs	r7, #1
 800c8fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c900:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c904:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c908:	d1dc      	bne.n	800c8c4 <__ieee754_sqrt+0xdc>
 800c90a:	4319      	orrs	r1, r3
 800c90c:	d01b      	beq.n	800c946 <__ieee754_sqrt+0x15e>
 800c90e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c994 <__ieee754_sqrt+0x1ac>
 800c912:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c998 <__ieee754_sqrt+0x1b0>
 800c916:	e9da 0100 	ldrd	r0, r1, [sl]
 800c91a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c91e:	f7f3 fcbb 	bl	8000298 <__aeabi_dsub>
 800c922:	e9da 8900 	ldrd	r8, r9, [sl]
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4640      	mov	r0, r8
 800c92c:	4649      	mov	r1, r9
 800c92e:	f7f4 f8e7 	bl	8000b00 <__aeabi_dcmple>
 800c932:	b140      	cbz	r0, 800c946 <__ieee754_sqrt+0x15e>
 800c934:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c938:	e9da 0100 	ldrd	r0, r1, [sl]
 800c93c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c940:	d111      	bne.n	800c966 <__ieee754_sqrt+0x17e>
 800c942:	3601      	adds	r6, #1
 800c944:	463c      	mov	r4, r7
 800c946:	1072      	asrs	r2, r6, #1
 800c948:	0863      	lsrs	r3, r4, #1
 800c94a:	07f1      	lsls	r1, r6, #31
 800c94c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c950:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c954:	bf48      	it	mi
 800c956:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c95a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c95e:	4618      	mov	r0, r3
 800c960:	e756      	b.n	800c810 <__ieee754_sqrt+0x28>
 800c962:	4690      	mov	r8, r2
 800c964:	e7be      	b.n	800c8e4 <__ieee754_sqrt+0xfc>
 800c966:	f7f3 fc99 	bl	800029c <__adddf3>
 800c96a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c96e:	4602      	mov	r2, r0
 800c970:	460b      	mov	r3, r1
 800c972:	4640      	mov	r0, r8
 800c974:	4649      	mov	r1, r9
 800c976:	f7f4 f8b9 	bl	8000aec <__aeabi_dcmplt>
 800c97a:	b120      	cbz	r0, 800c986 <__ieee754_sqrt+0x19e>
 800c97c:	1ca0      	adds	r0, r4, #2
 800c97e:	bf08      	it	eq
 800c980:	3601      	addeq	r6, #1
 800c982:	3402      	adds	r4, #2
 800c984:	e7df      	b.n	800c946 <__ieee754_sqrt+0x15e>
 800c986:	1c63      	adds	r3, r4, #1
 800c988:	f023 0401 	bic.w	r4, r3, #1
 800c98c:	e7db      	b.n	800c946 <__ieee754_sqrt+0x15e>
 800c98e:	bf00      	nop
 800c990:	7ff00000 	.word	0x7ff00000
 800c994:	200002d0 	.word	0x200002d0
 800c998:	200002c8 	.word	0x200002c8

0800c99c <_init>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	bf00      	nop
 800c9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9a2:	bc08      	pop	{r3}
 800c9a4:	469e      	mov	lr, r3
 800c9a6:	4770      	bx	lr

0800c9a8 <_fini>:
 800c9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9aa:	bf00      	nop
 800c9ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c9ae:	bc08      	pop	{r3}
 800c9b0:	469e      	mov	lr, r3
 800c9b2:	4770      	bx	lr
