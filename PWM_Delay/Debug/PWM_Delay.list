
PWM_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c684  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  0800c828  0800c828  0000d828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc30  0800cc30  0000e2d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc30  0800cc30  0000dc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc38  0800cc38  0000e2d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc38  0800cc38  0000dc38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc3c  0800cc3c  0000dc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800cc40  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  200002d8  0800cf18  0000e2d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002110  0800cf18  0000f110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e2d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000121fd  00000000  00000000  0000e308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003312  00000000  00000000  00020505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00023818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c07  00000000  00000000  00024808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa0d  00000000  00000000  0002540f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016125  00000000  00000000  0003fe1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097dff  00000000  00000000  00055f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000edd40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005530  00000000  00000000  000edd84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f32b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c80c 	.word	0x0800c80c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800c80c 	.word	0x0800c80c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <count2volt>:

#define Vref 3.3 // Reference voltage (in volts)

int max_count;

double count2volt(int res, int count){
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]

	    max_count = pow(2, res) - 1;
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fb3e 	bl	8000534 <__aeabi_i2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	ec43 2b11 	vmov	d1, r2, r3
 8000ec0:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8000f30 <count2volt+0x88>
 8000ec4:	f00a fd44 	bl	800b950 <pow>
 8000ec8:	ec51 0b10 	vmov	r0, r1, d0
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <count2volt+0x98>)
 8000ed2:	f7ff f9e1 	bl	8000298 <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe43 	bl	8000b68 <__aeabi_d2iz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <count2volt+0x9c>)
 8000ee6:	6013      	str	r3, [r2, #0]

	    return(Vref / max_count * count);
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <count2volt+0x9c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb21 	bl	8000534 <__aeabi_i2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	a110      	add	r1, pc, #64	@ (adr r1, 8000f38 <count2volt+0x90>)
 8000ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000efc:	f7ff fcae 	bl	800085c <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4614      	mov	r4, r2
 8000f06:	461d      	mov	r5, r3
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f7ff fb13 	bl	8000534 <__aeabi_i2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4620      	mov	r0, r4
 8000f14:	4629      	mov	r1, r5
 8000f16:	f7ff fb77 	bl	8000608 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f22:	eeb0 0a47 	vmov.f32	s0, s14
 8000f26:	eef0 0a67 	vmov.f32	s1, s15
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40000000 	.word	0x40000000
 8000f38:	66666666 	.word	0x66666666
 8000f3c:	400a6666 	.word	0x400a6666
 8000f40:	3ff00000 	.word	0x3ff00000
 8000f44:	200002f4 	.word	0x200002f4

08000f48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4e:	f000 fc2f 	bl	80017b0 <HAL_Init>
	/* USER CODE BEGIN Init */
	//HAL_StatusTypeDef RET;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f52:	f000 f8ad 	bl	80010b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f56:	f000 f997 	bl	8001288 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f5a:	f000 f915 	bl	8001188 <MX_ADC1_Init>
	MX_I2C2_Init();
 8000f5e:	f000 f965 	bl	800122c <MX_I2C2_Init>
	MX_USB_DEVICE_Init();
 8000f62:	f007 f9af 	bl	80082c4 <MX_USB_DEVICE_Init>
	// generateSineWave();


	while (1) {

		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000f66:	2101      	movs	r1, #1
 8000f68:	4845      	ldr	r0, [pc, #276]	@ (8001080 <main+0x138>)
 8000f6a:	f001 fb3f 	bl	80025ec <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b44      	ldr	r3, [pc, #272]	@ (8001084 <main+0x13c>)
 8000f74:	701a      	strb	r2, [r3, #0]

		if (pinState == GPIO_PIN_RESET) {
 8000f76:	4b43      	ldr	r3, [pc, #268]	@ (8001084 <main+0x13c>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <main+0x44>
			bufon[0] = FULLSCALE >> 8;
 8000f7e:	4b42      	ldr	r3, [pc, #264]	@ (8001088 <main+0x140>)
 8000f80:	220f      	movs	r2, #15
 8000f82:	701a      	strb	r2, [r3, #0]
			bufon[1] = FULLSCALE;
 8000f84:	4b40      	ldr	r3, [pc, #256]	@ (8001088 <main+0x140>)
 8000f86:	22ff      	movs	r2, #255	@ 0xff
 8000f88:	705a      	strb	r2, [r3, #1]
 8000f8a:	e005      	b.n	8000f98 <main+0x50>
		}
		else {
			bufon[0] = MIDSCALE >> 8;
 8000f8c:	4b3e      	ldr	r3, [pc, #248]	@ (8001088 <main+0x140>)
 8000f8e:	2207      	movs	r2, #7
 8000f90:	701a      	strb	r2, [r3, #0]
			bufon[1] = MIDSCALE;
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <main+0x140>)
 8000f94:	2245      	movs	r2, #69	@ 0x45
 8000f96:	705a      	strb	r2, [r3, #1]
		}

		if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufon, 2, 50) == HAL_OK) {
 8000f98:	2332      	movs	r3, #50	@ 0x32
 8000f9a:	9300      	str	r3, [sp, #0]
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001088 <main+0x140>)
 8000fa0:	21c0      	movs	r1, #192	@ 0xc0
 8000fa2:	483a      	ldr	r0, [pc, #232]	@ (800108c <main+0x144>)
 8000fa4:	f001 fc98 	bl	80028d8 <HAL_I2C_Master_Transmit>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d105      	bne.n	8000fba <main+0x72>
			adcValue = readADCValue();
 8000fae:	f000 f9d9 	bl	8001364 <readADCValue>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	4b36      	ldr	r3, [pc, #216]	@ (8001090 <main+0x148>)
 8000fb8:	601a      	str	r2, [r3, #0]
		}
		voltsOn = count2volt(ADCRES, adcValue);
 8000fba:	4b35      	ldr	r3, [pc, #212]	@ (8001090 <main+0x148>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	200c      	movs	r0, #12
 8000fc2:	f7ff ff71 	bl	8000ea8 <count2volt>
 8000fc6:	eeb0 7a40 	vmov.f32	s14, s0
 8000fca:	eef0 7a60 	vmov.f32	s15, s1
 8000fce:	4b31      	ldr	r3, [pc, #196]	@ (8001094 <main+0x14c>)
 8000fd0:	ed83 7b00 	vstr	d7, [r3]
		ton = 80 * adcValue / 4096 + 10;
 8000fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8001090 <main+0x148>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	da01      	bge.n	8000fe8 <main+0xa0>
 8000fe4:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8000fe8:	131b      	asrs	r3, r3, #12
 8000fea:	330a      	adds	r3, #10
 8000fec:	4a2a      	ldr	r2, [pc, #168]	@ (8001098 <main+0x150>)
 8000fee:	6013      	str	r3, [r2, #0]
		toff = 100 - ton;
 8000ff0:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <main+0x150>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8000ff8:	4a28      	ldr	r2, [pc, #160]	@ (800109c <main+0x154>)
 8000ffa:	6013      	str	r3, [r2, #0]
		sprintf(buffer, "%.3f\r\n", voltsOn);
 8000ffc:	4b25      	ldr	r3, [pc, #148]	@ (8001094 <main+0x14c>)
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	4927      	ldr	r1, [pc, #156]	@ (80010a0 <main+0x158>)
 8001004:	4827      	ldr	r0, [pc, #156]	@ (80010a4 <main+0x15c>)
 8001006:	f008 fb77 	bl	80096f8 <siprintf>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 800100a:	2120      	movs	r1, #32
 800100c:	4825      	ldr	r0, [pc, #148]	@ (80010a4 <main+0x15c>)
 800100e:	f007 fa17 	bl	8008440 <CDC_Transmit_FS>
		HAL_Delay(ton);
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <main+0x150>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fc3c 	bl	8001894 <HAL_Delay>

		if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufoff, 2, 50) == HAL_OK) {
 800101c:	2332      	movs	r3, #50	@ 0x32
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	2302      	movs	r3, #2
 8001022:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <main+0x160>)
 8001024:	21c0      	movs	r1, #192	@ 0xc0
 8001026:	4819      	ldr	r0, [pc, #100]	@ (800108c <main+0x144>)
 8001028:	f001 fc56 	bl	80028d8 <HAL_I2C_Master_Transmit>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <main+0xf6>
			adcValue = readADCValue();
 8001032:	f000 f997 	bl	8001364 <readADCValue>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <main+0x148>)
 800103c:	601a      	str	r2, [r3, #0]
		}
		voltsOff = count2volt(ADCRES, adcValue);
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <main+0x148>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4619      	mov	r1, r3
 8001044:	200c      	movs	r0, #12
 8001046:	f7ff ff2f 	bl	8000ea8 <count2volt>
 800104a:	eeb0 7a40 	vmov.f32	s14, s0
 800104e:	eef0 7a60 	vmov.f32	s15, s1
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <main+0x164>)
 8001054:	ed83 7b00 	vstr	d7, [r3]
		sprintf(buffer, "%.3f\r\n", voltsOff);
 8001058:	4b14      	ldr	r3, [pc, #80]	@ (80010ac <main+0x164>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	4910      	ldr	r1, [pc, #64]	@ (80010a0 <main+0x158>)
 8001060:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <main+0x15c>)
 8001062:	f008 fb49 	bl	80096f8 <siprintf>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 8001066:	2120      	movs	r1, #32
 8001068:	480e      	ldr	r0, [pc, #56]	@ (80010a4 <main+0x15c>)
 800106a:	f007 f9e9 	bl	8008440 <CDC_Transmit_FS>
		HAL_Delay(100 - ton);
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <main+0x150>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f1c3 0364 	rsb	r3, r3, #100	@ 0x64
 8001076:	4618      	mov	r0, r3
 8001078:	f000 fc0c 	bl	8001894 <HAL_Delay>
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800107c:	e773      	b.n	8000f66 <main+0x1e>
 800107e:	bf00      	nop
 8001080:	40020000 	.word	0x40020000
 8001084:	200003d6 	.word	0x200003d6
 8001088:	200003d0 	.word	0x200003d0
 800108c:	20000340 	.word	0x20000340
 8001090:	20000394 	.word	0x20000394
 8001094:	200003a0 	.word	0x200003a0
 8001098:	20000398 	.word	0x20000398
 800109c:	2000039c 	.word	0x2000039c
 80010a0:	0800c828 	.word	0x0800c828
 80010a4:	200003b0 	.word	0x200003b0
 80010a8:	200003d4 	.word	0x200003d4
 80010ac:	200003a8 	.word	0x200003a8

080010b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	@ 0x50
 80010b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	2230      	movs	r2, #48	@ 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f008 fb7d 	bl	80097be <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <SystemClock_Config+0xd0>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010dc:	4a28      	ldr	r2, [pc, #160]	@ (8001180 <SystemClock_Config+0xd0>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e4:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <SystemClock_Config+0xd0>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <SystemClock_Config+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a22      	ldr	r2, [pc, #136]	@ (8001184 <SystemClock_Config+0xd4>)
 80010fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b20      	ldr	r3, [pc, #128]	@ (8001184 <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001116:	2301      	movs	r3, #1
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800111a:	2310      	movs	r3, #16
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111e:	2302      	movs	r3, #2
 8001120:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001122:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001128:	230f      	movs	r3, #15
 800112a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 800112c:	2390      	movs	r3, #144	@ 0x90
 800112e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001130:	2302      	movs	r3, #2
 8001132:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8001134:	2305      	movs	r3, #5
 8001136:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f003 f975 	bl	800442c <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x9c>
		Error_Handler();
 8001148:	f000 f92c 	bl	80013a4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f003 fbd8 	bl	800491c <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xc6>
		Error_Handler();
 8001172:	f000 f917 	bl	80013a4 <Error_Handler>
	}
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	@ 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800119a:	4b21      	ldr	r3, [pc, #132]	@ (8001220 <MX_ADC1_Init+0x98>)
 800119c:	4a21      	ldr	r2, [pc, #132]	@ (8001224 <MX_ADC1_Init+0x9c>)
 800119e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011a6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80011b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ba:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011c2:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011c8:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011ca:	4a17      	ldr	r2, [pc, #92]	@ (8001228 <MX_ADC1_Init+0xa0>)
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ce:	4b14      	ldr	r3, [pc, #80]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011e8:	480d      	ldr	r0, [pc, #52]	@ (8001220 <MX_ADC1_Init+0x98>)
 80011ea:	f000 fb77 	bl	80018dc <HAL_ADC_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0x70>
		Error_Handler();
 80011f4:	f000 f8d6 	bl	80013a4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001204:	463b      	mov	r3, r7
 8001206:	4619      	mov	r1, r3
 8001208:	4805      	ldr	r0, [pc, #20]	@ (8001220 <MX_ADC1_Init+0x98>)
 800120a:	f000 fd2b 	bl	8001c64 <HAL_ADC_ConfigChannel>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001214:	f000 f8c6 	bl	80013a4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200002f8 	.word	0x200002f8
 8001224:	40012000 	.word	0x40012000
 8001228:	0f000001 	.word	0x0f000001

0800122c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_I2C2_Init+0x50>)
 8001232:	4a13      	ldr	r2, [pc, #76]	@ (8001280 <MX_I2C2_Init+0x54>)
 8001234:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_I2C2_Init+0x50>)
 8001238:	4a12      	ldr	r2, [pc, #72]	@ (8001284 <MX_I2C2_Init+0x58>)
 800123a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_I2C2_Init+0x50>)
 800123e:	2200      	movs	r2, #0
 8001240:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_I2C2_Init+0x50>)
 8001244:	2200      	movs	r2, #0
 8001246:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_I2C2_Init+0x50>)
 800124a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800124e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <MX_I2C2_Init+0x50>)
 8001252:	2200      	movs	r2, #0
 8001254:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_I2C2_Init+0x50>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <MX_I2C2_Init+0x50>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_I2C2_Init+0x50>)
 8001264:	2200      	movs	r2, #0
 8001266:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001268:	4804      	ldr	r0, [pc, #16]	@ (800127c <MX_I2C2_Init+0x50>)
 800126a:	f001 f9f1 	bl	8002650 <HAL_I2C_Init>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001274:	f000 f896 	bl	80013a4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000340 	.word	0x20000340
 8001280:	40005800 	.word	0x40005800
 8001284:	00061a80 	.word	0x00061a80

08001288 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b08a      	sub	sp, #40	@ 0x28
 800128c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0304 	and.w	r3, r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b26      	ldr	r3, [pc, #152]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a25      	ldr	r2, [pc, #148]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b23      	ldr	r3, [pc, #140]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	4b1f      	ldr	r3, [pc, #124]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a1e      	ldr	r2, [pc, #120]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <MX_GPIO_Init+0xd0>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	@ 0x30
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <MX_GPIO_Init+0xd0>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001314:	4811      	ldr	r0, [pc, #68]	@ (800135c <MX_GPIO_Init+0xd4>)
 8001316:	f001 f981 	bl	800261c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800131a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800131e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001320:	2301      	movs	r3, #1
 8001322:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001324:	2301      	movs	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	4619      	mov	r1, r3
 8001332:	480a      	ldr	r0, [pc, #40]	@ (800135c <MX_GPIO_Init+0xd4>)
 8001334:	f000 ffd6 	bl	80022e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001340:	2301      	movs	r3, #1
 8001342:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0314 	add.w	r3, r7, #20
 8001348:	4619      	mov	r1, r3
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_GPIO_Init+0xd8>)
 800134c:	f000 ffca 	bl	80022e4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001350:	bf00      	nop
 8001352:	3728      	adds	r7, #40	@ 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	40020800 	.word	0x40020800
 8001360:	40020000 	.word	0x40020000

08001364 <readADCValue>:
 //ton=(((80*adcValue)/4095)+10);
 //toff=100-ton;
 HAL_ADC_Stop_IT(hadc1);
 }*/

uint32_t readADCValue(void) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
	uint32_t adc_value = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]

	// Inicia a conversão do ADC de forma síncrona
	if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 800136e:	480c      	ldr	r0, [pc, #48]	@ (80013a0 <readADCValue+0x3c>)
 8001370:	f000 faf8 	bl	8001964 <HAL_ADC_Start>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10d      	bne.n	8001396 <readADCValue+0x32>
		// Espera até que a conversão seja concluída
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800137a:	2164      	movs	r1, #100	@ 0x64
 800137c:	4808      	ldr	r0, [pc, #32]	@ (80013a0 <readADCValue+0x3c>)
 800137e:	f000 fbd8 	bl	8001b32 <HAL_ADC_PollForConversion>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d103      	bne.n	8001390 <readADCValue+0x2c>
			// Obtém o valor convertido
			adc_value = HAL_ADC_GetValue(&hadc1);
 8001388:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <readADCValue+0x3c>)
 800138a:	f000 fc5d 	bl	8001c48 <HAL_ADC_GetValue>
 800138e:	6078      	str	r0, [r7, #4]
		}
		// Stop ADC to save power and resources
		HAL_ADC_Stop(&hadc1);
 8001390:	4803      	ldr	r0, [pc, #12]	@ (80013a0 <readADCValue+0x3c>)
 8001392:	f000 fb9b 	bl	8001acc <HAL_ADC_Stop>
	}

	return adc_value;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002f8 	.word	0x200002f8

080013a4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <Error_Handler+0x8>

080013b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c6:	4b0d      	ldr	r3, [pc, #52]	@ (80013fc <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
 80013d6:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	4a08      	ldr	r2, [pc, #32]	@ (80013fc <HAL_MspInit+0x4c>)
 80013dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800

08001400 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	@ 0x28
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	f107 0314 	add.w	r3, r7, #20
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a17      	ldr	r2, [pc, #92]	@ (800147c <HAL_ADC_MspInit+0x7c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d127      	bne.n	8001472 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_ADC_MspInit+0x80>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <HAL_ADC_MspInit+0x80>)
 800142c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001430:	6453      	str	r3, [r2, #68]	@ 0x44
 8001432:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <HAL_ADC_MspInit+0x80>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_ADC_MspInit+0x80>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a0e      	ldr	r2, [pc, #56]	@ (8001480 <HAL_ADC_MspInit+0x80>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <HAL_ADC_MspInit+0x80>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800145a:	2302      	movs	r3, #2
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800145e:	2303      	movs	r3, #3
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	@ (8001484 <HAL_ADC_MspInit+0x84>)
 800146e:	f000 ff39 	bl	80022e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40012000 	.word	0x40012000
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000

08001488 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08a      	sub	sp, #40	@ 0x28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a21      	ldr	r2, [pc, #132]	@ (800152c <HAL_I2C_MspInit+0xa4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d13c      	bne.n	8001524 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <HAL_I2C_MspInit+0xa8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001530 <HAL_I2C_MspInit+0xa8>)
 80014b4:	f043 0302 	orr.w	r3, r3, #2
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <HAL_I2C_MspInit+0xa8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d8:	2304      	movs	r3, #4
 80014da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	4814      	ldr	r0, [pc, #80]	@ (8001534 <HAL_I2C_MspInit+0xac>)
 80014e4:	f000 fefe 	bl	80022e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014e8:	2308      	movs	r3, #8
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014ec:	2312      	movs	r3, #18
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014f8:	2309      	movs	r3, #9
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	@ (8001534 <HAL_I2C_MspInit+0xac>)
 8001504:	f000 feee 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <HAL_I2C_MspInit+0xa8>)
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_I2C_MspInit+0xa8>)
 8001512:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001516:	6413      	str	r3, [r2, #64]	@ 0x40
 8001518:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_I2C_MspInit+0xa8>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	@ 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005800 	.word	0x40005800
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400

08001538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <NMI_Handler+0x4>

08001540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001544:	bf00      	nop
 8001546:	e7fd      	b.n	8001544 <HardFault_Handler+0x4>

08001548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800154c:	bf00      	nop
 800154e:	e7fd      	b.n	800154c <MemManage_Handler+0x4>

08001550 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <UsageFault_Handler+0x4>

08001560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f000 f961 	bl	8001854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <OTG_FS_IRQHandler+0x10>)
 800159e:	f001 fe38 	bl	8003212 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200018c0 	.word	0x200018c0

080015ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return 1;
 80015b0:	2301      	movs	r3, #1
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_kill>:

int _kill(int pid, int sig)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015c6:	f008 f94d 	bl	8009864 <__errno>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2216      	movs	r2, #22
 80015ce:	601a      	str	r2, [r3, #0]
  return -1;
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_exit>:

void _exit (int status)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e4:	f04f 31ff 	mov.w	r1, #4294967295
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ffe7 	bl	80015bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ee:	bf00      	nop
 80015f0:	e7fd      	b.n	80015ee <_exit+0x12>

080015f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e00a      	b.n	800161a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001604:	f3af 8000 	nop.w
 8001608:	4601      	mov	r1, r0
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	1c5a      	adds	r2, r3, #1
 800160e:	60ba      	str	r2, [r7, #8]
 8001610:	b2ca      	uxtb	r2, r1
 8001612:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf0      	blt.n	8001604 <_read+0x12>
  }

  return len;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	e009      	b.n	8001652 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	60ba      	str	r2, [r7, #8]
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf1      	blt.n	800163e <_write+0x12>
  }
  return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_close>:

int _close(int file)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800168c:	605a      	str	r2, [r3, #4]
  return 0;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <_isatty>:

int _isatty(int file)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d4:	4a14      	ldr	r2, [pc, #80]	@ (8001728 <_sbrk+0x5c>)
 80016d6:	4b15      	ldr	r3, [pc, #84]	@ (800172c <_sbrk+0x60>)
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e0:	4b13      	ldr	r3, [pc, #76]	@ (8001730 <_sbrk+0x64>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <_sbrk+0x64>)
 80016ea:	4a12      	ldr	r2, [pc, #72]	@ (8001734 <_sbrk+0x68>)
 80016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ee:	4b10      	ldr	r3, [pc, #64]	@ (8001730 <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d207      	bcs.n	800170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016fc:	f008 f8b2 	bl	8009864 <__errno>
 8001700:	4603      	mov	r3, r0
 8001702:	220c      	movs	r2, #12
 8001704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e009      	b.n	8001720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <_sbrk+0x64>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001712:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <_sbrk+0x64>)
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4413      	add	r3, r2
 800171a:	4a05      	ldr	r2, [pc, #20]	@ (8001730 <_sbrk+0x64>)
 800171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800171e:	68fb      	ldr	r3, [r7, #12]
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20020000 	.word	0x20020000
 800172c:	00000400 	.word	0x00000400
 8001730:	200003d8 	.word	0x200003d8
 8001734:	20002110 	.word	0x20002110

08001738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <SystemInit+0x20>)
 800173e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001742:	4a05      	ldr	r2, [pc, #20]	@ (8001758 <SystemInit+0x20>)
 8001744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800175c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001794 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001760:	f7ff ffea 	bl	8001738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001766:	490d      	ldr	r1, [pc, #52]	@ (800179c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0a      	ldr	r2, [pc, #40]	@ (80017a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800177c:	4c0a      	ldr	r4, [pc, #40]	@ (80017a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178a:	f008 f871 	bl	8009870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800178e:	f7ff fbdb 	bl	8000f48 <main>
  bx  lr    
 8001792:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001794:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800179c:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80017a0:	0800cc40 	.word	0x0800cc40
  ldr r2, =_sbss
 80017a4:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80017a8:	20002110 	.word	0x20002110

080017ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017ac:	e7fe      	b.n	80017ac <ADC_IRQHandler>
	...

080017b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_Init+0x40>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <HAL_Init+0x40>)
 80017ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_Init+0x40>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_Init+0x40>)
 80017c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017cc:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_Init+0x40>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <HAL_Init+0x40>)
 80017d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017d8:	2003      	movs	r0, #3
 80017da:	f000 fd41 	bl	8002260 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017de:	200f      	movs	r0, #15
 80017e0:	f000 f808 	bl	80017f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e4:	f7ff fde4 	bl	80013b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fc:	4b12      	ldr	r3, [pc, #72]	@ (8001848 <HAL_InitTick+0x54>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_InitTick+0x58>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4619      	mov	r1, r3
 8001806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800180a:	fbb3 f3f1 	udiv	r3, r3, r1
 800180e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fd59 	bl	80022ca <HAL_SYSTICK_Config>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e00e      	b.n	8001840 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d80a      	bhi.n	800183e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001828:	2200      	movs	r2, #0
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f000 fd21 	bl	8002276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001834:	4a06      	ldr	r2, [pc, #24]	@ (8001850 <HAL_InitTick+0x5c>)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
 800183c:	e000      	b.n	8001840 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
}
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000000 	.word	0x20000000
 800184c:	20000008 	.word	0x20000008
 8001850:	20000004 	.word	0x20000004

08001854 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001858:	4b06      	ldr	r3, [pc, #24]	@ (8001874 <HAL_IncTick+0x20>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_IncTick+0x24>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4413      	add	r3, r2
 8001864:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <HAL_IncTick+0x24>)
 8001866:	6013      	str	r3, [r2, #0]
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000008 	.word	0x20000008
 8001878:	200003dc 	.word	0x200003dc

0800187c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return uwTick;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <HAL_GetTick+0x14>)
 8001882:	681b      	ldr	r3, [r3, #0]
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	200003dc 	.word	0x200003dc

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800189c:	f7ff ffee 	bl	800187c <HAL_GetTick>
 80018a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d005      	beq.n	80018ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_Delay+0x44>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4413      	add	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018ba:	bf00      	nop
 80018bc:	f7ff ffde 	bl	800187c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d8f7      	bhi.n	80018bc <HAL_Delay+0x28>
  {
  }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e033      	b.n	800195a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff fd80 	bl	8001400 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f003 0310 	and.w	r3, r3, #16
 8001916:	2b00      	cmp	r3, #0
 8001918:	d118      	bne.n	800194c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800191e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001922:	f023 0302 	bic.w	r3, r3, #2
 8001926:	f043 0202 	orr.w	r2, r3, #2
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 faca 	bl	8001ec8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f023 0303 	bic.w	r3, r3, #3
 8001942:	f043 0201 	orr.w	r2, r3, #1
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	@ 0x40
 800194a:	e001      	b.n	8001950 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800196c:	2300      	movs	r3, #0
 800196e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ADC_Start+0x1a>
 800197a:	2302      	movs	r3, #2
 800197c:	e097      	b.n	8001aae <HAL_ADC_Start+0x14a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d018      	beq.n	80019c6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689a      	ldr	r2, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019a4:	4b45      	ldr	r3, [pc, #276]	@ (8001abc <HAL_ADC_Start+0x158>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a45      	ldr	r2, [pc, #276]	@ (8001ac0 <HAL_ADC_Start+0x15c>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0c9a      	lsrs	r2, r3, #18
 80019b0:	4613      	mov	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4413      	add	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019b8:	e002      	b.n	80019c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	3b01      	subs	r3, #1
 80019be:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f9      	bne.n	80019ba <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d15f      	bne.n	8001a94 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019dc:	f023 0301 	bic.w	r3, r3, #1
 80019e0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d007      	beq.n	8001a06 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a12:	d106      	bne.n	8001a22 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a18:	f023 0206 	bic.w	r2, r3, #6
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_ADC_Start+0x160>)
 8001a32:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a3c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d10f      	bne.n	8001a6a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d129      	bne.n	8001aac <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	e020      	b.n	8001aac <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ac8 <HAL_ADC_Start+0x164>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d11b      	bne.n	8001aac <HAL_ADC_Start+0x148>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d114      	bne.n	8001aac <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	e00b      	b.n	8001aac <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0210 	orr.w	r2, r3, #16
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa4:	f043 0201 	orr.w	r2, r3, #1
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	20000000 	.word	0x20000000
 8001ac0:	431bde83 	.word	0x431bde83
 8001ac4:	40012300 	.word	0x40012300
 8001ac8:	40012000 	.word	0x40012000

08001acc <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_Stop+0x16>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e021      	b.n	8001b26 <HAL_ADC_Stop+0x5a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0201 	bic.w	r2, r2, #1
 8001af8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d109      	bne.n	8001b1c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	f043 0201 	orr.w	r2, r3, #1
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b084      	sub	sp, #16
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b4e:	d113      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b5e:	d10b      	bne.n	8001b78 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e063      	b.n	8001c40 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b78:	f7ff fe80 	bl	800187c <HAL_GetTick>
 8001b7c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b7e:	e021      	b.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b86:	d01d      	beq.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d007      	beq.n	8001b9e <HAL_ADC_PollForConversion+0x6c>
 8001b8e:	f7ff fe75 	bl	800187c <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d212      	bcs.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d00b      	beq.n	8001bc4 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb0:	f043 0204 	orr.w	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e03d      	b.n	8001c40 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d1d6      	bne.n	8001b80 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f06f 0212 	mvn.w	r2, #18
 8001bda:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d123      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11f      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d111      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d105      	bne.n	8001c3e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3710      	adds	r7, #16
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1c>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e113      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x244>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	d925      	bls.n	8001cdc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68d9      	ldr	r1, [r3, #12]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	3b1e      	subs	r3, #30
 8001ca6:	2207      	movs	r2, #7
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43da      	mvns	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68d9      	ldr	r1, [r3, #12]
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4603      	mov	r3, r0
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	4403      	add	r3, r0
 8001cce:	3b1e      	subs	r3, #30
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	e022      	b.n	8001d22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6919      	ldr	r1, [r3, #16]
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6919      	ldr	r1, [r3, #16]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4618      	mov	r0, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4403      	add	r3, r0
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d824      	bhi.n	8001d74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b05      	subs	r3, #5
 8001d3c:	221f      	movs	r2, #31
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	400a      	ands	r2, r1
 8001d4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	3b05      	subs	r3, #5
 8001d66:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d72:	e04c      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d824      	bhi.n	8001dc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b23      	subs	r3, #35	@ 0x23
 8001d8e:	221f      	movs	r2, #31
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43da      	mvns	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	3b23      	subs	r3, #35	@ 0x23
 8001db8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dc4:	e023      	b.n	8001e0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b41      	subs	r3, #65	@ 0x41
 8001dd8:	221f      	movs	r2, #31
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	400a      	ands	r2, r1
 8001de6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b41      	subs	r3, #65	@ 0x41
 8001e02:	fa00 f203 	lsl.w	r2, r0, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e0e:	4b29      	ldr	r3, [pc, #164]	@ (8001eb4 <HAL_ADC_ConfigChannel+0x250>)
 8001e10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a28      	ldr	r2, [pc, #160]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x254>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d10f      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1d8>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b12      	cmp	r3, #18
 8001e22:	d10b      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb8 <HAL_ADC_ConfigChannel+0x254>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12b      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x23a>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ebc <HAL_ADC_ConfigChannel+0x258>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d003      	beq.n	8001e58 <HAL_ADC_ConfigChannel+0x1f4>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b11      	cmp	r3, #17
 8001e56:	d122      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <HAL_ADC_ConfigChannel+0x258>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x25c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a11      	ldr	r2, [pc, #68]	@ (8001ec4 <HAL_ADC_ConfigChannel+0x260>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	0c9a      	lsrs	r2, r3, #18
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e90:	e002      	b.n	8001e98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f9      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	40012000 	.word	0x40012000
 8001ebc:	10000012 	.word	0x10000012
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed0:	4b79      	ldr	r3, [pc, #484]	@ (80020b8 <ADC_Init+0x1f0>)
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001efc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6859      	ldr	r1, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	021a      	lsls	r2, r3, #8
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6859      	ldr	r1, [r3, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6899      	ldr	r1, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	4a58      	ldr	r2, [pc, #352]	@ (80020bc <ADC_Init+0x1f4>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d022      	beq.n	8001fa6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001f90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	6899      	ldr	r1, [r3, #8]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	e00f      	b.n	8001fc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fc4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 0202 	bic.w	r2, r2, #2
 8001fd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6899      	ldr	r1, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	7e1b      	ldrb	r3, [r3, #24]
 8001fe0:	005a      	lsls	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01b      	beq.n	800202c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002002:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002012:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6859      	ldr	r1, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201e:	3b01      	subs	r3, #1
 8002020:	035a      	lsls	r2, r3, #13
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e007      	b.n	800203c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800203a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800204a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	3b01      	subs	r3, #1
 8002058:	051a      	lsls	r2, r3, #20
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002070:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800207e:	025a      	lsls	r2, r3, #9
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002096:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	029a      	lsls	r2, r3, #10
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	609a      	str	r2, [r3, #8]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40012300 	.word	0x40012300
 80020bc:	0f000001 	.word	0x0f000001

080020c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020dc:	4013      	ands	r3, r2
 80020de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f2:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <__NVIC_SetPriorityGrouping+0x44>)
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	60d3      	str	r3, [r2, #12]
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <__NVIC_GetPriorityGrouping+0x18>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	0a1b      	lsrs	r3, r3, #8
 8002112:	f003 0307 	and.w	r3, r3, #7
}
 8002116:	4618      	mov	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	db0b      	blt.n	800214e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	f003 021f 	and.w	r2, r3, #31
 800213c:	4907      	ldr	r1, [pc, #28]	@ (800215c <__NVIC_EnableIRQ+0x38>)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	2001      	movs	r0, #1
 8002146:	fa00 f202 	lsl.w	r2, r0, r2
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100

08002160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	6039      	str	r1, [r7, #0]
 800216a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002170:	2b00      	cmp	r3, #0
 8002172:	db0a      	blt.n	800218a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	b2da      	uxtb	r2, r3
 8002178:	490c      	ldr	r1, [pc, #48]	@ (80021ac <__NVIC_SetPriority+0x4c>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	0112      	lsls	r2, r2, #4
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	440b      	add	r3, r1
 8002184:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002188:	e00a      	b.n	80021a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	b2da      	uxtb	r2, r3
 800218e:	4908      	ldr	r1, [pc, #32]	@ (80021b0 <__NVIC_SetPriority+0x50>)
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	3b04      	subs	r3, #4
 8002198:	0112      	lsls	r2, r2, #4
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	440b      	add	r3, r1
 800219e:	761a      	strb	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000e100 	.word	0xe000e100
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	@ 0x24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f1c3 0307 	rsb	r3, r3, #7
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	bf28      	it	cs
 80021d2:	2304      	movcs	r3, #4
 80021d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	3304      	adds	r3, #4
 80021da:	2b06      	cmp	r3, #6
 80021dc:	d902      	bls.n	80021e4 <NVIC_EncodePriority+0x30>
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	3b03      	subs	r3, #3
 80021e2:	e000      	b.n	80021e6 <NVIC_EncodePriority+0x32>
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43da      	mvns	r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	401a      	ands	r2, r3
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43d9      	mvns	r1, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800220c:	4313      	orrs	r3, r2
         );
}
 800220e:	4618      	mov	r0, r3
 8002210:	3724      	adds	r7, #36	@ 0x24
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3b01      	subs	r3, #1
 8002228:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800222c:	d301      	bcc.n	8002232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222e:	2301      	movs	r3, #1
 8002230:	e00f      	b.n	8002252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <SysTick_Config+0x40>)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223a:	210f      	movs	r1, #15
 800223c:	f04f 30ff 	mov.w	r0, #4294967295
 8002240:	f7ff ff8e 	bl	8002160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002244:	4b05      	ldr	r3, [pc, #20]	@ (800225c <SysTick_Config+0x40>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224a:	4b04      	ldr	r3, [pc, #16]	@ (800225c <SysTick_Config+0x40>)
 800224c:	2207      	movs	r2, #7
 800224e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	e000e010 	.word	0xe000e010

08002260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f7ff ff29 	bl	80020c0 <__NVIC_SetPriorityGrouping>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
 8002282:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002288:	f7ff ff3e 	bl	8002108 <__NVIC_GetPriorityGrouping>
 800228c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	68b9      	ldr	r1, [r7, #8]
 8002292:	6978      	ldr	r0, [r7, #20]
 8002294:	f7ff ff8e 	bl	80021b4 <NVIC_EncodePriority>
 8002298:	4602      	mov	r2, r0
 800229a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff5d 	bl	8002160 <__NVIC_SetPriority>
}
 80022a6:	bf00      	nop
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b082      	sub	sp, #8
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff31 	bl	8002124 <__NVIC_EnableIRQ>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ffa2 	bl	800221c <SysTick_Config>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	e159      	b.n	80025b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002300:	2201      	movs	r2, #1
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4013      	ands	r3, r2
 8002312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	f040 8148 	bne.w	80025ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	2b01      	cmp	r3, #1
 8002328:	d005      	beq.n	8002336 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002332:	2b02      	cmp	r3, #2
 8002334:	d130      	bne.n	8002398 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4013      	ands	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	68da      	ldr	r2, [r3, #12]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4313      	orrs	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 0201 	and.w	r2, r3, #1
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b03      	cmp	r3, #3
 80023a2:	d017      	beq.n	80023d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d123      	bne.n	8002428 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	08da      	lsrs	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	3208      	adds	r2, #8
 80023e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	220f      	movs	r2, #15
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	691a      	ldr	r2, [r3, #16]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f003 0307 	and.w	r3, r3, #7
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	69b9      	ldr	r1, [r7, #24]
 8002424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	2203      	movs	r2, #3
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4013      	ands	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0203 	and.w	r2, r3, #3
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80a2 	beq.w	80025ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	4b57      	ldr	r3, [pc, #348]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	4a56      	ldr	r2, [pc, #344]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 8002474:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002478:	6453      	str	r3, [r2, #68]	@ 0x44
 800247a:	4b54      	ldr	r3, [pc, #336]	@ (80025cc <HAL_GPIO_Init+0x2e8>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002486:	4a52      	ldr	r2, [pc, #328]	@ (80025d0 <HAL_GPIO_Init+0x2ec>)
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	089b      	lsrs	r3, r3, #2
 800248c:	3302      	adds	r3, #2
 800248e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43db      	mvns	r3, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4013      	ands	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a49      	ldr	r2, [pc, #292]	@ (80025d4 <HAL_GPIO_Init+0x2f0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d019      	beq.n	80024e6 <HAL_GPIO_Init+0x202>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a48      	ldr	r2, [pc, #288]	@ (80025d8 <HAL_GPIO_Init+0x2f4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d013      	beq.n	80024e2 <HAL_GPIO_Init+0x1fe>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a47      	ldr	r2, [pc, #284]	@ (80025dc <HAL_GPIO_Init+0x2f8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <HAL_GPIO_Init+0x1fa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a46      	ldr	r2, [pc, #280]	@ (80025e0 <HAL_GPIO_Init+0x2fc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d007      	beq.n	80024da <HAL_GPIO_Init+0x1f6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a45      	ldr	r2, [pc, #276]	@ (80025e4 <HAL_GPIO_Init+0x300>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d101      	bne.n	80024d6 <HAL_GPIO_Init+0x1f2>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e008      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024d6:	2307      	movs	r3, #7
 80024d8:	e006      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024da:	2303      	movs	r3, #3
 80024dc:	e004      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024de:	2302      	movs	r3, #2
 80024e0:	e002      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <HAL_GPIO_Init+0x204>
 80024e6:	2300      	movs	r3, #0
 80024e8:	69fa      	ldr	r2, [r7, #28]
 80024ea:	f002 0203 	and.w	r2, r2, #3
 80024ee:	0092      	lsls	r2, r2, #2
 80024f0:	4093      	lsls	r3, r2
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f8:	4935      	ldr	r1, [pc, #212]	@ (80025d0 <HAL_GPIO_Init+0x2ec>)
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	089b      	lsrs	r3, r3, #2
 80024fe:	3302      	adds	r3, #2
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002506:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252a:	4a2f      	ldr	r2, [pc, #188]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002530:	4b2d      	ldr	r3, [pc, #180]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002554:	4a24      	ldr	r2, [pc, #144]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255a:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257e:	4a1a      	ldr	r2, [pc, #104]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002584:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a8:	4a0f      	ldr	r2, [pc, #60]	@ (80025e8 <HAL_GPIO_Init+0x304>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	f67f aea2 	bls.w	8002300 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3724      	adds	r7, #36	@ 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40020000 	.word	0x40020000
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800
 80025e0:	40020c00 	.word	0x40020c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e12b      	b.n	80028ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe ff06 	bl	8001488 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	@ 0x24
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b4:	f002 faea 	bl	8004c8c <HAL_RCC_GetPCLK1Freq>
 80026b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a81      	ldr	r2, [pc, #516]	@ (80028c4 <HAL_I2C_Init+0x274>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d807      	bhi.n	80026d4 <HAL_I2C_Init+0x84>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a80      	ldr	r2, [pc, #512]	@ (80028c8 <HAL_I2C_Init+0x278>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e006      	b.n	80026e2 <HAL_I2C_Init+0x92>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a7d      	ldr	r2, [pc, #500]	@ (80028cc <HAL_I2C_Init+0x27c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0e7      	b.n	80028ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a78      	ldr	r2, [pc, #480]	@ (80028d0 <HAL_I2C_Init+0x280>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a6a      	ldr	r2, [pc, #424]	@ (80028c4 <HAL_I2C_Init+0x274>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d802      	bhi.n	8002724 <HAL_I2C_Init+0xd4>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	e009      	b.n	8002738 <HAL_I2C_Init+0xe8>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a69      	ldr	r2, [pc, #420]	@ (80028d4 <HAL_I2C_Init+0x284>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	3301      	adds	r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800274a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	495c      	ldr	r1, [pc, #368]	@ (80028c4 <HAL_I2C_Init+0x274>)
 8002754:	428b      	cmp	r3, r1
 8002756:	d819      	bhi.n	800278c <HAL_I2C_Init+0x13c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e59      	subs	r1, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fbb1 f3f3 	udiv	r3, r1, r3
 8002766:	1c59      	adds	r1, r3, #1
 8002768:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800276c:	400b      	ands	r3, r1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_I2C_Init+0x138>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e59      	subs	r1, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002786:	e051      	b.n	800282c <HAL_I2C_Init+0x1dc>
 8002788:	2304      	movs	r3, #4
 800278a:	e04f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_I2C_Init+0x168>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e012      	b.n	80027de <HAL_I2C_Init+0x18e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Init+0x196>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e022      	b.n	800282c <HAL_I2C_Init+0x1dc>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10e      	bne.n	800280c <HAL_I2C_Init+0x1bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e58      	subs	r0, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	440b      	add	r3, r1
 80027fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002800:	3301      	adds	r3, #1
 8002802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002806:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800280a:	e00f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1e58      	subs	r0, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	0099      	lsls	r1, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	6809      	ldr	r1, [r1, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800285a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6911      	ldr	r1, [r2, #16]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	430b      	orrs	r3, r1
 800286e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	000186a0 	.word	0x000186a0
 80028c8:	001e847f 	.word	0x001e847f
 80028cc:	003d08ff 	.word	0x003d08ff
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7fe ffc6 	bl	800187c <HAL_GetTick>
 80028f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f040 80e0 	bne.w	8002ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	4970      	ldr	r1, [pc, #448]	@ (8002acc <HAL_I2C_Master_Transmit+0x1f4>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 f964 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	e0d3      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x50>
 8002924:	2302      	movs	r3, #2
 8002926:	e0cc      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800295c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2221      	movs	r2, #33	@ 0x21
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2210      	movs	r2, #16
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a50      	ldr	r2, [pc, #320]	@ (8002ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800298e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f89c 	bl	8002ad4 <I2C_MasterRequestWrite>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e08d      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029bc:	e066      	b.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa22 	bl	8002e0c <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11b      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	6a39      	ldr	r1, [r7, #32]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fa19 	bl	8002e9c <I2C_WaitOnBTFFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e01a      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d194      	bne.n	80029be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d006      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d003      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e00b      	b.n	8002b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b14:	2b12      	cmp	r3, #18
 8002b16:	d107      	bne.n	8002b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f84f 	bl	8002bd8 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4e:	d103      	bne.n	8002b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b56:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e035      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b64:	d108      	bne.n	8002b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e01b      	b.n	8002bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b78:	897b      	ldrh	r3, [r7, #10]
 8002b7a:	11db      	asrs	r3, r3, #7
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0306 	and.w	r3, r3, #6
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f063 030f 	orn	r3, r3, #15
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	490e      	ldr	r1, [pc, #56]	@ (8002bd0 <I2C_MasterRequestWrite+0xfc>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f898 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e010      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4907      	ldr	r1, [pc, #28]	@ (8002bd4 <I2C_MasterRequestWrite+0x100>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f888 	bl	8002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	00010008 	.word	0x00010008
 8002bd4:	00010002 	.word	0x00010002

08002bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	603b      	str	r3, [r7, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	e048      	b.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf0:	d044      	beq.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf2:	f7fe fe43 	bl	800187c <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d302      	bcc.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d139      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	0c1b      	lsrs	r3, r3, #16
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10d      	bne.n	8002c2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	43da      	mvns	r2, r3
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	e00c      	b.n	8002c48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	43da      	mvns	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d116      	bne.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e023      	b.n	8002cc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	0c1b      	lsrs	r3, r3, #16
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10d      	bne.n	8002ca2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	4013      	ands	r3, r2
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bf0c      	ite	eq
 8002c98:	2301      	moveq	r3, #1
 8002c9a:	2300      	movne	r3, #0
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	e00c      	b.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	43da      	mvns	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	4013      	ands	r3, r2
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	bf0c      	ite	eq
 8002cb4:	2301      	moveq	r3, #1
 8002cb6:	2300      	movne	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	461a      	mov	r2, r3
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d093      	beq.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cda:	e071      	b.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ce6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cea:	d123      	bne.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d20:	f043 0204 	orr.w	r2, r3, #4
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e067      	b.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d041      	beq.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3c:	f7fe fd9e 	bl	800187c <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d302      	bcc.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d136      	bne.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d10c      	bne.n	8002d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	43da      	mvns	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4013      	ands	r3, r2
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e00b      	b.n	8002d8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf14      	ite	ne
 8002d88:	2301      	movne	r3, #1
 8002d8a:	2300      	moveq	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d016      	beq.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dac:	f043 0220 	orr.w	r2, r3, #32
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e021      	b.n	8002e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	0c1b      	lsrs	r3, r3, #16
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d10c      	bne.n	8002de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	43da      	mvns	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e00b      	b.n	8002dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f47f af6d 	bne.w	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e18:	e034      	b.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f886 	bl	8002f2c <I2C_IsAcknowledgeFailed>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e034      	b.n	8002e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d028      	beq.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fe fd23 	bl	800187c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d11d      	bne.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b80      	cmp	r3, #128	@ 0x80
 8002e54:	d016      	beq.n	8002e84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8e:	2b80      	cmp	r3, #128	@ 0x80
 8002e90:	d1c3      	bne.n	8002e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ea8:	e034      	b.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f83e 	bl	8002f2c <I2C_IsAcknowledgeFailed>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e034      	b.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec0:	d028      	beq.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec2:	f7fe fcdb 	bl	800187c <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	68ba      	ldr	r2, [r7, #8]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d302      	bcc.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d11d      	bne.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	d016      	beq.n	8002f14 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f00:	f043 0220 	orr.w	r2, r3, #32
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e007      	b.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0304 	and.w	r3, r3, #4
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d1c3      	bne.n	8002eaa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f42:	d11b      	bne.n	8002f7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f68:	f043 0204 	orr.w	r2, r3, #4
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e000      	b.n	8002f7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af02      	add	r7, sp, #8
 8002f90:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e101      	b.n	80031a0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d106      	bne.n	8002fbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f005 fb7a 	bl	80086b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002fca:	d102      	bne.n	8002fd2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f001 ff83 	bl	8004ee2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6818      	ldr	r0, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	7c1a      	ldrb	r2, [r3, #16]
 8002fe4:	f88d 2000 	strb.w	r2, [sp]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fec:	f001 fe62 	bl	8004cb4 <USB_CoreInit>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d005      	beq.n	8003002 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e0ce      	b.n	80031a0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2100      	movs	r1, #0
 8003008:	4618      	mov	r0, r3
 800300a:	f001 ff7b 	bl	8004f04 <USB_SetCurrentMode>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d005      	beq.n	8003020 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2202      	movs	r2, #2
 8003018:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0bf      	b.n	80031a0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]
 8003024:	e04a      	b.n	80030bc <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	3315      	adds	r3, #21
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	4413      	add	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3314      	adds	r3, #20
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	7bfb      	ldrb	r3, [r7, #15]
 8003052:	b298      	uxth	r0, r3
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	332e      	adds	r3, #46	@ 0x2e
 8003062:	4602      	mov	r2, r0
 8003064:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003066:	7bfa      	ldrb	r2, [r7, #15]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	3318      	adds	r3, #24
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	331c      	adds	r3, #28
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800308e:	7bfa      	ldrb	r2, [r7, #15]
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	4613      	mov	r3, r2
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	4413      	add	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	440b      	add	r3, r1
 800309c:	3320      	adds	r3, #32
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a2:	7bfa      	ldrb	r2, [r7, #15]
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	00db      	lsls	r3, r3, #3
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	3324      	adds	r3, #36	@ 0x24
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b6:	7bfb      	ldrb	r3, [r7, #15]
 80030b8:	3301      	adds	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	791b      	ldrb	r3, [r3, #4]
 80030c0:	7bfa      	ldrb	r2, [r7, #15]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d3af      	bcc.n	8003026 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
 80030ca:	e044      	b.n	8003156 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e2:	7bfa      	ldrb	r2, [r7, #15]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003124:	7bfa      	ldrb	r2, [r7, #15]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	3301      	adds	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	791b      	ldrb	r3, [r3, #4]
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3b5      	bcc.n	80030cc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	7c1a      	ldrb	r2, [r3, #16]
 8003168:	f88d 2000 	strb.w	r2, [sp]
 800316c:	3304      	adds	r3, #4
 800316e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003170:	f001 ff14 	bl	8004f9c <USB_DevInit>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2202      	movs	r2, #2
 800317e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e00c      	b.n	80031a0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4618      	mov	r0, r3
 800319a:	f002 ff58 	bl	800604e <USB_DevDisconnect>

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d101      	bne.n	80031c4 <HAL_PCD_Start+0x1c>
 80031c0:	2302      	movs	r3, #2
 80031c2:	e022      	b.n	800320a <HAL_PCD_Start+0x62>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d009      	beq.n	80031ec <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 fe65 	bl	8004ec0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 ff06 	bl	800600c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003212:	b590      	push	{r4, r7, lr}
 8003214:	b08d      	sub	sp, #52	@ 0x34
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f002 ffc4 	bl	80061b6 <USB_GetMode>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 848c 	bne.w	8003b4e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f002 ff28 	bl	8006090 <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 8482 	beq.w	8003b4c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	0a1b      	lsrs	r3, r3, #8
 8003252:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4618      	mov	r0, r3
 8003262:	f002 ff15 	bl	8006090 <USB_ReadInterrupts>
 8003266:	4603      	mov	r3, r0
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d107      	bne.n	8003280 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695a      	ldr	r2, [r3, #20]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f002 0202 	and.w	r2, r2, #2
 800327e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f002 ff03 	bl	8006090 <USB_ReadInterrupts>
 800328a:	4603      	mov	r3, r0
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	2b10      	cmp	r3, #16
 8003292:	d161      	bne.n	8003358 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 0210 	bic.w	r2, r2, #16
 80032a2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	0c5b      	lsrs	r3, r3, #17
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d124      	bne.n	800331a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80032d6:	4013      	ands	r3, r2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d035      	beq.n	8003348 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	461a      	mov	r2, r3
 80032ee:	6a38      	ldr	r0, [r7, #32]
 80032f0:	f002 fd3a 	bl	8005d68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003300:	441a      	add	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	695a      	ldr	r2, [r3, #20]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003312:	441a      	add	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	615a      	str	r2, [r3, #20]
 8003318:	e016      	b.n	8003348 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	0c5b      	lsrs	r3, r3, #17
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	2b06      	cmp	r3, #6
 8003324:	d110      	bne.n	8003348 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800332c:	2208      	movs	r2, #8
 800332e:	4619      	mov	r1, r3
 8003330:	6a38      	ldr	r0, [r7, #32]
 8003332:	f002 fd19 	bl	8005d68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003342:	441a      	add	r2, r3
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	699a      	ldr	r2, [r3, #24]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 0210 	orr.w	r2, r2, #16
 8003356:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f002 fe97 	bl	8006090 <USB_ReadInterrupts>
 8003362:	4603      	mov	r3, r0
 8003364:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003368:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800336c:	f040 80a7 	bne.w	80034be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f002 fe9c 	bl	80060b6 <USB_ReadDevAllOutEpInterrupt>
 800337e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003380:	e099      	b.n	80034b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 808e 	beq.w	80034aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f002 fec0 	bl	800611e <USB_ReadDevOutEPInterrupt>
 800339e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	015a      	lsls	r2, r3, #5
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4413      	add	r3, r2
 80033b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033b6:	461a      	mov	r2, r3
 80033b8:	2301      	movs	r3, #1
 80033ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fea2 	bl	8004108 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033da:	461a      	mov	r2, r3
 80033dc:	2308      	movs	r3, #8
 80033de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 ff78 	bl	80042d8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d008      	beq.n	8003404 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2310      	movs	r3, #16
 8003402:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d030      	beq.n	8003470 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003416:	2b80      	cmp	r3, #128	@ 0x80
 8003418:	d109      	bne.n	800342e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	69fa      	ldr	r2, [r7, #28]
 8003424:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003428:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800342c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800342e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003430:	4613      	mov	r3, r2
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	4413      	add	r3, r2
 8003440:	3304      	adds	r3, #4
 8003442:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	78db      	ldrb	r3, [r3, #3]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d108      	bne.n	800345e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	2200      	movs	r2, #0
 8003450:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003454:	b2db      	uxtb	r3, r3
 8003456:	4619      	mov	r1, r3
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f005 fa25 	bl	80088a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	015a      	lsls	r2, r3, #5
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800346a:	461a      	mov	r2, r3
 800346c:	2302      	movs	r3, #2
 800346e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b00      	cmp	r3, #0
 8003478:	d008      	beq.n	800348c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	015a      	lsls	r2, r3, #5
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	4413      	add	r3, r2
 8003482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003486:	461a      	mov	r2, r3
 8003488:	2320      	movs	r3, #32
 800348a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ac:	3301      	adds	r3, #1
 80034ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f47f af62 	bne.w	8003382 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f002 fde4 	bl	8006090 <USB_ReadInterrupts>
 80034c8:	4603      	mov	r3, r0
 80034ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80034d2:	f040 80db 	bne.w	800368c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f002 fe05 	bl	80060ea <USB_ReadDevAllInEpInterrupt>
 80034e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80034e6:	e0cd      	b.n	8003684 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80c2 	beq.w	8003678 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	4611      	mov	r1, r2
 80034fe:	4618      	mov	r0, r3
 8003500:	f002 fe2b 	bl	800615a <USB_ReadDevInEPInterrupt>
 8003504:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d057      	beq.n	80035c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	43db      	mvns	r3, r3
 800352a:	69f9      	ldr	r1, [r7, #28]
 800352c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003530:	4013      	ands	r3, r2
 8003532:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003540:	461a      	mov	r2, r3
 8003542:	2301      	movs	r3, #1
 8003544:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	799b      	ldrb	r3, [r3, #6]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d132      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3320      	adds	r3, #32
 800355e:	6819      	ldr	r1, [r3, #0]
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4403      	add	r3, r0
 800356e:	331c      	adds	r3, #28
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4419      	add	r1, r3
 8003574:	6878      	ldr	r0, [r7, #4]
 8003576:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003578:	4613      	mov	r3, r2
 800357a:	00db      	lsls	r3, r3, #3
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4403      	add	r3, r0
 8003582:	3320      	adds	r3, #32
 8003584:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	2b00      	cmp	r3, #0
 800358a:	d113      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x3a2>
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3324      	adds	r3, #36	@ 0x24
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d108      	bne.n	80035b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80035ac:	461a      	mov	r2, r3
 80035ae:	2101      	movs	r1, #1
 80035b0:	f002 fe32 	bl	8006218 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f005 f8f9 	bl	80087b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d008      	beq.n	80035dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	015a      	lsls	r2, r3, #5
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	4413      	add	r3, r2
 80035d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035d6:	461a      	mov	r2, r3
 80035d8:	2308      	movs	r3, #8
 80035da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d008      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035f2:	461a      	mov	r2, r3
 80035f4:	2310      	movs	r3, #16
 80035f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800360e:	461a      	mov	r2, r3
 8003610:	2340      	movs	r3, #64	@ 0x40
 8003612:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d023      	beq.n	8003666 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800361e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003620:	6a38      	ldr	r0, [r7, #32]
 8003622:	f001 fe1f 	bl	8005264 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003628:	4613      	mov	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	3310      	adds	r3, #16
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4413      	add	r3, r2
 8003636:	3304      	adds	r3, #4
 8003638:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	78db      	ldrb	r3, [r3, #3]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d108      	bne.n	8003654 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4619      	mov	r1, r3
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f005 f93c 	bl	80088cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003656:	015a      	lsls	r2, r3, #5
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	4413      	add	r3, r2
 800365c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003660:	461a      	mov	r2, r3
 8003662:	2302      	movs	r3, #2
 8003664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003670:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fcbb 	bl	8003fee <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367a:	3301      	adds	r3, #1
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800367e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003686:	2b00      	cmp	r3, #0
 8003688:	f47f af2e 	bne.w	80034e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f002 fcfd 	bl	8006090 <USB_ReadInterrupts>
 8003696:	4603      	mov	r3, r0
 8003698:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800369c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80036a0:	d122      	bne.n	80036e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d108      	bne.n	80036d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036c8:	2100      	movs	r1, #0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fea2 	bl	8004414 <HAL_PCDEx_LPM_Callback>
 80036d0:	e002      	b.n	80036d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f005 f8da 	bl	800888c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80036e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 fccf 	bl	8006090 <USB_ReadInterrupts>
 80036f2:	4603      	mov	r3, r0
 80036f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036fc:	d112      	bne.n	8003724 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d102      	bne.n	8003714 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f005 f896 	bl	8008840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003722:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f002 fcb1 	bl	8006090 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003738:	f040 80b7 	bne.w	80038aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	69fa      	ldr	r2, [r7, #28]
 8003746:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2110      	movs	r1, #16
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fd84 	bl	8005264 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003760:	e046      	b.n	80037f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003774:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003790:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003794:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037a2:	461a      	mov	r2, r3
 80037a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80037a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ba:	0151      	lsls	r1, r2, #5
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	440a      	add	r2, r1
 80037c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80037c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037cc:	015a      	lsls	r2, r3, #5
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	4413      	add	r3, r2
 80037d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037da:	0151      	lsls	r1, r2, #5
 80037dc:	69fa      	ldr	r2, [r7, #28]
 80037de:	440a      	add	r2, r1
 80037e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80037e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80037e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	3301      	adds	r3, #1
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	791b      	ldrb	r3, [r3, #4]
 80037f4:	461a      	mov	r2, r3
 80037f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d3b2      	bcc.n	8003762 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	69fa      	ldr	r2, [r7, #28]
 8003806:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800380a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800380e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	7bdb      	ldrb	r3, [r3, #15]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d016      	beq.n	8003846 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800381e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003828:	f043 030b 	orr.w	r3, r3, #11
 800382c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003838:	69fa      	ldr	r2, [r7, #28]
 800383a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800383e:	f043 030b 	orr.w	r3, r3, #11
 8003842:	6453      	str	r3, [r2, #68]	@ 0x44
 8003844:	e015      	b.n	8003872 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	69fa      	ldr	r2, [r7, #28]
 8003850:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003854:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003858:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800385c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800386c:	f043 030b 	orr.w	r3, r3, #11
 8003870:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003880:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003884:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003894:	461a      	mov	r2, r3
 8003896:	f002 fcbf 	bl	8006218 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80038a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 fbee 	bl	8006090 <USB_ReadInterrupts>
 80038b4:	4603      	mov	r3, r0
 80038b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038be:	d123      	bne.n	8003908 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4618      	mov	r0, r3
 80038c6:	f002 fc84 	bl	80061d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f001 fd41 	bl	8005356 <USB_GetDevSpeed>
 80038d4:	4603      	mov	r3, r0
 80038d6:	461a      	mov	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681c      	ldr	r4, [r3, #0]
 80038e0:	f001 f9c8 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 80038e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ea:	461a      	mov	r2, r3
 80038ec:	4620      	mov	r0, r4
 80038ee:	f001 fa45 	bl	8004d7c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f004 ff85 	bl	8008802 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003906:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f002 fbbf 	bl	8006090 <USB_ReadInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b08      	cmp	r3, #8
 800391a:	d10a      	bne.n	8003932 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f004 ff62 	bl	80087e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695a      	ldr	r2, [r3, #20]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f002 0208 	and.w	r2, r2, #8
 8003930:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f002 fbaa 	bl	8006090 <USB_ReadInterrupts>
 800393c:	4603      	mov	r3, r0
 800393e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003942:	2b80      	cmp	r3, #128	@ 0x80
 8003944:	d123      	bne.n	800398e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003952:	2301      	movs	r3, #1
 8003954:	627b      	str	r3, [r7, #36]	@ 0x24
 8003956:	e014      	b.n	8003982 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800395c:	4613      	mov	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	4413      	add	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	b2db      	uxtb	r3, r3
 8003974:	4619      	mov	r1, r3
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 fb08 	bl	8003f8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	3301      	adds	r3, #1
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	791b      	ldrb	r3, [r3, #4]
 8003986:	461a      	mov	r2, r3
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	4293      	cmp	r3, r2
 800398c:	d3e4      	bcc.n	8003958 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f002 fb7c 	bl	8006090 <USB_ReadInterrupts>
 8003998:	4603      	mov	r3, r0
 800399a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800399e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80039a2:	d13c      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a4:	2301      	movs	r3, #1
 80039a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a8:	e02b      	b.n	8003a02 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3318      	adds	r3, #24
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d115      	bne.n	80039fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	da12      	bge.n	80039fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3317      	adds	r3, #23
 80039e6:	2201      	movs	r2, #1
 80039e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4619      	mov	r1, r3
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fac8 	bl	8003f8c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	3301      	adds	r3, #1
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	791b      	ldrb	r3, [r3, #4]
 8003a06:	461a      	mov	r2, r3
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d3cd      	bcc.n	80039aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003a1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f002 fb34 	bl	8006090 <USB_ReadInterrupts>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a32:	d156      	bne.n	8003ae2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a34:	2301      	movs	r3, #1
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a38:	e045      	b.n	8003ac6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d12e      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	da2b      	bge.n	8003ac0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003a74:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d121      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003a8e:	2201      	movs	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003abc:	6053      	str	r3, [r2, #4]
            break;
 8003abe:	e008      	b.n	8003ad2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	791b      	ldrb	r3, [r3, #4]
 8003aca:	461a      	mov	r2, r3
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d3b3      	bcc.n	8003a3a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f002 fad2 	bl	8006090 <USB_ReadInterrupts>
 8003aec:	4603      	mov	r3, r0
 8003aee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af6:	d10a      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f004 fef9 	bl	80088f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695a      	ldr	r2, [r3, #20]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f002 fabc 	bl	8006090 <USB_ReadInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d115      	bne.n	8003b4e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d002      	beq.n	8003b3a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f004 fee9 	bl	800890c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6859      	ldr	r1, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	e000      	b.n	8003b4e <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b4c:	bf00      	nop
    }
  }
}
 8003b4e:	3734      	adds	r7, #52	@ 0x34
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}

08003b54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_PCD_SetAddress+0x1a>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e012      	b.n	8003b94 <HAL_PCD_SetAddress+0x40>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	78fa      	ldrb	r2, [r7, #3]
 8003b82:	4611      	mov	r1, r2
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 fa1b 	bl	8005fc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	4608      	mov	r0, r1
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	4603      	mov	r3, r0
 8003bac:	70fb      	strb	r3, [r7, #3]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	803b      	strh	r3, [r7, #0]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	da0f      	bge.n	8003be2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	4613      	mov	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	4413      	add	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	3310      	adds	r3, #16
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	705a      	strb	r2, [r3, #1]
 8003be0:	e00f      	b.n	8003c02 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be2:	78fb      	ldrb	r3, [r7, #3]
 8003be4:	f003 020f 	and.w	r2, r3, #15
 8003be8:	4613      	mov	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	4413      	add	r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c0e:	883a      	ldrh	r2, [r7, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	78ba      	ldrb	r2, [r7, #2]
 8003c18:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d004      	beq.n	8003c2c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c2c:	78bb      	ldrb	r3, [r7, #2]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d102      	bne.n	8003c38 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_PCD_EP_Open+0xaa>
 8003c42:	2302      	movs	r3, #2
 8003c44:	e00e      	b.n	8003c64 <HAL_PCD_EP_Open+0xc8>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 fba3 	bl	80053a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003c62:	7afb      	ldrb	r3, [r7, #11]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	da0f      	bge.n	8003ca0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 020f 	and.w	r2, r3, #15
 8003c86:	4613      	mov	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	4413      	add	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	3310      	adds	r3, #16
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	4413      	add	r3, r2
 8003c94:	3304      	adds	r3, #4
 8003c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	705a      	strb	r2, [r3, #1]
 8003c9e:	e00f      	b.n	8003cc0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca0:	78fb      	ldrb	r3, [r7, #3]
 8003ca2:	f003 020f 	and.w	r2, r3, #15
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	f003 030f 	and.w	r3, r3, #15
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_PCD_EP_Close+0x6e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e00e      	b.n	8003cf8 <HAL_PCD_EP_Close+0x8c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68f9      	ldr	r1, [r7, #12]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 fbe1 	bl	80054b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d10:	7afb      	ldrb	r3, [r7, #11]
 8003d12:	f003 020f 	and.w	r2, r3, #15
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	3304      	adds	r3, #4
 8003d28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	f003 030f 	and.w	r3, r3, #15
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	799b      	ldrb	r3, [r3, #6]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d102      	bne.n	8003d5c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	799b      	ldrb	r3, [r3, #6]
 8003d64:	461a      	mov	r2, r3
 8003d66:	6979      	ldr	r1, [r7, #20]
 8003d68:	f001 fc7e 	bl	8005668 <USB_EPStartXfer>

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	6879      	ldr	r1, [r7, #4]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003d98:	681b      	ldr	r3, [r3, #0]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr

08003da6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b086      	sub	sp, #24
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	60f8      	str	r0, [r7, #12]
 8003dae:	607a      	str	r2, [r7, #4]
 8003db0:	603b      	str	r3, [r7, #0]
 8003db2:	460b      	mov	r3, r1
 8003db4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003db6:	7afb      	ldrb	r3, [r7, #11]
 8003db8:	f003 020f 	and.w	r2, r3, #15
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	3310      	adds	r3, #16
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	3304      	adds	r3, #4
 8003dcc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2201      	movs	r2, #1
 8003de4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	799b      	ldrb	r3, [r3, #6]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d102      	bne.n	8003e00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6818      	ldr	r0, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	799b      	ldrb	r3, [r3, #6]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	6979      	ldr	r1, [r7, #20]
 8003e0c:	f001 fc2c 	bl	8005668 <USB_EPStartXfer>

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 030f 	and.w	r3, r3, #15
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	7912      	ldrb	r2, [r2, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d901      	bls.n	8003e38 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e04f      	b.n	8003ed8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0f      	bge.n	8003e60 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3310      	adds	r3, #16
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
 8003e5e:	e00d      	b.n	8003e7c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	4413      	add	r3, r2
 8003e72:	3304      	adds	r3, #4
 8003e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	b2da      	uxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <HAL_PCD_EP_SetStall+0x82>
 8003e98:	2302      	movs	r3, #2
 8003e9a:	e01d      	b.n	8003ed8 <HAL_PCD_EP_SetStall+0xbe>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68f9      	ldr	r1, [r7, #12]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f001 ffb4 	bl	8005e18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6818      	ldr	r0, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	7999      	ldrb	r1, [r3, #6]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ec8:	461a      	mov	r2, r3
 8003eca:	f002 f9a5 	bl	8006218 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	7912      	ldrb	r2, [r2, #4]
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e042      	b.n	8003f84 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da0f      	bge.n	8003f26 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	f003 020f 	and.w	r2, r3, #15
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	3310      	adds	r3, #16
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	705a      	strb	r2, [r3, #1]
 8003f24:	e00f      	b.n	8003f46 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	f003 020f 	and.w	r2, r3, #15
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_PCD_EP_ClrStall+0x86>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e00e      	b.n	8003f84 <HAL_PCD_EP_ClrStall+0xa4>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f001 ffbd 	bl	8005ef4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da0c      	bge.n	8003fba <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3310      	adds	r3, #16
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	e00c      	b.n	8003fd4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fba:	78fb      	ldrb	r3, [r7, #3]
 8003fbc:	f003 020f 	and.w	r2, r3, #15
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	4413      	add	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	4413      	add	r3, r2
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68f9      	ldr	r1, [r7, #12]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fddc 	bl	8005b98 <USB_EPStopXfer>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fe4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b08a      	sub	sp, #40	@ 0x28
 8003ff2:	af02      	add	r7, sp, #8
 8003ff4:	6078      	str	r0, [r7, #4]
 8003ff6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	3310      	adds	r3, #16
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	4413      	add	r3, r2
 8004012:	3304      	adds	r3, #4
 8004014:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	429a      	cmp	r2, r3
 8004020:	d901      	bls.n	8004026 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06b      	b.n	80040fe <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	429a      	cmp	r2, r3
 800403a:	d902      	bls.n	8004042 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3303      	adds	r3, #3
 8004046:	089b      	lsrs	r3, r3, #2
 8004048:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800404a:	e02a      	b.n	80040a2 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	429a      	cmp	r2, r3
 8004060:	d902      	bls.n	8004068 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	3303      	adds	r3, #3
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	68d9      	ldr	r1, [r3, #12]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	4603      	mov	r3, r0
 8004084:	6978      	ldr	r0, [r7, #20]
 8004086:	f001 fe31 	bl	8005cec <USB_WritePacket>

    ep->xfer_buff  += len;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	441a      	add	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	695a      	ldr	r2, [r3, #20]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	015a      	lsls	r2, r3, #5
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4413      	add	r3, r2
 80040aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d809      	bhi.n	80040cc <PCD_WriteEmptyTxFifo+0xde>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	695a      	ldr	r2, [r3, #20]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d203      	bcs.n	80040cc <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1bf      	bne.n	800404c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691a      	ldr	r2, [r3, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d811      	bhi.n	80040fc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	2201      	movs	r2, #1
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	6939      	ldr	r1, [r7, #16]
 80040f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040f8:	4013      	ands	r3, r2
 80040fa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	333c      	adds	r3, #60	@ 0x3c
 8004120:	3304      	adds	r3, #4
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	799b      	ldrb	r3, [r3, #6]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d17b      	bne.n	8004236 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	4a61      	ldr	r2, [pc, #388]	@ (80042d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800414c:	4293      	cmp	r3, r2
 800414e:	f240 80b9 	bls.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80b3 	beq.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800416a:	461a      	mov	r2, r3
 800416c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004170:	6093      	str	r3, [r2, #8]
 8004172:	e0a7      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f003 0320 	and.w	r3, r3, #32
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800418a:	461a      	mov	r2, r3
 800418c:	2320      	movs	r3, #32
 800418e:	6093      	str	r3, [r2, #8]
 8004190:	e098      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 8093 	bne.w	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	4a4b      	ldr	r2, [pc, #300]	@ (80042d0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d90f      	bls.n	80041c6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041c2:	6093      	str	r3, [r2, #8]
 80041c4:	e07e      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4413      	add	r3, r2
 80041d8:	3304      	adds	r3, #4
 80041da:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1a      	ldr	r2, [r3, #32]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	0159      	lsls	r1, r3, #5
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	440b      	add	r3, r1
 80041e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d114      	bne.n	8004228 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004210:	461a      	mov	r2, r3
 8004212:	2101      	movs	r1, #1
 8004214:	f002 f800 	bl	8006218 <USB_EP0_OutStart>
 8004218:	e006      	b.n	8004228 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	441a      	add	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f004 faa4 	bl	800877c <HAL_PCD_DataOutStageCallback>
 8004234:	e046      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d124      	bne.n	8004288 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	015a      	lsls	r2, r3, #5
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004254:	461a      	mov	r2, r3
 8004256:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800425a:	6093      	str	r3, [r2, #8]
 800425c:	e032      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004274:	461a      	mov	r2, r3
 8004276:	2320      	movs	r3, #32
 8004278:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	b2db      	uxtb	r3, r3
 800427e:	4619      	mov	r1, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f004 fa7b 	bl	800877c <HAL_PCD_DataOutStageCallback>
 8004286:	e01d      	b.n	80042c4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d114      	bne.n	80042b8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d108      	bne.n	80042b8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042b0:	461a      	mov	r2, r3
 80042b2:	2100      	movs	r1, #0
 80042b4:	f001 ffb0 	bl	8006218 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	4619      	mov	r1, r3
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f004 fa5c 	bl	800877c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3720      	adds	r7, #32
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	4f54300a 	.word	0x4f54300a
 80042d4:	4f54310a 	.word	0x4f54310a

080042d8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	333c      	adds	r3, #60	@ 0x3c
 80042f0:	3304      	adds	r3, #4
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <PCD_EP_OutSetupPacket_int+0x88>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d90e      	bls.n	800432c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004314:	2b00      	cmp	r3, #0
 8004316:	d009      	beq.n	800432c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004324:	461a      	mov	r2, r3
 8004326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800432a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f004 fa13 	bl	8008758 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <PCD_EP_OutSetupPacket_int+0x88>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d90c      	bls.n	8004354 <PCD_EP_OutSetupPacket_int+0x7c>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	799b      	ldrb	r3, [r3, #6]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d108      	bne.n	8004354 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800434c:	461a      	mov	r2, r3
 800434e:	2101      	movs	r1, #1
 8004350:	f001 ff62 	bl	8006218 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	4f54300a 	.word	0x4f54300a

08004364 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	460b      	mov	r3, r1
 800436e:	70fb      	strb	r3, [r7, #3]
 8004370:	4613      	mov	r3, r2
 8004372:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d107      	bne.n	8004392 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004382:	883b      	ldrh	r3, [r7, #0]
 8004384:	0419      	lsls	r1, r3, #16
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	430a      	orrs	r2, r1
 800438e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004390:	e028      	b.n	80043e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	68ba      	ldr	r2, [r7, #8]
 800439c:	4413      	add	r3, r2
 800439e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a0:	2300      	movs	r3, #0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e00d      	b.n	80043c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	3340      	adds	r3, #64	@ 0x40
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	4413      	add	r3, r2
 80043ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	3301      	adds	r3, #1
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	7bfa      	ldrb	r2, [r7, #15]
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	3b01      	subs	r3, #1
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d3ec      	bcc.n	80043a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043cc:	883b      	ldrh	r3, [r7, #0]
 80043ce:	0418      	lsls	r0, r3, #16
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	78fb      	ldrb	r3, [r7, #3]
 80043d6:	3b01      	subs	r3, #1
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4302      	orrs	r2, r0
 80043dc:	3340      	adds	r3, #64	@ 0x40
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043f2:	b480      	push	{r7}
 80043f4:	b083      	sub	sp, #12
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	460b      	mov	r3, r1
 80043fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d101      	bne.n	800443e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e267      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d075      	beq.n	8004536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444a:	4b88      	ldr	r3, [pc, #544]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b04      	cmp	r3, #4
 8004454:	d00c      	beq.n	8004470 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004456:	4b85      	ldr	r3, [pc, #532]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d112      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004462:	4b82      	ldr	r3, [pc, #520]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800446a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800446e:	d10b      	bne.n	8004488 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004470:	4b7e      	ldr	r3, [pc, #504]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d05b      	beq.n	8004534 <HAL_RCC_OscConfig+0x108>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d157      	bne.n	8004534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e242      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004490:	d106      	bne.n	80044a0 <HAL_RCC_OscConfig+0x74>
 8004492:	4b76      	ldr	r3, [pc, #472]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a75      	ldr	r2, [pc, #468]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	e01d      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCC_OscConfig+0x98>
 80044aa:	4b70      	ldr	r3, [pc, #448]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a6f      	ldr	r2, [pc, #444]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4b6d      	ldr	r3, [pc, #436]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a6c      	ldr	r2, [pc, #432]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	e00b      	b.n	80044dc <HAL_RCC_OscConfig+0xb0>
 80044c4:	4b69      	ldr	r3, [pc, #420]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a68      	ldr	r2, [pc, #416]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b66      	ldr	r3, [pc, #408]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a65      	ldr	r2, [pc, #404]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80044d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e4:	f7fd f9ca 	bl	800187c <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ec:	f7fd f9c6 	bl	800187c <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	@ 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e207      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fe:	4b5b      	ldr	r3, [pc, #364]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0xc0>
 800450a:	e014      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450c:	f7fd f9b6 	bl	800187c <HAL_GetTick>
 8004510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004514:	f7fd f9b2 	bl	800187c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	@ 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e1f3      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004526:	4b51      	ldr	r3, [pc, #324]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f0      	bne.n	8004514 <HAL_RCC_OscConfig+0xe8>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d063      	beq.n	800460a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004542:	4b4a      	ldr	r3, [pc, #296]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00b      	beq.n	8004566 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800454e:	4b47      	ldr	r3, [pc, #284]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d11c      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455a:	4b44      	ldr	r3, [pc, #272]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d116      	bne.n	8004594 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004566:	4b41      	ldr	r3, [pc, #260]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d001      	beq.n	800457e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e1c7      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b3b      	ldr	r3, [pc, #236]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	4937      	ldr	r1, [pc, #220]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004592:	e03a      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d020      	beq.n	80045de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800459c:	4b34      	ldr	r3, [pc, #208]	@ (8004670 <HAL_RCC_OscConfig+0x244>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fd f96b 	bl	800187c <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fd f967 	bl	800187c <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e1a8      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045bc:	4b2b      	ldr	r3, [pc, #172]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c8:	4b28      	ldr	r3, [pc, #160]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4925      	ldr	r1, [pc, #148]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]
 80045dc:	e015      	b.n	800460a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045de:	4b24      	ldr	r3, [pc, #144]	@ (8004670 <HAL_RCC_OscConfig+0x244>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd f94a 	bl	800187c <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd f946 	bl	800187c <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e187      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045fe:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d036      	beq.n	8004684 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d016      	beq.n	800464c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800461e:	4b15      	ldr	r3, [pc, #84]	@ (8004674 <HAL_RCC_OscConfig+0x248>)
 8004620:	2201      	movs	r2, #1
 8004622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004624:	f7fd f92a 	bl	800187c <HAL_GetTick>
 8004628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	e008      	b.n	800463e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800462c:	f7fd f926 	bl	800187c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	2b02      	cmp	r3, #2
 8004638:	d901      	bls.n	800463e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e167      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <HAL_RCC_OscConfig+0x240>)
 8004640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0f0      	beq.n	800462c <HAL_RCC_OscConfig+0x200>
 800464a:	e01b      	b.n	8004684 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464c:	4b09      	ldr	r3, [pc, #36]	@ (8004674 <HAL_RCC_OscConfig+0x248>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004652:	f7fd f913 	bl	800187c <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004658:	e00e      	b.n	8004678 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465a:	f7fd f90f 	bl	800187c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d907      	bls.n	8004678 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e150      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
 800466c:	40023800 	.word	0x40023800
 8004670:	42470000 	.word	0x42470000
 8004674:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	4b88      	ldr	r3, [pc, #544]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800467a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1ea      	bne.n	800465a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8097 	beq.w	80047c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004696:	4b81      	ldr	r3, [pc, #516]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10f      	bne.n	80046c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	4b7d      	ldr	r3, [pc, #500]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	4a7c      	ldr	r2, [pc, #496]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80046b2:	4b7a      	ldr	r3, [pc, #488]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	60bb      	str	r3, [r7, #8]
 80046bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046be:	2301      	movs	r3, #1
 80046c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c2:	4b77      	ldr	r3, [pc, #476]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d118      	bne.n	8004700 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ce:	4b74      	ldr	r3, [pc, #464]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a73      	ldr	r2, [pc, #460]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046da:	f7fd f8cf 	bl	800187c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e2:	f7fd f8cb 	bl	800187c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e10c      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f4:	4b6a      	ldr	r3, [pc, #424]	@ (80048a0 <HAL_RCC_OscConfig+0x474>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0f0      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d106      	bne.n	8004716 <HAL_RCC_OscConfig+0x2ea>
 8004708:	4b64      	ldr	r3, [pc, #400]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470c:	4a63      	ldr	r2, [pc, #396]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800470e:	f043 0301 	orr.w	r3, r3, #1
 8004712:	6713      	str	r3, [r2, #112]	@ 0x70
 8004714:	e01c      	b.n	8004750 <HAL_RCC_OscConfig+0x324>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2b05      	cmp	r3, #5
 800471c:	d10c      	bne.n	8004738 <HAL_RCC_OscConfig+0x30c>
 800471e:	4b5f      	ldr	r3, [pc, #380]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004722:	4a5e      	ldr	r2, [pc, #376]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	6713      	str	r3, [r2, #112]	@ 0x70
 800472a:	4b5c      	ldr	r3, [pc, #368]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800472c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472e:	4a5b      	ldr	r2, [pc, #364]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	6713      	str	r3, [r2, #112]	@ 0x70
 8004736:	e00b      	b.n	8004750 <HAL_RCC_OscConfig+0x324>
 8004738:	4b58      	ldr	r3, [pc, #352]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800473c:	4a57      	ldr	r2, [pc, #348]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800473e:	f023 0301 	bic.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	@ 0x70
 8004744:	4b55      	ldr	r3, [pc, #340]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004748:	4a54      	ldr	r2, [pc, #336]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 800474a:	f023 0304 	bic.w	r3, r3, #4
 800474e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004758:	f7fd f890 	bl	800187c <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800475e:	e00a      	b.n	8004776 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004760:	f7fd f88c 	bl	800187c <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476e:	4293      	cmp	r3, r2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e0cb      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004776:	4b49      	ldr	r3, [pc, #292]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0ee      	beq.n	8004760 <HAL_RCC_OscConfig+0x334>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004784:	f7fd f87a 	bl	800187c <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fd f876 	bl	800187c <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e0b5      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a2:	4b3e      	ldr	r3, [pc, #248]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1ee      	bne.n	800478c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b4:	4b39      	ldr	r3, [pc, #228]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b8:	4a38      	ldr	r2, [pc, #224]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80a1 	beq.w	800490c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ca:	4b34      	ldr	r3, [pc, #208]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d05c      	beq.n	8004890 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d141      	bne.n	8004862 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047de:	4b31      	ldr	r3, [pc, #196]	@ (80048a4 <HAL_RCC_OscConfig+0x478>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e4:	f7fd f84a 	bl	800187c <HAL_GetTick>
 80047e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	e008      	b.n	80047fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ec:	f7fd f846 	bl	800187c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e087      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047fe:	4b27      	ldr	r3, [pc, #156]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f0      	bne.n	80047ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	019b      	lsls	r3, r3, #6
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004820:	085b      	lsrs	r3, r3, #1
 8004822:	3b01      	subs	r3, #1
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	061b      	lsls	r3, r3, #24
 800482e:	491b      	ldr	r1, [pc, #108]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004830:	4313      	orrs	r3, r2
 8004832:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004834:	4b1b      	ldr	r3, [pc, #108]	@ (80048a4 <HAL_RCC_OscConfig+0x478>)
 8004836:	2201      	movs	r2, #1
 8004838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483a:	f7fd f81f 	bl	800187c <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004842:	f7fd f81b 	bl	800187c <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e05c      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004854:	4b11      	ldr	r3, [pc, #68]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0f0      	beq.n	8004842 <HAL_RCC_OscConfig+0x416>
 8004860:	e054      	b.n	800490c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004862:	4b10      	ldr	r3, [pc, #64]	@ (80048a4 <HAL_RCC_OscConfig+0x478>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004868:	f7fd f808 	bl	800187c <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004870:	f7fd f804 	bl	800187c <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e045      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004882:	4b06      	ldr	r3, [pc, #24]	@ (800489c <HAL_RCC_OscConfig+0x470>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x444>
 800488e:	e03d      	b.n	800490c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e038      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
 800489c:	40023800 	.word	0x40023800
 80048a0:	40007000 	.word	0x40007000
 80048a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x4ec>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d028      	beq.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d121      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d11a      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048d8:	4013      	ands	r3, r2
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d111      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ee:	085b      	lsrs	r3, r3, #1
 80048f0:	3b01      	subs	r3, #1
 80048f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d107      	bne.n	8004908 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d001      	beq.n	800490c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40023800 	.word	0x40023800

0800491c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0cc      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004930:	4b68      	ldr	r3, [pc, #416]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d90c      	bls.n	8004958 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493e:	4b65      	ldr	r3, [pc, #404]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	b2d2      	uxtb	r2, r2
 8004944:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004946:	4b63      	ldr	r3, [pc, #396]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d001      	beq.n	8004958 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0b8      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0304 	and.w	r3, r3, #4
 800496c:	2b00      	cmp	r3, #0
 800496e:	d005      	beq.n	800497c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004970:	4b59      	ldr	r3, [pc, #356]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4a58      	ldr	r2, [pc, #352]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800497a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0308 	and.w	r3, r3, #8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d005      	beq.n	8004994 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004988:	4b53      	ldr	r3, [pc, #332]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	4a52      	ldr	r2, [pc, #328]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004992:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b50      	ldr	r3, [pc, #320]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	494d      	ldr	r1, [pc, #308]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d044      	beq.n	8004a3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d107      	bne.n	80049ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	4b47      	ldr	r3, [pc, #284]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d119      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e07f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d003      	beq.n	80049da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049da:	4b3f      	ldr	r3, [pc, #252]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d109      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e06f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ea:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e067      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fa:	4b37      	ldr	r3, [pc, #220]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f023 0203 	bic.w	r2, r3, #3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4934      	ldr	r1, [pc, #208]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a0c:	f7fc ff36 	bl	800187c <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a14:	f7fc ff32 	bl	800187c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e04f      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 020c 	and.w	r2, r3, #12
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d1eb      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a3c:	4b25      	ldr	r3, [pc, #148]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d20c      	bcs.n	8004a64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4a:	4b22      	ldr	r3, [pc, #136]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	b2d2      	uxtb	r2, r2
 8004a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a52:	4b20      	ldr	r3, [pc, #128]	@ (8004ad4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d001      	beq.n	8004a64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e032      	b.n	8004aca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d008      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b19      	ldr	r3, [pc, #100]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4916      	ldr	r1, [pc, #88]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d009      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a8e:	4b12      	ldr	r3, [pc, #72]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	490e      	ldr	r1, [pc, #56]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa2:	f000 f821 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	091b      	lsrs	r3, r3, #4
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	490a      	ldr	r1, [pc, #40]	@ (8004adc <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	5ccb      	ldrb	r3, [r1, r3]
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	4a09      	ldr	r2, [pc, #36]	@ (8004ae0 <HAL_RCC_ClockConfig+0x1c4>)
 8004abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004abe:	4b09      	ldr	r3, [pc, #36]	@ (8004ae4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fc fe96 	bl	80017f4 <HAL_InitTick>

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	40023c00 	.word	0x40023c00
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	0800c878 	.word	0x0800c878
 8004ae0:	20000000 	.word	0x20000000
 8004ae4:	20000004 	.word	0x20000004

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b090      	sub	sp, #64	@ 0x40
 8004aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004af4:	2300      	movs	r3, #0
 8004af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004af8:	2300      	movs	r3, #0
 8004afa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b00:	4b59      	ldr	r3, [pc, #356]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d00d      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0x40>
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	f200 80a1 	bhi.w	8004c54 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_RCC_GetSysClockFreq+0x34>
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d003      	beq.n	8004b22 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b1a:	e09b      	b.n	8004c54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b1c:	4b53      	ldr	r3, [pc, #332]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004b20:	e09b      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b22:	4b53      	ldr	r3, [pc, #332]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b26:	e098      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b28:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b30:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b32:	4b4d      	ldr	r3, [pc, #308]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d028      	beq.n	8004b90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	2200      	movs	r2, #0
 8004b46:	623b      	str	r3, [r7, #32]
 8004b48:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b50:	2100      	movs	r1, #0
 8004b52:	4b47      	ldr	r3, [pc, #284]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b54:	fb03 f201 	mul.w	r2, r3, r1
 8004b58:	2300      	movs	r3, #0
 8004b5a:	fb00 f303 	mul.w	r3, r0, r3
 8004b5e:	4413      	add	r3, r2
 8004b60:	4a43      	ldr	r2, [pc, #268]	@ (8004c70 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b62:	fba0 1202 	umull	r1, r2, r0, r2
 8004b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b68:	460a      	mov	r2, r1
 8004b6a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b6e:	4413      	add	r3, r2
 8004b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b74:	2200      	movs	r2, #0
 8004b76:	61bb      	str	r3, [r7, #24]
 8004b78:	61fa      	str	r2, [r7, #28]
 8004b7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004b82:	f7fc f819 	bl	8000bb8 <__aeabi_uldivmod>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b8e:	e053      	b.n	8004c38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b90:	4b35      	ldr	r3, [pc, #212]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	099b      	lsrs	r3, r3, #6
 8004b96:	2200      	movs	r2, #0
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	617a      	str	r2, [r7, #20]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ba2:	f04f 0b00 	mov.w	fp, #0
 8004ba6:	4652      	mov	r2, sl
 8004ba8:	465b      	mov	r3, fp
 8004baa:	f04f 0000 	mov.w	r0, #0
 8004bae:	f04f 0100 	mov.w	r1, #0
 8004bb2:	0159      	lsls	r1, r3, #5
 8004bb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bb8:	0150      	lsls	r0, r2, #5
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	ebb2 080a 	subs.w	r8, r2, sl
 8004bc2:	eb63 090b 	sbc.w	r9, r3, fp
 8004bc6:	f04f 0200 	mov.w	r2, #0
 8004bca:	f04f 0300 	mov.w	r3, #0
 8004bce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bd2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bd6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bda:	ebb2 0408 	subs.w	r4, r2, r8
 8004bde:	eb63 0509 	sbc.w	r5, r3, r9
 8004be2:	f04f 0200 	mov.w	r2, #0
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	00eb      	lsls	r3, r5, #3
 8004bec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf0:	00e2      	lsls	r2, r4, #3
 8004bf2:	4614      	mov	r4, r2
 8004bf4:	461d      	mov	r5, r3
 8004bf6:	eb14 030a 	adds.w	r3, r4, sl
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	eb45 030b 	adc.w	r3, r5, fp
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c0e:	4629      	mov	r1, r5
 8004c10:	028b      	lsls	r3, r1, #10
 8004c12:	4621      	mov	r1, r4
 8004c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c18:	4621      	mov	r1, r4
 8004c1a:	028a      	lsls	r2, r1, #10
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c22:	2200      	movs	r2, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	60fa      	str	r2, [r7, #12]
 8004c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c2c:	f7fb ffc4 	bl	8000bb8 <__aeabi_uldivmod>
 8004c30:	4602      	mov	r2, r0
 8004c32:	460b      	mov	r3, r1
 8004c34:	4613      	mov	r3, r2
 8004c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c38:	4b0b      	ldr	r3, [pc, #44]	@ (8004c68 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	0c1b      	lsrs	r3, r3, #16
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	3301      	adds	r3, #1
 8004c44:	005b      	lsls	r3, r3, #1
 8004c46:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004c48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c52:	e002      	b.n	8004c5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c56:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3740      	adds	r7, #64	@ 0x40
 8004c60:	46bd      	mov	sp, r7
 8004c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c66:	bf00      	nop
 8004c68:	40023800 	.word	0x40023800
 8004c6c:	00f42400 	.word	0x00f42400
 8004c70:	017d7840 	.word	0x017d7840

08004c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c78:	4b03      	ldr	r3, [pc, #12]	@ (8004c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	20000000 	.word	0x20000000

08004c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c90:	f7ff fff0 	bl	8004c74 <HAL_RCC_GetHCLKFreq>
 8004c94:	4602      	mov	r2, r0
 8004c96:	4b05      	ldr	r3, [pc, #20]	@ (8004cac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	0a9b      	lsrs	r3, r3, #10
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	4903      	ldr	r1, [pc, #12]	@ (8004cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca2:	5ccb      	ldrb	r3, [r1, r3]
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	0800c888 	.word	0x0800c888

08004cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb4:	b084      	sub	sp, #16
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b084      	sub	sp, #16
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	f107 001c 	add.w	r0, r7, #28
 8004cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cc6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d123      	bne.n	8004d16 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ce2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d105      	bne.n	8004d0a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f001 fae2 	bl	80062d4 <USB_CoreReset>
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]
 8004d14:	e01b      	b.n	8004d4e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f001 fad6 	bl	80062d4 <USB_CoreReset>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d2c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d106      	bne.n	8004d42 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d40:	e005      	b.n	8004d4e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d4e:	7fbb      	ldrb	r3, [r7, #30]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d10b      	bne.n	8004d6c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f043 0206 	orr.w	r2, r3, #6
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f043 0220 	orr.w	r2, r3, #32
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d78:	b004      	add	sp, #16
 8004d7a:	4770      	bx	lr

08004d7c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b087      	sub	sp, #28
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d165      	bne.n	8004e5c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	4a41      	ldr	r2, [pc, #260]	@ (8004e98 <USB_SetTurnaroundTime+0x11c>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d906      	bls.n	8004da6 <USB_SetTurnaroundTime+0x2a>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	4a40      	ldr	r2, [pc, #256]	@ (8004e9c <USB_SetTurnaroundTime+0x120>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d202      	bcs.n	8004da6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004da0:	230f      	movs	r3, #15
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e062      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	4a3c      	ldr	r2, [pc, #240]	@ (8004e9c <USB_SetTurnaroundTime+0x120>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d306      	bcc.n	8004dbc <USB_SetTurnaroundTime+0x40>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ea0 <USB_SetTurnaroundTime+0x124>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d202      	bcs.n	8004dbc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004db6:	230e      	movs	r3, #14
 8004db8:	617b      	str	r3, [r7, #20]
 8004dba:	e057      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	4a38      	ldr	r2, [pc, #224]	@ (8004ea0 <USB_SetTurnaroundTime+0x124>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d306      	bcc.n	8004dd2 <USB_SetTurnaroundTime+0x56>
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	4a37      	ldr	r2, [pc, #220]	@ (8004ea4 <USB_SetTurnaroundTime+0x128>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d202      	bcs.n	8004dd2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dcc:	230d      	movs	r3, #13
 8004dce:	617b      	str	r3, [r7, #20]
 8004dd0:	e04c      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4a33      	ldr	r2, [pc, #204]	@ (8004ea4 <USB_SetTurnaroundTime+0x128>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d306      	bcc.n	8004de8 <USB_SetTurnaroundTime+0x6c>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4a32      	ldr	r2, [pc, #200]	@ (8004ea8 <USB_SetTurnaroundTime+0x12c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d802      	bhi.n	8004de8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004de2:	230c      	movs	r3, #12
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	e041      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4a2f      	ldr	r2, [pc, #188]	@ (8004ea8 <USB_SetTurnaroundTime+0x12c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d906      	bls.n	8004dfe <USB_SetTurnaroundTime+0x82>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4a2e      	ldr	r2, [pc, #184]	@ (8004eac <USB_SetTurnaroundTime+0x130>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d802      	bhi.n	8004dfe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004df8:	230b      	movs	r3, #11
 8004dfa:	617b      	str	r3, [r7, #20]
 8004dfc:	e036      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	4a2a      	ldr	r2, [pc, #168]	@ (8004eac <USB_SetTurnaroundTime+0x130>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d906      	bls.n	8004e14 <USB_SetTurnaroundTime+0x98>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	4a29      	ldr	r2, [pc, #164]	@ (8004eb0 <USB_SetTurnaroundTime+0x134>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d802      	bhi.n	8004e14 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e0e:	230a      	movs	r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	e02b      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4a26      	ldr	r2, [pc, #152]	@ (8004eb0 <USB_SetTurnaroundTime+0x134>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d906      	bls.n	8004e2a <USB_SetTurnaroundTime+0xae>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	4a25      	ldr	r2, [pc, #148]	@ (8004eb4 <USB_SetTurnaroundTime+0x138>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d202      	bcs.n	8004e2a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e24:	2309      	movs	r3, #9
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	e020      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	4a21      	ldr	r2, [pc, #132]	@ (8004eb4 <USB_SetTurnaroundTime+0x138>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d306      	bcc.n	8004e40 <USB_SetTurnaroundTime+0xc4>
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4a20      	ldr	r2, [pc, #128]	@ (8004eb8 <USB_SetTurnaroundTime+0x13c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d802      	bhi.n	8004e40 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e3a:	2308      	movs	r3, #8
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	e015      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <USB_SetTurnaroundTime+0x13c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d906      	bls.n	8004e56 <USB_SetTurnaroundTime+0xda>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <USB_SetTurnaroundTime+0x140>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d202      	bcs.n	8004e56 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e50:	2307      	movs	r3, #7
 8004e52:	617b      	str	r3, [r7, #20]
 8004e54:	e00a      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e56:	2306      	movs	r3, #6
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	e007      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e5c:	79fb      	ldrb	r3, [r7, #7]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d102      	bne.n	8004e68 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e62:	2309      	movs	r3, #9
 8004e64:	617b      	str	r3, [r7, #20]
 8004e66:	e001      	b.n	8004e6c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e68:	2309      	movs	r3, #9
 8004e6a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	68da      	ldr	r2, [r3, #12]
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	029b      	lsls	r3, r3, #10
 8004e80:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	371c      	adds	r7, #28
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	00d8acbf 	.word	0x00d8acbf
 8004e9c:	00e4e1c0 	.word	0x00e4e1c0
 8004ea0:	00f42400 	.word	0x00f42400
 8004ea4:	01067380 	.word	0x01067380
 8004ea8:	011a499f 	.word	0x011a499f
 8004eac:	01312cff 	.word	0x01312cff
 8004eb0:	014ca43f 	.word	0x014ca43f
 8004eb4:	016e3600 	.word	0x016e3600
 8004eb8:	01a6ab1f 	.word	0x01a6ab1f
 8004ebc:	01e84800 	.word	0x01e84800

08004ec0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f043 0201 	orr.w	r2, r3, #1
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 0201 	bic.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f10:	2300      	movs	r3, #0
 8004f12:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f20:	78fb      	ldrb	r3, [r7, #3]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d115      	bne.n	8004f52 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f32:	200a      	movs	r0, #10
 8004f34:	f7fc fcae 	bl	8001894 <HAL_Delay>
      ms += 10U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	330a      	adds	r3, #10
 8004f3c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 f939 	bl	80061b6 <USB_GetMode>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d01e      	beq.n	8004f88 <USB_SetCurrentMode+0x84>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f4e:	d9f0      	bls.n	8004f32 <USB_SetCurrentMode+0x2e>
 8004f50:	e01a      	b.n	8004f88 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d115      	bne.n	8004f84 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f64:	200a      	movs	r0, #10
 8004f66:	f7fc fc95 	bl	8001894 <HAL_Delay>
      ms += 10U;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	330a      	adds	r3, #10
 8004f6e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f001 f920 	bl	80061b6 <USB_GetMode>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <USB_SetCurrentMode+0x84>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f80:	d9f0      	bls.n	8004f64 <USB_SetCurrentMode+0x60>
 8004f82:	e001      	b.n	8004f88 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e005      	b.n	8004f94 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f8c:	d101      	bne.n	8004f92 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f9c:	b084      	sub	sp, #16
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b086      	sub	sp, #24
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004faa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	613b      	str	r3, [r7, #16]
 8004fba:	e009      	b.n	8004fd0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	3340      	adds	r3, #64	@ 0x40
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	2b0e      	cmp	r3, #14
 8004fd4:	d9f2      	bls.n	8004fbc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fd6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d11c      	bne.n	8005018 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ff6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005002:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800500e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	639a      	str	r2, [r3, #56]	@ 0x38
 8005016:	e00b      	b.n	8005030 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800501c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005028:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005036:	461a      	mov	r2, r3
 8005038:	2300      	movs	r3, #0
 800503a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800503c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005040:	2b01      	cmp	r3, #1
 8005042:	d10d      	bne.n	8005060 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800504c:	2100      	movs	r1, #0
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f968 	bl	8005324 <USB_SetDevSpeed>
 8005054:	e008      	b.n	8005068 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005056:	2101      	movs	r1, #1
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f963 	bl	8005324 <USB_SetDevSpeed>
 800505e:	e003      	b.n	8005068 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005060:	2103      	movs	r1, #3
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f95e 	bl	8005324 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005068:	2110      	movs	r1, #16
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8fa 	bl	8005264 <USB_FlushTxFifo>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f924 	bl	80052c8 <USB_FlushRxFifo>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005090:	461a      	mov	r2, r3
 8005092:	2300      	movs	r3, #0
 8005094:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800509c:	461a      	mov	r2, r3
 800509e:	2300      	movs	r3, #0
 80050a0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050a8:	461a      	mov	r2, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	613b      	str	r3, [r7, #16]
 80050b2:	e043      	b.n	800513c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050ca:	d118      	bne.n	80050fe <USB_DevInit+0x162>
    {
      if (i == 0U)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10a      	bne.n	80050e8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050de:	461a      	mov	r2, r3
 80050e0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e013      	b.n	8005110 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050f4:	461a      	mov	r2, r3
 80050f6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	e008      	b.n	8005110 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	015a      	lsls	r2, r3, #5
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800510a:	461a      	mov	r2, r3
 800510c:	2300      	movs	r3, #0
 800510e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	015a      	lsls	r2, r3, #5
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800511c:	461a      	mov	r2, r3
 800511e:	2300      	movs	r3, #0
 8005120:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800512e:	461a      	mov	r2, r3
 8005130:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005134:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3301      	adds	r3, #1
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005140:	461a      	mov	r2, r3
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	4293      	cmp	r3, r2
 8005146:	d3b5      	bcc.n	80050b4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005148:	2300      	movs	r3, #0
 800514a:	613b      	str	r3, [r7, #16]
 800514c:	e043      	b.n	80051d6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	015a      	lsls	r2, r3, #5
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	4413      	add	r3, r2
 8005156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005160:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005164:	d118      	bne.n	8005198 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10a      	bne.n	8005182 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	015a      	lsls	r2, r3, #5
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4413      	add	r3, r2
 8005174:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005178:	461a      	mov	r2, r3
 800517a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800517e:	6013      	str	r3, [r2, #0]
 8005180:	e013      	b.n	80051aa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	015a      	lsls	r2, r3, #5
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4413      	add	r3, r2
 800518a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800518e:	461a      	mov	r2, r3
 8005190:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e008      	b.n	80051aa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	2300      	movs	r3, #0
 80051a8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051b6:	461a      	mov	r2, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051c8:	461a      	mov	r2, r3
 80051ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80051ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	3301      	adds	r3, #1
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80051da:	461a      	mov	r2, r3
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	4293      	cmp	r3, r2
 80051e0:	d3b5      	bcc.n	800514e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051f4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005202:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005204:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005208:	2b00      	cmp	r3, #0
 800520a:	d105      	bne.n	8005218 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	f043 0210 	orr.w	r2, r3, #16
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699a      	ldr	r2, [r3, #24]
 800521c:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <USB_DevInit+0x2c4>)
 800521e:	4313      	orrs	r3, r2
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005224:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005228:	2b00      	cmp	r3, #0
 800522a:	d005      	beq.n	8005238 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	f043 0208 	orr.w	r2, r3, #8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005238:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800523c:	2b01      	cmp	r3, #1
 800523e:	d107      	bne.n	8005250 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005250:	7dfb      	ldrb	r3, [r7, #23]
}
 8005252:	4618      	mov	r0, r3
 8005254:	3718      	adds	r7, #24
 8005256:	46bd      	mov	sp, r7
 8005258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr
 8005260:	803c3800 	.word	0x803c3800

08005264 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	3301      	adds	r3, #1
 8005276:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800527e:	d901      	bls.n	8005284 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e01b      	b.n	80052bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	daf2      	bge.n	8005272 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	019b      	lsls	r3, r3, #6
 8005294:	f043 0220 	orr.w	r2, r3, #32
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052a8:	d901      	bls.n	80052ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	d0f0      	beq.n	800529c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3301      	adds	r3, #1
 80052d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052e0:	d901      	bls.n	80052e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e018      	b.n	8005318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	daf2      	bge.n	80052d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2210      	movs	r2, #16
 80052f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	3301      	adds	r3, #1
 80052fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005304:	d901      	bls.n	800530a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e006      	b.n	8005318 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f003 0310 	and.w	r3, r3, #16
 8005312:	2b10      	cmp	r3, #16
 8005314:	d0f0      	beq.n	80052f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	460b      	mov	r3, r1
 800532e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	68f9      	ldr	r1, [r7, #12]
 8005340:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005344:	4313      	orrs	r3, r2
 8005346:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0306 	and.w	r3, r3, #6
 800536e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005376:	2300      	movs	r3, #0
 8005378:	75fb      	strb	r3, [r7, #23]
 800537a:	e00a      	b.n	8005392 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d002      	beq.n	8005388 <USB_GetDevSpeed+0x32>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b06      	cmp	r3, #6
 8005386:	d102      	bne.n	800538e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005388:	2302      	movs	r3, #2
 800538a:	75fb      	strb	r3, [r7, #23]
 800538c:	e001      	b.n	8005392 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800538e:	230f      	movs	r3, #15
 8005390:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005392:	7dfb      	ldrb	r3, [r7, #23]
}
 8005394:	4618      	mov	r0, r3
 8005396:	371c      	adds	r7, #28
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	785b      	ldrb	r3, [r3, #1]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d13a      	bne.n	8005432 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	2101      	movs	r1, #1
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	68f9      	ldr	r1, [r7, #12]
 80053d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053da:	4313      	orrs	r3, r2
 80053dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d155      	bne.n	80054a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	791b      	ldrb	r3, [r3, #4]
 800540e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005410:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	059b      	lsls	r3, r3, #22
 8005416:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005418:	4313      	orrs	r3, r2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	0151      	lsls	r1, r2, #5
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	440a      	add	r2, r1
 8005422:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800542a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800542e:	6013      	str	r3, [r2, #0]
 8005430:	e036      	b.n	80054a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005438:	69da      	ldr	r2, [r3, #28]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 030f 	and.w	r3, r3, #15
 8005442:	2101      	movs	r1, #1
 8005444:	fa01 f303 	lsl.w	r3, r1, r3
 8005448:	041b      	lsls	r3, r3, #16
 800544a:	68f9      	ldr	r1, [r7, #12]
 800544c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005450:	4313      	orrs	r3, r2
 8005452:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d11a      	bne.n	80054a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	4413      	add	r3, r2
 8005472:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005486:	430b      	orrs	r3, r1
 8005488:	4313      	orrs	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	0151      	lsls	r1, r2, #5
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	440a      	add	r2, r1
 8005492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005496:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800549a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800549e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
	...

080054b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d161      	bne.n	8005590 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054e2:	d11f      	bne.n	8005524 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	0151      	lsls	r1, r2, #5
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	440a      	add	r2, r1
 80054fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005502:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800551e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005522:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800552a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	2101      	movs	r1, #1
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	b29b      	uxth	r3, r3
 800553c:	43db      	mvns	r3, r3
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005544:	4013      	ands	r3, r2
 8005546:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 030f 	and.w	r3, r3, #15
 8005558:	2101      	movs	r1, #1
 800555a:	fa01 f303 	lsl.w	r3, r1, r3
 800555e:	b29b      	uxth	r3, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	68f9      	ldr	r1, [r7, #12]
 8005564:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005568:	4013      	ands	r3, r2
 800556a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	0159      	lsls	r1, r3, #5
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	440b      	add	r3, r1
 8005582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005586:	4619      	mov	r1, r3
 8005588:	4b35      	ldr	r3, [pc, #212]	@ (8005660 <USB_DeactivateEndpoint+0x1b0>)
 800558a:	4013      	ands	r3, r2
 800558c:	600b      	str	r3, [r1, #0]
 800558e:	e060      	b.n	8005652 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055a6:	d11f      	bne.n	80055e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80055c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f003 030f 	and.w	r3, r3, #15
 80055f8:	2101      	movs	r1, #1
 80055fa:	fa01 f303 	lsl.w	r3, r1, r3
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	43db      	mvns	r3, r3
 8005602:	68f9      	ldr	r1, [r7, #12]
 8005604:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005608:	4013      	ands	r3, r2
 800560a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	2101      	movs	r1, #1
 800561e:	fa01 f303 	lsl.w	r3, r1, r3
 8005622:	041b      	lsls	r3, r3, #16
 8005624:	43db      	mvns	r3, r3
 8005626:	68f9      	ldr	r1, [r7, #12]
 8005628:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800562c:	4013      	ands	r3, r2
 800562e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	0159      	lsls	r1, r3, #5
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	440b      	add	r3, r1
 8005646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800564a:	4619      	mov	r1, r3
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <USB_DeactivateEndpoint+0x1b4>)
 800564e:	4013      	ands	r3, r2
 8005650:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	ec337800 	.word	0xec337800
 8005664:	eff37800 	.word	0xeff37800

08005668 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	@ 0x28
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	785b      	ldrb	r3, [r3, #1]
 8005684:	2b01      	cmp	r3, #1
 8005686:	f040 817a 	bne.w	800597e <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d132      	bne.n	80056f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	0151      	lsls	r1, r2, #5
 80056a4:	69fa      	ldr	r2, [r7, #28]
 80056a6:	440a      	add	r2, r1
 80056a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ac:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80056b0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80056b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	0151      	lsls	r1, r2, #5
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	440a      	add	r2, r1
 80056cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056f0:	0cdb      	lsrs	r3, r3, #19
 80056f2:	04db      	lsls	r3, r3, #19
 80056f4:	6113      	str	r3, [r2, #16]
 80056f6:	e092      	b.n	800581e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	015a      	lsls	r2, r3, #5
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	69ba      	ldr	r2, [r7, #24]
 8005708:	0151      	lsls	r1, r2, #5
 800570a:	69fa      	ldr	r2, [r7, #28]
 800570c:	440a      	add	r2, r1
 800570e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005712:	0cdb      	lsrs	r3, r3, #19
 8005714:	04db      	lsls	r3, r3, #19
 8005716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	0151      	lsls	r1, r2, #5
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	440a      	add	r2, r1
 800572e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005732:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005736:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800573a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800573c:	69bb      	ldr	r3, [r7, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d11a      	bne.n	8005778 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691a      	ldr	r2, [r3, #16]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	d903      	bls.n	8005756 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	0151      	lsls	r1, r2, #5
 8005768:	69fa      	ldr	r2, [r7, #28]
 800576a:	440a      	add	r2, r1
 800576c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005770:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005774:	6113      	str	r3, [r2, #16]
 8005776:	e01b      	b.n	80057b0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005784:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	6919      	ldr	r1, [r3, #16]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	440b      	add	r3, r1
 8005790:	1e59      	subs	r1, r3, #1
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	fbb1 f3f3 	udiv	r3, r1, r3
 800579a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800579c:	4ba2      	ldr	r3, [pc, #648]	@ (8005a28 <USB_EPStartXfer+0x3c0>)
 800579e:	400b      	ands	r3, r1
 80057a0:	69b9      	ldr	r1, [r7, #24]
 80057a2:	0148      	lsls	r0, r1, #5
 80057a4:	69f9      	ldr	r1, [r7, #28]
 80057a6:	4401      	add	r1, r0
 80057a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057ac:	4313      	orrs	r3, r2
 80057ae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057bc:	691a      	ldr	r2, [r3, #16]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057c6:	69b9      	ldr	r1, [r7, #24]
 80057c8:	0148      	lsls	r0, r1, #5
 80057ca:	69f9      	ldr	r1, [r7, #28]
 80057cc:	4401      	add	r1, r0
 80057ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80057d2:	4313      	orrs	r3, r2
 80057d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	791b      	ldrb	r3, [r3, #4]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d11f      	bne.n	800581e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	0151      	lsls	r1, r2, #5
 80057f0:	69fa      	ldr	r2, [r7, #28]
 80057f2:	440a      	add	r2, r1
 80057f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f8:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80057fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	4413      	add	r3, r2
 8005806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	0151      	lsls	r1, r2, #5
 8005810:	69fa      	ldr	r2, [r7, #28]
 8005812:	440a      	add	r2, r1
 8005814:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005818:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800581c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d14b      	bne.n	80058bc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	69db      	ldr	r3, [r3, #28]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d009      	beq.n	8005840 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	015a      	lsls	r2, r3, #5
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	4413      	add	r3, r2
 8005834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005838:	461a      	mov	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	69db      	ldr	r3, [r3, #28]
 800583e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	791b      	ldrb	r3, [r3, #4]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d128      	bne.n	800589a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005854:	2b00      	cmp	r3, #0
 8005856:	d110      	bne.n	800587a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	015a      	lsls	r2, r3, #5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	4413      	add	r3, r2
 8005860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	0151      	lsls	r1, r2, #5
 800586a:	69fa      	ldr	r2, [r7, #28]
 800586c:	440a      	add	r2, r1
 800586e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005872:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e00f      	b.n	800589a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005898:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058b4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	e165      	b.n	8005b88 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80058da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	791b      	ldrb	r3, [r3, #4]
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d015      	beq.n	8005910 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 814d 	beq.w	8005b88 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	2101      	movs	r1, #1
 8005900:	fa01 f303 	lsl.w	r3, r1, r3
 8005904:	69f9      	ldr	r1, [r7, #28]
 8005906:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800590a:	4313      	orrs	r3, r2
 800590c:	634b      	str	r3, [r1, #52]	@ 0x34
 800590e:	e13b      	b.n	8005b88 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d110      	bne.n	8005942 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	0151      	lsls	r1, r2, #5
 8005932:	69fa      	ldr	r2, [r7, #28]
 8005934:	440a      	add	r2, r1
 8005936:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800593a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800593e:	6013      	str	r3, [r2, #0]
 8005940:	e00f      	b.n	8005962 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800595c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005960:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	68d9      	ldr	r1, [r3, #12]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	b298      	uxth	r0, r3
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	9300      	str	r3, [sp, #0]
 8005974:	4603      	mov	r3, r0
 8005976:	68f8      	ldr	r0, [r7, #12]
 8005978:	f000 f9b8 	bl	8005cec <USB_WritePacket>
 800597c:	e104      	b.n	8005b88 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005998:	0cdb      	lsrs	r3, r3, #19
 800599a:	04db      	lsls	r3, r3, #19
 800599c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	69ba      	ldr	r2, [r7, #24]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80059bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80059c0:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d131      	bne.n	8005a2c <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	015a      	lsls	r2, r3, #5
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	4413      	add	r3, r2
 80059e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059f6:	69b9      	ldr	r1, [r7, #24]
 80059f8:	0148      	lsls	r0, r1, #5
 80059fa:	69f9      	ldr	r1, [r7, #28]
 80059fc:	4401      	add	r1, r0
 80059fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a02:	4313      	orrs	r3, r2
 8005a04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a20:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a24:	6113      	str	r3, [r2, #16]
 8005a26:	e061      	b.n	8005aec <USB_EPStartXfer+0x484>
 8005a28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d123      	bne.n	8005a7c <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a40:	691a      	ldr	r2, [r3, #16]
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4a:	69b9      	ldr	r1, [r7, #24]
 8005a4c:	0148      	lsls	r0, r1, #5
 8005a4e:	69f9      	ldr	r1, [r7, #28]
 8005a50:	4401      	add	r1, r0
 8005a52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005a56:	4313      	orrs	r3, r2
 8005a58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a66:	691b      	ldr	r3, [r3, #16]
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	0151      	lsls	r1, r2, #5
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	440a      	add	r2, r1
 8005a70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005a78:	6113      	str	r3, [r2, #16]
 8005a7a:	e037      	b.n	8005aec <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	4413      	add	r3, r2
 8005a86:	1e5a      	subs	r2, r3, #1
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	8afa      	ldrh	r2, [r7, #22]
 8005a98:	fb03 f202 	mul.w	r2, r3, r2
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	8afb      	ldrh	r3, [r7, #22]
 8005ab0:	04d9      	lsls	r1, r3, #19
 8005ab2:	4b38      	ldr	r3, [pc, #224]	@ (8005b94 <USB_EPStartXfer+0x52c>)
 8005ab4:	400b      	ands	r3, r1
 8005ab6:	69b9      	ldr	r1, [r7, #24]
 8005ab8:	0148      	lsls	r0, r1, #5
 8005aba:	69f9      	ldr	r1, [r7, #28]
 8005abc:	4401      	add	r1, r0
 8005abe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005adc:	69b9      	ldr	r1, [r7, #24]
 8005ade:	0148      	lsls	r0, r1, #5
 8005ae0:	69f9      	ldr	r1, [r7, #28]
 8005ae2:	4401      	add	r1, r0
 8005ae4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005aec:	79fb      	ldrb	r3, [r7, #7]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d10d      	bne.n	8005b0e <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d009      	beq.n	8005b0e <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	68d9      	ldr	r1, [r3, #12]
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	791b      	ldrb	r3, [r3, #4]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d128      	bne.n	8005b68 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d110      	bne.n	8005b48 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005b44:	6013      	str	r3, [r2, #0]
 8005b46:	e00f      	b.n	8005b68 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	015a      	lsls	r2, r3, #5
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	4413      	add	r3, r2
 8005b50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	0151      	lsls	r1, r2, #5
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	440a      	add	r2, r1
 8005b5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	015a      	lsls	r2, r3, #5
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	0151      	lsls	r1, r2, #5
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	440a      	add	r2, r1
 8005b7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	1ff80000 	.word	0x1ff80000

08005b98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	785b      	ldrb	r3, [r3, #1]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d14a      	bne.n	8005c4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005bca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005bce:	f040 8086 	bne.w	8005cde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	7812      	ldrb	r2, [r2, #0]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005bf0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005bf4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	7812      	ldrb	r2, [r2, #0]
 8005c0a:	0151      	lsls	r1, r2, #5
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	440a      	add	r2, r1
 8005c10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005c14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d902      	bls.n	8005c30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005c2e:	e056      	b.n	8005cde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c48:	d0e7      	beq.n	8005c1a <USB_EPStopXfer+0x82>
 8005c4a:	e048      	b.n	8005cde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c64:	d13b      	bne.n	8005cde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	7812      	ldrb	r2, [r2, #0]
 8005c7a:	0151      	lsls	r1, r2, #5
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	440a      	add	r2, r1
 8005c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005c88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	7812      	ldrb	r2, [r2, #0]
 8005c9e:	0151      	lsls	r1, r2, #5
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	440a      	add	r2, r1
 8005ca4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ca8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d902      	bls.n	8005cc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8005cc2:	e00c      	b.n	8005cde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cdc:	d0e7      	beq.n	8005cae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005cde:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	371c      	adds	r7, #28
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	@ 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	71fb      	strb	r3, [r7, #7]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d123      	bne.n	8005d5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d12:	88bb      	ldrh	r3, [r7, #4]
 8005d14:	3303      	adds	r3, #3
 8005d16:	089b      	lsrs	r3, r3, #2
 8005d18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e018      	b.n	8005d52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	031a      	lsls	r2, r3, #12
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	4413      	add	r3, r2
 8005d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	3301      	adds	r3, #1
 8005d38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	3301      	adds	r3, #1
 8005d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d3e2      	bcc.n	8005d20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3724      	adds	r7, #36	@ 0x24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b08b      	sub	sp, #44	@ 0x2c
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	4613      	mov	r3, r2
 8005d74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d7e:	88fb      	ldrh	r3, [r7, #6]
 8005d80:	089b      	lsrs	r3, r3, #2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	f003 0303 	and.w	r3, r3, #3
 8005d8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	e014      	b.n	8005dbe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	3301      	adds	r3, #1
 8005da4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	3301      	adds	r3, #1
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dae:	3301      	adds	r3, #1
 8005db0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	3301      	adds	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	623b      	str	r3, [r7, #32]
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d3e6      	bcc.n	8005d94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dc6:	8bfb      	ldrh	r3, [r7, #30]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01e      	beq.n	8005e0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	6812      	ldr	r2, [r2, #0]
 8005dde:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	701a      	strb	r2, [r3, #0]
      i++;
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	3301      	adds	r3, #1
 8005df6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005dfe:	8bfb      	ldrh	r3, [r7, #30]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e04:	8bfb      	ldrh	r3, [r7, #30]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1ea      	bne.n	8005de0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	372c      	adds	r7, #44	@ 0x2c
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d12c      	bne.n	8005e8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	015a      	lsls	r2, r3, #5
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	db12      	blt.n	8005e6c <USB_EPSetStall+0x54>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00f      	beq.n	8005e6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	0151      	lsls	r1, r2, #5
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	440a      	add	r2, r1
 8005e62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005e8a:	6013      	str	r3, [r2, #0]
 8005e8c:	e02b      	b.n	8005ee6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	015a      	lsls	r2, r3, #5
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	db12      	blt.n	8005ec6 <USB_EPSetStall+0xae>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00f      	beq.n	8005ec6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ec4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	0151      	lsls	r1, r2, #5
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	440a      	add	r2, r1
 8005edc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ee0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ee4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	785b      	ldrb	r3, [r3, #1]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d128      	bne.n	8005f62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	0151      	lsls	r1, r2, #5
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	440a      	add	r2, r1
 8005f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	791b      	ldrb	r3, [r3, #4]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d003      	beq.n	8005f40 <USB_EPClearStall+0x4c>
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	791b      	ldrb	r3, [r3, #4]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d138      	bne.n	8005fb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	015a      	lsls	r2, r3, #5
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	4413      	add	r3, r2
 8005f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	0151      	lsls	r1, r2, #5
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	440a      	add	r2, r1
 8005f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	e027      	b.n	8005fb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f7c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	791b      	ldrb	r3, [r3, #4]
 8005f86:	2b03      	cmp	r3, #3
 8005f88:	d003      	beq.n	8005f92 <USB_EPClearStall+0x9e>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	791b      	ldrb	r3, [r3, #4]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d10f      	bne.n	8005fb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fde:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005fe2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005ff4:	68f9      	ldr	r1, [r7, #12]
 8005ff6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006026:	f023 0303 	bic.w	r3, r3, #3
 800602a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800603a:	f023 0302 	bic.w	r3, r3, #2
 800603e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3714      	adds	r7, #20
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800604e:	b480      	push	{r7}
 8006050:	b085      	sub	sp, #20
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006068:	f023 0303 	bic.w	r3, r3, #3
 800606c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800607c:	f043 0302 	orr.w	r3, r3, #2
 8006080:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006082:	2300      	movs	r3, #0
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	695b      	ldr	r3, [r3, #20]
 800609c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4013      	ands	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060a8:	68fb      	ldr	r3, [r7, #12]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	4013      	ands	r3, r2
 80060d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	0c1b      	lsrs	r3, r3, #16
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	4013      	ands	r3, r2
 800610c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	b29b      	uxth	r3, r3
}
 8006112:	4618      	mov	r0, r3
 8006114:	3714      	adds	r7, #20
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	460b      	mov	r3, r1
 8006128:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	4013      	ands	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800614c:	68bb      	ldr	r3, [r7, #8]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr

0800615a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800615a:	b480      	push	{r7}
 800615c:	b087      	sub	sp, #28
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800617e:	78fb      	ldrb	r3, [r7, #3]
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	fa22 f303 	lsr.w	r3, r2, r3
 800618a:	01db      	lsls	r3, r3, #7
 800618c:	b2db      	uxtb	r3, r3
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	015a      	lsls	r2, r3, #5
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	4413      	add	r3, r2
 800619c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4013      	ands	r3, r2
 80061a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061a8:	68bb      	ldr	r3, [r7, #8]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	f003 0301 	and.w	r3, r3, #1
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061ec:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80061f0:	f023 0307 	bic.w	r3, r3, #7
 80061f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006208:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3714      	adds	r7, #20
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	460b      	mov	r3, r1
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	333c      	adds	r3, #60	@ 0x3c
 800622e:	3304      	adds	r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	4a26      	ldr	r2, [pc, #152]	@ (80062d0 <USB_EP0_OutStart+0xb8>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d90a      	bls.n	8006252 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800624c:	d101      	bne.n	8006252 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	e037      	b.n	80062c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006258:	461a      	mov	r2, r3
 800625a:	2300      	movs	r3, #0
 800625c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800626c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006270:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006280:	f043 0318 	orr.w	r3, r3, #24
 8006284:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006294:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006298:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800629a:	7afb      	ldrb	r3, [r7, #11]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d10f      	bne.n	80062c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a6:	461a      	mov	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062ba:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80062be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	4f54300a 	.word	0x4f54300a

080062d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062ec:	d901      	bls.n	80062f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e01b      	b.n	800632a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	daf2      	bge.n	80062e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f043 0201 	orr.w	r2, r3, #1
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	3301      	adds	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006316:	d901      	bls.n	800631c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e006      	b.n	800632a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	f003 0301 	and.w	r3, r3, #1
 8006324:	2b01      	cmp	r3, #1
 8006326:	d0f0      	beq.n	800630a <USB_CoreReset+0x36>

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
	...

08006338 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006344:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006348:	f002 fc78 	bl	8008c3c <USBD_static_malloc>
 800634c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d109      	bne.n	8006368 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	32b0      	adds	r2, #176	@ 0xb0
 800635e:	2100      	movs	r1, #0
 8006360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006364:	2302      	movs	r3, #2
 8006366:	e0d4      	b.n	8006512 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006368:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800636c:	2100      	movs	r1, #0
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f003 fa25 	bl	80097be <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	32b0      	adds	r2, #176	@ 0xb0
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	32b0      	adds	r2, #176	@ 0xb0
 800638e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	7c1b      	ldrb	r3, [r3, #16]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d138      	bne.n	8006412 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063a0:	4b5e      	ldr	r3, [pc, #376]	@ (800651c <USBD_CDC_Init+0x1e4>)
 80063a2:	7819      	ldrb	r1, [r3, #0]
 80063a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063a8:	2202      	movs	r2, #2
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f002 fb23 	bl	80089f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063b0:	4b5a      	ldr	r3, [pc, #360]	@ (800651c <USBD_CDC_Init+0x1e4>)
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 020f 	and.w	r2, r3, #15
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	4613      	mov	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	440b      	add	r3, r1
 80063c4:	3324      	adds	r3, #36	@ 0x24
 80063c6:	2201      	movs	r2, #1
 80063c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063ca:	4b55      	ldr	r3, [pc, #340]	@ (8006520 <USBD_CDC_Init+0x1e8>)
 80063cc:	7819      	ldrb	r1, [r3, #0]
 80063ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80063d2:	2202      	movs	r2, #2
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f002 fb0e 	bl	80089f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063da:	4b51      	ldr	r3, [pc, #324]	@ (8006520 <USBD_CDC_Init+0x1e8>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 020f 	and.w	r2, r3, #15
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80063f2:	2201      	movs	r2, #1
 80063f4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063f6:	4b4b      	ldr	r3, [pc, #300]	@ (8006524 <USBD_CDC_Init+0x1ec>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f003 020f 	and.w	r2, r3, #15
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	440b      	add	r3, r1
 800640a:	3326      	adds	r3, #38	@ 0x26
 800640c:	2210      	movs	r2, #16
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	e035      	b.n	800647e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006412:	4b42      	ldr	r3, [pc, #264]	@ (800651c <USBD_CDC_Init+0x1e4>)
 8006414:	7819      	ldrb	r1, [r3, #0]
 8006416:	2340      	movs	r3, #64	@ 0x40
 8006418:	2202      	movs	r2, #2
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f002 faeb 	bl	80089f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006420:	4b3e      	ldr	r3, [pc, #248]	@ (800651c <USBD_CDC_Init+0x1e4>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f003 020f 	and.w	r2, r3, #15
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	3324      	adds	r3, #36	@ 0x24
 8006436:	2201      	movs	r2, #1
 8006438:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800643a:	4b39      	ldr	r3, [pc, #228]	@ (8006520 <USBD_CDC_Init+0x1e8>)
 800643c:	7819      	ldrb	r1, [r3, #0]
 800643e:	2340      	movs	r3, #64	@ 0x40
 8006440:	2202      	movs	r2, #2
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f002 fad7 	bl	80089f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006448:	4b35      	ldr	r3, [pc, #212]	@ (8006520 <USBD_CDC_Init+0x1e8>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	f003 020f 	and.w	r2, r3, #15
 8006450:	6879      	ldr	r1, [r7, #4]
 8006452:	4613      	mov	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	4413      	add	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	440b      	add	r3, r1
 800645c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006460:	2201      	movs	r2, #1
 8006462:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006464:	4b2f      	ldr	r3, [pc, #188]	@ (8006524 <USBD_CDC_Init+0x1ec>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f003 020f 	and.w	r2, r3, #15
 800646c:	6879      	ldr	r1, [r7, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	440b      	add	r3, r1
 8006478:	3326      	adds	r3, #38	@ 0x26
 800647a:	2210      	movs	r2, #16
 800647c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800647e:	4b29      	ldr	r3, [pc, #164]	@ (8006524 <USBD_CDC_Init+0x1ec>)
 8006480:	7819      	ldrb	r1, [r3, #0]
 8006482:	2308      	movs	r3, #8
 8006484:	2203      	movs	r2, #3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f002 fab5 	bl	80089f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800648c:	4b25      	ldr	r3, [pc, #148]	@ (8006524 <USBD_CDC_Init+0x1ec>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f003 020f 	and.w	r2, r3, #15
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4613      	mov	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4413      	add	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	440b      	add	r3, r1
 80064a0:	3324      	adds	r3, #36	@ 0x24
 80064a2:	2201      	movs	r2, #1
 80064a4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	33b0      	adds	r3, #176	@ 0xb0
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064dc:	2302      	movs	r3, #2
 80064de:	e018      	b.n	8006512 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	7c1b      	ldrb	r3, [r3, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10a      	bne.n	80064fe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <USBD_CDC_Init+0x1e8>)
 80064ea:	7819      	ldrb	r1, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064f2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f002 fb6c 	bl	8008bd4 <USBD_LL_PrepareReceive>
 80064fc:	e008      	b.n	8006510 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064fe:	4b08      	ldr	r3, [pc, #32]	@ (8006520 <USBD_CDC_Init+0x1e8>)
 8006500:	7819      	ldrb	r1, [r3, #0]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006508:	2340      	movs	r3, #64	@ 0x40
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f002 fb62 	bl	8008bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20000093 	.word	0x20000093
 8006520:	20000094 	.word	0x20000094
 8006524:	20000095 	.word	0x20000095

08006528 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006534:	4b3a      	ldr	r3, [pc, #232]	@ (8006620 <USBD_CDC_DeInit+0xf8>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f002 fa81 	bl	8008a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006540:	4b37      	ldr	r3, [pc, #220]	@ (8006620 <USBD_CDC_DeInit+0xf8>)
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f003 020f 	and.w	r2, r3, #15
 8006548:	6879      	ldr	r1, [r7, #4]
 800654a:	4613      	mov	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	3324      	adds	r3, #36	@ 0x24
 8006556:	2200      	movs	r2, #0
 8006558:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800655a:	4b32      	ldr	r3, [pc, #200]	@ (8006624 <USBD_CDC_DeInit+0xfc>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f002 fa6e 	bl	8008a42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006566:	4b2f      	ldr	r3, [pc, #188]	@ (8006624 <USBD_CDC_DeInit+0xfc>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f003 020f 	and.w	r2, r3, #15
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	440b      	add	r3, r1
 800657a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800657e:	2200      	movs	r2, #0
 8006580:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006582:	4b29      	ldr	r3, [pc, #164]	@ (8006628 <USBD_CDC_DeInit+0x100>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f002 fa5a 	bl	8008a42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800658e:	4b26      	ldr	r3, [pc, #152]	@ (8006628 <USBD_CDC_DeInit+0x100>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f003 020f 	and.w	r2, r3, #15
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
 80065a2:	3324      	adds	r3, #36	@ 0x24
 80065a4:	2200      	movs	r2, #0
 80065a6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80065a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006628 <USBD_CDC_DeInit+0x100>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	f003 020f 	and.w	r2, r3, #15
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	3326      	adds	r3, #38	@ 0x26
 80065be:	2200      	movs	r2, #0
 80065c0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	32b0      	adds	r2, #176	@ 0xb0
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01f      	beq.n	8006614 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	33b0      	adds	r3, #176	@ 0xb0
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	32b0      	adds	r2, #176	@ 0xb0
 80065f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f002 fb2e 	bl	8008c58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32b0      	adds	r2, #176	@ 0xb0
 8006606:	2100      	movs	r1, #0
 8006608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3708      	adds	r7, #8
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
 800661e:	bf00      	nop
 8006620:	20000093 	.word	0x20000093
 8006624:	20000094 	.word	0x20000094
 8006628:	20000095 	.word	0x20000095

0800662c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b086      	sub	sp, #24
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	32b0      	adds	r2, #176	@ 0xb0
 8006640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006644:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006646:	2300      	movs	r3, #0
 8006648:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	e0bf      	b.n	80067dc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006664:	2b00      	cmp	r3, #0
 8006666:	d050      	beq.n	800670a <USBD_CDC_Setup+0xde>
 8006668:	2b20      	cmp	r3, #32
 800666a:	f040 80af 	bne.w	80067cc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	88db      	ldrh	r3, [r3, #6]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d03a      	beq.n	80066ec <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	b25b      	sxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	da1b      	bge.n	80066b8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	33b0      	adds	r3, #176	@ 0xb0
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006696:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	88d2      	ldrh	r2, [r2, #6]
 800669c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	88db      	ldrh	r3, [r3, #6]
 80066a2:	2b07      	cmp	r3, #7
 80066a4:	bf28      	it	cs
 80066a6:	2307      	movcs	r3, #7
 80066a8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	89fa      	ldrh	r2, [r7, #14]
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f001 fd87 	bl	80081c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80066b6:	e090      	b.n	80067da <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	785a      	ldrb	r2, [r3, #1]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	88db      	ldrh	r3, [r3, #6]
 80066c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80066c8:	d803      	bhi.n	80066d2 <USBD_CDC_Setup+0xa6>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	88db      	ldrh	r3, [r3, #6]
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	e000      	b.n	80066d4 <USBD_CDC_Setup+0xa8>
 80066d2:	2240      	movs	r2, #64	@ 0x40
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066da:	6939      	ldr	r1, [r7, #16]
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80066e2:	461a      	mov	r2, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f001 fd99 	bl	800821c <USBD_CtlPrepareRx>
      break;
 80066ea:	e076      	b.n	80067da <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	33b0      	adds	r3, #176	@ 0xb0
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	7850      	ldrb	r0, [r2, #1]
 8006702:	2200      	movs	r2, #0
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	4798      	blx	r3
      break;
 8006708:	e067      	b.n	80067da <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	785b      	ldrb	r3, [r3, #1]
 800670e:	2b0b      	cmp	r3, #11
 8006710:	d851      	bhi.n	80067b6 <USBD_CDC_Setup+0x18a>
 8006712:	a201      	add	r2, pc, #4	@ (adr r2, 8006718 <USBD_CDC_Setup+0xec>)
 8006714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006718:	08006749 	.word	0x08006749
 800671c:	080067c5 	.word	0x080067c5
 8006720:	080067b7 	.word	0x080067b7
 8006724:	080067b7 	.word	0x080067b7
 8006728:	080067b7 	.word	0x080067b7
 800672c:	080067b7 	.word	0x080067b7
 8006730:	080067b7 	.word	0x080067b7
 8006734:	080067b7 	.word	0x080067b7
 8006738:	080067b7 	.word	0x080067b7
 800673c:	080067b7 	.word	0x080067b7
 8006740:	08006773 	.word	0x08006773
 8006744:	0800679d 	.word	0x0800679d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b03      	cmp	r3, #3
 8006752:	d107      	bne.n	8006764 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006754:	f107 030a 	add.w	r3, r7, #10
 8006758:	2202      	movs	r2, #2
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fd31 	bl	80081c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006762:	e032      	b.n	80067ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006764:	6839      	ldr	r1, [r7, #0]
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fcbb 	bl	80080e2 <USBD_CtlError>
            ret = USBD_FAIL;
 800676c:	2303      	movs	r3, #3
 800676e:	75fb      	strb	r3, [r7, #23]
          break;
 8006770:	e02b      	b.n	80067ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b03      	cmp	r3, #3
 800677c:	d107      	bne.n	800678e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800677e:	f107 030d 	add.w	r3, r7, #13
 8006782:	2201      	movs	r2, #1
 8006784:	4619      	mov	r1, r3
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fd1c 	bl	80081c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800678c:	e01d      	b.n	80067ca <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fca6 	bl	80080e2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006796:	2303      	movs	r3, #3
 8006798:	75fb      	strb	r3, [r7, #23]
          break;
 800679a:	e016      	b.n	80067ca <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	2b03      	cmp	r3, #3
 80067a6:	d00f      	beq.n	80067c8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 fc99 	bl	80080e2 <USBD_CtlError>
            ret = USBD_FAIL;
 80067b0:	2303      	movs	r3, #3
 80067b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067b4:	e008      	b.n	80067c8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 fc92 	bl	80080e2 <USBD_CtlError>
          ret = USBD_FAIL;
 80067be:	2303      	movs	r3, #3
 80067c0:	75fb      	strb	r3, [r7, #23]
          break;
 80067c2:	e002      	b.n	80067ca <USBD_CDC_Setup+0x19e>
          break;
 80067c4:	bf00      	nop
 80067c6:	e008      	b.n	80067da <USBD_CDC_Setup+0x1ae>
          break;
 80067c8:	bf00      	nop
      }
      break;
 80067ca:	e006      	b.n	80067da <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f001 fc87 	bl	80080e2 <USBD_CtlError>
      ret = USBD_FAIL;
 80067d4:	2303      	movs	r3, #3
 80067d6:	75fb      	strb	r3, [r7, #23]
      break;
 80067d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80067da:	7dfb      	ldrb	r3, [r7, #23]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	460b      	mov	r3, r1
 80067ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80067f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	32b0      	adds	r2, #176	@ 0xb0
 8006802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800680a:	2303      	movs	r3, #3
 800680c:	e065      	b.n	80068da <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	32b0      	adds	r2, #176	@ 0xb0
 8006818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800681c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800681e:	78fb      	ldrb	r3, [r7, #3]
 8006820:	f003 020f 	and.w	r2, r3, #15
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	3318      	adds	r3, #24
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d02f      	beq.n	8006898 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006838:	78fb      	ldrb	r3, [r7, #3]
 800683a:	f003 020f 	and.w	r2, r3, #15
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	3318      	adds	r3, #24
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	f003 010f 	and.w	r1, r3, #15
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	460b      	mov	r3, r1
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	440b      	add	r3, r1
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4403      	add	r3, r0
 8006860:	331c      	adds	r3, #28
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	fbb2 f1f3 	udiv	r1, r2, r3
 8006868:	fb01 f303 	mul.w	r3, r1, r3
 800686c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800686e:	2b00      	cmp	r3, #0
 8006870:	d112      	bne.n	8006898 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	f003 020f 	and.w	r2, r3, #15
 8006878:	6879      	ldr	r1, [r7, #4]
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	440b      	add	r3, r1
 8006884:	3318      	adds	r3, #24
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800688a:	78f9      	ldrb	r1, [r7, #3]
 800688c:	2300      	movs	r3, #0
 800688e:	2200      	movs	r2, #0
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f002 f97e 	bl	8008b92 <USBD_LL_Transmit>
 8006896:	e01f      	b.n	80068d8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2200      	movs	r2, #0
 800689c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	33b0      	adds	r3, #176	@ 0xb0
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d010      	beq.n	80068d8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068bc:	687a      	ldr	r2, [r7, #4]
 80068be:	33b0      	adds	r3, #176	@ 0xb0
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80068d4:	78fa      	ldrb	r2, [r7, #3]
 80068d6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	460b      	mov	r3, r1
 80068ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	32b0      	adds	r2, #176	@ 0xb0
 80068f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	32b0      	adds	r2, #176	@ 0xb0
 8006908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	e01a      	b.n	800694a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	4619      	mov	r1, r3
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f002 f97c 	bl	8008c16 <USBD_LL_GetRxDataSize>
 800691e:	4602      	mov	r2, r0
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	33b0      	adds	r3, #176	@ 0xb0
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4413      	add	r3, r2
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800693e:	68fa      	ldr	r2, [r7, #12]
 8006940:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006944:	4611      	mov	r1, r2
 8006946:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	32b0      	adds	r2, #176	@ 0xb0
 8006964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006968:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006970:	2303      	movs	r3, #3
 8006972:	e024      	b.n	80069be <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	33b0      	adds	r3, #176	@ 0xb0
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d019      	beq.n	80069bc <USBD_CDC_EP0_RxReady+0x6a>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800698e:	2bff      	cmp	r3, #255	@ 0xff
 8006990:	d014      	beq.n	80069bc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	33b0      	adds	r3, #176	@ 0xb0
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	4413      	add	r3, r2
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80069aa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069b2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	22ff      	movs	r2, #255	@ 0xff
 80069b8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
	...

080069c8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069d0:	2182      	movs	r1, #130	@ 0x82
 80069d2:	4818      	ldr	r0, [pc, #96]	@ (8006a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069d4:	f000 fd4f 	bl	8007476 <USBD_GetEpDesc>
 80069d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069da:	2101      	movs	r1, #1
 80069dc:	4815      	ldr	r0, [pc, #84]	@ (8006a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069de:	f000 fd4a 	bl	8007476 <USBD_GetEpDesc>
 80069e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069e4:	2181      	movs	r1, #129	@ 0x81
 80069e6:	4813      	ldr	r0, [pc, #76]	@ (8006a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069e8:	f000 fd45 	bl	8007476 <USBD_GetEpDesc>
 80069ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2210      	movs	r2, #16
 80069f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d006      	beq.n	8006a0e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a08:	711a      	strb	r2, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a1c:	711a      	strb	r2, [r3, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2243      	movs	r2, #67	@ 0x43
 8006a26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a28:	4b02      	ldr	r3, [pc, #8]	@ (8006a34 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	20000050 	.word	0x20000050

08006a38 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a40:	2182      	movs	r1, #130	@ 0x82
 8006a42:	4818      	ldr	r0, [pc, #96]	@ (8006aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a44:	f000 fd17 	bl	8007476 <USBD_GetEpDesc>
 8006a48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a4a:	2101      	movs	r1, #1
 8006a4c:	4815      	ldr	r0, [pc, #84]	@ (8006aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a4e:	f000 fd12 	bl	8007476 <USBD_GetEpDesc>
 8006a52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a54:	2181      	movs	r1, #129	@ 0x81
 8006a56:	4813      	ldr	r0, [pc, #76]	@ (8006aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a58:	f000 fd0d 	bl	8007476 <USBD_GetEpDesc>
 8006a5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2210      	movs	r2, #16
 8006a68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	2200      	movs	r2, #0
 8006a74:	711a      	strb	r2, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f042 0202 	orr.w	r2, r2, #2
 8006a7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d006      	beq.n	8006a92 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	711a      	strb	r2, [r3, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f042 0202 	orr.w	r2, r2, #2
 8006a90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2243      	movs	r2, #67	@ 0x43
 8006a96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a98:	4b02      	ldr	r3, [pc, #8]	@ (8006aa4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000050 	.word	0x20000050

08006aa8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ab0:	2182      	movs	r1, #130	@ 0x82
 8006ab2:	4818      	ldr	r0, [pc, #96]	@ (8006b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ab4:	f000 fcdf 	bl	8007476 <USBD_GetEpDesc>
 8006ab8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aba:	2101      	movs	r1, #1
 8006abc:	4815      	ldr	r0, [pc, #84]	@ (8006b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006abe:	f000 fcda 	bl	8007476 <USBD_GetEpDesc>
 8006ac2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ac4:	2181      	movs	r1, #129	@ 0x81
 8006ac6:	4813      	ldr	r0, [pc, #76]	@ (8006b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ac8:	f000 fcd5 	bl	8007476 <USBD_GetEpDesc>
 8006acc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d006      	beq.n	8006aee <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ae8:	711a      	strb	r2, [r3, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d006      	beq.n	8006b02 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006afc:	711a      	strb	r2, [r3, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2243      	movs	r2, #67	@ 0x43
 8006b06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b08:	4b02      	ldr	r3, [pc, #8]	@ (8006b14 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3718      	adds	r7, #24
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000050 	.word	0x20000050

08006b18 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	220a      	movs	r2, #10
 8006b24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b26:	4b03      	ldr	r3, [pc, #12]	@ (8006b34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr
 8006b34:	2000000c 	.word	0x2000000c

08006b38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e009      	b.n	8006b60 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	33b0      	adds	r3, #176	@ 0xb0
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	4413      	add	r3, r2
 8006b5a:	683a      	ldr	r2, [r7, #0]
 8006b5c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	32b0      	adds	r2, #176	@ 0xb0
 8006b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b86:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e008      	b.n	8006ba4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	371c      	adds	r7, #28
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	32b0      	adds	r2, #176	@ 0xb0
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e004      	b.n	8006bde <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
	...

08006bec <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	32b0      	adds	r2, #176	@ 0xb0
 8006bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c02:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c04:	2301      	movs	r3, #1
 8006c06:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e025      	b.n	8006c5e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d11f      	bne.n	8006c5c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c24:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <USBD_CDC_TransmitPacket+0x7c>)
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4403      	add	r3, r0
 8006c3e:	3318      	adds	r3, #24
 8006c40:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c42:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <USBD_CDC_TransmitPacket+0x7c>)
 8006c44:	7819      	ldrb	r1, [r3, #0]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 ff9d 	bl	8008b92 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3710      	adds	r7, #16
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	20000093 	.word	0x20000093

08006c6c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	32b0      	adds	r2, #176	@ 0xb0
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	32b0      	adds	r2, #176	@ 0xb0
 8006c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e018      	b.n	8006ccc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7c1b      	ldrb	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd4 <USBD_CDC_ReceivePacket+0x68>)
 8006ca4:	7819      	ldrb	r1, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 ff8f 	bl	8008bd4 <USBD_LL_PrepareReceive>
 8006cb6:	e008      	b.n	8006cca <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cb8:	4b06      	ldr	r3, [pc, #24]	@ (8006cd4 <USBD_CDC_ReceivePacket+0x68>)
 8006cba:	7819      	ldrb	r1, [r3, #0]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006cc2:	2340      	movs	r3, #64	@ 0x40
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 ff85 	bl	8008bd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20000094 	.word	0x20000094

08006cd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e01f      	b.n	8006d30 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	79fa      	ldrb	r2, [r7, #7]
 8006d22:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f001 fdff 	bl	8008928 <USBD_LL_Init>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d42:	2300      	movs	r3, #0
 8006d44:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	e025      	b.n	8006d9c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	32ae      	adds	r2, #174	@ 0xae
 8006d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00f      	beq.n	8006d8c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32ae      	adds	r2, #174	@ 0xae
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d7c:	f107 020e 	add.w	r2, r7, #14
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	4602      	mov	r2, r0
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006d92:	1c5a      	adds	r2, r3, #1
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f001 fe07 	bl	80089c0 <USBD_LL_Start>
 8006db2:	4603      	mov	r3, r0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dc4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d009      	beq.n	8006e00 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	78fa      	ldrb	r2, [r7, #3]
 8006df6:	4611      	mov	r1, r2
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	78fa      	ldrb	r2, [r7, #3]
 8006e24:	4611      	mov	r1, r2
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	4798      	blx	r3
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e30:	2303      	movs	r3, #3
 8006e32:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b084      	sub	sp, #16
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
 8006e46:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	4618      	mov	r0, r3
 8006e52:	f001 f90c 	bl	800806e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006e64:	461a      	mov	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006e72:	f003 031f 	and.w	r3, r3, #31
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d01a      	beq.n	8006eb0 <USBD_LL_SetupStage+0x72>
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d822      	bhi.n	8006ec4 <USBD_LL_SetupStage+0x86>
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <USBD_LL_SetupStage+0x4a>
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d00a      	beq.n	8006e9c <USBD_LL_SetupStage+0x5e>
 8006e86:	e01d      	b.n	8006ec4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 fb63 	bl	800755c <USBD_StdDevReq>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9a:	e020      	b.n	8006ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fbcb 	bl	8007640 <USBD_StdItfReq>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	73fb      	strb	r3, [r7, #15]
      break;
 8006eae:	e016      	b.n	8006ede <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fc2d 	bl	8007718 <USBD_StdEPReq>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec2:	e00c      	b.n	8006ede <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006eca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 fdd4 	bl	8008a80 <USBD_LL_StallEP>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]
      break;
 8006edc:	bf00      	nop
  }

  return ret;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006efa:	7afb      	ldrb	r3, [r7, #11]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d16e      	bne.n	8006fde <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006f06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	f040 8098 	bne.w	8007044 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	689a      	ldr	r2, [r3, #8]
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d913      	bls.n	8006f48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	1ad2      	subs	r2, r2, r3
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	4293      	cmp	r3, r2
 8006f38:	bf28      	it	cs
 8006f3a:	4613      	movcs	r3, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6879      	ldr	r1, [r7, #4]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f001 f988 	bl	8008256 <USBD_CtlContinueRx>
 8006f46:	e07d      	b.n	8007044 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f4e:	f003 031f 	and.w	r3, r3, #31
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d014      	beq.n	8006f80 <USBD_LL_DataOutStage+0x98>
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d81d      	bhi.n	8006f96 <USBD_LL_DataOutStage+0xae>
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <USBD_LL_DataOutStage+0x7c>
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d003      	beq.n	8006f6a <USBD_LL_DataOutStage+0x82>
 8006f62:	e018      	b.n	8006f96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	75bb      	strb	r3, [r7, #22]
            break;
 8006f68:	e018      	b.n	8006f9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	4619      	mov	r1, r3
 8006f74:	68f8      	ldr	r0, [r7, #12]
 8006f76:	f000 fa64 	bl	8007442 <USBD_CoreFindIF>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f7e:	e00d      	b.n	8006f9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	4619      	mov	r1, r3
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 fa66 	bl	800745c <USBD_CoreFindEP>
 8006f90:	4603      	mov	r3, r0
 8006f92:	75bb      	strb	r3, [r7, #22]
            break;
 8006f94:	e002      	b.n	8006f9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	75bb      	strb	r3, [r7, #22]
            break;
 8006f9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006f9c:	7dbb      	ldrb	r3, [r7, #22]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d119      	bne.n	8006fd6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	2b03      	cmp	r3, #3
 8006fac:	d113      	bne.n	8006fd6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006fae:	7dba      	ldrb	r2, [r7, #22]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	32ae      	adds	r2, #174	@ 0xae
 8006fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006fbe:	7dba      	ldrb	r2, [r7, #22]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006fc6:	7dba      	ldrb	r2, [r7, #22]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	32ae      	adds	r2, #174	@ 0xae
 8006fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f001 f94e 	bl	8008278 <USBD_CtlSendStatus>
 8006fdc:	e032      	b.n	8007044 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 fa37 	bl	800745c <USBD_CoreFindEP>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ff2:	7dbb      	ldrb	r3, [r7, #22]
 8006ff4:	2bff      	cmp	r3, #255	@ 0xff
 8006ff6:	d025      	beq.n	8007044 <USBD_LL_DataOutStage+0x15c>
 8006ff8:	7dbb      	ldrb	r3, [r7, #22]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d122      	bne.n	8007044 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b03      	cmp	r3, #3
 8007008:	d117      	bne.n	800703a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800700a:	7dba      	ldrb	r2, [r7, #22]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	32ae      	adds	r2, #174	@ 0xae
 8007010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00f      	beq.n	800703a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800701a:	7dba      	ldrb	r2, [r7, #22]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007022:	7dba      	ldrb	r2, [r7, #22]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	32ae      	adds	r2, #174	@ 0xae
 8007028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702c:	699b      	ldr	r3, [r3, #24]
 800702e:	7afa      	ldrb	r2, [r7, #11]
 8007030:	4611      	mov	r1, r2
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800703a:	7dfb      	ldrb	r3, [r7, #23]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d001      	beq.n	8007044 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	e000      	b.n	8007046 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3718      	adds	r7, #24
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b086      	sub	sp, #24
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	460b      	mov	r3, r1
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800705c:	7afb      	ldrb	r3, [r7, #11]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d16f      	bne.n	8007142 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3314      	adds	r3, #20
 8007066:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800706e:	2b02      	cmp	r3, #2
 8007070:	d15a      	bne.n	8007128 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	429a      	cmp	r2, r3
 800707c:	d914      	bls.n	80070a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	1ad2      	subs	r2, r2, r3
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	461a      	mov	r2, r3
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f001 f8b0 	bl	80081fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800709a:	2300      	movs	r3, #0
 800709c:	2200      	movs	r2, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	68f8      	ldr	r0, [r7, #12]
 80070a2:	f001 fd97 	bl	8008bd4 <USBD_LL_PrepareReceive>
 80070a6:	e03f      	b.n	8007128 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d11c      	bne.n	80070ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070bc:	429a      	cmp	r2, r3
 80070be:	d316      	bcc.n	80070ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d20f      	bcs.n	80070ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070ce:	2200      	movs	r2, #0
 80070d0:	2100      	movs	r1, #0
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f001 f891 	bl	80081fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e0:	2300      	movs	r3, #0
 80070e2:	2200      	movs	r2, #0
 80070e4:	2100      	movs	r1, #0
 80070e6:	68f8      	ldr	r0, [r7, #12]
 80070e8:	f001 fd74 	bl	8008bd4 <USBD_LL_PrepareReceive>
 80070ec:	e01c      	b.n	8007128 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d10f      	bne.n	800711a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800711a:	2180      	movs	r1, #128	@ 0x80
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f001 fcaf 	bl	8008a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 f8bb 	bl	800829e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d03a      	beq.n	80071a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f7ff fe42 	bl	8006dbc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007140:	e032      	b.n	80071a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007148:	b2db      	uxtb	r3, r3
 800714a:	4619      	mov	r1, r3
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f985 	bl	800745c <USBD_CoreFindEP>
 8007152:	4603      	mov	r3, r0
 8007154:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	2bff      	cmp	r3, #255	@ 0xff
 800715a:	d025      	beq.n	80071a8 <USBD_LL_DataInStage+0x15a>
 800715c:	7dfb      	ldrb	r3, [r7, #23]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d122      	bne.n	80071a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b03      	cmp	r3, #3
 800716c:	d11c      	bne.n	80071a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800716e:	7dfa      	ldrb	r2, [r7, #23]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	32ae      	adds	r2, #174	@ 0xae
 8007174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d014      	beq.n	80071a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800717e:	7dfa      	ldrb	r2, [r7, #23]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007186:	7dfa      	ldrb	r2, [r7, #23]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	32ae      	adds	r2, #174	@ 0xae
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	7afa      	ldrb	r2, [r7, #11]
 8007194:	4611      	mov	r1, r2
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	4798      	blx	r3
 800719a:	4603      	mov	r3, r0
 800719c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800719e:	7dbb      	ldrb	r3, [r7, #22]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80071a4:	7dbb      	ldrb	r3, [r7, #22]
 80071a6:	e000      	b.n	80071aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d014      	beq.n	8007218 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00e      	beq.n	8007218 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6852      	ldr	r2, [r2, #4]
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	4611      	mov	r1, r2
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	4798      	blx	r3
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	d001      	beq.n	8007218 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007214:	2303      	movs	r3, #3
 8007216:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007218:	2340      	movs	r3, #64	@ 0x40
 800721a:	2200      	movs	r2, #0
 800721c:	2100      	movs	r1, #0
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fbe9 	bl	80089f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2240      	movs	r2, #64	@ 0x40
 8007230:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007234:	2340      	movs	r3, #64	@ 0x40
 8007236:	2200      	movs	r2, #0
 8007238:	2180      	movs	r1, #128	@ 0x80
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 fbdb 	bl	80089f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2240      	movs	r2, #64	@ 0x40
 800724a:	621a      	str	r2, [r3, #32]

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b04      	cmp	r3, #4
 8007288:	d006      	beq.n	8007298 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007290:	b2da      	uxtb	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2204      	movs	r2, #4
 800729c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80072a0:	2300      	movs	r3, #0
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	370c      	adds	r7, #12
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr

080072ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072ae:	b480      	push	{r7}
 80072b0:	b083      	sub	sp, #12
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d106      	bne.n	80072d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ec:	b2db      	uxtb	r3, r3
 80072ee:	2b03      	cmp	r3, #3
 80072f0:	d110      	bne.n	8007314 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d005      	beq.n	8007314 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800730e:	69db      	ldr	r3, [r3, #28]
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007314:	2300      	movs	r3, #0
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800731e:	b580      	push	{r7, lr}
 8007320:	b082      	sub	sp, #8
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	32ae      	adds	r2, #174	@ 0xae
 8007334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800733c:	2303      	movs	r3, #3
 800733e:	e01c      	b.n	800737a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b03      	cmp	r3, #3
 800734a:	d115      	bne.n	8007378 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	32ae      	adds	r2, #174	@ 0xae
 8007356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00b      	beq.n	8007378 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	32ae      	adds	r2, #174	@ 0xae
 800736a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	78fa      	ldrb	r2, [r7, #3]
 8007372:	4611      	mov	r1, r2
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	460b      	mov	r3, r1
 800738c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	32ae      	adds	r2, #174	@ 0xae
 8007398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e01c      	b.n	80073de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d115      	bne.n	80073dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	32ae      	adds	r2, #174	@ 0xae
 80073ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00b      	beq.n	80073dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	32ae      	adds	r2, #174	@ 0xae
 80073ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d4:	78fa      	ldrb	r2, [r7, #3]
 80073d6:	4611      	mov	r1, r2
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3708      	adds	r7, #8
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00e      	beq.n	8007438 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	6852      	ldr	r2, [r2, #4]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	4611      	mov	r1, r2
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007434:	2303      	movs	r3, #3
 8007436:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007438:	7bfb      	ldrb	r3, [r7, #15]
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}

08007442 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007442:	b480      	push	{r7}
 8007444:	b083      	sub	sp, #12
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
 800744a:	460b      	mov	r3, r1
 800744c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800744e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007450:	4618      	mov	r0, r3
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007468:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800746a:	4618      	mov	r0, r3
 800746c:	370c      	adds	r7, #12
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	460b      	mov	r3, r1
 8007480:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	885b      	ldrh	r3, [r3, #2]
 8007492:	b29b      	uxth	r3, r3
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	7812      	ldrb	r2, [r2, #0]
 8007498:	4293      	cmp	r3, r2
 800749a:	d91f      	bls.n	80074dc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80074a2:	e013      	b.n	80074cc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80074a4:	f107 030a 	add.w	r3, r7, #10
 80074a8:	4619      	mov	r1, r3
 80074aa:	6978      	ldr	r0, [r7, #20]
 80074ac:	f000 f81b 	bl	80074e6 <USBD_GetNextDesc>
 80074b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	785b      	ldrb	r3, [r3, #1]
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d108      	bne.n	80074cc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	789b      	ldrb	r3, [r3, #2]
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d008      	beq.n	80074da <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	885b      	ldrh	r3, [r3, #2]
 80074d0:	b29a      	uxth	r2, r3
 80074d2:	897b      	ldrh	r3, [r7, #10]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d8e5      	bhi.n	80074a4 <USBD_GetEpDesc+0x2e>
 80074d8:	e000      	b.n	80074dc <USBD_GetEpDesc+0x66>
          break;
 80074da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80074dc:	693b      	ldr	r3, [r7, #16]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b085      	sub	sp, #20
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	7812      	ldrb	r2, [r2, #0]
 80074fc:	4413      	add	r3, r2
 80074fe:	b29a      	uxth	r2, r3
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4413      	add	r3, r2
 800750e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007510:	68fb      	ldr	r3, [r7, #12]
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800751e:	b480      	push	{r7}
 8007520:	b087      	sub	sp, #28
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	3301      	adds	r3, #1
 8007534:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800753c:	8a3b      	ldrh	r3, [r7, #16]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	b21a      	sxth	r2, r3
 8007542:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007546:	4313      	orrs	r3, r2
 8007548:	b21b      	sxth	r3, r3
 800754a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800754c:	89fb      	ldrh	r3, [r7, #14]
}
 800754e:	4618      	mov	r0, r3
 8007550:	371c      	adds	r7, #28
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	781b      	ldrb	r3, [r3, #0]
 800756e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007572:	2b40      	cmp	r3, #64	@ 0x40
 8007574:	d005      	beq.n	8007582 <USBD_StdDevReq+0x26>
 8007576:	2b40      	cmp	r3, #64	@ 0x40
 8007578:	d857      	bhi.n	800762a <USBD_StdDevReq+0xce>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00f      	beq.n	800759e <USBD_StdDevReq+0x42>
 800757e:	2b20      	cmp	r3, #32
 8007580:	d153      	bne.n	800762a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	32ae      	adds	r2, #174	@ 0xae
 800758c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	6839      	ldr	r1, [r7, #0]
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	4798      	blx	r3
 8007598:	4603      	mov	r3, r0
 800759a:	73fb      	strb	r3, [r7, #15]
      break;
 800759c:	e04a      	b.n	8007634 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b09      	cmp	r3, #9
 80075a4:	d83b      	bhi.n	800761e <USBD_StdDevReq+0xc2>
 80075a6:	a201      	add	r2, pc, #4	@ (adr r2, 80075ac <USBD_StdDevReq+0x50>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	08007601 	.word	0x08007601
 80075b0:	08007615 	.word	0x08007615
 80075b4:	0800761f 	.word	0x0800761f
 80075b8:	0800760b 	.word	0x0800760b
 80075bc:	0800761f 	.word	0x0800761f
 80075c0:	080075df 	.word	0x080075df
 80075c4:	080075d5 	.word	0x080075d5
 80075c8:	0800761f 	.word	0x0800761f
 80075cc:	080075f7 	.word	0x080075f7
 80075d0:	080075e9 	.word	0x080075e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa3c 	bl	8007a54 <USBD_GetDescriptor>
          break;
 80075dc:	e024      	b.n	8007628 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 fba1 	bl	8007d28 <USBD_SetAddress>
          break;
 80075e6:	e01f      	b.n	8007628 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fbe0 	bl	8007db0 <USBD_SetConfig>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
          break;
 80075f4:	e018      	b.n	8007628 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fc83 	bl	8007f04 <USBD_GetConfig>
          break;
 80075fe:	e013      	b.n	8007628 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fcb4 	bl	8007f70 <USBD_GetStatus>
          break;
 8007608:	e00e      	b.n	8007628 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800760a:	6839      	ldr	r1, [r7, #0]
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fce3 	bl	8007fd8 <USBD_SetFeature>
          break;
 8007612:	e009      	b.n	8007628 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fd07 	bl	800802a <USBD_ClrFeature>
          break;
 800761c:	e004      	b.n	8007628 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fd5e 	bl	80080e2 <USBD_CtlError>
          break;
 8007626:	bf00      	nop
      }
      break;
 8007628:	e004      	b.n	8007634 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fd58 	bl	80080e2 <USBD_CtlError>
      break;
 8007632:	bf00      	nop
  }

  return ret;
 8007634:	7bfb      	ldrb	r3, [r7, #15]
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop

08007640 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007656:	2b40      	cmp	r3, #64	@ 0x40
 8007658:	d005      	beq.n	8007666 <USBD_StdItfReq+0x26>
 800765a:	2b40      	cmp	r3, #64	@ 0x40
 800765c:	d852      	bhi.n	8007704 <USBD_StdItfReq+0xc4>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <USBD_StdItfReq+0x26>
 8007662:	2b20      	cmp	r3, #32
 8007664:	d14e      	bne.n	8007704 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800766c:	b2db      	uxtb	r3, r3
 800766e:	3b01      	subs	r3, #1
 8007670:	2b02      	cmp	r3, #2
 8007672:	d840      	bhi.n	80076f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	889b      	ldrh	r3, [r3, #4]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d836      	bhi.n	80076ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	889b      	ldrh	r3, [r3, #4]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff fedb 	bl	8007442 <USBD_CoreFindIF>
 800768c:	4603      	mov	r3, r0
 800768e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007690:	7bbb      	ldrb	r3, [r7, #14]
 8007692:	2bff      	cmp	r3, #255	@ 0xff
 8007694:	d01d      	beq.n	80076d2 <USBD_StdItfReq+0x92>
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11a      	bne.n	80076d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800769c:	7bba      	ldrb	r2, [r7, #14]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	32ae      	adds	r2, #174	@ 0xae
 80076a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00f      	beq.n	80076cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80076ac:	7bba      	ldrb	r2, [r7, #14]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076b4:	7bba      	ldrb	r2, [r7, #14]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32ae      	adds	r2, #174	@ 0xae
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	6839      	ldr	r1, [r7, #0]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
 80076c6:	4603      	mov	r3, r0
 80076c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076ca:	e004      	b.n	80076d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076d0:	e001      	b.n	80076d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076d2:	2303      	movs	r3, #3
 80076d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	88db      	ldrh	r3, [r3, #6]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d110      	bne.n	8007700 <USBD_StdItfReq+0xc0>
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10d      	bne.n	8007700 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fdc7 	bl	8008278 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076ea:	e009      	b.n	8007700 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076ec:	6839      	ldr	r1, [r7, #0]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fcf7 	bl	80080e2 <USBD_CtlError>
          break;
 80076f4:	e004      	b.n	8007700 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fcf2 	bl	80080e2 <USBD_CtlError>
          break;
 80076fe:	e000      	b.n	8007702 <USBD_StdItfReq+0xc2>
          break;
 8007700:	bf00      	nop
      }
      break;
 8007702:	e004      	b.n	800770e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007704:	6839      	ldr	r1, [r7, #0]
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fceb 	bl	80080e2 <USBD_CtlError>
      break;
 800770c:	bf00      	nop
  }

  return ret;
 800770e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	889b      	ldrh	r3, [r3, #4]
 800772a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007734:	2b40      	cmp	r3, #64	@ 0x40
 8007736:	d007      	beq.n	8007748 <USBD_StdEPReq+0x30>
 8007738:	2b40      	cmp	r3, #64	@ 0x40
 800773a:	f200 817f 	bhi.w	8007a3c <USBD_StdEPReq+0x324>
 800773e:	2b00      	cmp	r3, #0
 8007740:	d02a      	beq.n	8007798 <USBD_StdEPReq+0x80>
 8007742:	2b20      	cmp	r3, #32
 8007744:	f040 817a 	bne.w	8007a3c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f7ff fe85 	bl	800745c <USBD_CoreFindEP>
 8007752:	4603      	mov	r3, r0
 8007754:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007756:	7b7b      	ldrb	r3, [r7, #13]
 8007758:	2bff      	cmp	r3, #255	@ 0xff
 800775a:	f000 8174 	beq.w	8007a46 <USBD_StdEPReq+0x32e>
 800775e:	7b7b      	ldrb	r3, [r7, #13]
 8007760:	2b00      	cmp	r3, #0
 8007762:	f040 8170 	bne.w	8007a46 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007766:	7b7a      	ldrb	r2, [r7, #13]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800776e:	7b7a      	ldrb	r2, [r7, #13]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	32ae      	adds	r2, #174	@ 0xae
 8007774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 8163 	beq.w	8007a46 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007780:	7b7a      	ldrb	r2, [r7, #13]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	32ae      	adds	r2, #174	@ 0xae
 8007786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
 8007792:	4603      	mov	r3, r0
 8007794:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007796:	e156      	b.n	8007a46 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b03      	cmp	r3, #3
 800779e:	d008      	beq.n	80077b2 <USBD_StdEPReq+0x9a>
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	f300 8145 	bgt.w	8007a30 <USBD_StdEPReq+0x318>
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 809b 	beq.w	80078e2 <USBD_StdEPReq+0x1ca>
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d03c      	beq.n	800782a <USBD_StdEPReq+0x112>
 80077b0:	e13e      	b.n	8007a30 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d002      	beq.n	80077c4 <USBD_StdEPReq+0xac>
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d016      	beq.n	80077f0 <USBD_StdEPReq+0xd8>
 80077c2:	e02c      	b.n	800781e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <USBD_StdEPReq+0xce>
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
 80077cc:	2b80      	cmp	r3, #128	@ 0x80
 80077ce:	d00a      	beq.n	80077e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 f953 	bl	8008a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077da:	2180      	movs	r1, #128	@ 0x80
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f94f 	bl	8008a80 <USBD_LL_StallEP>
 80077e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077e4:	e020      	b.n	8007828 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fc7a 	bl	80080e2 <USBD_CtlError>
              break;
 80077ee:	e01b      	b.n	8007828 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	885b      	ldrh	r3, [r3, #2]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10e      	bne.n	8007816 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80077f8:	7bbb      	ldrb	r3, [r7, #14]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00b      	beq.n	8007816 <USBD_StdEPReq+0xfe>
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b80      	cmp	r3, #128	@ 0x80
 8007802:	d008      	beq.n	8007816 <USBD_StdEPReq+0xfe>
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	88db      	ldrh	r3, [r3, #6]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d104      	bne.n	8007816 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f001 f935 	bl	8008a80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fd2e 	bl	8008278 <USBD_CtlSendStatus>

              break;
 800781c:	e004      	b.n	8007828 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800781e:	6839      	ldr	r1, [r7, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f000 fc5e 	bl	80080e2 <USBD_CtlError>
              break;
 8007826:	bf00      	nop
          }
          break;
 8007828:	e107      	b.n	8007a3a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b02      	cmp	r3, #2
 8007834:	d002      	beq.n	800783c <USBD_StdEPReq+0x124>
 8007836:	2b03      	cmp	r3, #3
 8007838:	d016      	beq.n	8007868 <USBD_StdEPReq+0x150>
 800783a:	e04b      	b.n	80078d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00d      	beq.n	800785e <USBD_StdEPReq+0x146>
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b80      	cmp	r3, #128	@ 0x80
 8007846:	d00a      	beq.n	800785e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f001 f917 	bl	8008a80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007852:	2180      	movs	r1, #128	@ 0x80
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f913 	bl	8008a80 <USBD_LL_StallEP>
 800785a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800785c:	e040      	b.n	80078e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 fc3e 	bl	80080e2 <USBD_CtlError>
              break;
 8007866:	e03b      	b.n	80078e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	885b      	ldrh	r3, [r3, #2]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d136      	bne.n	80078de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f001 f91d 	bl	8008abe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fcf7 	bl	8008278 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800788a:	7bbb      	ldrb	r3, [r7, #14]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fde4 	bl	800745c <USBD_CoreFindEP>
 8007894:	4603      	mov	r3, r0
 8007896:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007898:	7b7b      	ldrb	r3, [r7, #13]
 800789a:	2bff      	cmp	r3, #255	@ 0xff
 800789c:	d01f      	beq.n	80078de <USBD_StdEPReq+0x1c6>
 800789e:	7b7b      	ldrb	r3, [r7, #13]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d11c      	bne.n	80078de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80078a4:	7b7a      	ldrb	r2, [r7, #13]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80078ac:	7b7a      	ldrb	r2, [r7, #13]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	32ae      	adds	r2, #174	@ 0xae
 80078b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d010      	beq.n	80078de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078bc:	7b7a      	ldrb	r2, [r7, #13]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	32ae      	adds	r2, #174	@ 0xae
 80078c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	4798      	blx	r3
 80078ce:	4603      	mov	r3, r0
 80078d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078d2:	e004      	b.n	80078de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fc03 	bl	80080e2 <USBD_CtlError>
              break;
 80078dc:	e000      	b.n	80078e0 <USBD_StdEPReq+0x1c8>
              break;
 80078de:	bf00      	nop
          }
          break;
 80078e0:	e0ab      	b.n	8007a3a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d002      	beq.n	80078f4 <USBD_StdEPReq+0x1dc>
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d032      	beq.n	8007958 <USBD_StdEPReq+0x240>
 80078f2:	e097      	b.n	8007a24 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d007      	beq.n	800790a <USBD_StdEPReq+0x1f2>
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b80      	cmp	r3, #128	@ 0x80
 80078fe:	d004      	beq.n	800790a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fbed 	bl	80080e2 <USBD_CtlError>
                break;
 8007908:	e091      	b.n	8007a2e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800790a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800790e:	2b00      	cmp	r3, #0
 8007910:	da0b      	bge.n	800792a <USBD_StdEPReq+0x212>
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	3310      	adds	r3, #16
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4413      	add	r3, r2
 8007926:	3304      	adds	r3, #4
 8007928:	e00b      	b.n	8007942 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	4413      	add	r3, r2
 8007940:	3304      	adds	r3, #4
 8007942:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2202      	movs	r2, #2
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fc37 	bl	80081c4 <USBD_CtlSendData>
              break;
 8007956:	e06a      	b.n	8007a2e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	da11      	bge.n	8007984 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	f003 020f 	and.w	r2, r3, #15
 8007966:	6879      	ldr	r1, [r7, #4]
 8007968:	4613      	mov	r3, r2
 800796a:	009b      	lsls	r3, r3, #2
 800796c:	4413      	add	r3, r2
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	3324      	adds	r3, #36	@ 0x24
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d117      	bne.n	80079aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800797a:	6839      	ldr	r1, [r7, #0]
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f000 fbb0 	bl	80080e2 <USBD_CtlError>
                  break;
 8007982:	e054      	b.n	8007a2e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	f003 020f 	and.w	r2, r3, #15
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	4613      	mov	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	4413      	add	r3, r2
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	440b      	add	r3, r1
 8007996:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800799a:	881b      	ldrh	r3, [r3, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d104      	bne.n	80079aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fb9d 	bl	80080e2 <USBD_CtlError>
                  break;
 80079a8:	e041      	b.n	8007a2e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	da0b      	bge.n	80079ca <USBD_StdEPReq+0x2b2>
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	3310      	adds	r3, #16
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	3304      	adds	r3, #4
 80079c8:	e00b      	b.n	80079e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ca:	7bbb      	ldrb	r3, [r7, #14]
 80079cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	4413      	add	r3, r2
 80079e0:	3304      	adds	r3, #4
 80079e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <USBD_StdEPReq+0x2d8>
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b80      	cmp	r3, #128	@ 0x80
 80079ee:	d103      	bne.n	80079f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]
 80079f6:	e00e      	b.n	8007a16 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 f87d 	bl	8008afc <USBD_LL_IsStallEP>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d003      	beq.n	8007a10 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	e002      	b.n	8007a16 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2200      	movs	r2, #0
 8007a14:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fbd1 	bl	80081c4 <USBD_CtlSendData>
              break;
 8007a22:	e004      	b.n	8007a2e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fb5b 	bl	80080e2 <USBD_CtlError>
              break;
 8007a2c:	bf00      	nop
          }
          break;
 8007a2e:	e004      	b.n	8007a3a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fb55 	bl	80080e2 <USBD_CtlError>
          break;
 8007a38:	bf00      	nop
      }
      break;
 8007a3a:	e005      	b.n	8007a48 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb4f 	bl	80080e2 <USBD_CtlError>
      break;
 8007a44:	e000      	b.n	8007a48 <USBD_StdEPReq+0x330>
      break;
 8007a46:	bf00      	nop
  }

  return ret;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
	...

08007a54 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	885b      	ldrh	r3, [r3, #2]
 8007a6e:	0a1b      	lsrs	r3, r3, #8
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3b01      	subs	r3, #1
 8007a74:	2b06      	cmp	r3, #6
 8007a76:	f200 8128 	bhi.w	8007cca <USBD_GetDescriptor+0x276>
 8007a7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a80 <USBD_GetDescriptor+0x2c>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007a9d 	.word	0x08007a9d
 8007a84:	08007ab5 	.word	0x08007ab5
 8007a88:	08007af5 	.word	0x08007af5
 8007a8c:	08007ccb 	.word	0x08007ccb
 8007a90:	08007ccb 	.word	0x08007ccb
 8007a94:	08007c6b 	.word	0x08007c6b
 8007a98:	08007c97 	.word	0x08007c97
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	7c12      	ldrb	r2, [r2, #16]
 8007aa8:	f107 0108 	add.w	r1, r7, #8
 8007aac:	4610      	mov	r0, r2
 8007aae:	4798      	blx	r3
 8007ab0:	60f8      	str	r0, [r7, #12]
      break;
 8007ab2:	e112      	b.n	8007cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	7c1b      	ldrb	r3, [r3, #16]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10d      	bne.n	8007ad8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac4:	f107 0208 	add.w	r2, r7, #8
 8007ac8:	4610      	mov	r0, r2
 8007aca:	4798      	blx	r3
 8007acc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ad6:	e100      	b.n	8007cda <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ae0:	f107 0208 	add.w	r2, r7, #8
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4798      	blx	r3
 8007ae8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	3301      	adds	r3, #1
 8007aee:	2202      	movs	r2, #2
 8007af0:	701a      	strb	r2, [r3, #0]
      break;
 8007af2:	e0f2      	b.n	8007cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	885b      	ldrh	r3, [r3, #2]
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	2b05      	cmp	r3, #5
 8007afc:	f200 80ac 	bhi.w	8007c58 <USBD_GetDescriptor+0x204>
 8007b00:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <USBD_GetDescriptor+0xb4>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b21 	.word	0x08007b21
 8007b0c:	08007b55 	.word	0x08007b55
 8007b10:	08007b89 	.word	0x08007b89
 8007b14:	08007bbd 	.word	0x08007bbd
 8007b18:	08007bf1 	.word	0x08007bf1
 8007b1c:	08007c25 	.word	0x08007c25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00b      	beq.n	8007b44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	7c12      	ldrb	r2, [r2, #16]
 8007b38:	f107 0108 	add.w	r1, r7, #8
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
 8007b40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b42:	e091      	b.n	8007c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 facb 	bl	80080e2 <USBD_CtlError>
            err++;
 8007b4c:	7afb      	ldrb	r3, [r7, #11]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	72fb      	strb	r3, [r7, #11]
          break;
 8007b52:	e089      	b.n	8007c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00b      	beq.n	8007b78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	7c12      	ldrb	r2, [r2, #16]
 8007b6c:	f107 0108 	add.w	r1, r7, #8
 8007b70:	4610      	mov	r0, r2
 8007b72:	4798      	blx	r3
 8007b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b76:	e077      	b.n	8007c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b78:	6839      	ldr	r1, [r7, #0]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fab1 	bl	80080e2 <USBD_CtlError>
            err++;
 8007b80:	7afb      	ldrb	r3, [r7, #11]
 8007b82:	3301      	adds	r3, #1
 8007b84:	72fb      	strb	r3, [r7, #11]
          break;
 8007b86:	e06f      	b.n	8007c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00b      	beq.n	8007bac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b9a:	68db      	ldr	r3, [r3, #12]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	7c12      	ldrb	r2, [r2, #16]
 8007ba0:	f107 0108 	add.w	r1, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007baa:	e05d      	b.n	8007c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bac:	6839      	ldr	r1, [r7, #0]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa97 	bl	80080e2 <USBD_CtlError>
            err++;
 8007bb4:	7afb      	ldrb	r3, [r7, #11]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8007bba:	e055      	b.n	8007c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00b      	beq.n	8007be0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bce:	691b      	ldr	r3, [r3, #16]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bde:	e043      	b.n	8007c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa7d 	bl	80080e2 <USBD_CtlError>
            err++;
 8007be8:	7afb      	ldrb	r3, [r7, #11]
 8007bea:	3301      	adds	r3, #1
 8007bec:	72fb      	strb	r3, [r7, #11]
          break;
 8007bee:	e03b      	b.n	8007c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf6:	695b      	ldr	r3, [r3, #20]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	7c12      	ldrb	r2, [r2, #16]
 8007c08:	f107 0108 	add.w	r1, r7, #8
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4798      	blx	r3
 8007c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c12:	e029      	b.n	8007c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c14:	6839      	ldr	r1, [r7, #0]
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 fa63 	bl	80080e2 <USBD_CtlError>
            err++;
 8007c1c:	7afb      	ldrb	r3, [r7, #11]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	72fb      	strb	r3, [r7, #11]
          break;
 8007c22:	e021      	b.n	8007c68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00b      	beq.n	8007c48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	7c12      	ldrb	r2, [r2, #16]
 8007c3c:	f107 0108 	add.w	r1, r7, #8
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
 8007c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c46:	e00f      	b.n	8007c68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa49 	bl	80080e2 <USBD_CtlError>
            err++;
 8007c50:	7afb      	ldrb	r3, [r7, #11]
 8007c52:	3301      	adds	r3, #1
 8007c54:	72fb      	strb	r3, [r7, #11]
          break;
 8007c56:	e007      	b.n	8007c68 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 fa41 	bl	80080e2 <USBD_CtlError>
          err++;
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	3301      	adds	r3, #1
 8007c64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c66:	bf00      	nop
      }
      break;
 8007c68:	e037      	b.n	8007cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	7c1b      	ldrb	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c7a:	f107 0208 	add.w	r2, r7, #8
 8007c7e:	4610      	mov	r0, r2
 8007c80:	4798      	blx	r3
 8007c82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c84:	e029      	b.n	8007cda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c86:	6839      	ldr	r1, [r7, #0]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fa2a 	bl	80080e2 <USBD_CtlError>
        err++;
 8007c8e:	7afb      	ldrb	r3, [r7, #11]
 8007c90:	3301      	adds	r3, #1
 8007c92:	72fb      	strb	r3, [r7, #11]
      break;
 8007c94:	e021      	b.n	8007cda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7c1b      	ldrb	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10d      	bne.n	8007cba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ca6:	f107 0208 	add.w	r2, r7, #8
 8007caa:	4610      	mov	r0, r2
 8007cac:	4798      	blx	r3
 8007cae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	2207      	movs	r2, #7
 8007cb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb8:	e00f      	b.n	8007cda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cba:	6839      	ldr	r1, [r7, #0]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f000 fa10 	bl	80080e2 <USBD_CtlError>
        err++;
 8007cc2:	7afb      	ldrb	r3, [r7, #11]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc8:	e007      	b.n	8007cda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fa08 	bl	80080e2 <USBD_CtlError>
      err++;
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd8:	bf00      	nop
  }

  if (err != 0U)
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d11e      	bne.n	8007d1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	88db      	ldrh	r3, [r3, #6]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d016      	beq.n	8007d16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007ce8:	893b      	ldrh	r3, [r7, #8]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00e      	beq.n	8007d0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	88da      	ldrh	r2, [r3, #6]
 8007cf2:	893b      	ldrh	r3, [r7, #8]
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	bf28      	it	cs
 8007cf8:	4613      	movcs	r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007cfe:	893b      	ldrh	r3, [r7, #8]
 8007d00:	461a      	mov	r2, r3
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 fa5d 	bl	80081c4 <USBD_CtlSendData>
 8007d0a:	e009      	b.n	8007d20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 f9e7 	bl	80080e2 <USBD_CtlError>
 8007d14:	e004      	b.n	8007d20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 faae 	bl	8008278 <USBD_CtlSendStatus>
 8007d1c:	e000      	b.n	8007d20 <USBD_GetDescriptor+0x2cc>
    return;
 8007d1e:	bf00      	nop
  }
}
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop

08007d28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	889b      	ldrh	r3, [r3, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d131      	bne.n	8007d9e <USBD_SetAddress+0x76>
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	88db      	ldrh	r3, [r3, #6]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d12d      	bne.n	8007d9e <USBD_SetAddress+0x76>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	885b      	ldrh	r3, [r3, #2]
 8007d46:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d48:	d829      	bhi.n	8007d9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d104      	bne.n	8007d6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 f9bc 	bl	80080e2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d6a:	e01d      	b.n	8007da8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	7bfa      	ldrb	r2, [r7, #15]
 8007d70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 feeb 	bl	8008b54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa7a 	bl	8008278 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d004      	beq.n	8007d94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d92:	e009      	b.n	8007da8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2201      	movs	r2, #1
 8007d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9c:	e004      	b.n	8007da8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007d9e:	6839      	ldr	r1, [r7, #0]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 f99e 	bl	80080e2 <USBD_CtlError>
  }
}
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	4b4e      	ldr	r3, [pc, #312]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007dc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d905      	bls.n	8007ddc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007dd0:	6839      	ldr	r1, [r7, #0]
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f985 	bl	80080e2 <USBD_CtlError>
    return USBD_FAIL;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e08c      	b.n	8007ef6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d002      	beq.n	8007dee <USBD_SetConfig+0x3e>
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d029      	beq.n	8007e40 <USBD_SetConfig+0x90>
 8007dec:	e075      	b.n	8007eda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007dee:	4b44      	ldr	r3, [pc, #272]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d020      	beq.n	8007e38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007df6:	4b42      	ldr	r3, [pc, #264]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e00:	4b3f      	ldr	r3, [pc, #252]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	4619      	mov	r1, r3
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f7fe ffe3 	bl	8006dd2 <USBD_SetClassConfig>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e10:	7bfb      	ldrb	r3, [r7, #15]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d008      	beq.n	8007e28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f962 	bl	80080e2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e26:	e065      	b.n	8007ef4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fa25 	bl	8008278 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2203      	movs	r2, #3
 8007e32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007e36:	e05d      	b.n	8007ef4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa1d 	bl	8008278 <USBD_CtlSendStatus>
      break;
 8007e3e:	e059      	b.n	8007ef4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e40:	4b2f      	ldr	r3, [pc, #188]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d112      	bne.n	8007e6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2202      	movs	r2, #2
 8007e4c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007e50:	4b2b      	ldr	r3, [pc, #172]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	461a      	mov	r2, r3
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e5a:	4b29      	ldr	r3, [pc, #164]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fe ffd2 	bl	8006e0a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa06 	bl	8008278 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e6c:	e042      	b.n	8007ef4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e6e:	4b24      	ldr	r3, [pc, #144]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	461a      	mov	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d02a      	beq.n	8007ed2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	4619      	mov	r1, r3
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7fe ffc0 	bl	8006e0a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e94:	4b1a      	ldr	r3, [pc, #104]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007e96:	781b      	ldrb	r3, [r3, #0]
 8007e98:	4619      	mov	r1, r3
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7fe ff99 	bl	8006dd2 <USBD_SetClassConfig>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00f      	beq.n	8007eca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f000 f918 	bl	80080e2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fe ffa5 	bl	8006e0a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ec8:	e014      	b.n	8007ef4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f9d4 	bl	8008278 <USBD_CtlSendStatus>
      break;
 8007ed0:	e010      	b.n	8007ef4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9d0 	bl	8008278 <USBD_CtlSendStatus>
      break;
 8007ed8:	e00c      	b.n	8007ef4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f900 	bl	80080e2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ee2:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <USBD_SetConfig+0x150>)
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7fe ff8e 	bl	8006e0a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ef2:	bf00      	nop
  }

  return ret;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	200003e0 	.word	0x200003e0

08007f04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88db      	ldrh	r3, [r3, #6]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d004      	beq.n	8007f20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f16:	6839      	ldr	r1, [r7, #0]
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f8e2 	bl	80080e2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f1e:	e023      	b.n	8007f68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	dc02      	bgt.n	8007f32 <USBD_GetConfig+0x2e>
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	dc03      	bgt.n	8007f38 <USBD_GetConfig+0x34>
 8007f30:	e015      	b.n	8007f5e <USBD_GetConfig+0x5a>
 8007f32:	2b03      	cmp	r3, #3
 8007f34:	d00b      	beq.n	8007f4e <USBD_GetConfig+0x4a>
 8007f36:	e012      	b.n	8007f5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3308      	adds	r3, #8
 8007f42:	2201      	movs	r2, #1
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f93c 	bl	80081c4 <USBD_CtlSendData>
        break;
 8007f4c:	e00c      	b.n	8007f68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	3304      	adds	r3, #4
 8007f52:	2201      	movs	r2, #1
 8007f54:	4619      	mov	r1, r3
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f934 	bl	80081c4 <USBD_CtlSendData>
        break;
 8007f5c:	e004      	b.n	8007f68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f8be 	bl	80080e2 <USBD_CtlError>
        break;
 8007f66:	bf00      	nop
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f80:	b2db      	uxtb	r3, r3
 8007f82:	3b01      	subs	r3, #1
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d81e      	bhi.n	8007fc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	88db      	ldrh	r3, [r3, #6]
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d004      	beq.n	8007f9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f90:	6839      	ldr	r1, [r7, #0]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f8a5 	bl	80080e2 <USBD_CtlError>
        break;
 8007f98:	e01a      	b.n	8007fd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d005      	beq.n	8007fb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	f043 0202 	orr.w	r2, r3, #2
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	330c      	adds	r3, #12
 8007fba:	2202      	movs	r2, #2
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f900 	bl	80081c4 <USBD_CtlSendData>
      break;
 8007fc4:	e004      	b.n	8007fd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007fc6:	6839      	ldr	r1, [r7, #0]
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f88a 	bl	80080e2 <USBD_CtlError>
      break;
 8007fce:	bf00      	nop
  }
}
 8007fd0:	bf00      	nop
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	885b      	ldrh	r3, [r3, #2]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d107      	bne.n	8007ffa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f940 	bl	8008278 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ff8:	e013      	b.n	8008022 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	885b      	ldrh	r3, [r3, #2]
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d10b      	bne.n	800801a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	889b      	ldrh	r3, [r3, #4]
 8008006:	0a1b      	lsrs	r3, r3, #8
 8008008:	b29b      	uxth	r3, r3
 800800a:	b2da      	uxtb	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 f930 	bl	8008278 <USBD_CtlSendStatus>
}
 8008018:	e003      	b.n	8008022 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800801a:	6839      	ldr	r1, [r7, #0]
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f860 	bl	80080e2 <USBD_CtlError>
}
 8008022:	bf00      	nop
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800803a:	b2db      	uxtb	r3, r3
 800803c:	3b01      	subs	r3, #1
 800803e:	2b02      	cmp	r3, #2
 8008040:	d80b      	bhi.n	800805a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	885b      	ldrh	r3, [r3, #2]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d10c      	bne.n	8008064 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f000 f910 	bl	8008278 <USBD_CtlSendStatus>
      }
      break;
 8008058:	e004      	b.n	8008064 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800805a:	6839      	ldr	r1, [r7, #0]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f840 	bl	80080e2 <USBD_CtlError>
      break;
 8008062:	e000      	b.n	8008066 <USBD_ClrFeature+0x3c>
      break;
 8008064:	bf00      	nop
  }
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b084      	sub	sp, #16
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	781a      	ldrb	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3301      	adds	r3, #1
 8008088:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	781a      	ldrb	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3301      	adds	r3, #1
 8008096:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	f7ff fa40 	bl	800751e <SWAPBYTE>
 800809e:	4603      	mov	r3, r0
 80080a0:	461a      	mov	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	3301      	adds	r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7ff fa33 	bl	800751e <SWAPBYTE>
 80080b8:	4603      	mov	r3, r0
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3301      	adds	r3, #1
 80080c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3301      	adds	r3, #1
 80080ca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080cc:	68f8      	ldr	r0, [r7, #12]
 80080ce:	f7ff fa26 	bl	800751e <SWAPBYTE>
 80080d2:	4603      	mov	r3, r0
 80080d4:	461a      	mov	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	80da      	strh	r2, [r3, #6]
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080ec:	2180      	movs	r1, #128	@ 0x80
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fcc6 	bl	8008a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080f4:	2100      	movs	r1, #0
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fcc2 	bl	8008a80 <USBD_LL_StallEP>
}
 80080fc:	bf00      	nop
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d036      	beq.n	8008188 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800811e:	6938      	ldr	r0, [r7, #16]
 8008120:	f000 f836 	bl	8008190 <USBD_GetLen>
 8008124:	4603      	mov	r3, r0
 8008126:	3301      	adds	r3, #1
 8008128:	b29b      	uxth	r3, r3
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	b29a      	uxth	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008132:	7dfb      	ldrb	r3, [r7, #23]
 8008134:	68ba      	ldr	r2, [r7, #8]
 8008136:	4413      	add	r3, r2
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	7812      	ldrb	r2, [r2, #0]
 800813c:	701a      	strb	r2, [r3, #0]
  idx++;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
 8008140:	3301      	adds	r3, #1
 8008142:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	4413      	add	r3, r2
 800814a:	2203      	movs	r2, #3
 800814c:	701a      	strb	r2, [r3, #0]
  idx++;
 800814e:	7dfb      	ldrb	r3, [r7, #23]
 8008150:	3301      	adds	r3, #1
 8008152:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008154:	e013      	b.n	800817e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	4413      	add	r3, r2
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	3301      	adds	r3, #1
 8008166:	613b      	str	r3, [r7, #16]
    idx++;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	3301      	adds	r3, #1
 800816c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800816e:	7dfb      	ldrb	r3, [r7, #23]
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	4413      	add	r3, r2
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
    idx++;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
 800817a:	3301      	adds	r3, #1
 800817c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1e7      	bne.n	8008156 <USBD_GetString+0x52>
 8008186:	e000      	b.n	800818a <USBD_GetString+0x86>
    return;
 8008188:	bf00      	nop
  }
}
 800818a:	3718      	adds	r7, #24
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081a0:	e005      	b.n	80081ae <USBD_GetLen+0x1e>
  {
    len++;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
 80081a4:	3301      	adds	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	3301      	adds	r3, #1
 80081ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1f5      	bne.n	80081a2 <USBD_GetLen+0x12>
  }

  return len;
 80081b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	2100      	movs	r1, #0
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f000 fcd1 	bl	8008b92 <USBD_LL_Transmit>

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3710      	adds	r7, #16
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	60f8      	str	r0, [r7, #12]
 8008202:	60b9      	str	r1, [r7, #8]
 8008204:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	2100      	movs	r1, #0
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f000 fcc0 	bl	8008b92 <USBD_LL_Transmit>

  return USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2203      	movs	r2, #3
 800822c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68ba      	ldr	r2, [r7, #8]
 8008244:	2100      	movs	r1, #0
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 fcc4 	bl	8008bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	60f8      	str	r0, [r7, #12]
 800825e:	60b9      	str	r1, [r7, #8]
 8008260:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	2100      	movs	r1, #0
 8008268:	68f8      	ldr	r0, [r7, #12]
 800826a:	f000 fcb3 	bl	8008bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2204      	movs	r2, #4
 8008284:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008288:	2300      	movs	r3, #0
 800828a:	2200      	movs	r2, #0
 800828c:	2100      	movs	r1, #0
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc7f 	bl	8008b92 <USBD_LL_Transmit>

  return USBD_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3708      	adds	r7, #8
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b082      	sub	sp, #8
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2205      	movs	r2, #5
 80082aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082ae:	2300      	movs	r3, #0
 80082b0:	2200      	movs	r2, #0
 80082b2:	2100      	movs	r1, #0
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 fc8d 	bl	8008bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082c8:	2200      	movs	r2, #0
 80082ca:	4912      	ldr	r1, [pc, #72]	@ (8008314 <MX_USB_DEVICE_Init+0x50>)
 80082cc:	4812      	ldr	r0, [pc, #72]	@ (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082ce:	f7fe fd03 	bl	8006cd8 <USBD_Init>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082d8:	f7f9 f864 	bl	80013a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082dc:	490f      	ldr	r1, [pc, #60]	@ (800831c <MX_USB_DEVICE_Init+0x58>)
 80082de:	480e      	ldr	r0, [pc, #56]	@ (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082e0:	f7fe fd2a 	bl	8006d38 <USBD_RegisterClass>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082ea:	f7f9 f85b 	bl	80013a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082ee:	490c      	ldr	r1, [pc, #48]	@ (8008320 <MX_USB_DEVICE_Init+0x5c>)
 80082f0:	4809      	ldr	r0, [pc, #36]	@ (8008318 <MX_USB_DEVICE_Init+0x54>)
 80082f2:	f7fe fc21 	bl	8006b38 <USBD_CDC_RegisterInterface>
 80082f6:	4603      	mov	r3, r0
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d001      	beq.n	8008300 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80082fc:	f7f9 f852 	bl	80013a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008300:	4805      	ldr	r0, [pc, #20]	@ (8008318 <MX_USB_DEVICE_Init+0x54>)
 8008302:	f7fe fd4f 	bl	8006da4 <USBD_Start>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d001      	beq.n	8008310 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800830c:	f7f9 f84a 	bl	80013a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008310:	bf00      	nop
 8008312:	bd80      	pop	{r7, pc}
 8008314:	200000ac 	.word	0x200000ac
 8008318:	200003e4 	.word	0x200003e4
 800831c:	20000018 	.word	0x20000018
 8008320:	20000098 	.word	0x20000098

08008324 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008328:	2200      	movs	r2, #0
 800832a:	4905      	ldr	r1, [pc, #20]	@ (8008340 <CDC_Init_FS+0x1c>)
 800832c:	4805      	ldr	r0, [pc, #20]	@ (8008344 <CDC_Init_FS+0x20>)
 800832e:	f7fe fc1d 	bl	8006b6c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008332:	4905      	ldr	r1, [pc, #20]	@ (8008348 <CDC_Init_FS+0x24>)
 8008334:	4803      	ldr	r0, [pc, #12]	@ (8008344 <CDC_Init_FS+0x20>)
 8008336:	f7fe fc3b 	bl	8006bb0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800833a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800833c:	4618      	mov	r0, r3
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000ec0 	.word	0x20000ec0
 8008344:	200003e4 	.word	0x200003e4
 8008348:	200006c0 	.word	0x200006c0

0800834c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008350:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008352:	4618      	mov	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800835c:	b480      	push	{r7}
 800835e:	b083      	sub	sp, #12
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
 8008368:	4613      	mov	r3, r2
 800836a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800836c:	79fb      	ldrb	r3, [r7, #7]
 800836e:	2b23      	cmp	r3, #35	@ 0x23
 8008370:	d84a      	bhi.n	8008408 <CDC_Control_FS+0xac>
 8008372:	a201      	add	r2, pc, #4	@ (adr r2, 8008378 <CDC_Control_FS+0x1c>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	08008409 	.word	0x08008409
 800837c:	08008409 	.word	0x08008409
 8008380:	08008409 	.word	0x08008409
 8008384:	08008409 	.word	0x08008409
 8008388:	08008409 	.word	0x08008409
 800838c:	08008409 	.word	0x08008409
 8008390:	08008409 	.word	0x08008409
 8008394:	08008409 	.word	0x08008409
 8008398:	08008409 	.word	0x08008409
 800839c:	08008409 	.word	0x08008409
 80083a0:	08008409 	.word	0x08008409
 80083a4:	08008409 	.word	0x08008409
 80083a8:	08008409 	.word	0x08008409
 80083ac:	08008409 	.word	0x08008409
 80083b0:	08008409 	.word	0x08008409
 80083b4:	08008409 	.word	0x08008409
 80083b8:	08008409 	.word	0x08008409
 80083bc:	08008409 	.word	0x08008409
 80083c0:	08008409 	.word	0x08008409
 80083c4:	08008409 	.word	0x08008409
 80083c8:	08008409 	.word	0x08008409
 80083cc:	08008409 	.word	0x08008409
 80083d0:	08008409 	.word	0x08008409
 80083d4:	08008409 	.word	0x08008409
 80083d8:	08008409 	.word	0x08008409
 80083dc:	08008409 	.word	0x08008409
 80083e0:	08008409 	.word	0x08008409
 80083e4:	08008409 	.word	0x08008409
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008409 	.word	0x08008409
 80083f0:	08008409 	.word	0x08008409
 80083f4:	08008409 	.word	0x08008409
 80083f8:	08008409 	.word	0x08008409
 80083fc:	08008409 	.word	0x08008409
 8008400:	08008409 	.word	0x08008409
 8008404:	08008409 	.word	0x08008409
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008408:	bf00      	nop
  }

  return (USBD_OK);
 800840a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008422:	6879      	ldr	r1, [r7, #4]
 8008424:	4805      	ldr	r0, [pc, #20]	@ (800843c <CDC_Receive_FS+0x24>)
 8008426:	f7fe fbc3 	bl	8006bb0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800842a:	4804      	ldr	r0, [pc, #16]	@ (800843c <CDC_Receive_FS+0x24>)
 800842c:	f7fe fc1e 	bl	8006c6c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008430:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008432:	4618      	mov	r0, r3
 8008434:	3708      	adds	r7, #8
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	200003e4 	.word	0x200003e4

08008440 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800844c:	2300      	movs	r3, #0
 800844e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008450:	4b0d      	ldr	r3, [pc, #52]	@ (8008488 <CDC_Transmit_FS+0x48>)
 8008452:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008456:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008462:	2301      	movs	r3, #1
 8008464:	e00b      	b.n	800847e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008466:	887b      	ldrh	r3, [r7, #2]
 8008468:	461a      	mov	r2, r3
 800846a:	6879      	ldr	r1, [r7, #4]
 800846c:	4806      	ldr	r0, [pc, #24]	@ (8008488 <CDC_Transmit_FS+0x48>)
 800846e:	f7fe fb7d 	bl	8006b6c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008472:	4805      	ldr	r0, [pc, #20]	@ (8008488 <CDC_Transmit_FS+0x48>)
 8008474:	f7fe fbba 	bl	8006bec <USBD_CDC_TransmitPacket>
 8008478:	4603      	mov	r3, r0
 800847a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
}
 800847e:	4618      	mov	r0, r3
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	200003e4 	.word	0x200003e4

0800848c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800849a:	2300      	movs	r3, #0
 800849c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800849e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	371c      	adds	r7, #28
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
	...

080084b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	4603      	mov	r3, r0
 80084b8:	6039      	str	r1, [r7, #0]
 80084ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	2212      	movs	r2, #18
 80084c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084c2:	4b03      	ldr	r3, [pc, #12]	@ (80084d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	200000c8 	.word	0x200000c8

080084d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	6039      	str	r1, [r7, #0]
 80084de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	2204      	movs	r2, #4
 80084e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084e6:	4b03      	ldr	r3, [pc, #12]	@ (80084f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	200000dc 	.word	0x200000dc

080084f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b082      	sub	sp, #8
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	4603      	mov	r3, r0
 8008500:	6039      	str	r1, [r7, #0]
 8008502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d105      	bne.n	8008516 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	4907      	ldr	r1, [pc, #28]	@ (800852c <USBD_FS_ProductStrDescriptor+0x34>)
 800850e:	4808      	ldr	r0, [pc, #32]	@ (8008530 <USBD_FS_ProductStrDescriptor+0x38>)
 8008510:	f7ff fdf8 	bl	8008104 <USBD_GetString>
 8008514:	e004      	b.n	8008520 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	4904      	ldr	r1, [pc, #16]	@ (800852c <USBD_FS_ProductStrDescriptor+0x34>)
 800851a:	4805      	ldr	r0, [pc, #20]	@ (8008530 <USBD_FS_ProductStrDescriptor+0x38>)
 800851c:	f7ff fdf2 	bl	8008104 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008520:	4b02      	ldr	r3, [pc, #8]	@ (800852c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	200016c0 	.word	0x200016c0
 8008530:	0800c830 	.word	0x0800c830

08008534 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	4603      	mov	r3, r0
 800853c:	6039      	str	r1, [r7, #0]
 800853e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	4904      	ldr	r1, [pc, #16]	@ (8008554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008544:	4804      	ldr	r0, [pc, #16]	@ (8008558 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008546:	f7ff fddd 	bl	8008104 <USBD_GetString>
  return USBD_StrDesc;
 800854a:	4b02      	ldr	r3, [pc, #8]	@ (8008554 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	200016c0 	.word	0x200016c0
 8008558:	0800c848 	.word	0x0800c848

0800855c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	221a      	movs	r2, #26
 800856c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800856e:	f000 f843 	bl	80085f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008572:	4b02      	ldr	r3, [pc, #8]	@ (800857c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008574:	4618      	mov	r0, r3
 8008576:	3708      	adds	r7, #8
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	200000e0 	.word	0x200000e0

08008580 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4907      	ldr	r1, [pc, #28]	@ (80085b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008596:	4808      	ldr	r0, [pc, #32]	@ (80085b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008598:	f7ff fdb4 	bl	8008104 <USBD_GetString>
 800859c:	e004      	b.n	80085a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	4904      	ldr	r1, [pc, #16]	@ (80085b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085a2:	4805      	ldr	r0, [pc, #20]	@ (80085b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a4:	f7ff fdae 	bl	8008104 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085a8:	4b02      	ldr	r3, [pc, #8]	@ (80085b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200016c0 	.word	0x200016c0
 80085b8:	0800c85c 	.word	0x0800c85c

080085bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	6039      	str	r1, [r7, #0]
 80085c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d105      	bne.n	80085da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	4907      	ldr	r1, [pc, #28]	@ (80085f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085d2:	4808      	ldr	r0, [pc, #32]	@ (80085f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085d4:	f7ff fd96 	bl	8008104 <USBD_GetString>
 80085d8:	e004      	b.n	80085e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4904      	ldr	r1, [pc, #16]	@ (80085f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085de:	4805      	ldr	r0, [pc, #20]	@ (80085f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e0:	f7ff fd90 	bl	8008104 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085e4:	4b02      	ldr	r3, [pc, #8]	@ (80085f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop
 80085f0:	200016c0 	.word	0x200016c0
 80085f4:	0800c868 	.word	0x0800c868

080085f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b084      	sub	sp, #16
 80085fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4413      	add	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d009      	beq.n	8008620 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800860c:	2208      	movs	r2, #8
 800860e:	4906      	ldr	r1, [pc, #24]	@ (8008628 <Get_SerialNum+0x30>)
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f000 f80d 	bl	8008630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008616:	2204      	movs	r2, #4
 8008618:	4904      	ldr	r1, [pc, #16]	@ (800862c <Get_SerialNum+0x34>)
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f808 	bl	8008630 <IntToUnicode>
  }
}
 8008620:	bf00      	nop
 8008622:	3710      	adds	r7, #16
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	200000e2 	.word	0x200000e2
 800862c:	200000f2 	.word	0x200000f2

08008630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4613      	mov	r3, r2
 800863c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800863e:	2300      	movs	r3, #0
 8008640:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008642:	2300      	movs	r3, #0
 8008644:	75fb      	strb	r3, [r7, #23]
 8008646:	e027      	b.n	8008698 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	0f1b      	lsrs	r3, r3, #28
 800864c:	2b09      	cmp	r3, #9
 800864e:	d80b      	bhi.n	8008668 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0f1b      	lsrs	r3, r3, #28
 8008654:	b2da      	uxtb	r2, r3
 8008656:	7dfb      	ldrb	r3, [r7, #23]
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	4619      	mov	r1, r3
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	440b      	add	r3, r1
 8008660:	3230      	adds	r2, #48	@ 0x30
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	701a      	strb	r2, [r3, #0]
 8008666:	e00a      	b.n	800867e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	0f1b      	lsrs	r3, r3, #28
 800866c:	b2da      	uxtb	r2, r3
 800866e:	7dfb      	ldrb	r3, [r7, #23]
 8008670:	005b      	lsls	r3, r3, #1
 8008672:	4619      	mov	r1, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	440b      	add	r3, r1
 8008678:	3237      	adds	r2, #55	@ 0x37
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	011b      	lsls	r3, r3, #4
 8008682:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	3301      	adds	r3, #1
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4413      	add	r3, r2
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008692:	7dfb      	ldrb	r3, [r7, #23]
 8008694:	3301      	adds	r3, #1
 8008696:	75fb      	strb	r3, [r7, #23]
 8008698:	7dfa      	ldrb	r2, [r7, #23]
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	429a      	cmp	r2, r3
 800869e:	d3d3      	bcc.n	8008648 <IntToUnicode+0x18>
  }
}
 80086a0:	bf00      	nop
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr
	...

080086b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	@ 0x28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086b8:	f107 0314 	add.w	r3, r7, #20
 80086bc:	2200      	movs	r2, #0
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	609a      	str	r2, [r3, #8]
 80086c4:	60da      	str	r2, [r3, #12]
 80086c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80086d0:	d13a      	bne.n	8008748 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086d2:	2300      	movs	r3, #0
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	4b1e      	ldr	r3, [pc, #120]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086da:	4a1d      	ldr	r2, [pc, #116]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 80086dc:	f043 0301 	orr.w	r3, r3, #1
 80086e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80086e2:	4b1b      	ldr	r3, [pc, #108]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e6:	f003 0301 	and.w	r3, r3, #1
 80086ea:	613b      	str	r3, [r7, #16]
 80086ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80086f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086f4:	2302      	movs	r3, #2
 80086f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086f8:	2300      	movs	r3, #0
 80086fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086fc:	2303      	movs	r3, #3
 80086fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008700:	230a      	movs	r3, #10
 8008702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008704:	f107 0314 	add.w	r3, r7, #20
 8008708:	4619      	mov	r1, r3
 800870a:	4812      	ldr	r0, [pc, #72]	@ (8008754 <HAL_PCD_MspInit+0xa4>)
 800870c:	f7f9 fdea 	bl	80022e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008710:	4b0f      	ldr	r3, [pc, #60]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 8008712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008714:	4a0e      	ldr	r2, [pc, #56]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 8008716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800871a:	6353      	str	r3, [r2, #52]	@ 0x34
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]
 8008720:	4b0b      	ldr	r3, [pc, #44]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 8008722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008724:	4a0a      	ldr	r2, [pc, #40]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 8008726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800872a:	6453      	str	r3, [r2, #68]	@ 0x44
 800872c:	4b08      	ldr	r3, [pc, #32]	@ (8008750 <HAL_PCD_MspInit+0xa0>)
 800872e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008738:	2200      	movs	r2, #0
 800873a:	2100      	movs	r1, #0
 800873c:	2043      	movs	r0, #67	@ 0x43
 800873e:	f7f9 fd9a 	bl	8002276 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008742:	2043      	movs	r0, #67	@ 0x43
 8008744:	f7f9 fdb3 	bl	80022ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008748:	bf00      	nop
 800874a:	3728      	adds	r7, #40	@ 0x28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	40023800 	.word	0x40023800
 8008754:	40020000 	.word	0x40020000

08008758 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800876c:	4619      	mov	r1, r3
 800876e:	4610      	mov	r0, r2
 8008770:	f7fe fb65 	bl	8006e3e <USBD_LL_SetupStage>
}
 8008774:	bf00      	nop
 8008776:	3708      	adds	r7, #8
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800878e:	78fa      	ldrb	r2, [r7, #3]
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	4613      	mov	r3, r2
 8008794:	00db      	lsls	r3, r3, #3
 8008796:	4413      	add	r3, r2
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	78fb      	ldrb	r3, [r7, #3]
 80087a4:	4619      	mov	r1, r3
 80087a6:	f7fe fb9f 	bl	8006ee8 <USBD_LL_DataOutStage>
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	460b      	mov	r3, r1
 80087bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80087c4:	78fa      	ldrb	r2, [r7, #3]
 80087c6:	6879      	ldr	r1, [r7, #4]
 80087c8:	4613      	mov	r3, r2
 80087ca:	00db      	lsls	r3, r3, #3
 80087cc:	4413      	add	r3, r2
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	440b      	add	r3, r1
 80087d2:	3320      	adds	r3, #32
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	4619      	mov	r1, r3
 80087da:	f7fe fc38 	bl	800704e <USBD_LL_DataInStage>
}
 80087de:	bf00      	nop
 80087e0:	3708      	adds	r7, #8
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b082      	sub	sp, #8
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fd72 	bl	80072de <USBD_LL_SOF>
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800880a:	2301      	movs	r3, #1
 800880c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	79db      	ldrb	r3, [r3, #7]
 8008812:	2b02      	cmp	r3, #2
 8008814:	d001      	beq.n	800881a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008816:	f7f8 fdc5 	bl	80013a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008820:	7bfa      	ldrb	r2, [r7, #15]
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fd16 	bl	8007256 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fcbe 	bl	80071b2 <USBD_LL_Reset>
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fd11 	bl	8007276 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6812      	ldr	r2, [r2, #0]
 8008862:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	7adb      	ldrb	r3, [r3, #11]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008874:	4b04      	ldr	r3, [pc, #16]	@ (8008888 <HAL_PCD_SuspendCallback+0x48>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	4a03      	ldr	r2, [pc, #12]	@ (8008888 <HAL_PCD_SuspendCallback+0x48>)
 800887a:	f043 0306 	orr.w	r3, r3, #6
 800887e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	e000ed00 	.word	0xe000ed00

0800888c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fd07 	bl	80072ae <USBD_LL_Resume>
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fd5f 	bl	8007382 <USBD_LL_IsoOUTIncomplete>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fd1b 	bl	800731e <USBD_LL_IsoINIncomplete>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fd71 	bl	80073e6 <USBD_LL_DevConnected>
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe fd6e 	bl	80073fc <USBD_LL_DevDisconnected>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d13c      	bne.n	80089b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008938:	4a20      	ldr	r2, [pc, #128]	@ (80089bc <USBD_LL_Init+0x94>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1e      	ldr	r2, [pc, #120]	@ (80089bc <USBD_LL_Init+0x94>)
 8008944:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008948:	4b1c      	ldr	r3, [pc, #112]	@ (80089bc <USBD_LL_Init+0x94>)
 800894a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800894e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008950:	4b1a      	ldr	r3, [pc, #104]	@ (80089bc <USBD_LL_Init+0x94>)
 8008952:	2204      	movs	r2, #4
 8008954:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008956:	4b19      	ldr	r3, [pc, #100]	@ (80089bc <USBD_LL_Init+0x94>)
 8008958:	2202      	movs	r2, #2
 800895a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800895c:	4b17      	ldr	r3, [pc, #92]	@ (80089bc <USBD_LL_Init+0x94>)
 800895e:	2200      	movs	r2, #0
 8008960:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008962:	4b16      	ldr	r3, [pc, #88]	@ (80089bc <USBD_LL_Init+0x94>)
 8008964:	2202      	movs	r2, #2
 8008966:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008968:	4b14      	ldr	r3, [pc, #80]	@ (80089bc <USBD_LL_Init+0x94>)
 800896a:	2200      	movs	r2, #0
 800896c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800896e:	4b13      	ldr	r3, [pc, #76]	@ (80089bc <USBD_LL_Init+0x94>)
 8008970:	2200      	movs	r2, #0
 8008972:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008974:	4b11      	ldr	r3, [pc, #68]	@ (80089bc <USBD_LL_Init+0x94>)
 8008976:	2200      	movs	r2, #0
 8008978:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800897a:	4b10      	ldr	r3, [pc, #64]	@ (80089bc <USBD_LL_Init+0x94>)
 800897c:	2200      	movs	r2, #0
 800897e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008980:	4b0e      	ldr	r3, [pc, #56]	@ (80089bc <USBD_LL_Init+0x94>)
 8008982:	2200      	movs	r2, #0
 8008984:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008986:	480d      	ldr	r0, [pc, #52]	@ (80089bc <USBD_LL_Init+0x94>)
 8008988:	f7fa faff 	bl	8002f8a <HAL_PCD_Init>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008992:	f7f8 fd07 	bl	80013a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008996:	2180      	movs	r1, #128	@ 0x80
 8008998:	4808      	ldr	r0, [pc, #32]	@ (80089bc <USBD_LL_Init+0x94>)
 800899a:	f7fb fd2a 	bl	80043f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800899e:	2240      	movs	r2, #64	@ 0x40
 80089a0:	2100      	movs	r1, #0
 80089a2:	4806      	ldr	r0, [pc, #24]	@ (80089bc <USBD_LL_Init+0x94>)
 80089a4:	f7fb fcde 	bl	8004364 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089a8:	2280      	movs	r2, #128	@ 0x80
 80089aa:	2101      	movs	r1, #1
 80089ac:	4803      	ldr	r0, [pc, #12]	@ (80089bc <USBD_LL_Init+0x94>)
 80089ae:	f7fb fcd9 	bl	8004364 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	200018c0 	.word	0x200018c0

080089c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fa fbe6 	bl	80031a8 <HAL_PCD_Start>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f942 	bl	8008c6c <USBD_Get_USB_Status>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	4608      	mov	r0, r1
 8008a00:	4611      	mov	r1, r2
 8008a02:	461a      	mov	r2, r3
 8008a04:	4603      	mov	r3, r0
 8008a06:	70fb      	strb	r3, [r7, #3]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70bb      	strb	r3, [r7, #2]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008a1e:	78bb      	ldrb	r3, [r7, #2]
 8008a20:	883a      	ldrh	r2, [r7, #0]
 8008a22:	78f9      	ldrb	r1, [r7, #3]
 8008a24:	f7fb f8ba 	bl	8003b9c <HAL_PCD_EP_Open>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 f91c 	bl	8008c6c <USBD_Get_USB_Status>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a5c:	78fa      	ldrb	r2, [r7, #3]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fb f903 	bl	8003c6c <HAL_PCD_EP_Close>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f8fd 	bl	8008c6c <USBD_Get_USB_Status>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fb f9bb 	bl	8003e1a <HAL_PCD_EP_SetStall>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f8de 	bl	8008c6c <USBD_Get_USB_Status>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fb f9ff 	bl	8003ee0 <HAL_PCD_EP_ClrStall>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 f8bf 	bl	8008c6c <USBD_Get_USB_Status>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	da0b      	bge.n	8008b30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	4413      	add	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	3316      	adds	r3, #22
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	e00b      	b.n	8008b48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b36:	68f9      	ldr	r1, [r7, #12]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008b46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fa ffee 	bl	8003b54 <HAL_PCD_SetAddress>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f874 	bl	8008c6c <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008bb0:	7af9      	ldrb	r1, [r7, #11]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	f7fb f8f6 	bl	8003da6 <HAL_PCD_EP_Transmit>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f853 	bl	8008c6c <USBD_Get_USB_Status>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bca:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	460b      	mov	r3, r1
 8008be2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008bf2:	7af9      	ldrb	r1, [r7, #11]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	f7fb f882 	bl	8003d00 <HAL_PCD_EP_Receive>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f832 	bl	8008c6c <USBD_Get_USB_Status>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}

08008c16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c16:	b580      	push	{r7, lr}
 8008c18:	b082      	sub	sp, #8
 8008c1a:	af00      	add	r7, sp, #0
 8008c1c:	6078      	str	r0, [r7, #4]
 8008c1e:	460b      	mov	r3, r1
 8008c20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c28:	78fa      	ldrb	r2, [r7, #3]
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fb f8a2 	bl	8003d76 <HAL_PCD_EP_GetRxCount>
 8008c32:	4603      	mov	r3, r0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c44:	4b03      	ldr	r3, [pc, #12]	@ (8008c54 <USBD_static_malloc+0x18>)
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	370c      	adds	r7, #12
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	20001da4 	.word	0x20001da4

08008c58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]

}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	4603      	mov	r3, r0
 8008c74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c76:	2300      	movs	r3, #0
 8008c78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c7a:	79fb      	ldrb	r3, [r7, #7]
 8008c7c:	2b03      	cmp	r3, #3
 8008c7e:	d817      	bhi.n	8008cb0 <USBD_Get_USB_Status+0x44>
 8008c80:	a201      	add	r2, pc, #4	@ (adr r2, 8008c88 <USBD_Get_USB_Status+0x1c>)
 8008c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c86:	bf00      	nop
 8008c88:	08008c99 	.word	0x08008c99
 8008c8c:	08008c9f 	.word	0x08008c9f
 8008c90:	08008ca5 	.word	0x08008ca5
 8008c94:	08008cab 	.word	0x08008cab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c9c:	e00b      	b.n	8008cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca2:	e008      	b.n	8008cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca8:	e005      	b.n	8008cb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008caa:	2303      	movs	r3, #3
 8008cac:	73fb      	strb	r3, [r7, #15]
    break;
 8008cae:	e002      	b.n	8008cb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb4:	bf00      	nop
  }
  return usb_status;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3714      	adds	r7, #20
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <__cvt>:
 8008cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc8:	ec57 6b10 	vmov	r6, r7, d0
 8008ccc:	2f00      	cmp	r7, #0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	463b      	mov	r3, r7
 8008cd4:	bfbb      	ittet	lt
 8008cd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008cda:	461f      	movlt	r7, r3
 8008cdc:	2300      	movge	r3, #0
 8008cde:	232d      	movlt	r3, #45	@ 0x2d
 8008ce0:	700b      	strb	r3, [r1, #0]
 8008ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ce8:	4691      	mov	r9, r2
 8008cea:	f023 0820 	bic.w	r8, r3, #32
 8008cee:	bfbc      	itt	lt
 8008cf0:	4632      	movlt	r2, r6
 8008cf2:	4616      	movlt	r6, r2
 8008cf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008cf8:	d005      	beq.n	8008d06 <__cvt+0x42>
 8008cfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008cfe:	d100      	bne.n	8008d02 <__cvt+0x3e>
 8008d00:	3401      	adds	r4, #1
 8008d02:	2102      	movs	r1, #2
 8008d04:	e000      	b.n	8008d08 <__cvt+0x44>
 8008d06:	2103      	movs	r1, #3
 8008d08:	ab03      	add	r3, sp, #12
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	ab02      	add	r3, sp, #8
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	ec47 6b10 	vmov	d0, r6, r7
 8008d14:	4653      	mov	r3, sl
 8008d16:	4622      	mov	r2, r4
 8008d18:	f000 fe5a 	bl	80099d0 <_dtoa_r>
 8008d1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008d20:	4605      	mov	r5, r0
 8008d22:	d119      	bne.n	8008d58 <__cvt+0x94>
 8008d24:	f019 0f01 	tst.w	r9, #1
 8008d28:	d00e      	beq.n	8008d48 <__cvt+0x84>
 8008d2a:	eb00 0904 	add.w	r9, r0, r4
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2300      	movs	r3, #0
 8008d32:	4630      	mov	r0, r6
 8008d34:	4639      	mov	r1, r7
 8008d36:	f7f7 fecf 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d3a:	b108      	cbz	r0, 8008d40 <__cvt+0x7c>
 8008d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d40:	2230      	movs	r2, #48	@ 0x30
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	454b      	cmp	r3, r9
 8008d46:	d31e      	bcc.n	8008d86 <__cvt+0xc2>
 8008d48:	9b03      	ldr	r3, [sp, #12]
 8008d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d4c:	1b5b      	subs	r3, r3, r5
 8008d4e:	4628      	mov	r0, r5
 8008d50:	6013      	str	r3, [r2, #0]
 8008d52:	b004      	add	sp, #16
 8008d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008d5c:	eb00 0904 	add.w	r9, r0, r4
 8008d60:	d1e5      	bne.n	8008d2e <__cvt+0x6a>
 8008d62:	7803      	ldrb	r3, [r0, #0]
 8008d64:	2b30      	cmp	r3, #48	@ 0x30
 8008d66:	d10a      	bne.n	8008d7e <__cvt+0xba>
 8008d68:	2200      	movs	r2, #0
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	4639      	mov	r1, r7
 8008d70:	f7f7 feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d74:	b918      	cbnz	r0, 8008d7e <__cvt+0xba>
 8008d76:	f1c4 0401 	rsb	r4, r4, #1
 8008d7a:	f8ca 4000 	str.w	r4, [sl]
 8008d7e:	f8da 3000 	ldr.w	r3, [sl]
 8008d82:	4499      	add	r9, r3
 8008d84:	e7d3      	b.n	8008d2e <__cvt+0x6a>
 8008d86:	1c59      	adds	r1, r3, #1
 8008d88:	9103      	str	r1, [sp, #12]
 8008d8a:	701a      	strb	r2, [r3, #0]
 8008d8c:	e7d9      	b.n	8008d42 <__cvt+0x7e>

08008d8e <__exponent>:
 8008d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d90:	2900      	cmp	r1, #0
 8008d92:	bfba      	itte	lt
 8008d94:	4249      	neglt	r1, r1
 8008d96:	232d      	movlt	r3, #45	@ 0x2d
 8008d98:	232b      	movge	r3, #43	@ 0x2b
 8008d9a:	2909      	cmp	r1, #9
 8008d9c:	7002      	strb	r2, [r0, #0]
 8008d9e:	7043      	strb	r3, [r0, #1]
 8008da0:	dd29      	ble.n	8008df6 <__exponent+0x68>
 8008da2:	f10d 0307 	add.w	r3, sp, #7
 8008da6:	461d      	mov	r5, r3
 8008da8:	270a      	movs	r7, #10
 8008daa:	461a      	mov	r2, r3
 8008dac:	fbb1 f6f7 	udiv	r6, r1, r7
 8008db0:	fb07 1416 	mls	r4, r7, r6, r1
 8008db4:	3430      	adds	r4, #48	@ 0x30
 8008db6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008dba:	460c      	mov	r4, r1
 8008dbc:	2c63      	cmp	r4, #99	@ 0x63
 8008dbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	dcf1      	bgt.n	8008daa <__exponent+0x1c>
 8008dc6:	3130      	adds	r1, #48	@ 0x30
 8008dc8:	1e94      	subs	r4, r2, #2
 8008dca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008dce:	1c41      	adds	r1, r0, #1
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	42ab      	cmp	r3, r5
 8008dd4:	d30a      	bcc.n	8008dec <__exponent+0x5e>
 8008dd6:	f10d 0309 	add.w	r3, sp, #9
 8008dda:	1a9b      	subs	r3, r3, r2
 8008ddc:	42ac      	cmp	r4, r5
 8008dde:	bf88      	it	hi
 8008de0:	2300      	movhi	r3, #0
 8008de2:	3302      	adds	r3, #2
 8008de4:	4403      	add	r3, r0
 8008de6:	1a18      	subs	r0, r3, r0
 8008de8:	b003      	add	sp, #12
 8008dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008df0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008df4:	e7ed      	b.n	8008dd2 <__exponent+0x44>
 8008df6:	2330      	movs	r3, #48	@ 0x30
 8008df8:	3130      	adds	r1, #48	@ 0x30
 8008dfa:	7083      	strb	r3, [r0, #2]
 8008dfc:	70c1      	strb	r1, [r0, #3]
 8008dfe:	1d03      	adds	r3, r0, #4
 8008e00:	e7f1      	b.n	8008de6 <__exponent+0x58>
	...

08008e04 <_printf_float>:
 8008e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e08:	b08d      	sub	sp, #52	@ 0x34
 8008e0a:	460c      	mov	r4, r1
 8008e0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008e10:	4616      	mov	r6, r2
 8008e12:	461f      	mov	r7, r3
 8008e14:	4605      	mov	r5, r0
 8008e16:	f000 fcdb 	bl	80097d0 <_localeconv_r>
 8008e1a:	6803      	ldr	r3, [r0, #0]
 8008e1c:	9304      	str	r3, [sp, #16]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f7 fa2e 	bl	8000280 <strlen>
 8008e24:	2300      	movs	r3, #0
 8008e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e28:	f8d8 3000 	ldr.w	r3, [r8]
 8008e2c:	9005      	str	r0, [sp, #20]
 8008e2e:	3307      	adds	r3, #7
 8008e30:	f023 0307 	bic.w	r3, r3, #7
 8008e34:	f103 0208 	add.w	r2, r3, #8
 8008e38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008e3c:	f8d4 b000 	ldr.w	fp, [r4]
 8008e40:	f8c8 2000 	str.w	r2, [r8]
 8008e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008e4c:	9307      	str	r3, [sp, #28]
 8008e4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e5a:	4b9c      	ldr	r3, [pc, #624]	@ (80090cc <_printf_float+0x2c8>)
 8008e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e60:	f7f7 fe6c 	bl	8000b3c <__aeabi_dcmpun>
 8008e64:	bb70      	cbnz	r0, 8008ec4 <_printf_float+0xc0>
 8008e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e6a:	4b98      	ldr	r3, [pc, #608]	@ (80090cc <_printf_float+0x2c8>)
 8008e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e70:	f7f7 fe46 	bl	8000b00 <__aeabi_dcmple>
 8008e74:	bb30      	cbnz	r0, 8008ec4 <_printf_float+0xc0>
 8008e76:	2200      	movs	r2, #0
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4640      	mov	r0, r8
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	f7f7 fe35 	bl	8000aec <__aeabi_dcmplt>
 8008e82:	b110      	cbz	r0, 8008e8a <_printf_float+0x86>
 8008e84:	232d      	movs	r3, #45	@ 0x2d
 8008e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e8a:	4a91      	ldr	r2, [pc, #580]	@ (80090d0 <_printf_float+0x2cc>)
 8008e8c:	4b91      	ldr	r3, [pc, #580]	@ (80090d4 <_printf_float+0x2d0>)
 8008e8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008e92:	bf94      	ite	ls
 8008e94:	4690      	movls	r8, r2
 8008e96:	4698      	movhi	r8, r3
 8008e98:	2303      	movs	r3, #3
 8008e9a:	6123      	str	r3, [r4, #16]
 8008e9c:	f02b 0304 	bic.w	r3, fp, #4
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	f04f 0900 	mov.w	r9, #0
 8008ea6:	9700      	str	r7, [sp, #0]
 8008ea8:	4633      	mov	r3, r6
 8008eaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008eac:	4621      	mov	r1, r4
 8008eae:	4628      	mov	r0, r5
 8008eb0:	f000 f9d2 	bl	8009258 <_printf_common>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	f040 808d 	bne.w	8008fd4 <_printf_float+0x1d0>
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	b00d      	add	sp, #52	@ 0x34
 8008ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	4642      	mov	r2, r8
 8008ec6:	464b      	mov	r3, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	4649      	mov	r1, r9
 8008ecc:	f7f7 fe36 	bl	8000b3c <__aeabi_dcmpun>
 8008ed0:	b140      	cbz	r0, 8008ee4 <_printf_float+0xe0>
 8008ed2:	464b      	mov	r3, r9
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bfbc      	itt	lt
 8008ed8:	232d      	movlt	r3, #45	@ 0x2d
 8008eda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008ede:	4a7e      	ldr	r2, [pc, #504]	@ (80090d8 <_printf_float+0x2d4>)
 8008ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80090dc <_printf_float+0x2d8>)
 8008ee2:	e7d4      	b.n	8008e8e <_printf_float+0x8a>
 8008ee4:	6863      	ldr	r3, [r4, #4]
 8008ee6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008eea:	9206      	str	r2, [sp, #24]
 8008eec:	1c5a      	adds	r2, r3, #1
 8008eee:	d13b      	bne.n	8008f68 <_printf_float+0x164>
 8008ef0:	2306      	movs	r3, #6
 8008ef2:	6063      	str	r3, [r4, #4]
 8008ef4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ef8:	2300      	movs	r3, #0
 8008efa:	6022      	str	r2, [r4, #0]
 8008efc:	9303      	str	r3, [sp, #12]
 8008efe:	ab0a      	add	r3, sp, #40	@ 0x28
 8008f00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008f04:	ab09      	add	r3, sp, #36	@ 0x24
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	6861      	ldr	r1, [r4, #4]
 8008f0a:	ec49 8b10 	vmov	d0, r8, r9
 8008f0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008f12:	4628      	mov	r0, r5
 8008f14:	f7ff fed6 	bl	8008cc4 <__cvt>
 8008f18:	9b06      	ldr	r3, [sp, #24]
 8008f1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f1c:	2b47      	cmp	r3, #71	@ 0x47
 8008f1e:	4680      	mov	r8, r0
 8008f20:	d129      	bne.n	8008f76 <_printf_float+0x172>
 8008f22:	1cc8      	adds	r0, r1, #3
 8008f24:	db02      	blt.n	8008f2c <_printf_float+0x128>
 8008f26:	6863      	ldr	r3, [r4, #4]
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	dd41      	ble.n	8008fb0 <_printf_float+0x1ac>
 8008f2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008f30:	fa5f fa8a 	uxtb.w	sl, sl
 8008f34:	3901      	subs	r1, #1
 8008f36:	4652      	mov	r2, sl
 8008f38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008f3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f3e:	f7ff ff26 	bl	8008d8e <__exponent>
 8008f42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008f44:	1813      	adds	r3, r2, r0
 8008f46:	2a01      	cmp	r2, #1
 8008f48:	4681      	mov	r9, r0
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	dc02      	bgt.n	8008f54 <_printf_float+0x150>
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	07d2      	lsls	r2, r2, #31
 8008f52:	d501      	bpl.n	8008f58 <_printf_float+0x154>
 8008f54:	3301      	adds	r3, #1
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0a2      	beq.n	8008ea6 <_printf_float+0xa2>
 8008f60:	232d      	movs	r3, #45	@ 0x2d
 8008f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f66:	e79e      	b.n	8008ea6 <_printf_float+0xa2>
 8008f68:	9a06      	ldr	r2, [sp, #24]
 8008f6a:	2a47      	cmp	r2, #71	@ 0x47
 8008f6c:	d1c2      	bne.n	8008ef4 <_printf_float+0xf0>
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1c0      	bne.n	8008ef4 <_printf_float+0xf0>
 8008f72:	2301      	movs	r3, #1
 8008f74:	e7bd      	b.n	8008ef2 <_printf_float+0xee>
 8008f76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008f7a:	d9db      	bls.n	8008f34 <_printf_float+0x130>
 8008f7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008f80:	d118      	bne.n	8008fb4 <_printf_float+0x1b0>
 8008f82:	2900      	cmp	r1, #0
 8008f84:	6863      	ldr	r3, [r4, #4]
 8008f86:	dd0b      	ble.n	8008fa0 <_printf_float+0x19c>
 8008f88:	6121      	str	r1, [r4, #16]
 8008f8a:	b913      	cbnz	r3, 8008f92 <_printf_float+0x18e>
 8008f8c:	6822      	ldr	r2, [r4, #0]
 8008f8e:	07d0      	lsls	r0, r2, #31
 8008f90:	d502      	bpl.n	8008f98 <_printf_float+0x194>
 8008f92:	3301      	adds	r3, #1
 8008f94:	440b      	add	r3, r1
 8008f96:	6123      	str	r3, [r4, #16]
 8008f98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008f9a:	f04f 0900 	mov.w	r9, #0
 8008f9e:	e7db      	b.n	8008f58 <_printf_float+0x154>
 8008fa0:	b913      	cbnz	r3, 8008fa8 <_printf_float+0x1a4>
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	07d2      	lsls	r2, r2, #31
 8008fa6:	d501      	bpl.n	8008fac <_printf_float+0x1a8>
 8008fa8:	3302      	adds	r3, #2
 8008faa:	e7f4      	b.n	8008f96 <_printf_float+0x192>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e7f2      	b.n	8008f96 <_printf_float+0x192>
 8008fb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	db05      	blt.n	8008fc6 <_printf_float+0x1c2>
 8008fba:	6823      	ldr	r3, [r4, #0]
 8008fbc:	6121      	str	r1, [r4, #16]
 8008fbe:	07d8      	lsls	r0, r3, #31
 8008fc0:	d5ea      	bpl.n	8008f98 <_printf_float+0x194>
 8008fc2:	1c4b      	adds	r3, r1, #1
 8008fc4:	e7e7      	b.n	8008f96 <_printf_float+0x192>
 8008fc6:	2900      	cmp	r1, #0
 8008fc8:	bfd4      	ite	le
 8008fca:	f1c1 0202 	rsble	r2, r1, #2
 8008fce:	2201      	movgt	r2, #1
 8008fd0:	4413      	add	r3, r2
 8008fd2:	e7e0      	b.n	8008f96 <_printf_float+0x192>
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	055a      	lsls	r2, r3, #21
 8008fd8:	d407      	bmi.n	8008fea <_printf_float+0x1e6>
 8008fda:	6923      	ldr	r3, [r4, #16]
 8008fdc:	4642      	mov	r2, r8
 8008fde:	4631      	mov	r1, r6
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	47b8      	blx	r7
 8008fe4:	3001      	adds	r0, #1
 8008fe6:	d12b      	bne.n	8009040 <_printf_float+0x23c>
 8008fe8:	e767      	b.n	8008eba <_printf_float+0xb6>
 8008fea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008fee:	f240 80dd 	bls.w	80091ac <_printf_float+0x3a8>
 8008ff2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	f7f7 fd6d 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ffe:	2800      	cmp	r0, #0
 8009000:	d033      	beq.n	800906a <_printf_float+0x266>
 8009002:	4a37      	ldr	r2, [pc, #220]	@ (80090e0 <_printf_float+0x2dc>)
 8009004:	2301      	movs	r3, #1
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	f43f af54 	beq.w	8008eba <_printf_float+0xb6>
 8009012:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009016:	4543      	cmp	r3, r8
 8009018:	db02      	blt.n	8009020 <_printf_float+0x21c>
 800901a:	6823      	ldr	r3, [r4, #0]
 800901c:	07d8      	lsls	r0, r3, #31
 800901e:	d50f      	bpl.n	8009040 <_printf_float+0x23c>
 8009020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009024:	4631      	mov	r1, r6
 8009026:	4628      	mov	r0, r5
 8009028:	47b8      	blx	r7
 800902a:	3001      	adds	r0, #1
 800902c:	f43f af45 	beq.w	8008eba <_printf_float+0xb6>
 8009030:	f04f 0900 	mov.w	r9, #0
 8009034:	f108 38ff 	add.w	r8, r8, #4294967295
 8009038:	f104 0a1a 	add.w	sl, r4, #26
 800903c:	45c8      	cmp	r8, r9
 800903e:	dc09      	bgt.n	8009054 <_printf_float+0x250>
 8009040:	6823      	ldr	r3, [r4, #0]
 8009042:	079b      	lsls	r3, r3, #30
 8009044:	f100 8103 	bmi.w	800924e <_printf_float+0x44a>
 8009048:	68e0      	ldr	r0, [r4, #12]
 800904a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800904c:	4298      	cmp	r0, r3
 800904e:	bfb8      	it	lt
 8009050:	4618      	movlt	r0, r3
 8009052:	e734      	b.n	8008ebe <_printf_float+0xba>
 8009054:	2301      	movs	r3, #1
 8009056:	4652      	mov	r2, sl
 8009058:	4631      	mov	r1, r6
 800905a:	4628      	mov	r0, r5
 800905c:	47b8      	blx	r7
 800905e:	3001      	adds	r0, #1
 8009060:	f43f af2b 	beq.w	8008eba <_printf_float+0xb6>
 8009064:	f109 0901 	add.w	r9, r9, #1
 8009068:	e7e8      	b.n	800903c <_printf_float+0x238>
 800906a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906c:	2b00      	cmp	r3, #0
 800906e:	dc39      	bgt.n	80090e4 <_printf_float+0x2e0>
 8009070:	4a1b      	ldr	r2, [pc, #108]	@ (80090e0 <_printf_float+0x2dc>)
 8009072:	2301      	movs	r3, #1
 8009074:	4631      	mov	r1, r6
 8009076:	4628      	mov	r0, r5
 8009078:	47b8      	blx	r7
 800907a:	3001      	adds	r0, #1
 800907c:	f43f af1d 	beq.w	8008eba <_printf_float+0xb6>
 8009080:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009084:	ea59 0303 	orrs.w	r3, r9, r3
 8009088:	d102      	bne.n	8009090 <_printf_float+0x28c>
 800908a:	6823      	ldr	r3, [r4, #0]
 800908c:	07d9      	lsls	r1, r3, #31
 800908e:	d5d7      	bpl.n	8009040 <_printf_float+0x23c>
 8009090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009094:	4631      	mov	r1, r6
 8009096:	4628      	mov	r0, r5
 8009098:	47b8      	blx	r7
 800909a:	3001      	adds	r0, #1
 800909c:	f43f af0d 	beq.w	8008eba <_printf_float+0xb6>
 80090a0:	f04f 0a00 	mov.w	sl, #0
 80090a4:	f104 0b1a 	add.w	fp, r4, #26
 80090a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090aa:	425b      	negs	r3, r3
 80090ac:	4553      	cmp	r3, sl
 80090ae:	dc01      	bgt.n	80090b4 <_printf_float+0x2b0>
 80090b0:	464b      	mov	r3, r9
 80090b2:	e793      	b.n	8008fdc <_printf_float+0x1d8>
 80090b4:	2301      	movs	r3, #1
 80090b6:	465a      	mov	r2, fp
 80090b8:	4631      	mov	r1, r6
 80090ba:	4628      	mov	r0, r5
 80090bc:	47b8      	blx	r7
 80090be:	3001      	adds	r0, #1
 80090c0:	f43f aefb 	beq.w	8008eba <_printf_float+0xb6>
 80090c4:	f10a 0a01 	add.w	sl, sl, #1
 80090c8:	e7ee      	b.n	80090a8 <_printf_float+0x2a4>
 80090ca:	bf00      	nop
 80090cc:	7fefffff 	.word	0x7fefffff
 80090d0:	0800c890 	.word	0x0800c890
 80090d4:	0800c894 	.word	0x0800c894
 80090d8:	0800c898 	.word	0x0800c898
 80090dc:	0800c89c 	.word	0x0800c89c
 80090e0:	0800c8a0 	.word	0x0800c8a0
 80090e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80090e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090ea:	4553      	cmp	r3, sl
 80090ec:	bfa8      	it	ge
 80090ee:	4653      	movge	r3, sl
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	4699      	mov	r9, r3
 80090f4:	dc36      	bgt.n	8009164 <_printf_float+0x360>
 80090f6:	f04f 0b00 	mov.w	fp, #0
 80090fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80090fe:	f104 021a 	add.w	r2, r4, #26
 8009102:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009104:	9306      	str	r3, [sp, #24]
 8009106:	eba3 0309 	sub.w	r3, r3, r9
 800910a:	455b      	cmp	r3, fp
 800910c:	dc31      	bgt.n	8009172 <_printf_float+0x36e>
 800910e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009110:	459a      	cmp	sl, r3
 8009112:	dc3a      	bgt.n	800918a <_printf_float+0x386>
 8009114:	6823      	ldr	r3, [r4, #0]
 8009116:	07da      	lsls	r2, r3, #31
 8009118:	d437      	bmi.n	800918a <_printf_float+0x386>
 800911a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800911c:	ebaa 0903 	sub.w	r9, sl, r3
 8009120:	9b06      	ldr	r3, [sp, #24]
 8009122:	ebaa 0303 	sub.w	r3, sl, r3
 8009126:	4599      	cmp	r9, r3
 8009128:	bfa8      	it	ge
 800912a:	4699      	movge	r9, r3
 800912c:	f1b9 0f00 	cmp.w	r9, #0
 8009130:	dc33      	bgt.n	800919a <_printf_float+0x396>
 8009132:	f04f 0800 	mov.w	r8, #0
 8009136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800913a:	f104 0b1a 	add.w	fp, r4, #26
 800913e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009140:	ebaa 0303 	sub.w	r3, sl, r3
 8009144:	eba3 0309 	sub.w	r3, r3, r9
 8009148:	4543      	cmp	r3, r8
 800914a:	f77f af79 	ble.w	8009040 <_printf_float+0x23c>
 800914e:	2301      	movs	r3, #1
 8009150:	465a      	mov	r2, fp
 8009152:	4631      	mov	r1, r6
 8009154:	4628      	mov	r0, r5
 8009156:	47b8      	blx	r7
 8009158:	3001      	adds	r0, #1
 800915a:	f43f aeae 	beq.w	8008eba <_printf_float+0xb6>
 800915e:	f108 0801 	add.w	r8, r8, #1
 8009162:	e7ec      	b.n	800913e <_printf_float+0x33a>
 8009164:	4642      	mov	r2, r8
 8009166:	4631      	mov	r1, r6
 8009168:	4628      	mov	r0, r5
 800916a:	47b8      	blx	r7
 800916c:	3001      	adds	r0, #1
 800916e:	d1c2      	bne.n	80090f6 <_printf_float+0x2f2>
 8009170:	e6a3      	b.n	8008eba <_printf_float+0xb6>
 8009172:	2301      	movs	r3, #1
 8009174:	4631      	mov	r1, r6
 8009176:	4628      	mov	r0, r5
 8009178:	9206      	str	r2, [sp, #24]
 800917a:	47b8      	blx	r7
 800917c:	3001      	adds	r0, #1
 800917e:	f43f ae9c 	beq.w	8008eba <_printf_float+0xb6>
 8009182:	9a06      	ldr	r2, [sp, #24]
 8009184:	f10b 0b01 	add.w	fp, fp, #1
 8009188:	e7bb      	b.n	8009102 <_printf_float+0x2fe>
 800918a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	47b8      	blx	r7
 8009194:	3001      	adds	r0, #1
 8009196:	d1c0      	bne.n	800911a <_printf_float+0x316>
 8009198:	e68f      	b.n	8008eba <_printf_float+0xb6>
 800919a:	9a06      	ldr	r2, [sp, #24]
 800919c:	464b      	mov	r3, r9
 800919e:	4442      	add	r2, r8
 80091a0:	4631      	mov	r1, r6
 80091a2:	4628      	mov	r0, r5
 80091a4:	47b8      	blx	r7
 80091a6:	3001      	adds	r0, #1
 80091a8:	d1c3      	bne.n	8009132 <_printf_float+0x32e>
 80091aa:	e686      	b.n	8008eba <_printf_float+0xb6>
 80091ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091b0:	f1ba 0f01 	cmp.w	sl, #1
 80091b4:	dc01      	bgt.n	80091ba <_printf_float+0x3b6>
 80091b6:	07db      	lsls	r3, r3, #31
 80091b8:	d536      	bpl.n	8009228 <_printf_float+0x424>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4642      	mov	r2, r8
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b8      	blx	r7
 80091c4:	3001      	adds	r0, #1
 80091c6:	f43f ae78 	beq.w	8008eba <_printf_float+0xb6>
 80091ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091ce:	4631      	mov	r1, r6
 80091d0:	4628      	mov	r0, r5
 80091d2:	47b8      	blx	r7
 80091d4:	3001      	adds	r0, #1
 80091d6:	f43f ae70 	beq.w	8008eba <_printf_float+0xb6>
 80091da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80091de:	2200      	movs	r2, #0
 80091e0:	2300      	movs	r3, #0
 80091e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80091e6:	f7f7 fc77 	bl	8000ad8 <__aeabi_dcmpeq>
 80091ea:	b9c0      	cbnz	r0, 800921e <_printf_float+0x41a>
 80091ec:	4653      	mov	r3, sl
 80091ee:	f108 0201 	add.w	r2, r8, #1
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	d10c      	bne.n	8009216 <_printf_float+0x412>
 80091fc:	e65d      	b.n	8008eba <_printf_float+0xb6>
 80091fe:	2301      	movs	r3, #1
 8009200:	465a      	mov	r2, fp
 8009202:	4631      	mov	r1, r6
 8009204:	4628      	mov	r0, r5
 8009206:	47b8      	blx	r7
 8009208:	3001      	adds	r0, #1
 800920a:	f43f ae56 	beq.w	8008eba <_printf_float+0xb6>
 800920e:	f108 0801 	add.w	r8, r8, #1
 8009212:	45d0      	cmp	r8, sl
 8009214:	dbf3      	blt.n	80091fe <_printf_float+0x3fa>
 8009216:	464b      	mov	r3, r9
 8009218:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800921c:	e6df      	b.n	8008fde <_printf_float+0x1da>
 800921e:	f04f 0800 	mov.w	r8, #0
 8009222:	f104 0b1a 	add.w	fp, r4, #26
 8009226:	e7f4      	b.n	8009212 <_printf_float+0x40e>
 8009228:	2301      	movs	r3, #1
 800922a:	4642      	mov	r2, r8
 800922c:	e7e1      	b.n	80091f2 <_printf_float+0x3ee>
 800922e:	2301      	movs	r3, #1
 8009230:	464a      	mov	r2, r9
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f ae3e 	beq.w	8008eba <_printf_float+0xb6>
 800923e:	f108 0801 	add.w	r8, r8, #1
 8009242:	68e3      	ldr	r3, [r4, #12]
 8009244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009246:	1a5b      	subs	r3, r3, r1
 8009248:	4543      	cmp	r3, r8
 800924a:	dcf0      	bgt.n	800922e <_printf_float+0x42a>
 800924c:	e6fc      	b.n	8009048 <_printf_float+0x244>
 800924e:	f04f 0800 	mov.w	r8, #0
 8009252:	f104 0919 	add.w	r9, r4, #25
 8009256:	e7f4      	b.n	8009242 <_printf_float+0x43e>

08009258 <_printf_common>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	4616      	mov	r6, r2
 800925e:	4698      	mov	r8, r3
 8009260:	688a      	ldr	r2, [r1, #8]
 8009262:	690b      	ldr	r3, [r1, #16]
 8009264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009268:	4293      	cmp	r3, r2
 800926a:	bfb8      	it	lt
 800926c:	4613      	movlt	r3, r2
 800926e:	6033      	str	r3, [r6, #0]
 8009270:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009274:	4607      	mov	r7, r0
 8009276:	460c      	mov	r4, r1
 8009278:	b10a      	cbz	r2, 800927e <_printf_common+0x26>
 800927a:	3301      	adds	r3, #1
 800927c:	6033      	str	r3, [r6, #0]
 800927e:	6823      	ldr	r3, [r4, #0]
 8009280:	0699      	lsls	r1, r3, #26
 8009282:	bf42      	ittt	mi
 8009284:	6833      	ldrmi	r3, [r6, #0]
 8009286:	3302      	addmi	r3, #2
 8009288:	6033      	strmi	r3, [r6, #0]
 800928a:	6825      	ldr	r5, [r4, #0]
 800928c:	f015 0506 	ands.w	r5, r5, #6
 8009290:	d106      	bne.n	80092a0 <_printf_common+0x48>
 8009292:	f104 0a19 	add.w	sl, r4, #25
 8009296:	68e3      	ldr	r3, [r4, #12]
 8009298:	6832      	ldr	r2, [r6, #0]
 800929a:	1a9b      	subs	r3, r3, r2
 800929c:	42ab      	cmp	r3, r5
 800929e:	dc26      	bgt.n	80092ee <_printf_common+0x96>
 80092a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80092a4:	6822      	ldr	r2, [r4, #0]
 80092a6:	3b00      	subs	r3, #0
 80092a8:	bf18      	it	ne
 80092aa:	2301      	movne	r3, #1
 80092ac:	0692      	lsls	r2, r2, #26
 80092ae:	d42b      	bmi.n	8009308 <_printf_common+0xb0>
 80092b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80092b4:	4641      	mov	r1, r8
 80092b6:	4638      	mov	r0, r7
 80092b8:	47c8      	blx	r9
 80092ba:	3001      	adds	r0, #1
 80092bc:	d01e      	beq.n	80092fc <_printf_common+0xa4>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	6922      	ldr	r2, [r4, #16]
 80092c2:	f003 0306 	and.w	r3, r3, #6
 80092c6:	2b04      	cmp	r3, #4
 80092c8:	bf02      	ittt	eq
 80092ca:	68e5      	ldreq	r5, [r4, #12]
 80092cc:	6833      	ldreq	r3, [r6, #0]
 80092ce:	1aed      	subeq	r5, r5, r3
 80092d0:	68a3      	ldr	r3, [r4, #8]
 80092d2:	bf0c      	ite	eq
 80092d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092d8:	2500      	movne	r5, #0
 80092da:	4293      	cmp	r3, r2
 80092dc:	bfc4      	itt	gt
 80092de:	1a9b      	subgt	r3, r3, r2
 80092e0:	18ed      	addgt	r5, r5, r3
 80092e2:	2600      	movs	r6, #0
 80092e4:	341a      	adds	r4, #26
 80092e6:	42b5      	cmp	r5, r6
 80092e8:	d11a      	bne.n	8009320 <_printf_common+0xc8>
 80092ea:	2000      	movs	r0, #0
 80092ec:	e008      	b.n	8009300 <_printf_common+0xa8>
 80092ee:	2301      	movs	r3, #1
 80092f0:	4652      	mov	r2, sl
 80092f2:	4641      	mov	r1, r8
 80092f4:	4638      	mov	r0, r7
 80092f6:	47c8      	blx	r9
 80092f8:	3001      	adds	r0, #1
 80092fa:	d103      	bne.n	8009304 <_printf_common+0xac>
 80092fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009304:	3501      	adds	r5, #1
 8009306:	e7c6      	b.n	8009296 <_printf_common+0x3e>
 8009308:	18e1      	adds	r1, r4, r3
 800930a:	1c5a      	adds	r2, r3, #1
 800930c:	2030      	movs	r0, #48	@ 0x30
 800930e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009312:	4422      	add	r2, r4
 8009314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800931c:	3302      	adds	r3, #2
 800931e:	e7c7      	b.n	80092b0 <_printf_common+0x58>
 8009320:	2301      	movs	r3, #1
 8009322:	4622      	mov	r2, r4
 8009324:	4641      	mov	r1, r8
 8009326:	4638      	mov	r0, r7
 8009328:	47c8      	blx	r9
 800932a:	3001      	adds	r0, #1
 800932c:	d0e6      	beq.n	80092fc <_printf_common+0xa4>
 800932e:	3601      	adds	r6, #1
 8009330:	e7d9      	b.n	80092e6 <_printf_common+0x8e>
	...

08009334 <_printf_i>:
 8009334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	7e0f      	ldrb	r7, [r1, #24]
 800933a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800933c:	2f78      	cmp	r7, #120	@ 0x78
 800933e:	4691      	mov	r9, r2
 8009340:	4680      	mov	r8, r0
 8009342:	460c      	mov	r4, r1
 8009344:	469a      	mov	sl, r3
 8009346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800934a:	d807      	bhi.n	800935c <_printf_i+0x28>
 800934c:	2f62      	cmp	r7, #98	@ 0x62
 800934e:	d80a      	bhi.n	8009366 <_printf_i+0x32>
 8009350:	2f00      	cmp	r7, #0
 8009352:	f000 80d2 	beq.w	80094fa <_printf_i+0x1c6>
 8009356:	2f58      	cmp	r7, #88	@ 0x58
 8009358:	f000 80b9 	beq.w	80094ce <_printf_i+0x19a>
 800935c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009364:	e03a      	b.n	80093dc <_printf_i+0xa8>
 8009366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800936a:	2b15      	cmp	r3, #21
 800936c:	d8f6      	bhi.n	800935c <_printf_i+0x28>
 800936e:	a101      	add	r1, pc, #4	@ (adr r1, 8009374 <_printf_i+0x40>)
 8009370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009374:	080093cd 	.word	0x080093cd
 8009378:	080093e1 	.word	0x080093e1
 800937c:	0800935d 	.word	0x0800935d
 8009380:	0800935d 	.word	0x0800935d
 8009384:	0800935d 	.word	0x0800935d
 8009388:	0800935d 	.word	0x0800935d
 800938c:	080093e1 	.word	0x080093e1
 8009390:	0800935d 	.word	0x0800935d
 8009394:	0800935d 	.word	0x0800935d
 8009398:	0800935d 	.word	0x0800935d
 800939c:	0800935d 	.word	0x0800935d
 80093a0:	080094e1 	.word	0x080094e1
 80093a4:	0800940b 	.word	0x0800940b
 80093a8:	0800949b 	.word	0x0800949b
 80093ac:	0800935d 	.word	0x0800935d
 80093b0:	0800935d 	.word	0x0800935d
 80093b4:	08009503 	.word	0x08009503
 80093b8:	0800935d 	.word	0x0800935d
 80093bc:	0800940b 	.word	0x0800940b
 80093c0:	0800935d 	.word	0x0800935d
 80093c4:	0800935d 	.word	0x0800935d
 80093c8:	080094a3 	.word	0x080094a3
 80093cc:	6833      	ldr	r3, [r6, #0]
 80093ce:	1d1a      	adds	r2, r3, #4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	6032      	str	r2, [r6, #0]
 80093d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80093dc:	2301      	movs	r3, #1
 80093de:	e09d      	b.n	800951c <_printf_i+0x1e8>
 80093e0:	6833      	ldr	r3, [r6, #0]
 80093e2:	6820      	ldr	r0, [r4, #0]
 80093e4:	1d19      	adds	r1, r3, #4
 80093e6:	6031      	str	r1, [r6, #0]
 80093e8:	0606      	lsls	r6, r0, #24
 80093ea:	d501      	bpl.n	80093f0 <_printf_i+0xbc>
 80093ec:	681d      	ldr	r5, [r3, #0]
 80093ee:	e003      	b.n	80093f8 <_printf_i+0xc4>
 80093f0:	0645      	lsls	r5, r0, #25
 80093f2:	d5fb      	bpl.n	80093ec <_printf_i+0xb8>
 80093f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80093f8:	2d00      	cmp	r5, #0
 80093fa:	da03      	bge.n	8009404 <_printf_i+0xd0>
 80093fc:	232d      	movs	r3, #45	@ 0x2d
 80093fe:	426d      	negs	r5, r5
 8009400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009404:	4859      	ldr	r0, [pc, #356]	@ (800956c <_printf_i+0x238>)
 8009406:	230a      	movs	r3, #10
 8009408:	e011      	b.n	800942e <_printf_i+0xfa>
 800940a:	6821      	ldr	r1, [r4, #0]
 800940c:	6833      	ldr	r3, [r6, #0]
 800940e:	0608      	lsls	r0, r1, #24
 8009410:	f853 5b04 	ldr.w	r5, [r3], #4
 8009414:	d402      	bmi.n	800941c <_printf_i+0xe8>
 8009416:	0649      	lsls	r1, r1, #25
 8009418:	bf48      	it	mi
 800941a:	b2ad      	uxthmi	r5, r5
 800941c:	2f6f      	cmp	r7, #111	@ 0x6f
 800941e:	4853      	ldr	r0, [pc, #332]	@ (800956c <_printf_i+0x238>)
 8009420:	6033      	str	r3, [r6, #0]
 8009422:	bf14      	ite	ne
 8009424:	230a      	movne	r3, #10
 8009426:	2308      	moveq	r3, #8
 8009428:	2100      	movs	r1, #0
 800942a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800942e:	6866      	ldr	r6, [r4, #4]
 8009430:	60a6      	str	r6, [r4, #8]
 8009432:	2e00      	cmp	r6, #0
 8009434:	bfa2      	ittt	ge
 8009436:	6821      	ldrge	r1, [r4, #0]
 8009438:	f021 0104 	bicge.w	r1, r1, #4
 800943c:	6021      	strge	r1, [r4, #0]
 800943e:	b90d      	cbnz	r5, 8009444 <_printf_i+0x110>
 8009440:	2e00      	cmp	r6, #0
 8009442:	d04b      	beq.n	80094dc <_printf_i+0x1a8>
 8009444:	4616      	mov	r6, r2
 8009446:	fbb5 f1f3 	udiv	r1, r5, r3
 800944a:	fb03 5711 	mls	r7, r3, r1, r5
 800944e:	5dc7      	ldrb	r7, [r0, r7]
 8009450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009454:	462f      	mov	r7, r5
 8009456:	42bb      	cmp	r3, r7
 8009458:	460d      	mov	r5, r1
 800945a:	d9f4      	bls.n	8009446 <_printf_i+0x112>
 800945c:	2b08      	cmp	r3, #8
 800945e:	d10b      	bne.n	8009478 <_printf_i+0x144>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	07df      	lsls	r7, r3, #31
 8009464:	d508      	bpl.n	8009478 <_printf_i+0x144>
 8009466:	6923      	ldr	r3, [r4, #16]
 8009468:	6861      	ldr	r1, [r4, #4]
 800946a:	4299      	cmp	r1, r3
 800946c:	bfde      	ittt	le
 800946e:	2330      	movle	r3, #48	@ 0x30
 8009470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009474:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009478:	1b92      	subs	r2, r2, r6
 800947a:	6122      	str	r2, [r4, #16]
 800947c:	f8cd a000 	str.w	sl, [sp]
 8009480:	464b      	mov	r3, r9
 8009482:	aa03      	add	r2, sp, #12
 8009484:	4621      	mov	r1, r4
 8009486:	4640      	mov	r0, r8
 8009488:	f7ff fee6 	bl	8009258 <_printf_common>
 800948c:	3001      	adds	r0, #1
 800948e:	d14a      	bne.n	8009526 <_printf_i+0x1f2>
 8009490:	f04f 30ff 	mov.w	r0, #4294967295
 8009494:	b004      	add	sp, #16
 8009496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	f043 0320 	orr.w	r3, r3, #32
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	4833      	ldr	r0, [pc, #204]	@ (8009570 <_printf_i+0x23c>)
 80094a4:	2778      	movs	r7, #120	@ 0x78
 80094a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	6831      	ldr	r1, [r6, #0]
 80094ae:	061f      	lsls	r7, r3, #24
 80094b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80094b4:	d402      	bmi.n	80094bc <_printf_i+0x188>
 80094b6:	065f      	lsls	r7, r3, #25
 80094b8:	bf48      	it	mi
 80094ba:	b2ad      	uxthmi	r5, r5
 80094bc:	6031      	str	r1, [r6, #0]
 80094be:	07d9      	lsls	r1, r3, #31
 80094c0:	bf44      	itt	mi
 80094c2:	f043 0320 	orrmi.w	r3, r3, #32
 80094c6:	6023      	strmi	r3, [r4, #0]
 80094c8:	b11d      	cbz	r5, 80094d2 <_printf_i+0x19e>
 80094ca:	2310      	movs	r3, #16
 80094cc:	e7ac      	b.n	8009428 <_printf_i+0xf4>
 80094ce:	4827      	ldr	r0, [pc, #156]	@ (800956c <_printf_i+0x238>)
 80094d0:	e7e9      	b.n	80094a6 <_printf_i+0x172>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	f023 0320 	bic.w	r3, r3, #32
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	e7f6      	b.n	80094ca <_printf_i+0x196>
 80094dc:	4616      	mov	r6, r2
 80094de:	e7bd      	b.n	800945c <_printf_i+0x128>
 80094e0:	6833      	ldr	r3, [r6, #0]
 80094e2:	6825      	ldr	r5, [r4, #0]
 80094e4:	6961      	ldr	r1, [r4, #20]
 80094e6:	1d18      	adds	r0, r3, #4
 80094e8:	6030      	str	r0, [r6, #0]
 80094ea:	062e      	lsls	r6, r5, #24
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	d501      	bpl.n	80094f4 <_printf_i+0x1c0>
 80094f0:	6019      	str	r1, [r3, #0]
 80094f2:	e002      	b.n	80094fa <_printf_i+0x1c6>
 80094f4:	0668      	lsls	r0, r5, #25
 80094f6:	d5fb      	bpl.n	80094f0 <_printf_i+0x1bc>
 80094f8:	8019      	strh	r1, [r3, #0]
 80094fa:	2300      	movs	r3, #0
 80094fc:	6123      	str	r3, [r4, #16]
 80094fe:	4616      	mov	r6, r2
 8009500:	e7bc      	b.n	800947c <_printf_i+0x148>
 8009502:	6833      	ldr	r3, [r6, #0]
 8009504:	1d1a      	adds	r2, r3, #4
 8009506:	6032      	str	r2, [r6, #0]
 8009508:	681e      	ldr	r6, [r3, #0]
 800950a:	6862      	ldr	r2, [r4, #4]
 800950c:	2100      	movs	r1, #0
 800950e:	4630      	mov	r0, r6
 8009510:	f7f6 fe66 	bl	80001e0 <memchr>
 8009514:	b108      	cbz	r0, 800951a <_printf_i+0x1e6>
 8009516:	1b80      	subs	r0, r0, r6
 8009518:	6060      	str	r0, [r4, #4]
 800951a:	6863      	ldr	r3, [r4, #4]
 800951c:	6123      	str	r3, [r4, #16]
 800951e:	2300      	movs	r3, #0
 8009520:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009524:	e7aa      	b.n	800947c <_printf_i+0x148>
 8009526:	6923      	ldr	r3, [r4, #16]
 8009528:	4632      	mov	r2, r6
 800952a:	4649      	mov	r1, r9
 800952c:	4640      	mov	r0, r8
 800952e:	47d0      	blx	sl
 8009530:	3001      	adds	r0, #1
 8009532:	d0ad      	beq.n	8009490 <_printf_i+0x15c>
 8009534:	6823      	ldr	r3, [r4, #0]
 8009536:	079b      	lsls	r3, r3, #30
 8009538:	d413      	bmi.n	8009562 <_printf_i+0x22e>
 800953a:	68e0      	ldr	r0, [r4, #12]
 800953c:	9b03      	ldr	r3, [sp, #12]
 800953e:	4298      	cmp	r0, r3
 8009540:	bfb8      	it	lt
 8009542:	4618      	movlt	r0, r3
 8009544:	e7a6      	b.n	8009494 <_printf_i+0x160>
 8009546:	2301      	movs	r3, #1
 8009548:	4632      	mov	r2, r6
 800954a:	4649      	mov	r1, r9
 800954c:	4640      	mov	r0, r8
 800954e:	47d0      	blx	sl
 8009550:	3001      	adds	r0, #1
 8009552:	d09d      	beq.n	8009490 <_printf_i+0x15c>
 8009554:	3501      	adds	r5, #1
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	9903      	ldr	r1, [sp, #12]
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	42ab      	cmp	r3, r5
 800955e:	dcf2      	bgt.n	8009546 <_printf_i+0x212>
 8009560:	e7eb      	b.n	800953a <_printf_i+0x206>
 8009562:	2500      	movs	r5, #0
 8009564:	f104 0619 	add.w	r6, r4, #25
 8009568:	e7f5      	b.n	8009556 <_printf_i+0x222>
 800956a:	bf00      	nop
 800956c:	0800c8a2 	.word	0x0800c8a2
 8009570:	0800c8b3 	.word	0x0800c8b3

08009574 <std>:
 8009574:	2300      	movs	r3, #0
 8009576:	b510      	push	{r4, lr}
 8009578:	4604      	mov	r4, r0
 800957a:	e9c0 3300 	strd	r3, r3, [r0]
 800957e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009582:	6083      	str	r3, [r0, #8]
 8009584:	8181      	strh	r1, [r0, #12]
 8009586:	6643      	str	r3, [r0, #100]	@ 0x64
 8009588:	81c2      	strh	r2, [r0, #14]
 800958a:	6183      	str	r3, [r0, #24]
 800958c:	4619      	mov	r1, r3
 800958e:	2208      	movs	r2, #8
 8009590:	305c      	adds	r0, #92	@ 0x5c
 8009592:	f000 f914 	bl	80097be <memset>
 8009596:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <std+0x58>)
 8009598:	6263      	str	r3, [r4, #36]	@ 0x24
 800959a:	4b0d      	ldr	r3, [pc, #52]	@ (80095d0 <std+0x5c>)
 800959c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800959e:	4b0d      	ldr	r3, [pc, #52]	@ (80095d4 <std+0x60>)
 80095a0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80095a2:	4b0d      	ldr	r3, [pc, #52]	@ (80095d8 <std+0x64>)
 80095a4:	6323      	str	r3, [r4, #48]	@ 0x30
 80095a6:	4b0d      	ldr	r3, [pc, #52]	@ (80095dc <std+0x68>)
 80095a8:	6224      	str	r4, [r4, #32]
 80095aa:	429c      	cmp	r4, r3
 80095ac:	d006      	beq.n	80095bc <std+0x48>
 80095ae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80095b2:	4294      	cmp	r4, r2
 80095b4:	d002      	beq.n	80095bc <std+0x48>
 80095b6:	33d0      	adds	r3, #208	@ 0xd0
 80095b8:	429c      	cmp	r4, r3
 80095ba:	d105      	bne.n	80095c8 <std+0x54>
 80095bc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80095c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095c4:	f000 b978 	b.w	80098b8 <__retarget_lock_init_recursive>
 80095c8:	bd10      	pop	{r4, pc}
 80095ca:	bf00      	nop
 80095cc:	08009739 	.word	0x08009739
 80095d0:	0800975b 	.word	0x0800975b
 80095d4:	08009793 	.word	0x08009793
 80095d8:	080097b7 	.word	0x080097b7
 80095dc:	20001fc4 	.word	0x20001fc4

080095e0 <stdio_exit_handler>:
 80095e0:	4a02      	ldr	r2, [pc, #8]	@ (80095ec <stdio_exit_handler+0xc>)
 80095e2:	4903      	ldr	r1, [pc, #12]	@ (80095f0 <stdio_exit_handler+0x10>)
 80095e4:	4803      	ldr	r0, [pc, #12]	@ (80095f4 <stdio_exit_handler+0x14>)
 80095e6:	f000 b869 	b.w	80096bc <_fwalk_sglue>
 80095ea:	bf00      	nop
 80095ec:	200000fc 	.word	0x200000fc
 80095f0:	0800b215 	.word	0x0800b215
 80095f4:	2000010c 	.word	0x2000010c

080095f8 <cleanup_stdio>:
 80095f8:	6841      	ldr	r1, [r0, #4]
 80095fa:	4b0c      	ldr	r3, [pc, #48]	@ (800962c <cleanup_stdio+0x34>)
 80095fc:	4299      	cmp	r1, r3
 80095fe:	b510      	push	{r4, lr}
 8009600:	4604      	mov	r4, r0
 8009602:	d001      	beq.n	8009608 <cleanup_stdio+0x10>
 8009604:	f001 fe06 	bl	800b214 <_fflush_r>
 8009608:	68a1      	ldr	r1, [r4, #8]
 800960a:	4b09      	ldr	r3, [pc, #36]	@ (8009630 <cleanup_stdio+0x38>)
 800960c:	4299      	cmp	r1, r3
 800960e:	d002      	beq.n	8009616 <cleanup_stdio+0x1e>
 8009610:	4620      	mov	r0, r4
 8009612:	f001 fdff 	bl	800b214 <_fflush_r>
 8009616:	68e1      	ldr	r1, [r4, #12]
 8009618:	4b06      	ldr	r3, [pc, #24]	@ (8009634 <cleanup_stdio+0x3c>)
 800961a:	4299      	cmp	r1, r3
 800961c:	d004      	beq.n	8009628 <cleanup_stdio+0x30>
 800961e:	4620      	mov	r0, r4
 8009620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009624:	f001 bdf6 	b.w	800b214 <_fflush_r>
 8009628:	bd10      	pop	{r4, pc}
 800962a:	bf00      	nop
 800962c:	20001fc4 	.word	0x20001fc4
 8009630:	2000202c 	.word	0x2000202c
 8009634:	20002094 	.word	0x20002094

08009638 <global_stdio_init.part.0>:
 8009638:	b510      	push	{r4, lr}
 800963a:	4b0b      	ldr	r3, [pc, #44]	@ (8009668 <global_stdio_init.part.0+0x30>)
 800963c:	4c0b      	ldr	r4, [pc, #44]	@ (800966c <global_stdio_init.part.0+0x34>)
 800963e:	4a0c      	ldr	r2, [pc, #48]	@ (8009670 <global_stdio_init.part.0+0x38>)
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	4620      	mov	r0, r4
 8009644:	2200      	movs	r2, #0
 8009646:	2104      	movs	r1, #4
 8009648:	f7ff ff94 	bl	8009574 <std>
 800964c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009650:	2201      	movs	r2, #1
 8009652:	2109      	movs	r1, #9
 8009654:	f7ff ff8e 	bl	8009574 <std>
 8009658:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800965c:	2202      	movs	r2, #2
 800965e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009662:	2112      	movs	r1, #18
 8009664:	f7ff bf86 	b.w	8009574 <std>
 8009668:	200020fc 	.word	0x200020fc
 800966c:	20001fc4 	.word	0x20001fc4
 8009670:	080095e1 	.word	0x080095e1

08009674 <__sfp_lock_acquire>:
 8009674:	4801      	ldr	r0, [pc, #4]	@ (800967c <__sfp_lock_acquire+0x8>)
 8009676:	f000 b920 	b.w	80098ba <__retarget_lock_acquire_recursive>
 800967a:	bf00      	nop
 800967c:	20002105 	.word	0x20002105

08009680 <__sfp_lock_release>:
 8009680:	4801      	ldr	r0, [pc, #4]	@ (8009688 <__sfp_lock_release+0x8>)
 8009682:	f000 b91b 	b.w	80098bc <__retarget_lock_release_recursive>
 8009686:	bf00      	nop
 8009688:	20002105 	.word	0x20002105

0800968c <__sinit>:
 800968c:	b510      	push	{r4, lr}
 800968e:	4604      	mov	r4, r0
 8009690:	f7ff fff0 	bl	8009674 <__sfp_lock_acquire>
 8009694:	6a23      	ldr	r3, [r4, #32]
 8009696:	b11b      	cbz	r3, 80096a0 <__sinit+0x14>
 8009698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800969c:	f7ff bff0 	b.w	8009680 <__sfp_lock_release>
 80096a0:	4b04      	ldr	r3, [pc, #16]	@ (80096b4 <__sinit+0x28>)
 80096a2:	6223      	str	r3, [r4, #32]
 80096a4:	4b04      	ldr	r3, [pc, #16]	@ (80096b8 <__sinit+0x2c>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1f5      	bne.n	8009698 <__sinit+0xc>
 80096ac:	f7ff ffc4 	bl	8009638 <global_stdio_init.part.0>
 80096b0:	e7f2      	b.n	8009698 <__sinit+0xc>
 80096b2:	bf00      	nop
 80096b4:	080095f9 	.word	0x080095f9
 80096b8:	200020fc 	.word	0x200020fc

080096bc <_fwalk_sglue>:
 80096bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096c0:	4607      	mov	r7, r0
 80096c2:	4688      	mov	r8, r1
 80096c4:	4614      	mov	r4, r2
 80096c6:	2600      	movs	r6, #0
 80096c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096cc:	f1b9 0901 	subs.w	r9, r9, #1
 80096d0:	d505      	bpl.n	80096de <_fwalk_sglue+0x22>
 80096d2:	6824      	ldr	r4, [r4, #0]
 80096d4:	2c00      	cmp	r4, #0
 80096d6:	d1f7      	bne.n	80096c8 <_fwalk_sglue+0xc>
 80096d8:	4630      	mov	r0, r6
 80096da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096de:	89ab      	ldrh	r3, [r5, #12]
 80096e0:	2b01      	cmp	r3, #1
 80096e2:	d907      	bls.n	80096f4 <_fwalk_sglue+0x38>
 80096e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80096e8:	3301      	adds	r3, #1
 80096ea:	d003      	beq.n	80096f4 <_fwalk_sglue+0x38>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4638      	mov	r0, r7
 80096f0:	47c0      	blx	r8
 80096f2:	4306      	orrs	r6, r0
 80096f4:	3568      	adds	r5, #104	@ 0x68
 80096f6:	e7e9      	b.n	80096cc <_fwalk_sglue+0x10>

080096f8 <siprintf>:
 80096f8:	b40e      	push	{r1, r2, r3}
 80096fa:	b500      	push	{lr}
 80096fc:	b09c      	sub	sp, #112	@ 0x70
 80096fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8009700:	9002      	str	r0, [sp, #8]
 8009702:	9006      	str	r0, [sp, #24]
 8009704:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009708:	4809      	ldr	r0, [pc, #36]	@ (8009730 <siprintf+0x38>)
 800970a:	9107      	str	r1, [sp, #28]
 800970c:	9104      	str	r1, [sp, #16]
 800970e:	4909      	ldr	r1, [pc, #36]	@ (8009734 <siprintf+0x3c>)
 8009710:	f853 2b04 	ldr.w	r2, [r3], #4
 8009714:	9105      	str	r1, [sp, #20]
 8009716:	6800      	ldr	r0, [r0, #0]
 8009718:	9301      	str	r3, [sp, #4]
 800971a:	a902      	add	r1, sp, #8
 800971c:	f001 fbfa 	bl	800af14 <_svfiprintf_r>
 8009720:	9b02      	ldr	r3, [sp, #8]
 8009722:	2200      	movs	r2, #0
 8009724:	701a      	strb	r2, [r3, #0]
 8009726:	b01c      	add	sp, #112	@ 0x70
 8009728:	f85d eb04 	ldr.w	lr, [sp], #4
 800972c:	b003      	add	sp, #12
 800972e:	4770      	bx	lr
 8009730:	20000108 	.word	0x20000108
 8009734:	ffff0208 	.word	0xffff0208

08009738 <__sread>:
 8009738:	b510      	push	{r4, lr}
 800973a:	460c      	mov	r4, r1
 800973c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009740:	f000 f86c 	bl	800981c <_read_r>
 8009744:	2800      	cmp	r0, #0
 8009746:	bfab      	itete	ge
 8009748:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800974a:	89a3      	ldrhlt	r3, [r4, #12]
 800974c:	181b      	addge	r3, r3, r0
 800974e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009752:	bfac      	ite	ge
 8009754:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009756:	81a3      	strhlt	r3, [r4, #12]
 8009758:	bd10      	pop	{r4, pc}

0800975a <__swrite>:
 800975a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800975e:	461f      	mov	r7, r3
 8009760:	898b      	ldrh	r3, [r1, #12]
 8009762:	05db      	lsls	r3, r3, #23
 8009764:	4605      	mov	r5, r0
 8009766:	460c      	mov	r4, r1
 8009768:	4616      	mov	r6, r2
 800976a:	d505      	bpl.n	8009778 <__swrite+0x1e>
 800976c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009770:	2302      	movs	r3, #2
 8009772:	2200      	movs	r2, #0
 8009774:	f000 f840 	bl	80097f8 <_lseek_r>
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800977e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009782:	81a3      	strh	r3, [r4, #12]
 8009784:	4632      	mov	r2, r6
 8009786:	463b      	mov	r3, r7
 8009788:	4628      	mov	r0, r5
 800978a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800978e:	f000 b857 	b.w	8009840 <_write_r>

08009792 <__sseek>:
 8009792:	b510      	push	{r4, lr}
 8009794:	460c      	mov	r4, r1
 8009796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800979a:	f000 f82d 	bl	80097f8 <_lseek_r>
 800979e:	1c43      	adds	r3, r0, #1
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	bf15      	itete	ne
 80097a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ae:	81a3      	strheq	r3, [r4, #12]
 80097b0:	bf18      	it	ne
 80097b2:	81a3      	strhne	r3, [r4, #12]
 80097b4:	bd10      	pop	{r4, pc}

080097b6 <__sclose>:
 80097b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ba:	f000 b80d 	b.w	80097d8 <_close_r>

080097be <memset>:
 80097be:	4402      	add	r2, r0
 80097c0:	4603      	mov	r3, r0
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d100      	bne.n	80097c8 <memset+0xa>
 80097c6:	4770      	bx	lr
 80097c8:	f803 1b01 	strb.w	r1, [r3], #1
 80097cc:	e7f9      	b.n	80097c2 <memset+0x4>
	...

080097d0 <_localeconv_r>:
 80097d0:	4800      	ldr	r0, [pc, #0]	@ (80097d4 <_localeconv_r+0x4>)
 80097d2:	4770      	bx	lr
 80097d4:	20000248 	.word	0x20000248

080097d8 <_close_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d06      	ldr	r5, [pc, #24]	@ (80097f4 <_close_r+0x1c>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	f7f7 ff3e 	bl	8001664 <_close>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_close_r+0x1a>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_close_r+0x1a>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	20002100 	.word	0x20002100

080097f8 <_lseek_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d07      	ldr	r5, [pc, #28]	@ (8009818 <_lseek_r+0x20>)
 80097fc:	4604      	mov	r4, r0
 80097fe:	4608      	mov	r0, r1
 8009800:	4611      	mov	r1, r2
 8009802:	2200      	movs	r2, #0
 8009804:	602a      	str	r2, [r5, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	f7f7 ff53 	bl	80016b2 <_lseek>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_lseek_r+0x1e>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_lseek_r+0x1e>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	20002100 	.word	0x20002100

0800981c <_read_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	@ (800983c <_read_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f7 fee1 	bl	80015f2 <_read>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_read_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_read_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20002100 	.word	0x20002100

08009840 <_write_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	@ (8009860 <_write_r+0x20>)
 8009844:	4604      	mov	r4, r0
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	2200      	movs	r2, #0
 800984c:	602a      	str	r2, [r5, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7f7 feec 	bl	800162c <_write>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_write_r+0x1e>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_write_r+0x1e>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	20002100 	.word	0x20002100

08009864 <__errno>:
 8009864:	4b01      	ldr	r3, [pc, #4]	@ (800986c <__errno+0x8>)
 8009866:	6818      	ldr	r0, [r3, #0]
 8009868:	4770      	bx	lr
 800986a:	bf00      	nop
 800986c:	20000108 	.word	0x20000108

08009870 <__libc_init_array>:
 8009870:	b570      	push	{r4, r5, r6, lr}
 8009872:	4d0d      	ldr	r5, [pc, #52]	@ (80098a8 <__libc_init_array+0x38>)
 8009874:	4c0d      	ldr	r4, [pc, #52]	@ (80098ac <__libc_init_array+0x3c>)
 8009876:	1b64      	subs	r4, r4, r5
 8009878:	10a4      	asrs	r4, r4, #2
 800987a:	2600      	movs	r6, #0
 800987c:	42a6      	cmp	r6, r4
 800987e:	d109      	bne.n	8009894 <__libc_init_array+0x24>
 8009880:	4d0b      	ldr	r5, [pc, #44]	@ (80098b0 <__libc_init_array+0x40>)
 8009882:	4c0c      	ldr	r4, [pc, #48]	@ (80098b4 <__libc_init_array+0x44>)
 8009884:	f002 ffc2 	bl	800c80c <_init>
 8009888:	1b64      	subs	r4, r4, r5
 800988a:	10a4      	asrs	r4, r4, #2
 800988c:	2600      	movs	r6, #0
 800988e:	42a6      	cmp	r6, r4
 8009890:	d105      	bne.n	800989e <__libc_init_array+0x2e>
 8009892:	bd70      	pop	{r4, r5, r6, pc}
 8009894:	f855 3b04 	ldr.w	r3, [r5], #4
 8009898:	4798      	blx	r3
 800989a:	3601      	adds	r6, #1
 800989c:	e7ee      	b.n	800987c <__libc_init_array+0xc>
 800989e:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a2:	4798      	blx	r3
 80098a4:	3601      	adds	r6, #1
 80098a6:	e7f2      	b.n	800988e <__libc_init_array+0x1e>
 80098a8:	0800cc38 	.word	0x0800cc38
 80098ac:	0800cc38 	.word	0x0800cc38
 80098b0:	0800cc38 	.word	0x0800cc38
 80098b4:	0800cc3c 	.word	0x0800cc3c

080098b8 <__retarget_lock_init_recursive>:
 80098b8:	4770      	bx	lr

080098ba <__retarget_lock_acquire_recursive>:
 80098ba:	4770      	bx	lr

080098bc <__retarget_lock_release_recursive>:
 80098bc:	4770      	bx	lr

080098be <quorem>:
 80098be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c2:	6903      	ldr	r3, [r0, #16]
 80098c4:	690c      	ldr	r4, [r1, #16]
 80098c6:	42a3      	cmp	r3, r4
 80098c8:	4607      	mov	r7, r0
 80098ca:	db7e      	blt.n	80099ca <quorem+0x10c>
 80098cc:	3c01      	subs	r4, #1
 80098ce:	f101 0814 	add.w	r8, r1, #20
 80098d2:	00a3      	lsls	r3, r4, #2
 80098d4:	f100 0514 	add.w	r5, r0, #20
 80098d8:	9300      	str	r3, [sp, #0]
 80098da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098de:	9301      	str	r3, [sp, #4]
 80098e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098e8:	3301      	adds	r3, #1
 80098ea:	429a      	cmp	r2, r3
 80098ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80098f4:	d32e      	bcc.n	8009954 <quorem+0x96>
 80098f6:	f04f 0a00 	mov.w	sl, #0
 80098fa:	46c4      	mov	ip, r8
 80098fc:	46ae      	mov	lr, r5
 80098fe:	46d3      	mov	fp, sl
 8009900:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009904:	b298      	uxth	r0, r3
 8009906:	fb06 a000 	mla	r0, r6, r0, sl
 800990a:	0c02      	lsrs	r2, r0, #16
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	fb06 2303 	mla	r3, r6, r3, r2
 8009912:	f8de 2000 	ldr.w	r2, [lr]
 8009916:	b280      	uxth	r0, r0
 8009918:	b292      	uxth	r2, r2
 800991a:	1a12      	subs	r2, r2, r0
 800991c:	445a      	add	r2, fp
 800991e:	f8de 0000 	ldr.w	r0, [lr]
 8009922:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009926:	b29b      	uxth	r3, r3
 8009928:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800992c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009930:	b292      	uxth	r2, r2
 8009932:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009936:	45e1      	cmp	r9, ip
 8009938:	f84e 2b04 	str.w	r2, [lr], #4
 800993c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009940:	d2de      	bcs.n	8009900 <quorem+0x42>
 8009942:	9b00      	ldr	r3, [sp, #0]
 8009944:	58eb      	ldr	r3, [r5, r3]
 8009946:	b92b      	cbnz	r3, 8009954 <quorem+0x96>
 8009948:	9b01      	ldr	r3, [sp, #4]
 800994a:	3b04      	subs	r3, #4
 800994c:	429d      	cmp	r5, r3
 800994e:	461a      	mov	r2, r3
 8009950:	d32f      	bcc.n	80099b2 <quorem+0xf4>
 8009952:	613c      	str	r4, [r7, #16]
 8009954:	4638      	mov	r0, r7
 8009956:	f001 f979 	bl	800ac4c <__mcmp>
 800995a:	2800      	cmp	r0, #0
 800995c:	db25      	blt.n	80099aa <quorem+0xec>
 800995e:	4629      	mov	r1, r5
 8009960:	2000      	movs	r0, #0
 8009962:	f858 2b04 	ldr.w	r2, [r8], #4
 8009966:	f8d1 c000 	ldr.w	ip, [r1]
 800996a:	fa1f fe82 	uxth.w	lr, r2
 800996e:	fa1f f38c 	uxth.w	r3, ip
 8009972:	eba3 030e 	sub.w	r3, r3, lr
 8009976:	4403      	add	r3, r0
 8009978:	0c12      	lsrs	r2, r2, #16
 800997a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800997e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009982:	b29b      	uxth	r3, r3
 8009984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009988:	45c1      	cmp	r9, r8
 800998a:	f841 3b04 	str.w	r3, [r1], #4
 800998e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009992:	d2e6      	bcs.n	8009962 <quorem+0xa4>
 8009994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800999c:	b922      	cbnz	r2, 80099a8 <quorem+0xea>
 800999e:	3b04      	subs	r3, #4
 80099a0:	429d      	cmp	r5, r3
 80099a2:	461a      	mov	r2, r3
 80099a4:	d30b      	bcc.n	80099be <quorem+0x100>
 80099a6:	613c      	str	r4, [r7, #16]
 80099a8:	3601      	adds	r6, #1
 80099aa:	4630      	mov	r0, r6
 80099ac:	b003      	add	sp, #12
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	3b04      	subs	r3, #4
 80099b6:	2a00      	cmp	r2, #0
 80099b8:	d1cb      	bne.n	8009952 <quorem+0x94>
 80099ba:	3c01      	subs	r4, #1
 80099bc:	e7c6      	b.n	800994c <quorem+0x8e>
 80099be:	6812      	ldr	r2, [r2, #0]
 80099c0:	3b04      	subs	r3, #4
 80099c2:	2a00      	cmp	r2, #0
 80099c4:	d1ef      	bne.n	80099a6 <quorem+0xe8>
 80099c6:	3c01      	subs	r4, #1
 80099c8:	e7ea      	b.n	80099a0 <quorem+0xe2>
 80099ca:	2000      	movs	r0, #0
 80099cc:	e7ee      	b.n	80099ac <quorem+0xee>
	...

080099d0 <_dtoa_r>:
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	69c7      	ldr	r7, [r0, #28]
 80099d6:	b099      	sub	sp, #100	@ 0x64
 80099d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80099dc:	ec55 4b10 	vmov	r4, r5, d0
 80099e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80099e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80099e4:	4683      	mov	fp, r0
 80099e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80099e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099ea:	b97f      	cbnz	r7, 8009a0c <_dtoa_r+0x3c>
 80099ec:	2010      	movs	r0, #16
 80099ee:	f000 fdfd 	bl	800a5ec <malloc>
 80099f2:	4602      	mov	r2, r0
 80099f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80099f8:	b920      	cbnz	r0, 8009a04 <_dtoa_r+0x34>
 80099fa:	4ba7      	ldr	r3, [pc, #668]	@ (8009c98 <_dtoa_r+0x2c8>)
 80099fc:	21ef      	movs	r1, #239	@ 0xef
 80099fe:	48a7      	ldr	r0, [pc, #668]	@ (8009c9c <_dtoa_r+0x2cc>)
 8009a00:	f001 fc68 	bl	800b2d4 <__assert_func>
 8009a04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009a08:	6007      	str	r7, [r0, #0]
 8009a0a:	60c7      	str	r7, [r0, #12]
 8009a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a10:	6819      	ldr	r1, [r3, #0]
 8009a12:	b159      	cbz	r1, 8009a2c <_dtoa_r+0x5c>
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	604a      	str	r2, [r1, #4]
 8009a18:	2301      	movs	r3, #1
 8009a1a:	4093      	lsls	r3, r2
 8009a1c:	608b      	str	r3, [r1, #8]
 8009a1e:	4658      	mov	r0, fp
 8009a20:	f000 feda 	bl	800a7d8 <_Bfree>
 8009a24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	601a      	str	r2, [r3, #0]
 8009a2c:	1e2b      	subs	r3, r5, #0
 8009a2e:	bfb9      	ittee	lt
 8009a30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009a34:	9303      	strlt	r3, [sp, #12]
 8009a36:	2300      	movge	r3, #0
 8009a38:	6033      	strge	r3, [r6, #0]
 8009a3a:	9f03      	ldr	r7, [sp, #12]
 8009a3c:	4b98      	ldr	r3, [pc, #608]	@ (8009ca0 <_dtoa_r+0x2d0>)
 8009a3e:	bfbc      	itt	lt
 8009a40:	2201      	movlt	r2, #1
 8009a42:	6032      	strlt	r2, [r6, #0]
 8009a44:	43bb      	bics	r3, r7
 8009a46:	d112      	bne.n	8009a6e <_dtoa_r+0x9e>
 8009a48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009a4e:	6013      	str	r3, [r2, #0]
 8009a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009a54:	4323      	orrs	r3, r4
 8009a56:	f000 854d 	beq.w	800a4f4 <_dtoa_r+0xb24>
 8009a5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009cb4 <_dtoa_r+0x2e4>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 854f 	beq.w	800a504 <_dtoa_r+0xb34>
 8009a66:	f10a 0303 	add.w	r3, sl, #3
 8009a6a:	f000 bd49 	b.w	800a500 <_dtoa_r+0xb30>
 8009a6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a72:	2200      	movs	r2, #0
 8009a74:	ec51 0b17 	vmov	r0, r1, d7
 8009a78:	2300      	movs	r3, #0
 8009a7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009a7e:	f7f7 f82b 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a82:	4680      	mov	r8, r0
 8009a84:	b158      	cbz	r0, 8009a9e <_dtoa_r+0xce>
 8009a86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009a88:	2301      	movs	r3, #1
 8009a8a:	6013      	str	r3, [r2, #0]
 8009a8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009a8e:	b113      	cbz	r3, 8009a96 <_dtoa_r+0xc6>
 8009a90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009a92:	4b84      	ldr	r3, [pc, #528]	@ (8009ca4 <_dtoa_r+0x2d4>)
 8009a94:	6013      	str	r3, [r2, #0]
 8009a96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009cb8 <_dtoa_r+0x2e8>
 8009a9a:	f000 bd33 	b.w	800a504 <_dtoa_r+0xb34>
 8009a9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009aa2:	aa16      	add	r2, sp, #88	@ 0x58
 8009aa4:	a917      	add	r1, sp, #92	@ 0x5c
 8009aa6:	4658      	mov	r0, fp
 8009aa8:	f001 f980 	bl	800adac <__d2b>
 8009aac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009ab0:	4681      	mov	r9, r0
 8009ab2:	2e00      	cmp	r6, #0
 8009ab4:	d077      	beq.n	8009ba6 <_dtoa_r+0x1d6>
 8009ab6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ab8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009acc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	4b74      	ldr	r3, [pc, #464]	@ (8009ca8 <_dtoa_r+0x2d8>)
 8009ad6:	f7f6 fbdf 	bl	8000298 <__aeabi_dsub>
 8009ada:	a369      	add	r3, pc, #420	@ (adr r3, 8009c80 <_dtoa_r+0x2b0>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f7f6 fd92 	bl	8000608 <__aeabi_dmul>
 8009ae4:	a368      	add	r3, pc, #416	@ (adr r3, 8009c88 <_dtoa_r+0x2b8>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fbd7 	bl	800029c <__adddf3>
 8009aee:	4604      	mov	r4, r0
 8009af0:	4630      	mov	r0, r6
 8009af2:	460d      	mov	r5, r1
 8009af4:	f7f6 fd1e 	bl	8000534 <__aeabi_i2d>
 8009af8:	a365      	add	r3, pc, #404	@ (adr r3, 8009c90 <_dtoa_r+0x2c0>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f7f6 fd83 	bl	8000608 <__aeabi_dmul>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4620      	mov	r0, r4
 8009b08:	4629      	mov	r1, r5
 8009b0a:	f7f6 fbc7 	bl	800029c <__adddf3>
 8009b0e:	4604      	mov	r4, r0
 8009b10:	460d      	mov	r5, r1
 8009b12:	f7f7 f829 	bl	8000b68 <__aeabi_d2iz>
 8009b16:	2200      	movs	r2, #0
 8009b18:	4607      	mov	r7, r0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4620      	mov	r0, r4
 8009b1e:	4629      	mov	r1, r5
 8009b20:	f7f6 ffe4 	bl	8000aec <__aeabi_dcmplt>
 8009b24:	b140      	cbz	r0, 8009b38 <_dtoa_r+0x168>
 8009b26:	4638      	mov	r0, r7
 8009b28:	f7f6 fd04 	bl	8000534 <__aeabi_i2d>
 8009b2c:	4622      	mov	r2, r4
 8009b2e:	462b      	mov	r3, r5
 8009b30:	f7f6 ffd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b34:	b900      	cbnz	r0, 8009b38 <_dtoa_r+0x168>
 8009b36:	3f01      	subs	r7, #1
 8009b38:	2f16      	cmp	r7, #22
 8009b3a:	d851      	bhi.n	8009be0 <_dtoa_r+0x210>
 8009b3c:	4b5b      	ldr	r3, [pc, #364]	@ (8009cac <_dtoa_r+0x2dc>)
 8009b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b4a:	f7f6 ffcf 	bl	8000aec <__aeabi_dcmplt>
 8009b4e:	2800      	cmp	r0, #0
 8009b50:	d048      	beq.n	8009be4 <_dtoa_r+0x214>
 8009b52:	3f01      	subs	r7, #1
 8009b54:	2300      	movs	r3, #0
 8009b56:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009b5a:	1b9b      	subs	r3, r3, r6
 8009b5c:	1e5a      	subs	r2, r3, #1
 8009b5e:	bf44      	itt	mi
 8009b60:	f1c3 0801 	rsbmi	r8, r3, #1
 8009b64:	2300      	movmi	r3, #0
 8009b66:	9208      	str	r2, [sp, #32]
 8009b68:	bf54      	ite	pl
 8009b6a:	f04f 0800 	movpl.w	r8, #0
 8009b6e:	9308      	strmi	r3, [sp, #32]
 8009b70:	2f00      	cmp	r7, #0
 8009b72:	db39      	blt.n	8009be8 <_dtoa_r+0x218>
 8009b74:	9b08      	ldr	r3, [sp, #32]
 8009b76:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009b78:	443b      	add	r3, r7
 8009b7a:	9308      	str	r3, [sp, #32]
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b82:	2b09      	cmp	r3, #9
 8009b84:	d864      	bhi.n	8009c50 <_dtoa_r+0x280>
 8009b86:	2b05      	cmp	r3, #5
 8009b88:	bfc4      	itt	gt
 8009b8a:	3b04      	subgt	r3, #4
 8009b8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b90:	f1a3 0302 	sub.w	r3, r3, #2
 8009b94:	bfcc      	ite	gt
 8009b96:	2400      	movgt	r4, #0
 8009b98:	2401      	movle	r4, #1
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d863      	bhi.n	8009c66 <_dtoa_r+0x296>
 8009b9e:	e8df f003 	tbb	[pc, r3]
 8009ba2:	372a      	.short	0x372a
 8009ba4:	5535      	.short	0x5535
 8009ba6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009baa:	441e      	add	r6, r3
 8009bac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009bb0:	2b20      	cmp	r3, #32
 8009bb2:	bfc1      	itttt	gt
 8009bb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009bb8:	409f      	lslgt	r7, r3
 8009bba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009bbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009bc2:	bfd6      	itet	le
 8009bc4:	f1c3 0320 	rsble	r3, r3, #32
 8009bc8:	ea47 0003 	orrgt.w	r0, r7, r3
 8009bcc:	fa04 f003 	lslle.w	r0, r4, r3
 8009bd0:	f7f6 fca0 	bl	8000514 <__aeabi_ui2d>
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009bda:	3e01      	subs	r6, #1
 8009bdc:	9214      	str	r2, [sp, #80]	@ 0x50
 8009bde:	e777      	b.n	8009ad0 <_dtoa_r+0x100>
 8009be0:	2301      	movs	r3, #1
 8009be2:	e7b8      	b.n	8009b56 <_dtoa_r+0x186>
 8009be4:	9012      	str	r0, [sp, #72]	@ 0x48
 8009be6:	e7b7      	b.n	8009b58 <_dtoa_r+0x188>
 8009be8:	427b      	negs	r3, r7
 8009bea:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bec:	2300      	movs	r3, #0
 8009bee:	eba8 0807 	sub.w	r8, r8, r7
 8009bf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009bf4:	e7c4      	b.n	8009b80 <_dtoa_r+0x1b0>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	dc35      	bgt.n	8009c6c <_dtoa_r+0x29c>
 8009c00:	2301      	movs	r3, #1
 8009c02:	9300      	str	r3, [sp, #0]
 8009c04:	9307      	str	r3, [sp, #28]
 8009c06:	461a      	mov	r2, r3
 8009c08:	920e      	str	r2, [sp, #56]	@ 0x38
 8009c0a:	e00b      	b.n	8009c24 <_dtoa_r+0x254>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e7f3      	b.n	8009bf8 <_dtoa_r+0x228>
 8009c10:	2300      	movs	r3, #0
 8009c12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c16:	18fb      	adds	r3, r7, r3
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	bfb8      	it	lt
 8009c22:	2301      	movlt	r3, #1
 8009c24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	f102 0514 	add.w	r5, r2, #20
 8009c30:	429d      	cmp	r5, r3
 8009c32:	d91f      	bls.n	8009c74 <_dtoa_r+0x2a4>
 8009c34:	6041      	str	r1, [r0, #4]
 8009c36:	4658      	mov	r0, fp
 8009c38:	f000 fd8e 	bl	800a758 <_Balloc>
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d13c      	bne.n	8009cbc <_dtoa_r+0x2ec>
 8009c42:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb0 <_dtoa_r+0x2e0>)
 8009c44:	4602      	mov	r2, r0
 8009c46:	f240 11af 	movw	r1, #431	@ 0x1af
 8009c4a:	e6d8      	b.n	80099fe <_dtoa_r+0x2e>
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	e7e0      	b.n	8009c12 <_dtoa_r+0x242>
 8009c50:	2401      	movs	r4, #1
 8009c52:	2300      	movs	r3, #0
 8009c54:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009c58:	f04f 33ff 	mov.w	r3, #4294967295
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	9307      	str	r3, [sp, #28]
 8009c60:	2200      	movs	r2, #0
 8009c62:	2312      	movs	r3, #18
 8009c64:	e7d0      	b.n	8009c08 <_dtoa_r+0x238>
 8009c66:	2301      	movs	r3, #1
 8009c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c6a:	e7f5      	b.n	8009c58 <_dtoa_r+0x288>
 8009c6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	9307      	str	r3, [sp, #28]
 8009c72:	e7d7      	b.n	8009c24 <_dtoa_r+0x254>
 8009c74:	3101      	adds	r1, #1
 8009c76:	0052      	lsls	r2, r2, #1
 8009c78:	e7d8      	b.n	8009c2c <_dtoa_r+0x25c>
 8009c7a:	bf00      	nop
 8009c7c:	f3af 8000 	nop.w
 8009c80:	636f4361 	.word	0x636f4361
 8009c84:	3fd287a7 	.word	0x3fd287a7
 8009c88:	8b60c8b3 	.word	0x8b60c8b3
 8009c8c:	3fc68a28 	.word	0x3fc68a28
 8009c90:	509f79fb 	.word	0x509f79fb
 8009c94:	3fd34413 	.word	0x3fd34413
 8009c98:	0800c8d1 	.word	0x0800c8d1
 8009c9c:	0800c8e8 	.word	0x0800c8e8
 8009ca0:	7ff00000 	.word	0x7ff00000
 8009ca4:	0800c8a1 	.word	0x0800c8a1
 8009ca8:	3ff80000 	.word	0x3ff80000
 8009cac:	0800c9e0 	.word	0x0800c9e0
 8009cb0:	0800c940 	.word	0x0800c940
 8009cb4:	0800c8cd 	.word	0x0800c8cd
 8009cb8:	0800c8a0 	.word	0x0800c8a0
 8009cbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009cc0:	6018      	str	r0, [r3, #0]
 8009cc2:	9b07      	ldr	r3, [sp, #28]
 8009cc4:	2b0e      	cmp	r3, #14
 8009cc6:	f200 80a4 	bhi.w	8009e12 <_dtoa_r+0x442>
 8009cca:	2c00      	cmp	r4, #0
 8009ccc:	f000 80a1 	beq.w	8009e12 <_dtoa_r+0x442>
 8009cd0:	2f00      	cmp	r7, #0
 8009cd2:	dd33      	ble.n	8009d3c <_dtoa_r+0x36c>
 8009cd4:	4bad      	ldr	r3, [pc, #692]	@ (8009f8c <_dtoa_r+0x5bc>)
 8009cd6:	f007 020f 	and.w	r2, r7, #15
 8009cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cde:	ed93 7b00 	vldr	d7, [r3]
 8009ce2:	05f8      	lsls	r0, r7, #23
 8009ce4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009ce8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009cec:	d516      	bpl.n	8009d1c <_dtoa_r+0x34c>
 8009cee:	4ba8      	ldr	r3, [pc, #672]	@ (8009f90 <_dtoa_r+0x5c0>)
 8009cf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cf4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009cf8:	f7f6 fdb0 	bl	800085c <__aeabi_ddiv>
 8009cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d00:	f004 040f 	and.w	r4, r4, #15
 8009d04:	2603      	movs	r6, #3
 8009d06:	4da2      	ldr	r5, [pc, #648]	@ (8009f90 <_dtoa_r+0x5c0>)
 8009d08:	b954      	cbnz	r4, 8009d20 <_dtoa_r+0x350>
 8009d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d12:	f7f6 fda3 	bl	800085c <__aeabi_ddiv>
 8009d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d1a:	e028      	b.n	8009d6e <_dtoa_r+0x39e>
 8009d1c:	2602      	movs	r6, #2
 8009d1e:	e7f2      	b.n	8009d06 <_dtoa_r+0x336>
 8009d20:	07e1      	lsls	r1, r4, #31
 8009d22:	d508      	bpl.n	8009d36 <_dtoa_r+0x366>
 8009d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d2c:	f7f6 fc6c 	bl	8000608 <__aeabi_dmul>
 8009d30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d34:	3601      	adds	r6, #1
 8009d36:	1064      	asrs	r4, r4, #1
 8009d38:	3508      	adds	r5, #8
 8009d3a:	e7e5      	b.n	8009d08 <_dtoa_r+0x338>
 8009d3c:	f000 80d2 	beq.w	8009ee4 <_dtoa_r+0x514>
 8009d40:	427c      	negs	r4, r7
 8009d42:	4b92      	ldr	r3, [pc, #584]	@ (8009f8c <_dtoa_r+0x5bc>)
 8009d44:	4d92      	ldr	r5, [pc, #584]	@ (8009f90 <_dtoa_r+0x5c0>)
 8009d46:	f004 020f 	and.w	r2, r4, #15
 8009d4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d56:	f7f6 fc57 	bl	8000608 <__aeabi_dmul>
 8009d5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d5e:	1124      	asrs	r4, r4, #4
 8009d60:	2300      	movs	r3, #0
 8009d62:	2602      	movs	r6, #2
 8009d64:	2c00      	cmp	r4, #0
 8009d66:	f040 80b2 	bne.w	8009ece <_dtoa_r+0x4fe>
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1d3      	bne.n	8009d16 <_dtoa_r+0x346>
 8009d6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009d70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 80b7 	beq.w	8009ee8 <_dtoa_r+0x518>
 8009d7a:	4b86      	ldr	r3, [pc, #536]	@ (8009f94 <_dtoa_r+0x5c4>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	4620      	mov	r0, r4
 8009d80:	4629      	mov	r1, r5
 8009d82:	f7f6 feb3 	bl	8000aec <__aeabi_dcmplt>
 8009d86:	2800      	cmp	r0, #0
 8009d88:	f000 80ae 	beq.w	8009ee8 <_dtoa_r+0x518>
 8009d8c:	9b07      	ldr	r3, [sp, #28]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 80aa 	beq.w	8009ee8 <_dtoa_r+0x518>
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	dd37      	ble.n	8009e0a <_dtoa_r+0x43a>
 8009d9a:	1e7b      	subs	r3, r7, #1
 8009d9c:	9304      	str	r3, [sp, #16]
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4b7d      	ldr	r3, [pc, #500]	@ (8009f98 <_dtoa_r+0x5c8>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	4629      	mov	r1, r5
 8009da6:	f7f6 fc2f 	bl	8000608 <__aeabi_dmul>
 8009daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dae:	9c00      	ldr	r4, [sp, #0]
 8009db0:	3601      	adds	r6, #1
 8009db2:	4630      	mov	r0, r6
 8009db4:	f7f6 fbbe 	bl	8000534 <__aeabi_i2d>
 8009db8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dbc:	f7f6 fc24 	bl	8000608 <__aeabi_dmul>
 8009dc0:	4b76      	ldr	r3, [pc, #472]	@ (8009f9c <_dtoa_r+0x5cc>)
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f7f6 fa6a 	bl	800029c <__adddf3>
 8009dc8:	4605      	mov	r5, r0
 8009dca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009dce:	2c00      	cmp	r4, #0
 8009dd0:	f040 808d 	bne.w	8009eee <_dtoa_r+0x51e>
 8009dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dd8:	4b71      	ldr	r3, [pc, #452]	@ (8009fa0 <_dtoa_r+0x5d0>)
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f7f6 fa5c 	bl	8000298 <__aeabi_dsub>
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009de8:	462a      	mov	r2, r5
 8009dea:	4633      	mov	r3, r6
 8009dec:	f7f6 fe9c 	bl	8000b28 <__aeabi_dcmpgt>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	f040 828b 	bne.w	800a30c <_dtoa_r+0x93c>
 8009df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dfa:	462a      	mov	r2, r5
 8009dfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009e00:	f7f6 fe74 	bl	8000aec <__aeabi_dcmplt>
 8009e04:	2800      	cmp	r0, #0
 8009e06:	f040 8128 	bne.w	800a05a <_dtoa_r+0x68a>
 8009e0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009e0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009e12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f2c0 815a 	blt.w	800a0ce <_dtoa_r+0x6fe>
 8009e1a:	2f0e      	cmp	r7, #14
 8009e1c:	f300 8157 	bgt.w	800a0ce <_dtoa_r+0x6fe>
 8009e20:	4b5a      	ldr	r3, [pc, #360]	@ (8009f8c <_dtoa_r+0x5bc>)
 8009e22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009e26:	ed93 7b00 	vldr	d7, [r3]
 8009e2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	ed8d 7b00 	vstr	d7, [sp]
 8009e32:	da03      	bge.n	8009e3c <_dtoa_r+0x46c>
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f340 8101 	ble.w	800a03e <_dtoa_r+0x66e>
 8009e3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009e40:	4656      	mov	r6, sl
 8009e42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e46:	4620      	mov	r0, r4
 8009e48:	4629      	mov	r1, r5
 8009e4a:	f7f6 fd07 	bl	800085c <__aeabi_ddiv>
 8009e4e:	f7f6 fe8b 	bl	8000b68 <__aeabi_d2iz>
 8009e52:	4680      	mov	r8, r0
 8009e54:	f7f6 fb6e 	bl	8000534 <__aeabi_i2d>
 8009e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5c:	f7f6 fbd4 	bl	8000608 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e6c:	f7f6 fa14 	bl	8000298 <__aeabi_dsub>
 8009e70:	f806 4b01 	strb.w	r4, [r6], #1
 8009e74:	9d07      	ldr	r5, [sp, #28]
 8009e76:	eba6 040a 	sub.w	r4, r6, sl
 8009e7a:	42a5      	cmp	r5, r4
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	f040 8117 	bne.w	800a0b2 <_dtoa_r+0x6e2>
 8009e84:	f7f6 fa0a 	bl	800029c <__adddf3>
 8009e88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e8c:	4604      	mov	r4, r0
 8009e8e:	460d      	mov	r5, r1
 8009e90:	f7f6 fe4a 	bl	8000b28 <__aeabi_dcmpgt>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	f040 80f9 	bne.w	800a08c <_dtoa_r+0x6bc>
 8009e9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	4629      	mov	r1, r5
 8009ea2:	f7f6 fe19 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ea6:	b118      	cbz	r0, 8009eb0 <_dtoa_r+0x4e0>
 8009ea8:	f018 0f01 	tst.w	r8, #1
 8009eac:	f040 80ee 	bne.w	800a08c <_dtoa_r+0x6bc>
 8009eb0:	4649      	mov	r1, r9
 8009eb2:	4658      	mov	r0, fp
 8009eb4:	f000 fc90 	bl	800a7d8 <_Bfree>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	7033      	strb	r3, [r6, #0]
 8009ebc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ebe:	3701      	adds	r7, #1
 8009ec0:	601f      	str	r7, [r3, #0]
 8009ec2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f000 831d 	beq.w	800a504 <_dtoa_r+0xb34>
 8009eca:	601e      	str	r6, [r3, #0]
 8009ecc:	e31a      	b.n	800a504 <_dtoa_r+0xb34>
 8009ece:	07e2      	lsls	r2, r4, #31
 8009ed0:	d505      	bpl.n	8009ede <_dtoa_r+0x50e>
 8009ed2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ed6:	f7f6 fb97 	bl	8000608 <__aeabi_dmul>
 8009eda:	3601      	adds	r6, #1
 8009edc:	2301      	movs	r3, #1
 8009ede:	1064      	asrs	r4, r4, #1
 8009ee0:	3508      	adds	r5, #8
 8009ee2:	e73f      	b.n	8009d64 <_dtoa_r+0x394>
 8009ee4:	2602      	movs	r6, #2
 8009ee6:	e742      	b.n	8009d6e <_dtoa_r+0x39e>
 8009ee8:	9c07      	ldr	r4, [sp, #28]
 8009eea:	9704      	str	r7, [sp, #16]
 8009eec:	e761      	b.n	8009db2 <_dtoa_r+0x3e2>
 8009eee:	4b27      	ldr	r3, [pc, #156]	@ (8009f8c <_dtoa_r+0x5bc>)
 8009ef0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009ef2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009ef6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009efa:	4454      	add	r4, sl
 8009efc:	2900      	cmp	r1, #0
 8009efe:	d053      	beq.n	8009fa8 <_dtoa_r+0x5d8>
 8009f00:	4928      	ldr	r1, [pc, #160]	@ (8009fa4 <_dtoa_r+0x5d4>)
 8009f02:	2000      	movs	r0, #0
 8009f04:	f7f6 fcaa 	bl	800085c <__aeabi_ddiv>
 8009f08:	4633      	mov	r3, r6
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	f7f6 f9c4 	bl	8000298 <__aeabi_dsub>
 8009f10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f14:	4656      	mov	r6, sl
 8009f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f1a:	f7f6 fe25 	bl	8000b68 <__aeabi_d2iz>
 8009f1e:	4605      	mov	r5, r0
 8009f20:	f7f6 fb08 	bl	8000534 <__aeabi_i2d>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f2c:	f7f6 f9b4 	bl	8000298 <__aeabi_dsub>
 8009f30:	3530      	adds	r5, #48	@ 0x30
 8009f32:	4602      	mov	r2, r0
 8009f34:	460b      	mov	r3, r1
 8009f36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f3a:	f806 5b01 	strb.w	r5, [r6], #1
 8009f3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f42:	f7f6 fdd3 	bl	8000aec <__aeabi_dcmplt>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	d171      	bne.n	800a02e <_dtoa_r+0x65e>
 8009f4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f4e:	4911      	ldr	r1, [pc, #68]	@ (8009f94 <_dtoa_r+0x5c4>)
 8009f50:	2000      	movs	r0, #0
 8009f52:	f7f6 f9a1 	bl	8000298 <__aeabi_dsub>
 8009f56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f5a:	f7f6 fdc7 	bl	8000aec <__aeabi_dcmplt>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	f040 8095 	bne.w	800a08e <_dtoa_r+0x6be>
 8009f64:	42a6      	cmp	r6, r4
 8009f66:	f43f af50 	beq.w	8009e0a <_dtoa_r+0x43a>
 8009f6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8009f98 <_dtoa_r+0x5c8>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	f7f6 fb49 	bl	8000608 <__aeabi_dmul>
 8009f76:	4b08      	ldr	r3, [pc, #32]	@ (8009f98 <_dtoa_r+0x5c8>)
 8009f78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f82:	f7f6 fb41 	bl	8000608 <__aeabi_dmul>
 8009f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f8a:	e7c4      	b.n	8009f16 <_dtoa_r+0x546>
 8009f8c:	0800c9e0 	.word	0x0800c9e0
 8009f90:	0800c9b8 	.word	0x0800c9b8
 8009f94:	3ff00000 	.word	0x3ff00000
 8009f98:	40240000 	.word	0x40240000
 8009f9c:	401c0000 	.word	0x401c0000
 8009fa0:	40140000 	.word	0x40140000
 8009fa4:	3fe00000 	.word	0x3fe00000
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4628      	mov	r0, r5
 8009fac:	f7f6 fb2c 	bl	8000608 <__aeabi_dmul>
 8009fb0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009fb4:	9415      	str	r4, [sp, #84]	@ 0x54
 8009fb6:	4656      	mov	r6, sl
 8009fb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fbc:	f7f6 fdd4 	bl	8000b68 <__aeabi_d2iz>
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	f7f6 fab7 	bl	8000534 <__aeabi_i2d>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fce:	f7f6 f963 	bl	8000298 <__aeabi_dsub>
 8009fd2:	3530      	adds	r5, #48	@ 0x30
 8009fd4:	f806 5b01 	strb.w	r5, [r6], #1
 8009fd8:	4602      	mov	r2, r0
 8009fda:	460b      	mov	r3, r1
 8009fdc:	42a6      	cmp	r6, r4
 8009fde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fe2:	f04f 0200 	mov.w	r2, #0
 8009fe6:	d124      	bne.n	800a032 <_dtoa_r+0x662>
 8009fe8:	4bac      	ldr	r3, [pc, #688]	@ (800a29c <_dtoa_r+0x8cc>)
 8009fea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009fee:	f7f6 f955 	bl	800029c <__adddf3>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ffa:	f7f6 fd95 	bl	8000b28 <__aeabi_dcmpgt>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d145      	bne.n	800a08e <_dtoa_r+0x6be>
 800a002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a006:	49a5      	ldr	r1, [pc, #660]	@ (800a29c <_dtoa_r+0x8cc>)
 800a008:	2000      	movs	r0, #0
 800a00a:	f7f6 f945 	bl	8000298 <__aeabi_dsub>
 800a00e:	4602      	mov	r2, r0
 800a010:	460b      	mov	r3, r1
 800a012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a016:	f7f6 fd69 	bl	8000aec <__aeabi_dcmplt>
 800a01a:	2800      	cmp	r0, #0
 800a01c:	f43f aef5 	beq.w	8009e0a <_dtoa_r+0x43a>
 800a020:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a022:	1e73      	subs	r3, r6, #1
 800a024:	9315      	str	r3, [sp, #84]	@ 0x54
 800a026:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a02a:	2b30      	cmp	r3, #48	@ 0x30
 800a02c:	d0f8      	beq.n	800a020 <_dtoa_r+0x650>
 800a02e:	9f04      	ldr	r7, [sp, #16]
 800a030:	e73e      	b.n	8009eb0 <_dtoa_r+0x4e0>
 800a032:	4b9b      	ldr	r3, [pc, #620]	@ (800a2a0 <_dtoa_r+0x8d0>)
 800a034:	f7f6 fae8 	bl	8000608 <__aeabi_dmul>
 800a038:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a03c:	e7bc      	b.n	8009fb8 <_dtoa_r+0x5e8>
 800a03e:	d10c      	bne.n	800a05a <_dtoa_r+0x68a>
 800a040:	4b98      	ldr	r3, [pc, #608]	@ (800a2a4 <_dtoa_r+0x8d4>)
 800a042:	2200      	movs	r2, #0
 800a044:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a048:	f7f6 fade 	bl	8000608 <__aeabi_dmul>
 800a04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a050:	f7f6 fd60 	bl	8000b14 <__aeabi_dcmpge>
 800a054:	2800      	cmp	r0, #0
 800a056:	f000 8157 	beq.w	800a308 <_dtoa_r+0x938>
 800a05a:	2400      	movs	r4, #0
 800a05c:	4625      	mov	r5, r4
 800a05e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a060:	43db      	mvns	r3, r3
 800a062:	9304      	str	r3, [sp, #16]
 800a064:	4656      	mov	r6, sl
 800a066:	2700      	movs	r7, #0
 800a068:	4621      	mov	r1, r4
 800a06a:	4658      	mov	r0, fp
 800a06c:	f000 fbb4 	bl	800a7d8 <_Bfree>
 800a070:	2d00      	cmp	r5, #0
 800a072:	d0dc      	beq.n	800a02e <_dtoa_r+0x65e>
 800a074:	b12f      	cbz	r7, 800a082 <_dtoa_r+0x6b2>
 800a076:	42af      	cmp	r7, r5
 800a078:	d003      	beq.n	800a082 <_dtoa_r+0x6b2>
 800a07a:	4639      	mov	r1, r7
 800a07c:	4658      	mov	r0, fp
 800a07e:	f000 fbab 	bl	800a7d8 <_Bfree>
 800a082:	4629      	mov	r1, r5
 800a084:	4658      	mov	r0, fp
 800a086:	f000 fba7 	bl	800a7d8 <_Bfree>
 800a08a:	e7d0      	b.n	800a02e <_dtoa_r+0x65e>
 800a08c:	9704      	str	r7, [sp, #16]
 800a08e:	4633      	mov	r3, r6
 800a090:	461e      	mov	r6, r3
 800a092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a096:	2a39      	cmp	r2, #57	@ 0x39
 800a098:	d107      	bne.n	800a0aa <_dtoa_r+0x6da>
 800a09a:	459a      	cmp	sl, r3
 800a09c:	d1f8      	bne.n	800a090 <_dtoa_r+0x6c0>
 800a09e:	9a04      	ldr	r2, [sp, #16]
 800a0a0:	3201      	adds	r2, #1
 800a0a2:	9204      	str	r2, [sp, #16]
 800a0a4:	2230      	movs	r2, #48	@ 0x30
 800a0a6:	f88a 2000 	strb.w	r2, [sl]
 800a0aa:	781a      	ldrb	r2, [r3, #0]
 800a0ac:	3201      	adds	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
 800a0b0:	e7bd      	b.n	800a02e <_dtoa_r+0x65e>
 800a0b2:	4b7b      	ldr	r3, [pc, #492]	@ (800a2a0 <_dtoa_r+0x8d0>)
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f7f6 faa7 	bl	8000608 <__aeabi_dmul>
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	460d      	mov	r5, r1
 800a0c2:	f7f6 fd09 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f43f aebb 	beq.w	8009e42 <_dtoa_r+0x472>
 800a0cc:	e6f0      	b.n	8009eb0 <_dtoa_r+0x4e0>
 800a0ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a0d0:	2a00      	cmp	r2, #0
 800a0d2:	f000 80db 	beq.w	800a28c <_dtoa_r+0x8bc>
 800a0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0d8:	2a01      	cmp	r2, #1
 800a0da:	f300 80bf 	bgt.w	800a25c <_dtoa_r+0x88c>
 800a0de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a0e0:	2a00      	cmp	r2, #0
 800a0e2:	f000 80b7 	beq.w	800a254 <_dtoa_r+0x884>
 800a0e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a0ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a0ec:	4646      	mov	r6, r8
 800a0ee:	9a08      	ldr	r2, [sp, #32]
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	441a      	add	r2, r3
 800a0f4:	4658      	mov	r0, fp
 800a0f6:	4498      	add	r8, r3
 800a0f8:	9208      	str	r2, [sp, #32]
 800a0fa:	f000 fc21 	bl	800a940 <__i2b>
 800a0fe:	4605      	mov	r5, r0
 800a100:	b15e      	cbz	r6, 800a11a <_dtoa_r+0x74a>
 800a102:	9b08      	ldr	r3, [sp, #32]
 800a104:	2b00      	cmp	r3, #0
 800a106:	dd08      	ble.n	800a11a <_dtoa_r+0x74a>
 800a108:	42b3      	cmp	r3, r6
 800a10a:	9a08      	ldr	r2, [sp, #32]
 800a10c:	bfa8      	it	ge
 800a10e:	4633      	movge	r3, r6
 800a110:	eba8 0803 	sub.w	r8, r8, r3
 800a114:	1af6      	subs	r6, r6, r3
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	9308      	str	r3, [sp, #32]
 800a11a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11c:	b1f3      	cbz	r3, 800a15c <_dtoa_r+0x78c>
 800a11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 80b7 	beq.w	800a294 <_dtoa_r+0x8c4>
 800a126:	b18c      	cbz	r4, 800a14c <_dtoa_r+0x77c>
 800a128:	4629      	mov	r1, r5
 800a12a:	4622      	mov	r2, r4
 800a12c:	4658      	mov	r0, fp
 800a12e:	f000 fcc7 	bl	800aac0 <__pow5mult>
 800a132:	464a      	mov	r2, r9
 800a134:	4601      	mov	r1, r0
 800a136:	4605      	mov	r5, r0
 800a138:	4658      	mov	r0, fp
 800a13a:	f000 fc17 	bl	800a96c <__multiply>
 800a13e:	4649      	mov	r1, r9
 800a140:	9004      	str	r0, [sp, #16]
 800a142:	4658      	mov	r0, fp
 800a144:	f000 fb48 	bl	800a7d8 <_Bfree>
 800a148:	9b04      	ldr	r3, [sp, #16]
 800a14a:	4699      	mov	r9, r3
 800a14c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a14e:	1b1a      	subs	r2, r3, r4
 800a150:	d004      	beq.n	800a15c <_dtoa_r+0x78c>
 800a152:	4649      	mov	r1, r9
 800a154:	4658      	mov	r0, fp
 800a156:	f000 fcb3 	bl	800aac0 <__pow5mult>
 800a15a:	4681      	mov	r9, r0
 800a15c:	2101      	movs	r1, #1
 800a15e:	4658      	mov	r0, fp
 800a160:	f000 fbee 	bl	800a940 <__i2b>
 800a164:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a166:	4604      	mov	r4, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	f000 81cf 	beq.w	800a50c <_dtoa_r+0xb3c>
 800a16e:	461a      	mov	r2, r3
 800a170:	4601      	mov	r1, r0
 800a172:	4658      	mov	r0, fp
 800a174:	f000 fca4 	bl	800aac0 <__pow5mult>
 800a178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	4604      	mov	r4, r0
 800a17e:	f300 8095 	bgt.w	800a2ac <_dtoa_r+0x8dc>
 800a182:	9b02      	ldr	r3, [sp, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	f040 8087 	bne.w	800a298 <_dtoa_r+0x8c8>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a190:	2b00      	cmp	r3, #0
 800a192:	f040 8089 	bne.w	800a2a8 <_dtoa_r+0x8d8>
 800a196:	9b03      	ldr	r3, [sp, #12]
 800a198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a19c:	0d1b      	lsrs	r3, r3, #20
 800a19e:	051b      	lsls	r3, r3, #20
 800a1a0:	b12b      	cbz	r3, 800a1ae <_dtoa_r+0x7de>
 800a1a2:	9b08      	ldr	r3, [sp, #32]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	9308      	str	r3, [sp, #32]
 800a1a8:	f108 0801 	add.w	r8, r8, #1
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	f000 81b0 	beq.w	800a518 <_dtoa_r+0xb48>
 800a1b8:	6923      	ldr	r3, [r4, #16]
 800a1ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a1be:	6918      	ldr	r0, [r3, #16]
 800a1c0:	f000 fb72 	bl	800a8a8 <__hi0bits>
 800a1c4:	f1c0 0020 	rsb	r0, r0, #32
 800a1c8:	9b08      	ldr	r3, [sp, #32]
 800a1ca:	4418      	add	r0, r3
 800a1cc:	f010 001f 	ands.w	r0, r0, #31
 800a1d0:	d077      	beq.n	800a2c2 <_dtoa_r+0x8f2>
 800a1d2:	f1c0 0320 	rsb	r3, r0, #32
 800a1d6:	2b04      	cmp	r3, #4
 800a1d8:	dd6b      	ble.n	800a2b2 <_dtoa_r+0x8e2>
 800a1da:	9b08      	ldr	r3, [sp, #32]
 800a1dc:	f1c0 001c 	rsb	r0, r0, #28
 800a1e0:	4403      	add	r3, r0
 800a1e2:	4480      	add	r8, r0
 800a1e4:	4406      	add	r6, r0
 800a1e6:	9308      	str	r3, [sp, #32]
 800a1e8:	f1b8 0f00 	cmp.w	r8, #0
 800a1ec:	dd05      	ble.n	800a1fa <_dtoa_r+0x82a>
 800a1ee:	4649      	mov	r1, r9
 800a1f0:	4642      	mov	r2, r8
 800a1f2:	4658      	mov	r0, fp
 800a1f4:	f000 fcbe 	bl	800ab74 <__lshift>
 800a1f8:	4681      	mov	r9, r0
 800a1fa:	9b08      	ldr	r3, [sp, #32]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	dd05      	ble.n	800a20c <_dtoa_r+0x83c>
 800a200:	4621      	mov	r1, r4
 800a202:	461a      	mov	r2, r3
 800a204:	4658      	mov	r0, fp
 800a206:	f000 fcb5 	bl	800ab74 <__lshift>
 800a20a:	4604      	mov	r4, r0
 800a20c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d059      	beq.n	800a2c6 <_dtoa_r+0x8f6>
 800a212:	4621      	mov	r1, r4
 800a214:	4648      	mov	r0, r9
 800a216:	f000 fd19 	bl	800ac4c <__mcmp>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	da53      	bge.n	800a2c6 <_dtoa_r+0x8f6>
 800a21e:	1e7b      	subs	r3, r7, #1
 800a220:	9304      	str	r3, [sp, #16]
 800a222:	4649      	mov	r1, r9
 800a224:	2300      	movs	r3, #0
 800a226:	220a      	movs	r2, #10
 800a228:	4658      	mov	r0, fp
 800a22a:	f000 faf7 	bl	800a81c <__multadd>
 800a22e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a230:	4681      	mov	r9, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	f000 8172 	beq.w	800a51c <_dtoa_r+0xb4c>
 800a238:	2300      	movs	r3, #0
 800a23a:	4629      	mov	r1, r5
 800a23c:	220a      	movs	r2, #10
 800a23e:	4658      	mov	r0, fp
 800a240:	f000 faec 	bl	800a81c <__multadd>
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	4605      	mov	r5, r0
 800a24a:	dc67      	bgt.n	800a31c <_dtoa_r+0x94c>
 800a24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a24e:	2b02      	cmp	r3, #2
 800a250:	dc41      	bgt.n	800a2d6 <_dtoa_r+0x906>
 800a252:	e063      	b.n	800a31c <_dtoa_r+0x94c>
 800a254:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a256:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a25a:	e746      	b.n	800a0ea <_dtoa_r+0x71a>
 800a25c:	9b07      	ldr	r3, [sp, #28]
 800a25e:	1e5c      	subs	r4, r3, #1
 800a260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a262:	42a3      	cmp	r3, r4
 800a264:	bfbf      	itttt	lt
 800a266:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a268:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800a26a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a26c:	1ae3      	sublt	r3, r4, r3
 800a26e:	bfb4      	ite	lt
 800a270:	18d2      	addlt	r2, r2, r3
 800a272:	1b1c      	subge	r4, r3, r4
 800a274:	9b07      	ldr	r3, [sp, #28]
 800a276:	bfbc      	itt	lt
 800a278:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800a27a:	2400      	movlt	r4, #0
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	bfb5      	itete	lt
 800a280:	eba8 0603 	sublt.w	r6, r8, r3
 800a284:	9b07      	ldrge	r3, [sp, #28]
 800a286:	2300      	movlt	r3, #0
 800a288:	4646      	movge	r6, r8
 800a28a:	e730      	b.n	800a0ee <_dtoa_r+0x71e>
 800a28c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a28e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a290:	4646      	mov	r6, r8
 800a292:	e735      	b.n	800a100 <_dtoa_r+0x730>
 800a294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a296:	e75c      	b.n	800a152 <_dtoa_r+0x782>
 800a298:	2300      	movs	r3, #0
 800a29a:	e788      	b.n	800a1ae <_dtoa_r+0x7de>
 800a29c:	3fe00000 	.word	0x3fe00000
 800a2a0:	40240000 	.word	0x40240000
 800a2a4:	40140000 	.word	0x40140000
 800a2a8:	9b02      	ldr	r3, [sp, #8]
 800a2aa:	e780      	b.n	800a1ae <_dtoa_r+0x7de>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b0:	e782      	b.n	800a1b8 <_dtoa_r+0x7e8>
 800a2b2:	d099      	beq.n	800a1e8 <_dtoa_r+0x818>
 800a2b4:	9a08      	ldr	r2, [sp, #32]
 800a2b6:	331c      	adds	r3, #28
 800a2b8:	441a      	add	r2, r3
 800a2ba:	4498      	add	r8, r3
 800a2bc:	441e      	add	r6, r3
 800a2be:	9208      	str	r2, [sp, #32]
 800a2c0:	e792      	b.n	800a1e8 <_dtoa_r+0x818>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	e7f6      	b.n	800a2b4 <_dtoa_r+0x8e4>
 800a2c6:	9b07      	ldr	r3, [sp, #28]
 800a2c8:	9704      	str	r7, [sp, #16]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	dc20      	bgt.n	800a310 <_dtoa_r+0x940>
 800a2ce:	9300      	str	r3, [sp, #0]
 800a2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d2:	2b02      	cmp	r3, #2
 800a2d4:	dd1e      	ble.n	800a314 <_dtoa_r+0x944>
 800a2d6:	9b00      	ldr	r3, [sp, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f47f aec0 	bne.w	800a05e <_dtoa_r+0x68e>
 800a2de:	4621      	mov	r1, r4
 800a2e0:	2205      	movs	r2, #5
 800a2e2:	4658      	mov	r0, fp
 800a2e4:	f000 fa9a 	bl	800a81c <__multadd>
 800a2e8:	4601      	mov	r1, r0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	4648      	mov	r0, r9
 800a2ee:	f000 fcad 	bl	800ac4c <__mcmp>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	f77f aeb3 	ble.w	800a05e <_dtoa_r+0x68e>
 800a2f8:	4656      	mov	r6, sl
 800a2fa:	2331      	movs	r3, #49	@ 0x31
 800a2fc:	f806 3b01 	strb.w	r3, [r6], #1
 800a300:	9b04      	ldr	r3, [sp, #16]
 800a302:	3301      	adds	r3, #1
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	e6ae      	b.n	800a066 <_dtoa_r+0x696>
 800a308:	9c07      	ldr	r4, [sp, #28]
 800a30a:	9704      	str	r7, [sp, #16]
 800a30c:	4625      	mov	r5, r4
 800a30e:	e7f3      	b.n	800a2f8 <_dtoa_r+0x928>
 800a310:	9b07      	ldr	r3, [sp, #28]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a316:	2b00      	cmp	r3, #0
 800a318:	f000 8104 	beq.w	800a524 <_dtoa_r+0xb54>
 800a31c:	2e00      	cmp	r6, #0
 800a31e:	dd05      	ble.n	800a32c <_dtoa_r+0x95c>
 800a320:	4629      	mov	r1, r5
 800a322:	4632      	mov	r2, r6
 800a324:	4658      	mov	r0, fp
 800a326:	f000 fc25 	bl	800ab74 <__lshift>
 800a32a:	4605      	mov	r5, r0
 800a32c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d05a      	beq.n	800a3e8 <_dtoa_r+0xa18>
 800a332:	6869      	ldr	r1, [r5, #4]
 800a334:	4658      	mov	r0, fp
 800a336:	f000 fa0f 	bl	800a758 <_Balloc>
 800a33a:	4606      	mov	r6, r0
 800a33c:	b928      	cbnz	r0, 800a34a <_dtoa_r+0x97a>
 800a33e:	4b84      	ldr	r3, [pc, #528]	@ (800a550 <_dtoa_r+0xb80>)
 800a340:	4602      	mov	r2, r0
 800a342:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a346:	f7ff bb5a 	b.w	80099fe <_dtoa_r+0x2e>
 800a34a:	692a      	ldr	r2, [r5, #16]
 800a34c:	3202      	adds	r2, #2
 800a34e:	0092      	lsls	r2, r2, #2
 800a350:	f105 010c 	add.w	r1, r5, #12
 800a354:	300c      	adds	r0, #12
 800a356:	f000 ffaf 	bl	800b2b8 <memcpy>
 800a35a:	2201      	movs	r2, #1
 800a35c:	4631      	mov	r1, r6
 800a35e:	4658      	mov	r0, fp
 800a360:	f000 fc08 	bl	800ab74 <__lshift>
 800a364:	f10a 0301 	add.w	r3, sl, #1
 800a368:	9307      	str	r3, [sp, #28]
 800a36a:	9b00      	ldr	r3, [sp, #0]
 800a36c:	4453      	add	r3, sl
 800a36e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a370:	9b02      	ldr	r3, [sp, #8]
 800a372:	f003 0301 	and.w	r3, r3, #1
 800a376:	462f      	mov	r7, r5
 800a378:	930a      	str	r3, [sp, #40]	@ 0x28
 800a37a:	4605      	mov	r5, r0
 800a37c:	9b07      	ldr	r3, [sp, #28]
 800a37e:	4621      	mov	r1, r4
 800a380:	3b01      	subs	r3, #1
 800a382:	4648      	mov	r0, r9
 800a384:	9300      	str	r3, [sp, #0]
 800a386:	f7ff fa9a 	bl	80098be <quorem>
 800a38a:	4639      	mov	r1, r7
 800a38c:	9002      	str	r0, [sp, #8]
 800a38e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a392:	4648      	mov	r0, r9
 800a394:	f000 fc5a 	bl	800ac4c <__mcmp>
 800a398:	462a      	mov	r2, r5
 800a39a:	9008      	str	r0, [sp, #32]
 800a39c:	4621      	mov	r1, r4
 800a39e:	4658      	mov	r0, fp
 800a3a0:	f000 fc70 	bl	800ac84 <__mdiff>
 800a3a4:	68c2      	ldr	r2, [r0, #12]
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	bb02      	cbnz	r2, 800a3ec <_dtoa_r+0xa1c>
 800a3aa:	4601      	mov	r1, r0
 800a3ac:	4648      	mov	r0, r9
 800a3ae:	f000 fc4d 	bl	800ac4c <__mcmp>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	4631      	mov	r1, r6
 800a3b6:	4658      	mov	r0, fp
 800a3b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3ba:	f000 fa0d 	bl	800a7d8 <_Bfree>
 800a3be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a3c2:	9e07      	ldr	r6, [sp, #28]
 800a3c4:	ea43 0102 	orr.w	r1, r3, r2
 800a3c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3ca:	4319      	orrs	r1, r3
 800a3cc:	d110      	bne.n	800a3f0 <_dtoa_r+0xa20>
 800a3ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a3d2:	d029      	beq.n	800a428 <_dtoa_r+0xa58>
 800a3d4:	9b08      	ldr	r3, [sp, #32]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	dd02      	ble.n	800a3e0 <_dtoa_r+0xa10>
 800a3da:	9b02      	ldr	r3, [sp, #8]
 800a3dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a3e0:	9b00      	ldr	r3, [sp, #0]
 800a3e2:	f883 8000 	strb.w	r8, [r3]
 800a3e6:	e63f      	b.n	800a068 <_dtoa_r+0x698>
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	e7bb      	b.n	800a364 <_dtoa_r+0x994>
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	e7e1      	b.n	800a3b4 <_dtoa_r+0x9e4>
 800a3f0:	9b08      	ldr	r3, [sp, #32]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	db04      	blt.n	800a400 <_dtoa_r+0xa30>
 800a3f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a3f8:	430b      	orrs	r3, r1
 800a3fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3fc:	430b      	orrs	r3, r1
 800a3fe:	d120      	bne.n	800a442 <_dtoa_r+0xa72>
 800a400:	2a00      	cmp	r2, #0
 800a402:	dded      	ble.n	800a3e0 <_dtoa_r+0xa10>
 800a404:	4649      	mov	r1, r9
 800a406:	2201      	movs	r2, #1
 800a408:	4658      	mov	r0, fp
 800a40a:	f000 fbb3 	bl	800ab74 <__lshift>
 800a40e:	4621      	mov	r1, r4
 800a410:	4681      	mov	r9, r0
 800a412:	f000 fc1b 	bl	800ac4c <__mcmp>
 800a416:	2800      	cmp	r0, #0
 800a418:	dc03      	bgt.n	800a422 <_dtoa_r+0xa52>
 800a41a:	d1e1      	bne.n	800a3e0 <_dtoa_r+0xa10>
 800a41c:	f018 0f01 	tst.w	r8, #1
 800a420:	d0de      	beq.n	800a3e0 <_dtoa_r+0xa10>
 800a422:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a426:	d1d8      	bne.n	800a3da <_dtoa_r+0xa0a>
 800a428:	9a00      	ldr	r2, [sp, #0]
 800a42a:	2339      	movs	r3, #57	@ 0x39
 800a42c:	7013      	strb	r3, [r2, #0]
 800a42e:	4633      	mov	r3, r6
 800a430:	461e      	mov	r6, r3
 800a432:	3b01      	subs	r3, #1
 800a434:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a438:	2a39      	cmp	r2, #57	@ 0x39
 800a43a:	d052      	beq.n	800a4e2 <_dtoa_r+0xb12>
 800a43c:	3201      	adds	r2, #1
 800a43e:	701a      	strb	r2, [r3, #0]
 800a440:	e612      	b.n	800a068 <_dtoa_r+0x698>
 800a442:	2a00      	cmp	r2, #0
 800a444:	dd07      	ble.n	800a456 <_dtoa_r+0xa86>
 800a446:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a44a:	d0ed      	beq.n	800a428 <_dtoa_r+0xa58>
 800a44c:	9a00      	ldr	r2, [sp, #0]
 800a44e:	f108 0301 	add.w	r3, r8, #1
 800a452:	7013      	strb	r3, [r2, #0]
 800a454:	e608      	b.n	800a068 <_dtoa_r+0x698>
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	9a07      	ldr	r2, [sp, #28]
 800a45a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a45e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a460:	4293      	cmp	r3, r2
 800a462:	d028      	beq.n	800a4b6 <_dtoa_r+0xae6>
 800a464:	4649      	mov	r1, r9
 800a466:	2300      	movs	r3, #0
 800a468:	220a      	movs	r2, #10
 800a46a:	4658      	mov	r0, fp
 800a46c:	f000 f9d6 	bl	800a81c <__multadd>
 800a470:	42af      	cmp	r7, r5
 800a472:	4681      	mov	r9, r0
 800a474:	f04f 0300 	mov.w	r3, #0
 800a478:	f04f 020a 	mov.w	r2, #10
 800a47c:	4639      	mov	r1, r7
 800a47e:	4658      	mov	r0, fp
 800a480:	d107      	bne.n	800a492 <_dtoa_r+0xac2>
 800a482:	f000 f9cb 	bl	800a81c <__multadd>
 800a486:	4607      	mov	r7, r0
 800a488:	4605      	mov	r5, r0
 800a48a:	9b07      	ldr	r3, [sp, #28]
 800a48c:	3301      	adds	r3, #1
 800a48e:	9307      	str	r3, [sp, #28]
 800a490:	e774      	b.n	800a37c <_dtoa_r+0x9ac>
 800a492:	f000 f9c3 	bl	800a81c <__multadd>
 800a496:	4629      	mov	r1, r5
 800a498:	4607      	mov	r7, r0
 800a49a:	2300      	movs	r3, #0
 800a49c:	220a      	movs	r2, #10
 800a49e:	4658      	mov	r0, fp
 800a4a0:	f000 f9bc 	bl	800a81c <__multadd>
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	e7f0      	b.n	800a48a <_dtoa_r+0xaba>
 800a4a8:	9b00      	ldr	r3, [sp, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bfcc      	ite	gt
 800a4ae:	461e      	movgt	r6, r3
 800a4b0:	2601      	movle	r6, #1
 800a4b2:	4456      	add	r6, sl
 800a4b4:	2700      	movs	r7, #0
 800a4b6:	4649      	mov	r1, r9
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	4658      	mov	r0, fp
 800a4bc:	f000 fb5a 	bl	800ab74 <__lshift>
 800a4c0:	4621      	mov	r1, r4
 800a4c2:	4681      	mov	r9, r0
 800a4c4:	f000 fbc2 	bl	800ac4c <__mcmp>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	dcb0      	bgt.n	800a42e <_dtoa_r+0xa5e>
 800a4cc:	d102      	bne.n	800a4d4 <_dtoa_r+0xb04>
 800a4ce:	f018 0f01 	tst.w	r8, #1
 800a4d2:	d1ac      	bne.n	800a42e <_dtoa_r+0xa5e>
 800a4d4:	4633      	mov	r3, r6
 800a4d6:	461e      	mov	r6, r3
 800a4d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a4dc:	2a30      	cmp	r2, #48	@ 0x30
 800a4de:	d0fa      	beq.n	800a4d6 <_dtoa_r+0xb06>
 800a4e0:	e5c2      	b.n	800a068 <_dtoa_r+0x698>
 800a4e2:	459a      	cmp	sl, r3
 800a4e4:	d1a4      	bne.n	800a430 <_dtoa_r+0xa60>
 800a4e6:	9b04      	ldr	r3, [sp, #16]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	9304      	str	r3, [sp, #16]
 800a4ec:	2331      	movs	r3, #49	@ 0x31
 800a4ee:	f88a 3000 	strb.w	r3, [sl]
 800a4f2:	e5b9      	b.n	800a068 <_dtoa_r+0x698>
 800a4f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a4f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a554 <_dtoa_r+0xb84>
 800a4fa:	b11b      	cbz	r3, 800a504 <_dtoa_r+0xb34>
 800a4fc:	f10a 0308 	add.w	r3, sl, #8
 800a500:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	4650      	mov	r0, sl
 800a506:	b019      	add	sp, #100	@ 0x64
 800a508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50e:	2b01      	cmp	r3, #1
 800a510:	f77f ae37 	ble.w	800a182 <_dtoa_r+0x7b2>
 800a514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a516:	930a      	str	r3, [sp, #40]	@ 0x28
 800a518:	2001      	movs	r0, #1
 800a51a:	e655      	b.n	800a1c8 <_dtoa_r+0x7f8>
 800a51c:	9b00      	ldr	r3, [sp, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	f77f aed6 	ble.w	800a2d0 <_dtoa_r+0x900>
 800a524:	4656      	mov	r6, sl
 800a526:	4621      	mov	r1, r4
 800a528:	4648      	mov	r0, r9
 800a52a:	f7ff f9c8 	bl	80098be <quorem>
 800a52e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a532:	f806 8b01 	strb.w	r8, [r6], #1
 800a536:	9b00      	ldr	r3, [sp, #0]
 800a538:	eba6 020a 	sub.w	r2, r6, sl
 800a53c:	4293      	cmp	r3, r2
 800a53e:	ddb3      	ble.n	800a4a8 <_dtoa_r+0xad8>
 800a540:	4649      	mov	r1, r9
 800a542:	2300      	movs	r3, #0
 800a544:	220a      	movs	r2, #10
 800a546:	4658      	mov	r0, fp
 800a548:	f000 f968 	bl	800a81c <__multadd>
 800a54c:	4681      	mov	r9, r0
 800a54e:	e7ea      	b.n	800a526 <_dtoa_r+0xb56>
 800a550:	0800c940 	.word	0x0800c940
 800a554:	0800c8c4 	.word	0x0800c8c4

0800a558 <_free_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	4605      	mov	r5, r0
 800a55c:	2900      	cmp	r1, #0
 800a55e:	d041      	beq.n	800a5e4 <_free_r+0x8c>
 800a560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a564:	1f0c      	subs	r4, r1, #4
 800a566:	2b00      	cmp	r3, #0
 800a568:	bfb8      	it	lt
 800a56a:	18e4      	addlt	r4, r4, r3
 800a56c:	f000 f8e8 	bl	800a740 <__malloc_lock>
 800a570:	4a1d      	ldr	r2, [pc, #116]	@ (800a5e8 <_free_r+0x90>)
 800a572:	6813      	ldr	r3, [r2, #0]
 800a574:	b933      	cbnz	r3, 800a584 <_free_r+0x2c>
 800a576:	6063      	str	r3, [r4, #4]
 800a578:	6014      	str	r4, [r2, #0]
 800a57a:	4628      	mov	r0, r5
 800a57c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a580:	f000 b8e4 	b.w	800a74c <__malloc_unlock>
 800a584:	42a3      	cmp	r3, r4
 800a586:	d908      	bls.n	800a59a <_free_r+0x42>
 800a588:	6820      	ldr	r0, [r4, #0]
 800a58a:	1821      	adds	r1, r4, r0
 800a58c:	428b      	cmp	r3, r1
 800a58e:	bf01      	itttt	eq
 800a590:	6819      	ldreq	r1, [r3, #0]
 800a592:	685b      	ldreq	r3, [r3, #4]
 800a594:	1809      	addeq	r1, r1, r0
 800a596:	6021      	streq	r1, [r4, #0]
 800a598:	e7ed      	b.n	800a576 <_free_r+0x1e>
 800a59a:	461a      	mov	r2, r3
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	b10b      	cbz	r3, 800a5a4 <_free_r+0x4c>
 800a5a0:	42a3      	cmp	r3, r4
 800a5a2:	d9fa      	bls.n	800a59a <_free_r+0x42>
 800a5a4:	6811      	ldr	r1, [r2, #0]
 800a5a6:	1850      	adds	r0, r2, r1
 800a5a8:	42a0      	cmp	r0, r4
 800a5aa:	d10b      	bne.n	800a5c4 <_free_r+0x6c>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	4401      	add	r1, r0
 800a5b0:	1850      	adds	r0, r2, r1
 800a5b2:	4283      	cmp	r3, r0
 800a5b4:	6011      	str	r1, [r2, #0]
 800a5b6:	d1e0      	bne.n	800a57a <_free_r+0x22>
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	685b      	ldr	r3, [r3, #4]
 800a5bc:	6053      	str	r3, [r2, #4]
 800a5be:	4408      	add	r0, r1
 800a5c0:	6010      	str	r0, [r2, #0]
 800a5c2:	e7da      	b.n	800a57a <_free_r+0x22>
 800a5c4:	d902      	bls.n	800a5cc <_free_r+0x74>
 800a5c6:	230c      	movs	r3, #12
 800a5c8:	602b      	str	r3, [r5, #0]
 800a5ca:	e7d6      	b.n	800a57a <_free_r+0x22>
 800a5cc:	6820      	ldr	r0, [r4, #0]
 800a5ce:	1821      	adds	r1, r4, r0
 800a5d0:	428b      	cmp	r3, r1
 800a5d2:	bf04      	itt	eq
 800a5d4:	6819      	ldreq	r1, [r3, #0]
 800a5d6:	685b      	ldreq	r3, [r3, #4]
 800a5d8:	6063      	str	r3, [r4, #4]
 800a5da:	bf04      	itt	eq
 800a5dc:	1809      	addeq	r1, r1, r0
 800a5de:	6021      	streq	r1, [r4, #0]
 800a5e0:	6054      	str	r4, [r2, #4]
 800a5e2:	e7ca      	b.n	800a57a <_free_r+0x22>
 800a5e4:	bd38      	pop	{r3, r4, r5, pc}
 800a5e6:	bf00      	nop
 800a5e8:	2000210c 	.word	0x2000210c

0800a5ec <malloc>:
 800a5ec:	4b02      	ldr	r3, [pc, #8]	@ (800a5f8 <malloc+0xc>)
 800a5ee:	4601      	mov	r1, r0
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	f000 b825 	b.w	800a640 <_malloc_r>
 800a5f6:	bf00      	nop
 800a5f8:	20000108 	.word	0x20000108

0800a5fc <sbrk_aligned>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4e0f      	ldr	r6, [pc, #60]	@ (800a63c <sbrk_aligned+0x40>)
 800a600:	460c      	mov	r4, r1
 800a602:	6831      	ldr	r1, [r6, #0]
 800a604:	4605      	mov	r5, r0
 800a606:	b911      	cbnz	r1, 800a60e <sbrk_aligned+0x12>
 800a608:	f000 fe46 	bl	800b298 <_sbrk_r>
 800a60c:	6030      	str	r0, [r6, #0]
 800a60e:	4621      	mov	r1, r4
 800a610:	4628      	mov	r0, r5
 800a612:	f000 fe41 	bl	800b298 <_sbrk_r>
 800a616:	1c43      	adds	r3, r0, #1
 800a618:	d103      	bne.n	800a622 <sbrk_aligned+0x26>
 800a61a:	f04f 34ff 	mov.w	r4, #4294967295
 800a61e:	4620      	mov	r0, r4
 800a620:	bd70      	pop	{r4, r5, r6, pc}
 800a622:	1cc4      	adds	r4, r0, #3
 800a624:	f024 0403 	bic.w	r4, r4, #3
 800a628:	42a0      	cmp	r0, r4
 800a62a:	d0f8      	beq.n	800a61e <sbrk_aligned+0x22>
 800a62c:	1a21      	subs	r1, r4, r0
 800a62e:	4628      	mov	r0, r5
 800a630:	f000 fe32 	bl	800b298 <_sbrk_r>
 800a634:	3001      	adds	r0, #1
 800a636:	d1f2      	bne.n	800a61e <sbrk_aligned+0x22>
 800a638:	e7ef      	b.n	800a61a <sbrk_aligned+0x1e>
 800a63a:	bf00      	nop
 800a63c:	20002108 	.word	0x20002108

0800a640 <_malloc_r>:
 800a640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a644:	1ccd      	adds	r5, r1, #3
 800a646:	f025 0503 	bic.w	r5, r5, #3
 800a64a:	3508      	adds	r5, #8
 800a64c:	2d0c      	cmp	r5, #12
 800a64e:	bf38      	it	cc
 800a650:	250c      	movcc	r5, #12
 800a652:	2d00      	cmp	r5, #0
 800a654:	4606      	mov	r6, r0
 800a656:	db01      	blt.n	800a65c <_malloc_r+0x1c>
 800a658:	42a9      	cmp	r1, r5
 800a65a:	d904      	bls.n	800a666 <_malloc_r+0x26>
 800a65c:	230c      	movs	r3, #12
 800a65e:	6033      	str	r3, [r6, #0]
 800a660:	2000      	movs	r0, #0
 800a662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a666:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a73c <_malloc_r+0xfc>
 800a66a:	f000 f869 	bl	800a740 <__malloc_lock>
 800a66e:	f8d8 3000 	ldr.w	r3, [r8]
 800a672:	461c      	mov	r4, r3
 800a674:	bb44      	cbnz	r4, 800a6c8 <_malloc_r+0x88>
 800a676:	4629      	mov	r1, r5
 800a678:	4630      	mov	r0, r6
 800a67a:	f7ff ffbf 	bl	800a5fc <sbrk_aligned>
 800a67e:	1c43      	adds	r3, r0, #1
 800a680:	4604      	mov	r4, r0
 800a682:	d158      	bne.n	800a736 <_malloc_r+0xf6>
 800a684:	f8d8 4000 	ldr.w	r4, [r8]
 800a688:	4627      	mov	r7, r4
 800a68a:	2f00      	cmp	r7, #0
 800a68c:	d143      	bne.n	800a716 <_malloc_r+0xd6>
 800a68e:	2c00      	cmp	r4, #0
 800a690:	d04b      	beq.n	800a72a <_malloc_r+0xea>
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	4639      	mov	r1, r7
 800a696:	4630      	mov	r0, r6
 800a698:	eb04 0903 	add.w	r9, r4, r3
 800a69c:	f000 fdfc 	bl	800b298 <_sbrk_r>
 800a6a0:	4581      	cmp	r9, r0
 800a6a2:	d142      	bne.n	800a72a <_malloc_r+0xea>
 800a6a4:	6821      	ldr	r1, [r4, #0]
 800a6a6:	1a6d      	subs	r5, r5, r1
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	f7ff ffa6 	bl	800a5fc <sbrk_aligned>
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d03a      	beq.n	800a72a <_malloc_r+0xea>
 800a6b4:	6823      	ldr	r3, [r4, #0]
 800a6b6:	442b      	add	r3, r5
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a6be:	685a      	ldr	r2, [r3, #4]
 800a6c0:	bb62      	cbnz	r2, 800a71c <_malloc_r+0xdc>
 800a6c2:	f8c8 7000 	str.w	r7, [r8]
 800a6c6:	e00f      	b.n	800a6e8 <_malloc_r+0xa8>
 800a6c8:	6822      	ldr	r2, [r4, #0]
 800a6ca:	1b52      	subs	r2, r2, r5
 800a6cc:	d420      	bmi.n	800a710 <_malloc_r+0xd0>
 800a6ce:	2a0b      	cmp	r2, #11
 800a6d0:	d917      	bls.n	800a702 <_malloc_r+0xc2>
 800a6d2:	1961      	adds	r1, r4, r5
 800a6d4:	42a3      	cmp	r3, r4
 800a6d6:	6025      	str	r5, [r4, #0]
 800a6d8:	bf18      	it	ne
 800a6da:	6059      	strne	r1, [r3, #4]
 800a6dc:	6863      	ldr	r3, [r4, #4]
 800a6de:	bf08      	it	eq
 800a6e0:	f8c8 1000 	streq.w	r1, [r8]
 800a6e4:	5162      	str	r2, [r4, r5]
 800a6e6:	604b      	str	r3, [r1, #4]
 800a6e8:	4630      	mov	r0, r6
 800a6ea:	f000 f82f 	bl	800a74c <__malloc_unlock>
 800a6ee:	f104 000b 	add.w	r0, r4, #11
 800a6f2:	1d23      	adds	r3, r4, #4
 800a6f4:	f020 0007 	bic.w	r0, r0, #7
 800a6f8:	1ac2      	subs	r2, r0, r3
 800a6fa:	bf1c      	itt	ne
 800a6fc:	1a1b      	subne	r3, r3, r0
 800a6fe:	50a3      	strne	r3, [r4, r2]
 800a700:	e7af      	b.n	800a662 <_malloc_r+0x22>
 800a702:	6862      	ldr	r2, [r4, #4]
 800a704:	42a3      	cmp	r3, r4
 800a706:	bf0c      	ite	eq
 800a708:	f8c8 2000 	streq.w	r2, [r8]
 800a70c:	605a      	strne	r2, [r3, #4]
 800a70e:	e7eb      	b.n	800a6e8 <_malloc_r+0xa8>
 800a710:	4623      	mov	r3, r4
 800a712:	6864      	ldr	r4, [r4, #4]
 800a714:	e7ae      	b.n	800a674 <_malloc_r+0x34>
 800a716:	463c      	mov	r4, r7
 800a718:	687f      	ldr	r7, [r7, #4]
 800a71a:	e7b6      	b.n	800a68a <_malloc_r+0x4a>
 800a71c:	461a      	mov	r2, r3
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	42a3      	cmp	r3, r4
 800a722:	d1fb      	bne.n	800a71c <_malloc_r+0xdc>
 800a724:	2300      	movs	r3, #0
 800a726:	6053      	str	r3, [r2, #4]
 800a728:	e7de      	b.n	800a6e8 <_malloc_r+0xa8>
 800a72a:	230c      	movs	r3, #12
 800a72c:	6033      	str	r3, [r6, #0]
 800a72e:	4630      	mov	r0, r6
 800a730:	f000 f80c 	bl	800a74c <__malloc_unlock>
 800a734:	e794      	b.n	800a660 <_malloc_r+0x20>
 800a736:	6005      	str	r5, [r0, #0]
 800a738:	e7d6      	b.n	800a6e8 <_malloc_r+0xa8>
 800a73a:	bf00      	nop
 800a73c:	2000210c 	.word	0x2000210c

0800a740 <__malloc_lock>:
 800a740:	4801      	ldr	r0, [pc, #4]	@ (800a748 <__malloc_lock+0x8>)
 800a742:	f7ff b8ba 	b.w	80098ba <__retarget_lock_acquire_recursive>
 800a746:	bf00      	nop
 800a748:	20002104 	.word	0x20002104

0800a74c <__malloc_unlock>:
 800a74c:	4801      	ldr	r0, [pc, #4]	@ (800a754 <__malloc_unlock+0x8>)
 800a74e:	f7ff b8b5 	b.w	80098bc <__retarget_lock_release_recursive>
 800a752:	bf00      	nop
 800a754:	20002104 	.word	0x20002104

0800a758 <_Balloc>:
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	69c6      	ldr	r6, [r0, #28]
 800a75c:	4604      	mov	r4, r0
 800a75e:	460d      	mov	r5, r1
 800a760:	b976      	cbnz	r6, 800a780 <_Balloc+0x28>
 800a762:	2010      	movs	r0, #16
 800a764:	f7ff ff42 	bl	800a5ec <malloc>
 800a768:	4602      	mov	r2, r0
 800a76a:	61e0      	str	r0, [r4, #28]
 800a76c:	b920      	cbnz	r0, 800a778 <_Balloc+0x20>
 800a76e:	4b18      	ldr	r3, [pc, #96]	@ (800a7d0 <_Balloc+0x78>)
 800a770:	4818      	ldr	r0, [pc, #96]	@ (800a7d4 <_Balloc+0x7c>)
 800a772:	216b      	movs	r1, #107	@ 0x6b
 800a774:	f000 fdae 	bl	800b2d4 <__assert_func>
 800a778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a77c:	6006      	str	r6, [r0, #0]
 800a77e:	60c6      	str	r6, [r0, #12]
 800a780:	69e6      	ldr	r6, [r4, #28]
 800a782:	68f3      	ldr	r3, [r6, #12]
 800a784:	b183      	cbz	r3, 800a7a8 <_Balloc+0x50>
 800a786:	69e3      	ldr	r3, [r4, #28]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a78e:	b9b8      	cbnz	r0, 800a7c0 <_Balloc+0x68>
 800a790:	2101      	movs	r1, #1
 800a792:	fa01 f605 	lsl.w	r6, r1, r5
 800a796:	1d72      	adds	r2, r6, #5
 800a798:	0092      	lsls	r2, r2, #2
 800a79a:	4620      	mov	r0, r4
 800a79c:	f000 fdb8 	bl	800b310 <_calloc_r>
 800a7a0:	b160      	cbz	r0, 800a7bc <_Balloc+0x64>
 800a7a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a7a6:	e00e      	b.n	800a7c6 <_Balloc+0x6e>
 800a7a8:	2221      	movs	r2, #33	@ 0x21
 800a7aa:	2104      	movs	r1, #4
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f000 fdaf 	bl	800b310 <_calloc_r>
 800a7b2:	69e3      	ldr	r3, [r4, #28]
 800a7b4:	60f0      	str	r0, [r6, #12]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1e4      	bne.n	800a786 <_Balloc+0x2e>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	bd70      	pop	{r4, r5, r6, pc}
 800a7c0:	6802      	ldr	r2, [r0, #0]
 800a7c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7cc:	e7f7      	b.n	800a7be <_Balloc+0x66>
 800a7ce:	bf00      	nop
 800a7d0:	0800c8d1 	.word	0x0800c8d1
 800a7d4:	0800c951 	.word	0x0800c951

0800a7d8 <_Bfree>:
 800a7d8:	b570      	push	{r4, r5, r6, lr}
 800a7da:	69c6      	ldr	r6, [r0, #28]
 800a7dc:	4605      	mov	r5, r0
 800a7de:	460c      	mov	r4, r1
 800a7e0:	b976      	cbnz	r6, 800a800 <_Bfree+0x28>
 800a7e2:	2010      	movs	r0, #16
 800a7e4:	f7ff ff02 	bl	800a5ec <malloc>
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	61e8      	str	r0, [r5, #28]
 800a7ec:	b920      	cbnz	r0, 800a7f8 <_Bfree+0x20>
 800a7ee:	4b09      	ldr	r3, [pc, #36]	@ (800a814 <_Bfree+0x3c>)
 800a7f0:	4809      	ldr	r0, [pc, #36]	@ (800a818 <_Bfree+0x40>)
 800a7f2:	218f      	movs	r1, #143	@ 0x8f
 800a7f4:	f000 fd6e 	bl	800b2d4 <__assert_func>
 800a7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7fc:	6006      	str	r6, [r0, #0]
 800a7fe:	60c6      	str	r6, [r0, #12]
 800a800:	b13c      	cbz	r4, 800a812 <_Bfree+0x3a>
 800a802:	69eb      	ldr	r3, [r5, #28]
 800a804:	6862      	ldr	r2, [r4, #4]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a80c:	6021      	str	r1, [r4, #0]
 800a80e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a812:	bd70      	pop	{r4, r5, r6, pc}
 800a814:	0800c8d1 	.word	0x0800c8d1
 800a818:	0800c951 	.word	0x0800c951

0800a81c <__multadd>:
 800a81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a820:	690d      	ldr	r5, [r1, #16]
 800a822:	4607      	mov	r7, r0
 800a824:	460c      	mov	r4, r1
 800a826:	461e      	mov	r6, r3
 800a828:	f101 0c14 	add.w	ip, r1, #20
 800a82c:	2000      	movs	r0, #0
 800a82e:	f8dc 3000 	ldr.w	r3, [ip]
 800a832:	b299      	uxth	r1, r3
 800a834:	fb02 6101 	mla	r1, r2, r1, r6
 800a838:	0c1e      	lsrs	r6, r3, #16
 800a83a:	0c0b      	lsrs	r3, r1, #16
 800a83c:	fb02 3306 	mla	r3, r2, r6, r3
 800a840:	b289      	uxth	r1, r1
 800a842:	3001      	adds	r0, #1
 800a844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a848:	4285      	cmp	r5, r0
 800a84a:	f84c 1b04 	str.w	r1, [ip], #4
 800a84e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a852:	dcec      	bgt.n	800a82e <__multadd+0x12>
 800a854:	b30e      	cbz	r6, 800a89a <__multadd+0x7e>
 800a856:	68a3      	ldr	r3, [r4, #8]
 800a858:	42ab      	cmp	r3, r5
 800a85a:	dc19      	bgt.n	800a890 <__multadd+0x74>
 800a85c:	6861      	ldr	r1, [r4, #4]
 800a85e:	4638      	mov	r0, r7
 800a860:	3101      	adds	r1, #1
 800a862:	f7ff ff79 	bl	800a758 <_Balloc>
 800a866:	4680      	mov	r8, r0
 800a868:	b928      	cbnz	r0, 800a876 <__multadd+0x5a>
 800a86a:	4602      	mov	r2, r0
 800a86c:	4b0c      	ldr	r3, [pc, #48]	@ (800a8a0 <__multadd+0x84>)
 800a86e:	480d      	ldr	r0, [pc, #52]	@ (800a8a4 <__multadd+0x88>)
 800a870:	21ba      	movs	r1, #186	@ 0xba
 800a872:	f000 fd2f 	bl	800b2d4 <__assert_func>
 800a876:	6922      	ldr	r2, [r4, #16]
 800a878:	3202      	adds	r2, #2
 800a87a:	f104 010c 	add.w	r1, r4, #12
 800a87e:	0092      	lsls	r2, r2, #2
 800a880:	300c      	adds	r0, #12
 800a882:	f000 fd19 	bl	800b2b8 <memcpy>
 800a886:	4621      	mov	r1, r4
 800a888:	4638      	mov	r0, r7
 800a88a:	f7ff ffa5 	bl	800a7d8 <_Bfree>
 800a88e:	4644      	mov	r4, r8
 800a890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a894:	3501      	adds	r5, #1
 800a896:	615e      	str	r6, [r3, #20]
 800a898:	6125      	str	r5, [r4, #16]
 800a89a:	4620      	mov	r0, r4
 800a89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a0:	0800c940 	.word	0x0800c940
 800a8a4:	0800c951 	.word	0x0800c951

0800a8a8 <__hi0bits>:
 800a8a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	bf36      	itet	cc
 800a8b0:	0403      	lslcc	r3, r0, #16
 800a8b2:	2000      	movcs	r0, #0
 800a8b4:	2010      	movcc	r0, #16
 800a8b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8ba:	bf3c      	itt	cc
 800a8bc:	021b      	lslcc	r3, r3, #8
 800a8be:	3008      	addcc	r0, #8
 800a8c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8c4:	bf3c      	itt	cc
 800a8c6:	011b      	lslcc	r3, r3, #4
 800a8c8:	3004      	addcc	r0, #4
 800a8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ce:	bf3c      	itt	cc
 800a8d0:	009b      	lslcc	r3, r3, #2
 800a8d2:	3002      	addcc	r0, #2
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	db05      	blt.n	800a8e4 <__hi0bits+0x3c>
 800a8d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a8dc:	f100 0001 	add.w	r0, r0, #1
 800a8e0:	bf08      	it	eq
 800a8e2:	2020      	moveq	r0, #32
 800a8e4:	4770      	bx	lr

0800a8e6 <__lo0bits>:
 800a8e6:	6803      	ldr	r3, [r0, #0]
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	f013 0007 	ands.w	r0, r3, #7
 800a8ee:	d00b      	beq.n	800a908 <__lo0bits+0x22>
 800a8f0:	07d9      	lsls	r1, r3, #31
 800a8f2:	d421      	bmi.n	800a938 <__lo0bits+0x52>
 800a8f4:	0798      	lsls	r0, r3, #30
 800a8f6:	bf49      	itett	mi
 800a8f8:	085b      	lsrmi	r3, r3, #1
 800a8fa:	089b      	lsrpl	r3, r3, #2
 800a8fc:	2001      	movmi	r0, #1
 800a8fe:	6013      	strmi	r3, [r2, #0]
 800a900:	bf5c      	itt	pl
 800a902:	6013      	strpl	r3, [r2, #0]
 800a904:	2002      	movpl	r0, #2
 800a906:	4770      	bx	lr
 800a908:	b299      	uxth	r1, r3
 800a90a:	b909      	cbnz	r1, 800a910 <__lo0bits+0x2a>
 800a90c:	0c1b      	lsrs	r3, r3, #16
 800a90e:	2010      	movs	r0, #16
 800a910:	b2d9      	uxtb	r1, r3
 800a912:	b909      	cbnz	r1, 800a918 <__lo0bits+0x32>
 800a914:	3008      	adds	r0, #8
 800a916:	0a1b      	lsrs	r3, r3, #8
 800a918:	0719      	lsls	r1, r3, #28
 800a91a:	bf04      	itt	eq
 800a91c:	091b      	lsreq	r3, r3, #4
 800a91e:	3004      	addeq	r0, #4
 800a920:	0799      	lsls	r1, r3, #30
 800a922:	bf04      	itt	eq
 800a924:	089b      	lsreq	r3, r3, #2
 800a926:	3002      	addeq	r0, #2
 800a928:	07d9      	lsls	r1, r3, #31
 800a92a:	d403      	bmi.n	800a934 <__lo0bits+0x4e>
 800a92c:	085b      	lsrs	r3, r3, #1
 800a92e:	f100 0001 	add.w	r0, r0, #1
 800a932:	d003      	beq.n	800a93c <__lo0bits+0x56>
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	4770      	bx	lr
 800a938:	2000      	movs	r0, #0
 800a93a:	4770      	bx	lr
 800a93c:	2020      	movs	r0, #32
 800a93e:	4770      	bx	lr

0800a940 <__i2b>:
 800a940:	b510      	push	{r4, lr}
 800a942:	460c      	mov	r4, r1
 800a944:	2101      	movs	r1, #1
 800a946:	f7ff ff07 	bl	800a758 <_Balloc>
 800a94a:	4602      	mov	r2, r0
 800a94c:	b928      	cbnz	r0, 800a95a <__i2b+0x1a>
 800a94e:	4b05      	ldr	r3, [pc, #20]	@ (800a964 <__i2b+0x24>)
 800a950:	4805      	ldr	r0, [pc, #20]	@ (800a968 <__i2b+0x28>)
 800a952:	f240 1145 	movw	r1, #325	@ 0x145
 800a956:	f000 fcbd 	bl	800b2d4 <__assert_func>
 800a95a:	2301      	movs	r3, #1
 800a95c:	6144      	str	r4, [r0, #20]
 800a95e:	6103      	str	r3, [r0, #16]
 800a960:	bd10      	pop	{r4, pc}
 800a962:	bf00      	nop
 800a964:	0800c940 	.word	0x0800c940
 800a968:	0800c951 	.word	0x0800c951

0800a96c <__multiply>:
 800a96c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a970:	4614      	mov	r4, r2
 800a972:	690a      	ldr	r2, [r1, #16]
 800a974:	6923      	ldr	r3, [r4, #16]
 800a976:	429a      	cmp	r2, r3
 800a978:	bfa8      	it	ge
 800a97a:	4623      	movge	r3, r4
 800a97c:	460f      	mov	r7, r1
 800a97e:	bfa4      	itt	ge
 800a980:	460c      	movge	r4, r1
 800a982:	461f      	movge	r7, r3
 800a984:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a988:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a98c:	68a3      	ldr	r3, [r4, #8]
 800a98e:	6861      	ldr	r1, [r4, #4]
 800a990:	eb0a 0609 	add.w	r6, sl, r9
 800a994:	42b3      	cmp	r3, r6
 800a996:	b085      	sub	sp, #20
 800a998:	bfb8      	it	lt
 800a99a:	3101      	addlt	r1, #1
 800a99c:	f7ff fedc 	bl	800a758 <_Balloc>
 800a9a0:	b930      	cbnz	r0, 800a9b0 <__multiply+0x44>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	4b44      	ldr	r3, [pc, #272]	@ (800aab8 <__multiply+0x14c>)
 800a9a6:	4845      	ldr	r0, [pc, #276]	@ (800aabc <__multiply+0x150>)
 800a9a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a9ac:	f000 fc92 	bl	800b2d4 <__assert_func>
 800a9b0:	f100 0514 	add.w	r5, r0, #20
 800a9b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a9b8:	462b      	mov	r3, r5
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	4543      	cmp	r3, r8
 800a9be:	d321      	bcc.n	800aa04 <__multiply+0x98>
 800a9c0:	f107 0114 	add.w	r1, r7, #20
 800a9c4:	f104 0214 	add.w	r2, r4, #20
 800a9c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a9cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a9d0:	9302      	str	r3, [sp, #8]
 800a9d2:	1b13      	subs	r3, r2, r4
 800a9d4:	3b15      	subs	r3, #21
 800a9d6:	f023 0303 	bic.w	r3, r3, #3
 800a9da:	3304      	adds	r3, #4
 800a9dc:	f104 0715 	add.w	r7, r4, #21
 800a9e0:	42ba      	cmp	r2, r7
 800a9e2:	bf38      	it	cc
 800a9e4:	2304      	movcc	r3, #4
 800a9e6:	9301      	str	r3, [sp, #4]
 800a9e8:	9b02      	ldr	r3, [sp, #8]
 800a9ea:	9103      	str	r1, [sp, #12]
 800a9ec:	428b      	cmp	r3, r1
 800a9ee:	d80c      	bhi.n	800aa0a <__multiply+0x9e>
 800a9f0:	2e00      	cmp	r6, #0
 800a9f2:	dd03      	ble.n	800a9fc <__multiply+0x90>
 800a9f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d05b      	beq.n	800aab4 <__multiply+0x148>
 800a9fc:	6106      	str	r6, [r0, #16]
 800a9fe:	b005      	add	sp, #20
 800aa00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa04:	f843 2b04 	str.w	r2, [r3], #4
 800aa08:	e7d8      	b.n	800a9bc <__multiply+0x50>
 800aa0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa0e:	f1ba 0f00 	cmp.w	sl, #0
 800aa12:	d024      	beq.n	800aa5e <__multiply+0xf2>
 800aa14:	f104 0e14 	add.w	lr, r4, #20
 800aa18:	46a9      	mov	r9, r5
 800aa1a:	f04f 0c00 	mov.w	ip, #0
 800aa1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aa22:	f8d9 3000 	ldr.w	r3, [r9]
 800aa26:	fa1f fb87 	uxth.w	fp, r7
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800aa30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aa34:	f8d9 7000 	ldr.w	r7, [r9]
 800aa38:	4463      	add	r3, ip
 800aa3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800aa42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa4c:	4572      	cmp	r2, lr
 800aa4e:	f849 3b04 	str.w	r3, [r9], #4
 800aa52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aa56:	d8e2      	bhi.n	800aa1e <__multiply+0xb2>
 800aa58:	9b01      	ldr	r3, [sp, #4]
 800aa5a:	f845 c003 	str.w	ip, [r5, r3]
 800aa5e:	9b03      	ldr	r3, [sp, #12]
 800aa60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aa64:	3104      	adds	r1, #4
 800aa66:	f1b9 0f00 	cmp.w	r9, #0
 800aa6a:	d021      	beq.n	800aab0 <__multiply+0x144>
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	f104 0c14 	add.w	ip, r4, #20
 800aa72:	46ae      	mov	lr, r5
 800aa74:	f04f 0a00 	mov.w	sl, #0
 800aa78:	f8bc b000 	ldrh.w	fp, [ip]
 800aa7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800aa80:	fb09 770b 	mla	r7, r9, fp, r7
 800aa84:	4457      	add	r7, sl
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aa8c:	f84e 3b04 	str.w	r3, [lr], #4
 800aa90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aa94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa98:	f8be 3000 	ldrh.w	r3, [lr]
 800aa9c:	fb09 330a 	mla	r3, r9, sl, r3
 800aaa0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800aaa4:	4562      	cmp	r2, ip
 800aaa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aaaa:	d8e5      	bhi.n	800aa78 <__multiply+0x10c>
 800aaac:	9f01      	ldr	r7, [sp, #4]
 800aaae:	51eb      	str	r3, [r5, r7]
 800aab0:	3504      	adds	r5, #4
 800aab2:	e799      	b.n	800a9e8 <__multiply+0x7c>
 800aab4:	3e01      	subs	r6, #1
 800aab6:	e79b      	b.n	800a9f0 <__multiply+0x84>
 800aab8:	0800c940 	.word	0x0800c940
 800aabc:	0800c951 	.word	0x0800c951

0800aac0 <__pow5mult>:
 800aac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aac4:	4615      	mov	r5, r2
 800aac6:	f012 0203 	ands.w	r2, r2, #3
 800aaca:	4607      	mov	r7, r0
 800aacc:	460e      	mov	r6, r1
 800aace:	d007      	beq.n	800aae0 <__pow5mult+0x20>
 800aad0:	4c25      	ldr	r4, [pc, #148]	@ (800ab68 <__pow5mult+0xa8>)
 800aad2:	3a01      	subs	r2, #1
 800aad4:	2300      	movs	r3, #0
 800aad6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aada:	f7ff fe9f 	bl	800a81c <__multadd>
 800aade:	4606      	mov	r6, r0
 800aae0:	10ad      	asrs	r5, r5, #2
 800aae2:	d03d      	beq.n	800ab60 <__pow5mult+0xa0>
 800aae4:	69fc      	ldr	r4, [r7, #28]
 800aae6:	b97c      	cbnz	r4, 800ab08 <__pow5mult+0x48>
 800aae8:	2010      	movs	r0, #16
 800aaea:	f7ff fd7f 	bl	800a5ec <malloc>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	61f8      	str	r0, [r7, #28]
 800aaf2:	b928      	cbnz	r0, 800ab00 <__pow5mult+0x40>
 800aaf4:	4b1d      	ldr	r3, [pc, #116]	@ (800ab6c <__pow5mult+0xac>)
 800aaf6:	481e      	ldr	r0, [pc, #120]	@ (800ab70 <__pow5mult+0xb0>)
 800aaf8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aafc:	f000 fbea 	bl	800b2d4 <__assert_func>
 800ab00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab04:	6004      	str	r4, [r0, #0]
 800ab06:	60c4      	str	r4, [r0, #12]
 800ab08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab10:	b94c      	cbnz	r4, 800ab26 <__pow5mult+0x66>
 800ab12:	f240 2171 	movw	r1, #625	@ 0x271
 800ab16:	4638      	mov	r0, r7
 800ab18:	f7ff ff12 	bl	800a940 <__i2b>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab22:	4604      	mov	r4, r0
 800ab24:	6003      	str	r3, [r0, #0]
 800ab26:	f04f 0900 	mov.w	r9, #0
 800ab2a:	07eb      	lsls	r3, r5, #31
 800ab2c:	d50a      	bpl.n	800ab44 <__pow5mult+0x84>
 800ab2e:	4631      	mov	r1, r6
 800ab30:	4622      	mov	r2, r4
 800ab32:	4638      	mov	r0, r7
 800ab34:	f7ff ff1a 	bl	800a96c <__multiply>
 800ab38:	4631      	mov	r1, r6
 800ab3a:	4680      	mov	r8, r0
 800ab3c:	4638      	mov	r0, r7
 800ab3e:	f7ff fe4b 	bl	800a7d8 <_Bfree>
 800ab42:	4646      	mov	r6, r8
 800ab44:	106d      	asrs	r5, r5, #1
 800ab46:	d00b      	beq.n	800ab60 <__pow5mult+0xa0>
 800ab48:	6820      	ldr	r0, [r4, #0]
 800ab4a:	b938      	cbnz	r0, 800ab5c <__pow5mult+0x9c>
 800ab4c:	4622      	mov	r2, r4
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4638      	mov	r0, r7
 800ab52:	f7ff ff0b 	bl	800a96c <__multiply>
 800ab56:	6020      	str	r0, [r4, #0]
 800ab58:	f8c0 9000 	str.w	r9, [r0]
 800ab5c:	4604      	mov	r4, r0
 800ab5e:	e7e4      	b.n	800ab2a <__pow5mult+0x6a>
 800ab60:	4630      	mov	r0, r6
 800ab62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab66:	bf00      	nop
 800ab68:	0800c9ac 	.word	0x0800c9ac
 800ab6c:	0800c8d1 	.word	0x0800c8d1
 800ab70:	0800c951 	.word	0x0800c951

0800ab74 <__lshift>:
 800ab74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab78:	460c      	mov	r4, r1
 800ab7a:	6849      	ldr	r1, [r1, #4]
 800ab7c:	6923      	ldr	r3, [r4, #16]
 800ab7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab82:	68a3      	ldr	r3, [r4, #8]
 800ab84:	4607      	mov	r7, r0
 800ab86:	4691      	mov	r9, r2
 800ab88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab8c:	f108 0601 	add.w	r6, r8, #1
 800ab90:	42b3      	cmp	r3, r6
 800ab92:	db0b      	blt.n	800abac <__lshift+0x38>
 800ab94:	4638      	mov	r0, r7
 800ab96:	f7ff fddf 	bl	800a758 <_Balloc>
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	b948      	cbnz	r0, 800abb2 <__lshift+0x3e>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	4b28      	ldr	r3, [pc, #160]	@ (800ac44 <__lshift+0xd0>)
 800aba2:	4829      	ldr	r0, [pc, #164]	@ (800ac48 <__lshift+0xd4>)
 800aba4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aba8:	f000 fb94 	bl	800b2d4 <__assert_func>
 800abac:	3101      	adds	r1, #1
 800abae:	005b      	lsls	r3, r3, #1
 800abb0:	e7ee      	b.n	800ab90 <__lshift+0x1c>
 800abb2:	2300      	movs	r3, #0
 800abb4:	f100 0114 	add.w	r1, r0, #20
 800abb8:	f100 0210 	add.w	r2, r0, #16
 800abbc:	4618      	mov	r0, r3
 800abbe:	4553      	cmp	r3, sl
 800abc0:	db33      	blt.n	800ac2a <__lshift+0xb6>
 800abc2:	6920      	ldr	r0, [r4, #16]
 800abc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800abc8:	f104 0314 	add.w	r3, r4, #20
 800abcc:	f019 091f 	ands.w	r9, r9, #31
 800abd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800abd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800abd8:	d02b      	beq.n	800ac32 <__lshift+0xbe>
 800abda:	f1c9 0e20 	rsb	lr, r9, #32
 800abde:	468a      	mov	sl, r1
 800abe0:	2200      	movs	r2, #0
 800abe2:	6818      	ldr	r0, [r3, #0]
 800abe4:	fa00 f009 	lsl.w	r0, r0, r9
 800abe8:	4310      	orrs	r0, r2
 800abea:	f84a 0b04 	str.w	r0, [sl], #4
 800abee:	f853 2b04 	ldr.w	r2, [r3], #4
 800abf2:	459c      	cmp	ip, r3
 800abf4:	fa22 f20e 	lsr.w	r2, r2, lr
 800abf8:	d8f3      	bhi.n	800abe2 <__lshift+0x6e>
 800abfa:	ebac 0304 	sub.w	r3, ip, r4
 800abfe:	3b15      	subs	r3, #21
 800ac00:	f023 0303 	bic.w	r3, r3, #3
 800ac04:	3304      	adds	r3, #4
 800ac06:	f104 0015 	add.w	r0, r4, #21
 800ac0a:	4584      	cmp	ip, r0
 800ac0c:	bf38      	it	cc
 800ac0e:	2304      	movcc	r3, #4
 800ac10:	50ca      	str	r2, [r1, r3]
 800ac12:	b10a      	cbz	r2, 800ac18 <__lshift+0xa4>
 800ac14:	f108 0602 	add.w	r6, r8, #2
 800ac18:	3e01      	subs	r6, #1
 800ac1a:	4638      	mov	r0, r7
 800ac1c:	612e      	str	r6, [r5, #16]
 800ac1e:	4621      	mov	r1, r4
 800ac20:	f7ff fdda 	bl	800a7d8 <_Bfree>
 800ac24:	4628      	mov	r0, r5
 800ac26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac2e:	3301      	adds	r3, #1
 800ac30:	e7c5      	b.n	800abbe <__lshift+0x4a>
 800ac32:	3904      	subs	r1, #4
 800ac34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac3c:	459c      	cmp	ip, r3
 800ac3e:	d8f9      	bhi.n	800ac34 <__lshift+0xc0>
 800ac40:	e7ea      	b.n	800ac18 <__lshift+0xa4>
 800ac42:	bf00      	nop
 800ac44:	0800c940 	.word	0x0800c940
 800ac48:	0800c951 	.word	0x0800c951

0800ac4c <__mcmp>:
 800ac4c:	690a      	ldr	r2, [r1, #16]
 800ac4e:	4603      	mov	r3, r0
 800ac50:	6900      	ldr	r0, [r0, #16]
 800ac52:	1a80      	subs	r0, r0, r2
 800ac54:	b530      	push	{r4, r5, lr}
 800ac56:	d10e      	bne.n	800ac76 <__mcmp+0x2a>
 800ac58:	3314      	adds	r3, #20
 800ac5a:	3114      	adds	r1, #20
 800ac5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ac60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ac64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ac68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ac6c:	4295      	cmp	r5, r2
 800ac6e:	d003      	beq.n	800ac78 <__mcmp+0x2c>
 800ac70:	d205      	bcs.n	800ac7e <__mcmp+0x32>
 800ac72:	f04f 30ff 	mov.w	r0, #4294967295
 800ac76:	bd30      	pop	{r4, r5, pc}
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d3f3      	bcc.n	800ac64 <__mcmp+0x18>
 800ac7c:	e7fb      	b.n	800ac76 <__mcmp+0x2a>
 800ac7e:	2001      	movs	r0, #1
 800ac80:	e7f9      	b.n	800ac76 <__mcmp+0x2a>
	...

0800ac84 <__mdiff>:
 800ac84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac88:	4689      	mov	r9, r1
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	4611      	mov	r1, r2
 800ac8e:	4648      	mov	r0, r9
 800ac90:	4614      	mov	r4, r2
 800ac92:	f7ff ffdb 	bl	800ac4c <__mcmp>
 800ac96:	1e05      	subs	r5, r0, #0
 800ac98:	d112      	bne.n	800acc0 <__mdiff+0x3c>
 800ac9a:	4629      	mov	r1, r5
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f7ff fd5b 	bl	800a758 <_Balloc>
 800aca2:	4602      	mov	r2, r0
 800aca4:	b928      	cbnz	r0, 800acb2 <__mdiff+0x2e>
 800aca6:	4b3f      	ldr	r3, [pc, #252]	@ (800ada4 <__mdiff+0x120>)
 800aca8:	f240 2137 	movw	r1, #567	@ 0x237
 800acac:	483e      	ldr	r0, [pc, #248]	@ (800ada8 <__mdiff+0x124>)
 800acae:	f000 fb11 	bl	800b2d4 <__assert_func>
 800acb2:	2301      	movs	r3, #1
 800acb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800acb8:	4610      	mov	r0, r2
 800acba:	b003      	add	sp, #12
 800acbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acc0:	bfbc      	itt	lt
 800acc2:	464b      	movlt	r3, r9
 800acc4:	46a1      	movlt	r9, r4
 800acc6:	4630      	mov	r0, r6
 800acc8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800accc:	bfba      	itte	lt
 800acce:	461c      	movlt	r4, r3
 800acd0:	2501      	movlt	r5, #1
 800acd2:	2500      	movge	r5, #0
 800acd4:	f7ff fd40 	bl	800a758 <_Balloc>
 800acd8:	4602      	mov	r2, r0
 800acda:	b918      	cbnz	r0, 800ace4 <__mdiff+0x60>
 800acdc:	4b31      	ldr	r3, [pc, #196]	@ (800ada4 <__mdiff+0x120>)
 800acde:	f240 2145 	movw	r1, #581	@ 0x245
 800ace2:	e7e3      	b.n	800acac <__mdiff+0x28>
 800ace4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ace8:	6926      	ldr	r6, [r4, #16]
 800acea:	60c5      	str	r5, [r0, #12]
 800acec:	f109 0310 	add.w	r3, r9, #16
 800acf0:	f109 0514 	add.w	r5, r9, #20
 800acf4:	f104 0e14 	add.w	lr, r4, #20
 800acf8:	f100 0b14 	add.w	fp, r0, #20
 800acfc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad04:	9301      	str	r3, [sp, #4]
 800ad06:	46d9      	mov	r9, fp
 800ad08:	f04f 0c00 	mov.w	ip, #0
 800ad0c:	9b01      	ldr	r3, [sp, #4]
 800ad0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad12:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	fa1f f38a 	uxth.w	r3, sl
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	b283      	uxth	r3, r0
 800ad20:	1acb      	subs	r3, r1, r3
 800ad22:	0c00      	lsrs	r0, r0, #16
 800ad24:	4463      	add	r3, ip
 800ad26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ad2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ad34:	4576      	cmp	r6, lr
 800ad36:	f849 3b04 	str.w	r3, [r9], #4
 800ad3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad3e:	d8e5      	bhi.n	800ad0c <__mdiff+0x88>
 800ad40:	1b33      	subs	r3, r6, r4
 800ad42:	3b15      	subs	r3, #21
 800ad44:	f023 0303 	bic.w	r3, r3, #3
 800ad48:	3415      	adds	r4, #21
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	42a6      	cmp	r6, r4
 800ad4e:	bf38      	it	cc
 800ad50:	2304      	movcc	r3, #4
 800ad52:	441d      	add	r5, r3
 800ad54:	445b      	add	r3, fp
 800ad56:	461e      	mov	r6, r3
 800ad58:	462c      	mov	r4, r5
 800ad5a:	4544      	cmp	r4, r8
 800ad5c:	d30e      	bcc.n	800ad7c <__mdiff+0xf8>
 800ad5e:	f108 0103 	add.w	r1, r8, #3
 800ad62:	1b49      	subs	r1, r1, r5
 800ad64:	f021 0103 	bic.w	r1, r1, #3
 800ad68:	3d03      	subs	r5, #3
 800ad6a:	45a8      	cmp	r8, r5
 800ad6c:	bf38      	it	cc
 800ad6e:	2100      	movcc	r1, #0
 800ad70:	440b      	add	r3, r1
 800ad72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad76:	b191      	cbz	r1, 800ad9e <__mdiff+0x11a>
 800ad78:	6117      	str	r7, [r2, #16]
 800ad7a:	e79d      	b.n	800acb8 <__mdiff+0x34>
 800ad7c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ad80:	46e6      	mov	lr, ip
 800ad82:	0c08      	lsrs	r0, r1, #16
 800ad84:	fa1c fc81 	uxtah	ip, ip, r1
 800ad88:	4471      	add	r1, lr
 800ad8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ad8e:	b289      	uxth	r1, r1
 800ad90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ad94:	f846 1b04 	str.w	r1, [r6], #4
 800ad98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad9c:	e7dd      	b.n	800ad5a <__mdiff+0xd6>
 800ad9e:	3f01      	subs	r7, #1
 800ada0:	e7e7      	b.n	800ad72 <__mdiff+0xee>
 800ada2:	bf00      	nop
 800ada4:	0800c940 	.word	0x0800c940
 800ada8:	0800c951 	.word	0x0800c951

0800adac <__d2b>:
 800adac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adb0:	460f      	mov	r7, r1
 800adb2:	2101      	movs	r1, #1
 800adb4:	ec59 8b10 	vmov	r8, r9, d0
 800adb8:	4616      	mov	r6, r2
 800adba:	f7ff fccd 	bl	800a758 <_Balloc>
 800adbe:	4604      	mov	r4, r0
 800adc0:	b930      	cbnz	r0, 800add0 <__d2b+0x24>
 800adc2:	4602      	mov	r2, r0
 800adc4:	4b23      	ldr	r3, [pc, #140]	@ (800ae54 <__d2b+0xa8>)
 800adc6:	4824      	ldr	r0, [pc, #144]	@ (800ae58 <__d2b+0xac>)
 800adc8:	f240 310f 	movw	r1, #783	@ 0x30f
 800adcc:	f000 fa82 	bl	800b2d4 <__assert_func>
 800add0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800add4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800add8:	b10d      	cbz	r5, 800adde <__d2b+0x32>
 800adda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	f1b8 0300 	subs.w	r3, r8, #0
 800ade4:	d023      	beq.n	800ae2e <__d2b+0x82>
 800ade6:	4668      	mov	r0, sp
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	f7ff fd7c 	bl	800a8e6 <__lo0bits>
 800adee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800adf2:	b1d0      	cbz	r0, 800ae2a <__d2b+0x7e>
 800adf4:	f1c0 0320 	rsb	r3, r0, #32
 800adf8:	fa02 f303 	lsl.w	r3, r2, r3
 800adfc:	430b      	orrs	r3, r1
 800adfe:	40c2      	lsrs	r2, r0
 800ae00:	6163      	str	r3, [r4, #20]
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	9b01      	ldr	r3, [sp, #4]
 800ae06:	61a3      	str	r3, [r4, #24]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	bf0c      	ite	eq
 800ae0c:	2201      	moveq	r2, #1
 800ae0e:	2202      	movne	r2, #2
 800ae10:	6122      	str	r2, [r4, #16]
 800ae12:	b1a5      	cbz	r5, 800ae3e <__d2b+0x92>
 800ae14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ae18:	4405      	add	r5, r0
 800ae1a:	603d      	str	r5, [r7, #0]
 800ae1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ae20:	6030      	str	r0, [r6, #0]
 800ae22:	4620      	mov	r0, r4
 800ae24:	b003      	add	sp, #12
 800ae26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae2a:	6161      	str	r1, [r4, #20]
 800ae2c:	e7ea      	b.n	800ae04 <__d2b+0x58>
 800ae2e:	a801      	add	r0, sp, #4
 800ae30:	f7ff fd59 	bl	800a8e6 <__lo0bits>
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	6163      	str	r3, [r4, #20]
 800ae38:	3020      	adds	r0, #32
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	e7e8      	b.n	800ae10 <__d2b+0x64>
 800ae3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ae42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ae46:	6038      	str	r0, [r7, #0]
 800ae48:	6918      	ldr	r0, [r3, #16]
 800ae4a:	f7ff fd2d 	bl	800a8a8 <__hi0bits>
 800ae4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ae52:	e7e5      	b.n	800ae20 <__d2b+0x74>
 800ae54:	0800c940 	.word	0x0800c940
 800ae58:	0800c951 	.word	0x0800c951

0800ae5c <__ssputs_r>:
 800ae5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae60:	688e      	ldr	r6, [r1, #8]
 800ae62:	461f      	mov	r7, r3
 800ae64:	42be      	cmp	r6, r7
 800ae66:	680b      	ldr	r3, [r1, #0]
 800ae68:	4682      	mov	sl, r0
 800ae6a:	460c      	mov	r4, r1
 800ae6c:	4690      	mov	r8, r2
 800ae6e:	d82d      	bhi.n	800aecc <__ssputs_r+0x70>
 800ae70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ae78:	d026      	beq.n	800aec8 <__ssputs_r+0x6c>
 800ae7a:	6965      	ldr	r5, [r4, #20]
 800ae7c:	6909      	ldr	r1, [r1, #16]
 800ae7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae82:	eba3 0901 	sub.w	r9, r3, r1
 800ae86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae8a:	1c7b      	adds	r3, r7, #1
 800ae8c:	444b      	add	r3, r9
 800ae8e:	106d      	asrs	r5, r5, #1
 800ae90:	429d      	cmp	r5, r3
 800ae92:	bf38      	it	cc
 800ae94:	461d      	movcc	r5, r3
 800ae96:	0553      	lsls	r3, r2, #21
 800ae98:	d527      	bpl.n	800aeea <__ssputs_r+0x8e>
 800ae9a:	4629      	mov	r1, r5
 800ae9c:	f7ff fbd0 	bl	800a640 <_malloc_r>
 800aea0:	4606      	mov	r6, r0
 800aea2:	b360      	cbz	r0, 800aefe <__ssputs_r+0xa2>
 800aea4:	6921      	ldr	r1, [r4, #16]
 800aea6:	464a      	mov	r2, r9
 800aea8:	f000 fa06 	bl	800b2b8 <memcpy>
 800aeac:	89a3      	ldrh	r3, [r4, #12]
 800aeae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aeb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb6:	81a3      	strh	r3, [r4, #12]
 800aeb8:	6126      	str	r6, [r4, #16]
 800aeba:	6165      	str	r5, [r4, #20]
 800aebc:	444e      	add	r6, r9
 800aebe:	eba5 0509 	sub.w	r5, r5, r9
 800aec2:	6026      	str	r6, [r4, #0]
 800aec4:	60a5      	str	r5, [r4, #8]
 800aec6:	463e      	mov	r6, r7
 800aec8:	42be      	cmp	r6, r7
 800aeca:	d900      	bls.n	800aece <__ssputs_r+0x72>
 800aecc:	463e      	mov	r6, r7
 800aece:	6820      	ldr	r0, [r4, #0]
 800aed0:	4632      	mov	r2, r6
 800aed2:	4641      	mov	r1, r8
 800aed4:	f000 f9c6 	bl	800b264 <memmove>
 800aed8:	68a3      	ldr	r3, [r4, #8]
 800aeda:	1b9b      	subs	r3, r3, r6
 800aedc:	60a3      	str	r3, [r4, #8]
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	4433      	add	r3, r6
 800aee2:	6023      	str	r3, [r4, #0]
 800aee4:	2000      	movs	r0, #0
 800aee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeea:	462a      	mov	r2, r5
 800aeec:	f000 fa36 	bl	800b35c <_realloc_r>
 800aef0:	4606      	mov	r6, r0
 800aef2:	2800      	cmp	r0, #0
 800aef4:	d1e0      	bne.n	800aeb8 <__ssputs_r+0x5c>
 800aef6:	6921      	ldr	r1, [r4, #16]
 800aef8:	4650      	mov	r0, sl
 800aefa:	f7ff fb2d 	bl	800a558 <_free_r>
 800aefe:	230c      	movs	r3, #12
 800af00:	f8ca 3000 	str.w	r3, [sl]
 800af04:	89a3      	ldrh	r3, [r4, #12]
 800af06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af0a:	81a3      	strh	r3, [r4, #12]
 800af0c:	f04f 30ff 	mov.w	r0, #4294967295
 800af10:	e7e9      	b.n	800aee6 <__ssputs_r+0x8a>
	...

0800af14 <_svfiprintf_r>:
 800af14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af18:	4698      	mov	r8, r3
 800af1a:	898b      	ldrh	r3, [r1, #12]
 800af1c:	061b      	lsls	r3, r3, #24
 800af1e:	b09d      	sub	sp, #116	@ 0x74
 800af20:	4607      	mov	r7, r0
 800af22:	460d      	mov	r5, r1
 800af24:	4614      	mov	r4, r2
 800af26:	d510      	bpl.n	800af4a <_svfiprintf_r+0x36>
 800af28:	690b      	ldr	r3, [r1, #16]
 800af2a:	b973      	cbnz	r3, 800af4a <_svfiprintf_r+0x36>
 800af2c:	2140      	movs	r1, #64	@ 0x40
 800af2e:	f7ff fb87 	bl	800a640 <_malloc_r>
 800af32:	6028      	str	r0, [r5, #0]
 800af34:	6128      	str	r0, [r5, #16]
 800af36:	b930      	cbnz	r0, 800af46 <_svfiprintf_r+0x32>
 800af38:	230c      	movs	r3, #12
 800af3a:	603b      	str	r3, [r7, #0]
 800af3c:	f04f 30ff 	mov.w	r0, #4294967295
 800af40:	b01d      	add	sp, #116	@ 0x74
 800af42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af46:	2340      	movs	r3, #64	@ 0x40
 800af48:	616b      	str	r3, [r5, #20]
 800af4a:	2300      	movs	r3, #0
 800af4c:	9309      	str	r3, [sp, #36]	@ 0x24
 800af4e:	2320      	movs	r3, #32
 800af50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af54:	f8cd 800c 	str.w	r8, [sp, #12]
 800af58:	2330      	movs	r3, #48	@ 0x30
 800af5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b0f8 <_svfiprintf_r+0x1e4>
 800af5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af62:	f04f 0901 	mov.w	r9, #1
 800af66:	4623      	mov	r3, r4
 800af68:	469a      	mov	sl, r3
 800af6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af6e:	b10a      	cbz	r2, 800af74 <_svfiprintf_r+0x60>
 800af70:	2a25      	cmp	r2, #37	@ 0x25
 800af72:	d1f9      	bne.n	800af68 <_svfiprintf_r+0x54>
 800af74:	ebba 0b04 	subs.w	fp, sl, r4
 800af78:	d00b      	beq.n	800af92 <_svfiprintf_r+0x7e>
 800af7a:	465b      	mov	r3, fp
 800af7c:	4622      	mov	r2, r4
 800af7e:	4629      	mov	r1, r5
 800af80:	4638      	mov	r0, r7
 800af82:	f7ff ff6b 	bl	800ae5c <__ssputs_r>
 800af86:	3001      	adds	r0, #1
 800af88:	f000 80a7 	beq.w	800b0da <_svfiprintf_r+0x1c6>
 800af8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af8e:	445a      	add	r2, fp
 800af90:	9209      	str	r2, [sp, #36]	@ 0x24
 800af92:	f89a 3000 	ldrb.w	r3, [sl]
 800af96:	2b00      	cmp	r3, #0
 800af98:	f000 809f 	beq.w	800b0da <_svfiprintf_r+0x1c6>
 800af9c:	2300      	movs	r3, #0
 800af9e:	f04f 32ff 	mov.w	r2, #4294967295
 800afa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800afa6:	f10a 0a01 	add.w	sl, sl, #1
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	9307      	str	r3, [sp, #28]
 800afae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800afb2:	931a      	str	r3, [sp, #104]	@ 0x68
 800afb4:	4654      	mov	r4, sl
 800afb6:	2205      	movs	r2, #5
 800afb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afbc:	484e      	ldr	r0, [pc, #312]	@ (800b0f8 <_svfiprintf_r+0x1e4>)
 800afbe:	f7f5 f90f 	bl	80001e0 <memchr>
 800afc2:	9a04      	ldr	r2, [sp, #16]
 800afc4:	b9d8      	cbnz	r0, 800affe <_svfiprintf_r+0xea>
 800afc6:	06d0      	lsls	r0, r2, #27
 800afc8:	bf44      	itt	mi
 800afca:	2320      	movmi	r3, #32
 800afcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afd0:	0711      	lsls	r1, r2, #28
 800afd2:	bf44      	itt	mi
 800afd4:	232b      	movmi	r3, #43	@ 0x2b
 800afd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afda:	f89a 3000 	ldrb.w	r3, [sl]
 800afde:	2b2a      	cmp	r3, #42	@ 0x2a
 800afe0:	d015      	beq.n	800b00e <_svfiprintf_r+0xfa>
 800afe2:	9a07      	ldr	r2, [sp, #28]
 800afe4:	4654      	mov	r4, sl
 800afe6:	2000      	movs	r0, #0
 800afe8:	f04f 0c0a 	mov.w	ip, #10
 800afec:	4621      	mov	r1, r4
 800afee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aff2:	3b30      	subs	r3, #48	@ 0x30
 800aff4:	2b09      	cmp	r3, #9
 800aff6:	d94b      	bls.n	800b090 <_svfiprintf_r+0x17c>
 800aff8:	b1b0      	cbz	r0, 800b028 <_svfiprintf_r+0x114>
 800affa:	9207      	str	r2, [sp, #28]
 800affc:	e014      	b.n	800b028 <_svfiprintf_r+0x114>
 800affe:	eba0 0308 	sub.w	r3, r0, r8
 800b002:	fa09 f303 	lsl.w	r3, r9, r3
 800b006:	4313      	orrs	r3, r2
 800b008:	9304      	str	r3, [sp, #16]
 800b00a:	46a2      	mov	sl, r4
 800b00c:	e7d2      	b.n	800afb4 <_svfiprintf_r+0xa0>
 800b00e:	9b03      	ldr	r3, [sp, #12]
 800b010:	1d19      	adds	r1, r3, #4
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	9103      	str	r1, [sp, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	bfbb      	ittet	lt
 800b01a:	425b      	neglt	r3, r3
 800b01c:	f042 0202 	orrlt.w	r2, r2, #2
 800b020:	9307      	strge	r3, [sp, #28]
 800b022:	9307      	strlt	r3, [sp, #28]
 800b024:	bfb8      	it	lt
 800b026:	9204      	strlt	r2, [sp, #16]
 800b028:	7823      	ldrb	r3, [r4, #0]
 800b02a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b02c:	d10a      	bne.n	800b044 <_svfiprintf_r+0x130>
 800b02e:	7863      	ldrb	r3, [r4, #1]
 800b030:	2b2a      	cmp	r3, #42	@ 0x2a
 800b032:	d132      	bne.n	800b09a <_svfiprintf_r+0x186>
 800b034:	9b03      	ldr	r3, [sp, #12]
 800b036:	1d1a      	adds	r2, r3, #4
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	9203      	str	r2, [sp, #12]
 800b03c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b040:	3402      	adds	r4, #2
 800b042:	9305      	str	r3, [sp, #20]
 800b044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b108 <_svfiprintf_r+0x1f4>
 800b048:	7821      	ldrb	r1, [r4, #0]
 800b04a:	2203      	movs	r2, #3
 800b04c:	4650      	mov	r0, sl
 800b04e:	f7f5 f8c7 	bl	80001e0 <memchr>
 800b052:	b138      	cbz	r0, 800b064 <_svfiprintf_r+0x150>
 800b054:	9b04      	ldr	r3, [sp, #16]
 800b056:	eba0 000a 	sub.w	r0, r0, sl
 800b05a:	2240      	movs	r2, #64	@ 0x40
 800b05c:	4082      	lsls	r2, r0
 800b05e:	4313      	orrs	r3, r2
 800b060:	3401      	adds	r4, #1
 800b062:	9304      	str	r3, [sp, #16]
 800b064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b068:	4824      	ldr	r0, [pc, #144]	@ (800b0fc <_svfiprintf_r+0x1e8>)
 800b06a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b06e:	2206      	movs	r2, #6
 800b070:	f7f5 f8b6 	bl	80001e0 <memchr>
 800b074:	2800      	cmp	r0, #0
 800b076:	d036      	beq.n	800b0e6 <_svfiprintf_r+0x1d2>
 800b078:	4b21      	ldr	r3, [pc, #132]	@ (800b100 <_svfiprintf_r+0x1ec>)
 800b07a:	bb1b      	cbnz	r3, 800b0c4 <_svfiprintf_r+0x1b0>
 800b07c:	9b03      	ldr	r3, [sp, #12]
 800b07e:	3307      	adds	r3, #7
 800b080:	f023 0307 	bic.w	r3, r3, #7
 800b084:	3308      	adds	r3, #8
 800b086:	9303      	str	r3, [sp, #12]
 800b088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b08a:	4433      	add	r3, r6
 800b08c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b08e:	e76a      	b.n	800af66 <_svfiprintf_r+0x52>
 800b090:	fb0c 3202 	mla	r2, ip, r2, r3
 800b094:	460c      	mov	r4, r1
 800b096:	2001      	movs	r0, #1
 800b098:	e7a8      	b.n	800afec <_svfiprintf_r+0xd8>
 800b09a:	2300      	movs	r3, #0
 800b09c:	3401      	adds	r4, #1
 800b09e:	9305      	str	r3, [sp, #20]
 800b0a0:	4619      	mov	r1, r3
 800b0a2:	f04f 0c0a 	mov.w	ip, #10
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b0ac:	3a30      	subs	r2, #48	@ 0x30
 800b0ae:	2a09      	cmp	r2, #9
 800b0b0:	d903      	bls.n	800b0ba <_svfiprintf_r+0x1a6>
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0c6      	beq.n	800b044 <_svfiprintf_r+0x130>
 800b0b6:	9105      	str	r1, [sp, #20]
 800b0b8:	e7c4      	b.n	800b044 <_svfiprintf_r+0x130>
 800b0ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b0be:	4604      	mov	r4, r0
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e7f0      	b.n	800b0a6 <_svfiprintf_r+0x192>
 800b0c4:	ab03      	add	r3, sp, #12
 800b0c6:	9300      	str	r3, [sp, #0]
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b104 <_svfiprintf_r+0x1f0>)
 800b0cc:	a904      	add	r1, sp, #16
 800b0ce:	4638      	mov	r0, r7
 800b0d0:	f7fd fe98 	bl	8008e04 <_printf_float>
 800b0d4:	1c42      	adds	r2, r0, #1
 800b0d6:	4606      	mov	r6, r0
 800b0d8:	d1d6      	bne.n	800b088 <_svfiprintf_r+0x174>
 800b0da:	89ab      	ldrh	r3, [r5, #12]
 800b0dc:	065b      	lsls	r3, r3, #25
 800b0de:	f53f af2d 	bmi.w	800af3c <_svfiprintf_r+0x28>
 800b0e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0e4:	e72c      	b.n	800af40 <_svfiprintf_r+0x2c>
 800b0e6:	ab03      	add	r3, sp, #12
 800b0e8:	9300      	str	r3, [sp, #0]
 800b0ea:	462a      	mov	r2, r5
 800b0ec:	4b05      	ldr	r3, [pc, #20]	@ (800b104 <_svfiprintf_r+0x1f0>)
 800b0ee:	a904      	add	r1, sp, #16
 800b0f0:	4638      	mov	r0, r7
 800b0f2:	f7fe f91f 	bl	8009334 <_printf_i>
 800b0f6:	e7ed      	b.n	800b0d4 <_svfiprintf_r+0x1c0>
 800b0f8:	0800caa8 	.word	0x0800caa8
 800b0fc:	0800cab2 	.word	0x0800cab2
 800b100:	08008e05 	.word	0x08008e05
 800b104:	0800ae5d 	.word	0x0800ae5d
 800b108:	0800caae 	.word	0x0800caae

0800b10c <__sflush_r>:
 800b10c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b114:	0716      	lsls	r6, r2, #28
 800b116:	4605      	mov	r5, r0
 800b118:	460c      	mov	r4, r1
 800b11a:	d454      	bmi.n	800b1c6 <__sflush_r+0xba>
 800b11c:	684b      	ldr	r3, [r1, #4]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dc02      	bgt.n	800b128 <__sflush_r+0x1c>
 800b122:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b124:	2b00      	cmp	r3, #0
 800b126:	dd48      	ble.n	800b1ba <__sflush_r+0xae>
 800b128:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b12a:	2e00      	cmp	r6, #0
 800b12c:	d045      	beq.n	800b1ba <__sflush_r+0xae>
 800b12e:	2300      	movs	r3, #0
 800b130:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b134:	682f      	ldr	r7, [r5, #0]
 800b136:	6a21      	ldr	r1, [r4, #32]
 800b138:	602b      	str	r3, [r5, #0]
 800b13a:	d030      	beq.n	800b19e <__sflush_r+0x92>
 800b13c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b13e:	89a3      	ldrh	r3, [r4, #12]
 800b140:	0759      	lsls	r1, r3, #29
 800b142:	d505      	bpl.n	800b150 <__sflush_r+0x44>
 800b144:	6863      	ldr	r3, [r4, #4]
 800b146:	1ad2      	subs	r2, r2, r3
 800b148:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b14a:	b10b      	cbz	r3, 800b150 <__sflush_r+0x44>
 800b14c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b14e:	1ad2      	subs	r2, r2, r3
 800b150:	2300      	movs	r3, #0
 800b152:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b154:	6a21      	ldr	r1, [r4, #32]
 800b156:	4628      	mov	r0, r5
 800b158:	47b0      	blx	r6
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	d106      	bne.n	800b16e <__sflush_r+0x62>
 800b160:	6829      	ldr	r1, [r5, #0]
 800b162:	291d      	cmp	r1, #29
 800b164:	d82b      	bhi.n	800b1be <__sflush_r+0xb2>
 800b166:	4a2a      	ldr	r2, [pc, #168]	@ (800b210 <__sflush_r+0x104>)
 800b168:	410a      	asrs	r2, r1
 800b16a:	07d6      	lsls	r6, r2, #31
 800b16c:	d427      	bmi.n	800b1be <__sflush_r+0xb2>
 800b16e:	2200      	movs	r2, #0
 800b170:	6062      	str	r2, [r4, #4]
 800b172:	04d9      	lsls	r1, r3, #19
 800b174:	6922      	ldr	r2, [r4, #16]
 800b176:	6022      	str	r2, [r4, #0]
 800b178:	d504      	bpl.n	800b184 <__sflush_r+0x78>
 800b17a:	1c42      	adds	r2, r0, #1
 800b17c:	d101      	bne.n	800b182 <__sflush_r+0x76>
 800b17e:	682b      	ldr	r3, [r5, #0]
 800b180:	b903      	cbnz	r3, 800b184 <__sflush_r+0x78>
 800b182:	6560      	str	r0, [r4, #84]	@ 0x54
 800b184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b186:	602f      	str	r7, [r5, #0]
 800b188:	b1b9      	cbz	r1, 800b1ba <__sflush_r+0xae>
 800b18a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b18e:	4299      	cmp	r1, r3
 800b190:	d002      	beq.n	800b198 <__sflush_r+0x8c>
 800b192:	4628      	mov	r0, r5
 800b194:	f7ff f9e0 	bl	800a558 <_free_r>
 800b198:	2300      	movs	r3, #0
 800b19a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b19c:	e00d      	b.n	800b1ba <__sflush_r+0xae>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b0      	blx	r6
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	1c50      	adds	r0, r2, #1
 800b1a8:	d1c9      	bne.n	800b13e <__sflush_r+0x32>
 800b1aa:	682b      	ldr	r3, [r5, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d0c6      	beq.n	800b13e <__sflush_r+0x32>
 800b1b0:	2b1d      	cmp	r3, #29
 800b1b2:	d001      	beq.n	800b1b8 <__sflush_r+0xac>
 800b1b4:	2b16      	cmp	r3, #22
 800b1b6:	d11e      	bne.n	800b1f6 <__sflush_r+0xea>
 800b1b8:	602f      	str	r7, [r5, #0]
 800b1ba:	2000      	movs	r0, #0
 800b1bc:	e022      	b.n	800b204 <__sflush_r+0xf8>
 800b1be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1c2:	b21b      	sxth	r3, r3
 800b1c4:	e01b      	b.n	800b1fe <__sflush_r+0xf2>
 800b1c6:	690f      	ldr	r7, [r1, #16]
 800b1c8:	2f00      	cmp	r7, #0
 800b1ca:	d0f6      	beq.n	800b1ba <__sflush_r+0xae>
 800b1cc:	0793      	lsls	r3, r2, #30
 800b1ce:	680e      	ldr	r6, [r1, #0]
 800b1d0:	bf08      	it	eq
 800b1d2:	694b      	ldreq	r3, [r1, #20]
 800b1d4:	600f      	str	r7, [r1, #0]
 800b1d6:	bf18      	it	ne
 800b1d8:	2300      	movne	r3, #0
 800b1da:	eba6 0807 	sub.w	r8, r6, r7
 800b1de:	608b      	str	r3, [r1, #8]
 800b1e0:	f1b8 0f00 	cmp.w	r8, #0
 800b1e4:	dde9      	ble.n	800b1ba <__sflush_r+0xae>
 800b1e6:	6a21      	ldr	r1, [r4, #32]
 800b1e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b1ea:	4643      	mov	r3, r8
 800b1ec:	463a      	mov	r2, r7
 800b1ee:	4628      	mov	r0, r5
 800b1f0:	47b0      	blx	r6
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	dc08      	bgt.n	800b208 <__sflush_r+0xfc>
 800b1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1fe:	81a3      	strh	r3, [r4, #12]
 800b200:	f04f 30ff 	mov.w	r0, #4294967295
 800b204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b208:	4407      	add	r7, r0
 800b20a:	eba8 0800 	sub.w	r8, r8, r0
 800b20e:	e7e7      	b.n	800b1e0 <__sflush_r+0xd4>
 800b210:	dfbffffe 	.word	0xdfbffffe

0800b214 <_fflush_r>:
 800b214:	b538      	push	{r3, r4, r5, lr}
 800b216:	690b      	ldr	r3, [r1, #16]
 800b218:	4605      	mov	r5, r0
 800b21a:	460c      	mov	r4, r1
 800b21c:	b913      	cbnz	r3, 800b224 <_fflush_r+0x10>
 800b21e:	2500      	movs	r5, #0
 800b220:	4628      	mov	r0, r5
 800b222:	bd38      	pop	{r3, r4, r5, pc}
 800b224:	b118      	cbz	r0, 800b22e <_fflush_r+0x1a>
 800b226:	6a03      	ldr	r3, [r0, #32]
 800b228:	b90b      	cbnz	r3, 800b22e <_fflush_r+0x1a>
 800b22a:	f7fe fa2f 	bl	800968c <__sinit>
 800b22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0f3      	beq.n	800b21e <_fflush_r+0xa>
 800b236:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b238:	07d0      	lsls	r0, r2, #31
 800b23a:	d404      	bmi.n	800b246 <_fflush_r+0x32>
 800b23c:	0599      	lsls	r1, r3, #22
 800b23e:	d402      	bmi.n	800b246 <_fflush_r+0x32>
 800b240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b242:	f7fe fb3a 	bl	80098ba <__retarget_lock_acquire_recursive>
 800b246:	4628      	mov	r0, r5
 800b248:	4621      	mov	r1, r4
 800b24a:	f7ff ff5f 	bl	800b10c <__sflush_r>
 800b24e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b250:	07da      	lsls	r2, r3, #31
 800b252:	4605      	mov	r5, r0
 800b254:	d4e4      	bmi.n	800b220 <_fflush_r+0xc>
 800b256:	89a3      	ldrh	r3, [r4, #12]
 800b258:	059b      	lsls	r3, r3, #22
 800b25a:	d4e1      	bmi.n	800b220 <_fflush_r+0xc>
 800b25c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b25e:	f7fe fb2d 	bl	80098bc <__retarget_lock_release_recursive>
 800b262:	e7dd      	b.n	800b220 <_fflush_r+0xc>

0800b264 <memmove>:
 800b264:	4288      	cmp	r0, r1
 800b266:	b510      	push	{r4, lr}
 800b268:	eb01 0402 	add.w	r4, r1, r2
 800b26c:	d902      	bls.n	800b274 <memmove+0x10>
 800b26e:	4284      	cmp	r4, r0
 800b270:	4623      	mov	r3, r4
 800b272:	d807      	bhi.n	800b284 <memmove+0x20>
 800b274:	1e43      	subs	r3, r0, #1
 800b276:	42a1      	cmp	r1, r4
 800b278:	d008      	beq.n	800b28c <memmove+0x28>
 800b27a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b27e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b282:	e7f8      	b.n	800b276 <memmove+0x12>
 800b284:	4402      	add	r2, r0
 800b286:	4601      	mov	r1, r0
 800b288:	428a      	cmp	r2, r1
 800b28a:	d100      	bne.n	800b28e <memmove+0x2a>
 800b28c:	bd10      	pop	{r4, pc}
 800b28e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b292:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b296:	e7f7      	b.n	800b288 <memmove+0x24>

0800b298 <_sbrk_r>:
 800b298:	b538      	push	{r3, r4, r5, lr}
 800b29a:	4d06      	ldr	r5, [pc, #24]	@ (800b2b4 <_sbrk_r+0x1c>)
 800b29c:	2300      	movs	r3, #0
 800b29e:	4604      	mov	r4, r0
 800b2a0:	4608      	mov	r0, r1
 800b2a2:	602b      	str	r3, [r5, #0]
 800b2a4:	f7f6 fa12 	bl	80016cc <_sbrk>
 800b2a8:	1c43      	adds	r3, r0, #1
 800b2aa:	d102      	bne.n	800b2b2 <_sbrk_r+0x1a>
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	b103      	cbz	r3, 800b2b2 <_sbrk_r+0x1a>
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	bd38      	pop	{r3, r4, r5, pc}
 800b2b4:	20002100 	.word	0x20002100

0800b2b8 <memcpy>:
 800b2b8:	440a      	add	r2, r1
 800b2ba:	4291      	cmp	r1, r2
 800b2bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2c0:	d100      	bne.n	800b2c4 <memcpy+0xc>
 800b2c2:	4770      	bx	lr
 800b2c4:	b510      	push	{r4, lr}
 800b2c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2ce:	4291      	cmp	r1, r2
 800b2d0:	d1f9      	bne.n	800b2c6 <memcpy+0xe>
 800b2d2:	bd10      	pop	{r4, pc}

0800b2d4 <__assert_func>:
 800b2d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b2d6:	4614      	mov	r4, r2
 800b2d8:	461a      	mov	r2, r3
 800b2da:	4b09      	ldr	r3, [pc, #36]	@ (800b300 <__assert_func+0x2c>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4605      	mov	r5, r0
 800b2e0:	68d8      	ldr	r0, [r3, #12]
 800b2e2:	b954      	cbnz	r4, 800b2fa <__assert_func+0x26>
 800b2e4:	4b07      	ldr	r3, [pc, #28]	@ (800b304 <__assert_func+0x30>)
 800b2e6:	461c      	mov	r4, r3
 800b2e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b2ec:	9100      	str	r1, [sp, #0]
 800b2ee:	462b      	mov	r3, r5
 800b2f0:	4905      	ldr	r1, [pc, #20]	@ (800b308 <__assert_func+0x34>)
 800b2f2:	f000 f86f 	bl	800b3d4 <fiprintf>
 800b2f6:	f000 f87f 	bl	800b3f8 <abort>
 800b2fa:	4b04      	ldr	r3, [pc, #16]	@ (800b30c <__assert_func+0x38>)
 800b2fc:	e7f4      	b.n	800b2e8 <__assert_func+0x14>
 800b2fe:	bf00      	nop
 800b300:	20000108 	.word	0x20000108
 800b304:	0800cafe 	.word	0x0800cafe
 800b308:	0800cad0 	.word	0x0800cad0
 800b30c:	0800cac3 	.word	0x0800cac3

0800b310 <_calloc_r>:
 800b310:	b570      	push	{r4, r5, r6, lr}
 800b312:	fba1 5402 	umull	r5, r4, r1, r2
 800b316:	b93c      	cbnz	r4, 800b328 <_calloc_r+0x18>
 800b318:	4629      	mov	r1, r5
 800b31a:	f7ff f991 	bl	800a640 <_malloc_r>
 800b31e:	4606      	mov	r6, r0
 800b320:	b928      	cbnz	r0, 800b32e <_calloc_r+0x1e>
 800b322:	2600      	movs	r6, #0
 800b324:	4630      	mov	r0, r6
 800b326:	bd70      	pop	{r4, r5, r6, pc}
 800b328:	220c      	movs	r2, #12
 800b32a:	6002      	str	r2, [r0, #0]
 800b32c:	e7f9      	b.n	800b322 <_calloc_r+0x12>
 800b32e:	462a      	mov	r2, r5
 800b330:	4621      	mov	r1, r4
 800b332:	f7fe fa44 	bl	80097be <memset>
 800b336:	e7f5      	b.n	800b324 <_calloc_r+0x14>

0800b338 <__ascii_mbtowc>:
 800b338:	b082      	sub	sp, #8
 800b33a:	b901      	cbnz	r1, 800b33e <__ascii_mbtowc+0x6>
 800b33c:	a901      	add	r1, sp, #4
 800b33e:	b142      	cbz	r2, 800b352 <__ascii_mbtowc+0x1a>
 800b340:	b14b      	cbz	r3, 800b356 <__ascii_mbtowc+0x1e>
 800b342:	7813      	ldrb	r3, [r2, #0]
 800b344:	600b      	str	r3, [r1, #0]
 800b346:	7812      	ldrb	r2, [r2, #0]
 800b348:	1e10      	subs	r0, r2, #0
 800b34a:	bf18      	it	ne
 800b34c:	2001      	movne	r0, #1
 800b34e:	b002      	add	sp, #8
 800b350:	4770      	bx	lr
 800b352:	4610      	mov	r0, r2
 800b354:	e7fb      	b.n	800b34e <__ascii_mbtowc+0x16>
 800b356:	f06f 0001 	mvn.w	r0, #1
 800b35a:	e7f8      	b.n	800b34e <__ascii_mbtowc+0x16>

0800b35c <_realloc_r>:
 800b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b360:	4680      	mov	r8, r0
 800b362:	4615      	mov	r5, r2
 800b364:	460c      	mov	r4, r1
 800b366:	b921      	cbnz	r1, 800b372 <_realloc_r+0x16>
 800b368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b36c:	4611      	mov	r1, r2
 800b36e:	f7ff b967 	b.w	800a640 <_malloc_r>
 800b372:	b92a      	cbnz	r2, 800b380 <_realloc_r+0x24>
 800b374:	f7ff f8f0 	bl	800a558 <_free_r>
 800b378:	2400      	movs	r4, #0
 800b37a:	4620      	mov	r0, r4
 800b37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b380:	f000 f841 	bl	800b406 <_malloc_usable_size_r>
 800b384:	4285      	cmp	r5, r0
 800b386:	4606      	mov	r6, r0
 800b388:	d802      	bhi.n	800b390 <_realloc_r+0x34>
 800b38a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b38e:	d8f4      	bhi.n	800b37a <_realloc_r+0x1e>
 800b390:	4629      	mov	r1, r5
 800b392:	4640      	mov	r0, r8
 800b394:	f7ff f954 	bl	800a640 <_malloc_r>
 800b398:	4607      	mov	r7, r0
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d0ec      	beq.n	800b378 <_realloc_r+0x1c>
 800b39e:	42b5      	cmp	r5, r6
 800b3a0:	462a      	mov	r2, r5
 800b3a2:	4621      	mov	r1, r4
 800b3a4:	bf28      	it	cs
 800b3a6:	4632      	movcs	r2, r6
 800b3a8:	f7ff ff86 	bl	800b2b8 <memcpy>
 800b3ac:	4621      	mov	r1, r4
 800b3ae:	4640      	mov	r0, r8
 800b3b0:	f7ff f8d2 	bl	800a558 <_free_r>
 800b3b4:	463c      	mov	r4, r7
 800b3b6:	e7e0      	b.n	800b37a <_realloc_r+0x1e>

0800b3b8 <__ascii_wctomb>:
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	b141      	cbz	r1, 800b3d0 <__ascii_wctomb+0x18>
 800b3be:	2aff      	cmp	r2, #255	@ 0xff
 800b3c0:	d904      	bls.n	800b3cc <__ascii_wctomb+0x14>
 800b3c2:	228a      	movs	r2, #138	@ 0x8a
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b3ca:	4770      	bx	lr
 800b3cc:	700a      	strb	r2, [r1, #0]
 800b3ce:	2001      	movs	r0, #1
 800b3d0:	4770      	bx	lr
	...

0800b3d4 <fiprintf>:
 800b3d4:	b40e      	push	{r1, r2, r3}
 800b3d6:	b503      	push	{r0, r1, lr}
 800b3d8:	4601      	mov	r1, r0
 800b3da:	ab03      	add	r3, sp, #12
 800b3dc:	4805      	ldr	r0, [pc, #20]	@ (800b3f4 <fiprintf+0x20>)
 800b3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3e2:	6800      	ldr	r0, [r0, #0]
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	f000 f83f 	bl	800b468 <_vfiprintf_r>
 800b3ea:	b002      	add	sp, #8
 800b3ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3f0:	b003      	add	sp, #12
 800b3f2:	4770      	bx	lr
 800b3f4:	20000108 	.word	0x20000108

0800b3f8 <abort>:
 800b3f8:	b508      	push	{r3, lr}
 800b3fa:	2006      	movs	r0, #6
 800b3fc:	f000 fa08 	bl	800b810 <raise>
 800b400:	2001      	movs	r0, #1
 800b402:	f7f6 f8eb 	bl	80015dc <_exit>

0800b406 <_malloc_usable_size_r>:
 800b406:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b40a:	1f18      	subs	r0, r3, #4
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	bfbc      	itt	lt
 800b410:	580b      	ldrlt	r3, [r1, r0]
 800b412:	18c0      	addlt	r0, r0, r3
 800b414:	4770      	bx	lr

0800b416 <__sfputc_r>:
 800b416:	6893      	ldr	r3, [r2, #8]
 800b418:	3b01      	subs	r3, #1
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	b410      	push	{r4}
 800b41e:	6093      	str	r3, [r2, #8]
 800b420:	da08      	bge.n	800b434 <__sfputc_r+0x1e>
 800b422:	6994      	ldr	r4, [r2, #24]
 800b424:	42a3      	cmp	r3, r4
 800b426:	db01      	blt.n	800b42c <__sfputc_r+0x16>
 800b428:	290a      	cmp	r1, #10
 800b42a:	d103      	bne.n	800b434 <__sfputc_r+0x1e>
 800b42c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b430:	f000 b932 	b.w	800b698 <__swbuf_r>
 800b434:	6813      	ldr	r3, [r2, #0]
 800b436:	1c58      	adds	r0, r3, #1
 800b438:	6010      	str	r0, [r2, #0]
 800b43a:	7019      	strb	r1, [r3, #0]
 800b43c:	4608      	mov	r0, r1
 800b43e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <__sfputs_r>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	4606      	mov	r6, r0
 800b448:	460f      	mov	r7, r1
 800b44a:	4614      	mov	r4, r2
 800b44c:	18d5      	adds	r5, r2, r3
 800b44e:	42ac      	cmp	r4, r5
 800b450:	d101      	bne.n	800b456 <__sfputs_r+0x12>
 800b452:	2000      	movs	r0, #0
 800b454:	e007      	b.n	800b466 <__sfputs_r+0x22>
 800b456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b45a:	463a      	mov	r2, r7
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff ffda 	bl	800b416 <__sfputc_r>
 800b462:	1c43      	adds	r3, r0, #1
 800b464:	d1f3      	bne.n	800b44e <__sfputs_r+0xa>
 800b466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b468 <_vfiprintf_r>:
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	460d      	mov	r5, r1
 800b46e:	b09d      	sub	sp, #116	@ 0x74
 800b470:	4614      	mov	r4, r2
 800b472:	4698      	mov	r8, r3
 800b474:	4606      	mov	r6, r0
 800b476:	b118      	cbz	r0, 800b480 <_vfiprintf_r+0x18>
 800b478:	6a03      	ldr	r3, [r0, #32]
 800b47a:	b90b      	cbnz	r3, 800b480 <_vfiprintf_r+0x18>
 800b47c:	f7fe f906 	bl	800968c <__sinit>
 800b480:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b482:	07d9      	lsls	r1, r3, #31
 800b484:	d405      	bmi.n	800b492 <_vfiprintf_r+0x2a>
 800b486:	89ab      	ldrh	r3, [r5, #12]
 800b488:	059a      	lsls	r2, r3, #22
 800b48a:	d402      	bmi.n	800b492 <_vfiprintf_r+0x2a>
 800b48c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b48e:	f7fe fa14 	bl	80098ba <__retarget_lock_acquire_recursive>
 800b492:	89ab      	ldrh	r3, [r5, #12]
 800b494:	071b      	lsls	r3, r3, #28
 800b496:	d501      	bpl.n	800b49c <_vfiprintf_r+0x34>
 800b498:	692b      	ldr	r3, [r5, #16]
 800b49a:	b99b      	cbnz	r3, 800b4c4 <_vfiprintf_r+0x5c>
 800b49c:	4629      	mov	r1, r5
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f000 f938 	bl	800b714 <__swsetup_r>
 800b4a4:	b170      	cbz	r0, 800b4c4 <_vfiprintf_r+0x5c>
 800b4a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4a8:	07dc      	lsls	r4, r3, #31
 800b4aa:	d504      	bpl.n	800b4b6 <_vfiprintf_r+0x4e>
 800b4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b0:	b01d      	add	sp, #116	@ 0x74
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	89ab      	ldrh	r3, [r5, #12]
 800b4b8:	0598      	lsls	r0, r3, #22
 800b4ba:	d4f7      	bmi.n	800b4ac <_vfiprintf_r+0x44>
 800b4bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4be:	f7fe f9fd 	bl	80098bc <__retarget_lock_release_recursive>
 800b4c2:	e7f3      	b.n	800b4ac <_vfiprintf_r+0x44>
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4c8:	2320      	movs	r3, #32
 800b4ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4d2:	2330      	movs	r3, #48	@ 0x30
 800b4d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b684 <_vfiprintf_r+0x21c>
 800b4d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4dc:	f04f 0901 	mov.w	r9, #1
 800b4e0:	4623      	mov	r3, r4
 800b4e2:	469a      	mov	sl, r3
 800b4e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4e8:	b10a      	cbz	r2, 800b4ee <_vfiprintf_r+0x86>
 800b4ea:	2a25      	cmp	r2, #37	@ 0x25
 800b4ec:	d1f9      	bne.n	800b4e2 <_vfiprintf_r+0x7a>
 800b4ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b4f2:	d00b      	beq.n	800b50c <_vfiprintf_r+0xa4>
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	4622      	mov	r2, r4
 800b4f8:	4629      	mov	r1, r5
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f7ff ffa2 	bl	800b444 <__sfputs_r>
 800b500:	3001      	adds	r0, #1
 800b502:	f000 80a7 	beq.w	800b654 <_vfiprintf_r+0x1ec>
 800b506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b508:	445a      	add	r2, fp
 800b50a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b50c:	f89a 3000 	ldrb.w	r3, [sl]
 800b510:	2b00      	cmp	r3, #0
 800b512:	f000 809f 	beq.w	800b654 <_vfiprintf_r+0x1ec>
 800b516:	2300      	movs	r3, #0
 800b518:	f04f 32ff 	mov.w	r2, #4294967295
 800b51c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b520:	f10a 0a01 	add.w	sl, sl, #1
 800b524:	9304      	str	r3, [sp, #16]
 800b526:	9307      	str	r3, [sp, #28]
 800b528:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b52c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b52e:	4654      	mov	r4, sl
 800b530:	2205      	movs	r2, #5
 800b532:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b536:	4853      	ldr	r0, [pc, #332]	@ (800b684 <_vfiprintf_r+0x21c>)
 800b538:	f7f4 fe52 	bl	80001e0 <memchr>
 800b53c:	9a04      	ldr	r2, [sp, #16]
 800b53e:	b9d8      	cbnz	r0, 800b578 <_vfiprintf_r+0x110>
 800b540:	06d1      	lsls	r1, r2, #27
 800b542:	bf44      	itt	mi
 800b544:	2320      	movmi	r3, #32
 800b546:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b54a:	0713      	lsls	r3, r2, #28
 800b54c:	bf44      	itt	mi
 800b54e:	232b      	movmi	r3, #43	@ 0x2b
 800b550:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b554:	f89a 3000 	ldrb.w	r3, [sl]
 800b558:	2b2a      	cmp	r3, #42	@ 0x2a
 800b55a:	d015      	beq.n	800b588 <_vfiprintf_r+0x120>
 800b55c:	9a07      	ldr	r2, [sp, #28]
 800b55e:	4654      	mov	r4, sl
 800b560:	2000      	movs	r0, #0
 800b562:	f04f 0c0a 	mov.w	ip, #10
 800b566:	4621      	mov	r1, r4
 800b568:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b56c:	3b30      	subs	r3, #48	@ 0x30
 800b56e:	2b09      	cmp	r3, #9
 800b570:	d94b      	bls.n	800b60a <_vfiprintf_r+0x1a2>
 800b572:	b1b0      	cbz	r0, 800b5a2 <_vfiprintf_r+0x13a>
 800b574:	9207      	str	r2, [sp, #28]
 800b576:	e014      	b.n	800b5a2 <_vfiprintf_r+0x13a>
 800b578:	eba0 0308 	sub.w	r3, r0, r8
 800b57c:	fa09 f303 	lsl.w	r3, r9, r3
 800b580:	4313      	orrs	r3, r2
 800b582:	9304      	str	r3, [sp, #16]
 800b584:	46a2      	mov	sl, r4
 800b586:	e7d2      	b.n	800b52e <_vfiprintf_r+0xc6>
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	1d19      	adds	r1, r3, #4
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	9103      	str	r1, [sp, #12]
 800b590:	2b00      	cmp	r3, #0
 800b592:	bfbb      	ittet	lt
 800b594:	425b      	neglt	r3, r3
 800b596:	f042 0202 	orrlt.w	r2, r2, #2
 800b59a:	9307      	strge	r3, [sp, #28]
 800b59c:	9307      	strlt	r3, [sp, #28]
 800b59e:	bfb8      	it	lt
 800b5a0:	9204      	strlt	r2, [sp, #16]
 800b5a2:	7823      	ldrb	r3, [r4, #0]
 800b5a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b5a6:	d10a      	bne.n	800b5be <_vfiprintf_r+0x156>
 800b5a8:	7863      	ldrb	r3, [r4, #1]
 800b5aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5ac:	d132      	bne.n	800b614 <_vfiprintf_r+0x1ac>
 800b5ae:	9b03      	ldr	r3, [sp, #12]
 800b5b0:	1d1a      	adds	r2, r3, #4
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	9203      	str	r2, [sp, #12]
 800b5b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5ba:	3402      	adds	r4, #2
 800b5bc:	9305      	str	r3, [sp, #20]
 800b5be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b694 <_vfiprintf_r+0x22c>
 800b5c2:	7821      	ldrb	r1, [r4, #0]
 800b5c4:	2203      	movs	r2, #3
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	f7f4 fe0a 	bl	80001e0 <memchr>
 800b5cc:	b138      	cbz	r0, 800b5de <_vfiprintf_r+0x176>
 800b5ce:	9b04      	ldr	r3, [sp, #16]
 800b5d0:	eba0 000a 	sub.w	r0, r0, sl
 800b5d4:	2240      	movs	r2, #64	@ 0x40
 800b5d6:	4082      	lsls	r2, r0
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	3401      	adds	r4, #1
 800b5dc:	9304      	str	r3, [sp, #16]
 800b5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5e2:	4829      	ldr	r0, [pc, #164]	@ (800b688 <_vfiprintf_r+0x220>)
 800b5e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5e8:	2206      	movs	r2, #6
 800b5ea:	f7f4 fdf9 	bl	80001e0 <memchr>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d03f      	beq.n	800b672 <_vfiprintf_r+0x20a>
 800b5f2:	4b26      	ldr	r3, [pc, #152]	@ (800b68c <_vfiprintf_r+0x224>)
 800b5f4:	bb1b      	cbnz	r3, 800b63e <_vfiprintf_r+0x1d6>
 800b5f6:	9b03      	ldr	r3, [sp, #12]
 800b5f8:	3307      	adds	r3, #7
 800b5fa:	f023 0307 	bic.w	r3, r3, #7
 800b5fe:	3308      	adds	r3, #8
 800b600:	9303      	str	r3, [sp, #12]
 800b602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b604:	443b      	add	r3, r7
 800b606:	9309      	str	r3, [sp, #36]	@ 0x24
 800b608:	e76a      	b.n	800b4e0 <_vfiprintf_r+0x78>
 800b60a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b60e:	460c      	mov	r4, r1
 800b610:	2001      	movs	r0, #1
 800b612:	e7a8      	b.n	800b566 <_vfiprintf_r+0xfe>
 800b614:	2300      	movs	r3, #0
 800b616:	3401      	adds	r4, #1
 800b618:	9305      	str	r3, [sp, #20]
 800b61a:	4619      	mov	r1, r3
 800b61c:	f04f 0c0a 	mov.w	ip, #10
 800b620:	4620      	mov	r0, r4
 800b622:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b626:	3a30      	subs	r2, #48	@ 0x30
 800b628:	2a09      	cmp	r2, #9
 800b62a:	d903      	bls.n	800b634 <_vfiprintf_r+0x1cc>
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d0c6      	beq.n	800b5be <_vfiprintf_r+0x156>
 800b630:	9105      	str	r1, [sp, #20]
 800b632:	e7c4      	b.n	800b5be <_vfiprintf_r+0x156>
 800b634:	fb0c 2101 	mla	r1, ip, r1, r2
 800b638:	4604      	mov	r4, r0
 800b63a:	2301      	movs	r3, #1
 800b63c:	e7f0      	b.n	800b620 <_vfiprintf_r+0x1b8>
 800b63e:	ab03      	add	r3, sp, #12
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	462a      	mov	r2, r5
 800b644:	4b12      	ldr	r3, [pc, #72]	@ (800b690 <_vfiprintf_r+0x228>)
 800b646:	a904      	add	r1, sp, #16
 800b648:	4630      	mov	r0, r6
 800b64a:	f7fd fbdb 	bl	8008e04 <_printf_float>
 800b64e:	4607      	mov	r7, r0
 800b650:	1c78      	adds	r0, r7, #1
 800b652:	d1d6      	bne.n	800b602 <_vfiprintf_r+0x19a>
 800b654:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b656:	07d9      	lsls	r1, r3, #31
 800b658:	d405      	bmi.n	800b666 <_vfiprintf_r+0x1fe>
 800b65a:	89ab      	ldrh	r3, [r5, #12]
 800b65c:	059a      	lsls	r2, r3, #22
 800b65e:	d402      	bmi.n	800b666 <_vfiprintf_r+0x1fe>
 800b660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b662:	f7fe f92b 	bl	80098bc <__retarget_lock_release_recursive>
 800b666:	89ab      	ldrh	r3, [r5, #12]
 800b668:	065b      	lsls	r3, r3, #25
 800b66a:	f53f af1f 	bmi.w	800b4ac <_vfiprintf_r+0x44>
 800b66e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b670:	e71e      	b.n	800b4b0 <_vfiprintf_r+0x48>
 800b672:	ab03      	add	r3, sp, #12
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	462a      	mov	r2, r5
 800b678:	4b05      	ldr	r3, [pc, #20]	@ (800b690 <_vfiprintf_r+0x228>)
 800b67a:	a904      	add	r1, sp, #16
 800b67c:	4630      	mov	r0, r6
 800b67e:	f7fd fe59 	bl	8009334 <_printf_i>
 800b682:	e7e4      	b.n	800b64e <_vfiprintf_r+0x1e6>
 800b684:	0800caa8 	.word	0x0800caa8
 800b688:	0800cab2 	.word	0x0800cab2
 800b68c:	08008e05 	.word	0x08008e05
 800b690:	0800b445 	.word	0x0800b445
 800b694:	0800caae 	.word	0x0800caae

0800b698 <__swbuf_r>:
 800b698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b69a:	460e      	mov	r6, r1
 800b69c:	4614      	mov	r4, r2
 800b69e:	4605      	mov	r5, r0
 800b6a0:	b118      	cbz	r0, 800b6aa <__swbuf_r+0x12>
 800b6a2:	6a03      	ldr	r3, [r0, #32]
 800b6a4:	b90b      	cbnz	r3, 800b6aa <__swbuf_r+0x12>
 800b6a6:	f7fd fff1 	bl	800968c <__sinit>
 800b6aa:	69a3      	ldr	r3, [r4, #24]
 800b6ac:	60a3      	str	r3, [r4, #8]
 800b6ae:	89a3      	ldrh	r3, [r4, #12]
 800b6b0:	071a      	lsls	r2, r3, #28
 800b6b2:	d501      	bpl.n	800b6b8 <__swbuf_r+0x20>
 800b6b4:	6923      	ldr	r3, [r4, #16]
 800b6b6:	b943      	cbnz	r3, 800b6ca <__swbuf_r+0x32>
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	f000 f82a 	bl	800b714 <__swsetup_r>
 800b6c0:	b118      	cbz	r0, 800b6ca <__swbuf_r+0x32>
 800b6c2:	f04f 37ff 	mov.w	r7, #4294967295
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6ca:	6823      	ldr	r3, [r4, #0]
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	1a98      	subs	r0, r3, r2
 800b6d0:	6963      	ldr	r3, [r4, #20]
 800b6d2:	b2f6      	uxtb	r6, r6
 800b6d4:	4283      	cmp	r3, r0
 800b6d6:	4637      	mov	r7, r6
 800b6d8:	dc05      	bgt.n	800b6e6 <__swbuf_r+0x4e>
 800b6da:	4621      	mov	r1, r4
 800b6dc:	4628      	mov	r0, r5
 800b6de:	f7ff fd99 	bl	800b214 <_fflush_r>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d1ed      	bne.n	800b6c2 <__swbuf_r+0x2a>
 800b6e6:	68a3      	ldr	r3, [r4, #8]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	60a3      	str	r3, [r4, #8]
 800b6ec:	6823      	ldr	r3, [r4, #0]
 800b6ee:	1c5a      	adds	r2, r3, #1
 800b6f0:	6022      	str	r2, [r4, #0]
 800b6f2:	701e      	strb	r6, [r3, #0]
 800b6f4:	6962      	ldr	r2, [r4, #20]
 800b6f6:	1c43      	adds	r3, r0, #1
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d004      	beq.n	800b706 <__swbuf_r+0x6e>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	07db      	lsls	r3, r3, #31
 800b700:	d5e1      	bpl.n	800b6c6 <__swbuf_r+0x2e>
 800b702:	2e0a      	cmp	r6, #10
 800b704:	d1df      	bne.n	800b6c6 <__swbuf_r+0x2e>
 800b706:	4621      	mov	r1, r4
 800b708:	4628      	mov	r0, r5
 800b70a:	f7ff fd83 	bl	800b214 <_fflush_r>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d0d9      	beq.n	800b6c6 <__swbuf_r+0x2e>
 800b712:	e7d6      	b.n	800b6c2 <__swbuf_r+0x2a>

0800b714 <__swsetup_r>:
 800b714:	b538      	push	{r3, r4, r5, lr}
 800b716:	4b29      	ldr	r3, [pc, #164]	@ (800b7bc <__swsetup_r+0xa8>)
 800b718:	4605      	mov	r5, r0
 800b71a:	6818      	ldr	r0, [r3, #0]
 800b71c:	460c      	mov	r4, r1
 800b71e:	b118      	cbz	r0, 800b728 <__swsetup_r+0x14>
 800b720:	6a03      	ldr	r3, [r0, #32]
 800b722:	b90b      	cbnz	r3, 800b728 <__swsetup_r+0x14>
 800b724:	f7fd ffb2 	bl	800968c <__sinit>
 800b728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72c:	0719      	lsls	r1, r3, #28
 800b72e:	d422      	bmi.n	800b776 <__swsetup_r+0x62>
 800b730:	06da      	lsls	r2, r3, #27
 800b732:	d407      	bmi.n	800b744 <__swsetup_r+0x30>
 800b734:	2209      	movs	r2, #9
 800b736:	602a      	str	r2, [r5, #0]
 800b738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b73c:	81a3      	strh	r3, [r4, #12]
 800b73e:	f04f 30ff 	mov.w	r0, #4294967295
 800b742:	e033      	b.n	800b7ac <__swsetup_r+0x98>
 800b744:	0758      	lsls	r0, r3, #29
 800b746:	d512      	bpl.n	800b76e <__swsetup_r+0x5a>
 800b748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b74a:	b141      	cbz	r1, 800b75e <__swsetup_r+0x4a>
 800b74c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b750:	4299      	cmp	r1, r3
 800b752:	d002      	beq.n	800b75a <__swsetup_r+0x46>
 800b754:	4628      	mov	r0, r5
 800b756:	f7fe feff 	bl	800a558 <_free_r>
 800b75a:	2300      	movs	r3, #0
 800b75c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	2300      	movs	r3, #0
 800b768:	6063      	str	r3, [r4, #4]
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f043 0308 	orr.w	r3, r3, #8
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	6923      	ldr	r3, [r4, #16]
 800b778:	b94b      	cbnz	r3, 800b78e <__swsetup_r+0x7a>
 800b77a:	89a3      	ldrh	r3, [r4, #12]
 800b77c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b784:	d003      	beq.n	800b78e <__swsetup_r+0x7a>
 800b786:	4621      	mov	r1, r4
 800b788:	4628      	mov	r0, r5
 800b78a:	f000 f883 	bl	800b894 <__smakebuf_r>
 800b78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b792:	f013 0201 	ands.w	r2, r3, #1
 800b796:	d00a      	beq.n	800b7ae <__swsetup_r+0x9a>
 800b798:	2200      	movs	r2, #0
 800b79a:	60a2      	str	r2, [r4, #8]
 800b79c:	6962      	ldr	r2, [r4, #20]
 800b79e:	4252      	negs	r2, r2
 800b7a0:	61a2      	str	r2, [r4, #24]
 800b7a2:	6922      	ldr	r2, [r4, #16]
 800b7a4:	b942      	cbnz	r2, 800b7b8 <__swsetup_r+0xa4>
 800b7a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7aa:	d1c5      	bne.n	800b738 <__swsetup_r+0x24>
 800b7ac:	bd38      	pop	{r3, r4, r5, pc}
 800b7ae:	0799      	lsls	r1, r3, #30
 800b7b0:	bf58      	it	pl
 800b7b2:	6962      	ldrpl	r2, [r4, #20]
 800b7b4:	60a2      	str	r2, [r4, #8]
 800b7b6:	e7f4      	b.n	800b7a2 <__swsetup_r+0x8e>
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	e7f7      	b.n	800b7ac <__swsetup_r+0x98>
 800b7bc:	20000108 	.word	0x20000108

0800b7c0 <_raise_r>:
 800b7c0:	291f      	cmp	r1, #31
 800b7c2:	b538      	push	{r3, r4, r5, lr}
 800b7c4:	4605      	mov	r5, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	d904      	bls.n	800b7d4 <_raise_r+0x14>
 800b7ca:	2316      	movs	r3, #22
 800b7cc:	6003      	str	r3, [r0, #0]
 800b7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7d6:	b112      	cbz	r2, 800b7de <_raise_r+0x1e>
 800b7d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7dc:	b94b      	cbnz	r3, 800b7f2 <_raise_r+0x32>
 800b7de:	4628      	mov	r0, r5
 800b7e0:	f000 f830 	bl	800b844 <_getpid_r>
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4601      	mov	r1, r0
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7ee:	f000 b817 	b.w	800b820 <_kill_r>
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d00a      	beq.n	800b80c <_raise_r+0x4c>
 800b7f6:	1c59      	adds	r1, r3, #1
 800b7f8:	d103      	bne.n	800b802 <_raise_r+0x42>
 800b7fa:	2316      	movs	r3, #22
 800b7fc:	6003      	str	r3, [r0, #0]
 800b7fe:	2001      	movs	r0, #1
 800b800:	e7e7      	b.n	800b7d2 <_raise_r+0x12>
 800b802:	2100      	movs	r1, #0
 800b804:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b808:	4620      	mov	r0, r4
 800b80a:	4798      	blx	r3
 800b80c:	2000      	movs	r0, #0
 800b80e:	e7e0      	b.n	800b7d2 <_raise_r+0x12>

0800b810 <raise>:
 800b810:	4b02      	ldr	r3, [pc, #8]	@ (800b81c <raise+0xc>)
 800b812:	4601      	mov	r1, r0
 800b814:	6818      	ldr	r0, [r3, #0]
 800b816:	f7ff bfd3 	b.w	800b7c0 <_raise_r>
 800b81a:	bf00      	nop
 800b81c:	20000108 	.word	0x20000108

0800b820 <_kill_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d07      	ldr	r5, [pc, #28]	@ (800b840 <_kill_r+0x20>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	4611      	mov	r1, r2
 800b82c:	602b      	str	r3, [r5, #0]
 800b82e:	f7f5 fec5 	bl	80015bc <_kill>
 800b832:	1c43      	adds	r3, r0, #1
 800b834:	d102      	bne.n	800b83c <_kill_r+0x1c>
 800b836:	682b      	ldr	r3, [r5, #0]
 800b838:	b103      	cbz	r3, 800b83c <_kill_r+0x1c>
 800b83a:	6023      	str	r3, [r4, #0]
 800b83c:	bd38      	pop	{r3, r4, r5, pc}
 800b83e:	bf00      	nop
 800b840:	20002100 	.word	0x20002100

0800b844 <_getpid_r>:
 800b844:	f7f5 beb2 	b.w	80015ac <_getpid>

0800b848 <__swhatbuf_r>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	460c      	mov	r4, r1
 800b84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b850:	2900      	cmp	r1, #0
 800b852:	b096      	sub	sp, #88	@ 0x58
 800b854:	4615      	mov	r5, r2
 800b856:	461e      	mov	r6, r3
 800b858:	da0d      	bge.n	800b876 <__swhatbuf_r+0x2e>
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b860:	f04f 0100 	mov.w	r1, #0
 800b864:	bf14      	ite	ne
 800b866:	2340      	movne	r3, #64	@ 0x40
 800b868:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b86c:	2000      	movs	r0, #0
 800b86e:	6031      	str	r1, [r6, #0]
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	b016      	add	sp, #88	@ 0x58
 800b874:	bd70      	pop	{r4, r5, r6, pc}
 800b876:	466a      	mov	r2, sp
 800b878:	f000 f848 	bl	800b90c <_fstat_r>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	dbec      	blt.n	800b85a <__swhatbuf_r+0x12>
 800b880:	9901      	ldr	r1, [sp, #4]
 800b882:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b886:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b88a:	4259      	negs	r1, r3
 800b88c:	4159      	adcs	r1, r3
 800b88e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b892:	e7eb      	b.n	800b86c <__swhatbuf_r+0x24>

0800b894 <__smakebuf_r>:
 800b894:	898b      	ldrh	r3, [r1, #12]
 800b896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b898:	079d      	lsls	r5, r3, #30
 800b89a:	4606      	mov	r6, r0
 800b89c:	460c      	mov	r4, r1
 800b89e:	d507      	bpl.n	800b8b0 <__smakebuf_r+0x1c>
 800b8a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	6123      	str	r3, [r4, #16]
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	6163      	str	r3, [r4, #20]
 800b8ac:	b003      	add	sp, #12
 800b8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b0:	ab01      	add	r3, sp, #4
 800b8b2:	466a      	mov	r2, sp
 800b8b4:	f7ff ffc8 	bl	800b848 <__swhatbuf_r>
 800b8b8:	9f00      	ldr	r7, [sp, #0]
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	4639      	mov	r1, r7
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7fe febe 	bl	800a640 <_malloc_r>
 800b8c4:	b948      	cbnz	r0, 800b8da <__smakebuf_r+0x46>
 800b8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ca:	059a      	lsls	r2, r3, #22
 800b8cc:	d4ee      	bmi.n	800b8ac <__smakebuf_r+0x18>
 800b8ce:	f023 0303 	bic.w	r3, r3, #3
 800b8d2:	f043 0302 	orr.w	r3, r3, #2
 800b8d6:	81a3      	strh	r3, [r4, #12]
 800b8d8:	e7e2      	b.n	800b8a0 <__smakebuf_r+0xc>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	6020      	str	r0, [r4, #0]
 800b8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8ea:	b15b      	cbz	r3, 800b904 <__smakebuf_r+0x70>
 800b8ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f000 f81d 	bl	800b930 <_isatty_r>
 800b8f6:	b128      	cbz	r0, 800b904 <__smakebuf_r+0x70>
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f023 0303 	bic.w	r3, r3, #3
 800b8fe:	f043 0301 	orr.w	r3, r3, #1
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	431d      	orrs	r5, r3
 800b908:	81a5      	strh	r5, [r4, #12]
 800b90a:	e7cf      	b.n	800b8ac <__smakebuf_r+0x18>

0800b90c <_fstat_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	@ (800b92c <_fstat_r+0x20>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	f7f5 feaf 	bl	800167c <_fstat>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d102      	bne.n	800b928 <_fstat_r+0x1c>
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	b103      	cbz	r3, 800b928 <_fstat_r+0x1c>
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	bf00      	nop
 800b92c:	20002100 	.word	0x20002100

0800b930 <_isatty_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4d06      	ldr	r5, [pc, #24]	@ (800b94c <_isatty_r+0x1c>)
 800b934:	2300      	movs	r3, #0
 800b936:	4604      	mov	r4, r0
 800b938:	4608      	mov	r0, r1
 800b93a:	602b      	str	r3, [r5, #0]
 800b93c:	f7f5 feae 	bl	800169c <_isatty>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_isatty_r+0x1a>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_isatty_r+0x1a>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	20002100 	.word	0x20002100

0800b950 <pow>:
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b952:	ed2d 8b02 	vpush	{d8}
 800b956:	eeb0 8a40 	vmov.f32	s16, s0
 800b95a:	eef0 8a60 	vmov.f32	s17, s1
 800b95e:	ec55 4b11 	vmov	r4, r5, d1
 800b962:	f000 f871 	bl	800ba48 <__ieee754_pow>
 800b966:	4622      	mov	r2, r4
 800b968:	462b      	mov	r3, r5
 800b96a:	4620      	mov	r0, r4
 800b96c:	4629      	mov	r1, r5
 800b96e:	ec57 6b10 	vmov	r6, r7, d0
 800b972:	f7f5 f8e3 	bl	8000b3c <__aeabi_dcmpun>
 800b976:	2800      	cmp	r0, #0
 800b978:	d13b      	bne.n	800b9f2 <pow+0xa2>
 800b97a:	ec51 0b18 	vmov	r0, r1, d8
 800b97e:	2200      	movs	r2, #0
 800b980:	2300      	movs	r3, #0
 800b982:	f7f5 f8a9 	bl	8000ad8 <__aeabi_dcmpeq>
 800b986:	b1b8      	cbz	r0, 800b9b8 <pow+0x68>
 800b988:	2200      	movs	r2, #0
 800b98a:	2300      	movs	r3, #0
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	f7f5 f8a2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b994:	2800      	cmp	r0, #0
 800b996:	d146      	bne.n	800ba26 <pow+0xd6>
 800b998:	ec45 4b10 	vmov	d0, r4, r5
 800b99c:	f000 f848 	bl	800ba30 <finite>
 800b9a0:	b338      	cbz	r0, 800b9f2 <pow+0xa2>
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4620      	mov	r0, r4
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	f7f5 f89f 	bl	8000aec <__aeabi_dcmplt>
 800b9ae:	b300      	cbz	r0, 800b9f2 <pow+0xa2>
 800b9b0:	f7fd ff58 	bl	8009864 <__errno>
 800b9b4:	2322      	movs	r3, #34	@ 0x22
 800b9b6:	e01b      	b.n	800b9f0 <pow+0xa0>
 800b9b8:	ec47 6b10 	vmov	d0, r6, r7
 800b9bc:	f000 f838 	bl	800ba30 <finite>
 800b9c0:	b9e0      	cbnz	r0, 800b9fc <pow+0xac>
 800b9c2:	eeb0 0a48 	vmov.f32	s0, s16
 800b9c6:	eef0 0a68 	vmov.f32	s1, s17
 800b9ca:	f000 f831 	bl	800ba30 <finite>
 800b9ce:	b1a8      	cbz	r0, 800b9fc <pow+0xac>
 800b9d0:	ec45 4b10 	vmov	d0, r4, r5
 800b9d4:	f000 f82c 	bl	800ba30 <finite>
 800b9d8:	b180      	cbz	r0, 800b9fc <pow+0xac>
 800b9da:	4632      	mov	r2, r6
 800b9dc:	463b      	mov	r3, r7
 800b9de:	4630      	mov	r0, r6
 800b9e0:	4639      	mov	r1, r7
 800b9e2:	f7f5 f8ab 	bl	8000b3c <__aeabi_dcmpun>
 800b9e6:	2800      	cmp	r0, #0
 800b9e8:	d0e2      	beq.n	800b9b0 <pow+0x60>
 800b9ea:	f7fd ff3b 	bl	8009864 <__errno>
 800b9ee:	2321      	movs	r3, #33	@ 0x21
 800b9f0:	6003      	str	r3, [r0, #0]
 800b9f2:	ecbd 8b02 	vpop	{d8}
 800b9f6:	ec47 6b10 	vmov	d0, r6, r7
 800b9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	2300      	movs	r3, #0
 800ba00:	4630      	mov	r0, r6
 800ba02:	4639      	mov	r1, r7
 800ba04:	f7f5 f868 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d0f2      	beq.n	800b9f2 <pow+0xa2>
 800ba0c:	eeb0 0a48 	vmov.f32	s0, s16
 800ba10:	eef0 0a68 	vmov.f32	s1, s17
 800ba14:	f000 f80c 	bl	800ba30 <finite>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d0ea      	beq.n	800b9f2 <pow+0xa2>
 800ba1c:	ec45 4b10 	vmov	d0, r4, r5
 800ba20:	f000 f806 	bl	800ba30 <finite>
 800ba24:	e7c3      	b.n	800b9ae <pow+0x5e>
 800ba26:	4f01      	ldr	r7, [pc, #4]	@ (800ba2c <pow+0xdc>)
 800ba28:	2600      	movs	r6, #0
 800ba2a:	e7e2      	b.n	800b9f2 <pow+0xa2>
 800ba2c:	3ff00000 	.word	0x3ff00000

0800ba30 <finite>:
 800ba30:	b082      	sub	sp, #8
 800ba32:	ed8d 0b00 	vstr	d0, [sp]
 800ba36:	9801      	ldr	r0, [sp, #4]
 800ba38:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ba3c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ba40:	0fc0      	lsrs	r0, r0, #31
 800ba42:	b002      	add	sp, #8
 800ba44:	4770      	bx	lr
	...

0800ba48 <__ieee754_pow>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	b091      	sub	sp, #68	@ 0x44
 800ba4e:	ed8d 1b00 	vstr	d1, [sp]
 800ba52:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ba56:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ba5a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ba5e:	ec57 6b10 	vmov	r6, r7, d0
 800ba62:	d113      	bne.n	800ba8c <__ieee754_pow+0x44>
 800ba64:	19b3      	adds	r3, r6, r6
 800ba66:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ba6a:	4152      	adcs	r2, r2
 800ba6c:	4298      	cmp	r0, r3
 800ba6e:	4b98      	ldr	r3, [pc, #608]	@ (800bcd0 <__ieee754_pow+0x288>)
 800ba70:	4193      	sbcs	r3, r2
 800ba72:	f080 84ea 	bcs.w	800c44a <__ieee754_pow+0xa02>
 800ba76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba7a:	4630      	mov	r0, r6
 800ba7c:	4639      	mov	r1, r7
 800ba7e:	f7f4 fc0d 	bl	800029c <__adddf3>
 800ba82:	ec41 0b10 	vmov	d0, r0, r1
 800ba86:	b011      	add	sp, #68	@ 0x44
 800ba88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8c:	4a91      	ldr	r2, [pc, #580]	@ (800bcd4 <__ieee754_pow+0x28c>)
 800ba8e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ba92:	4590      	cmp	r8, r2
 800ba94:	463d      	mov	r5, r7
 800ba96:	4633      	mov	r3, r6
 800ba98:	d806      	bhi.n	800baa8 <__ieee754_pow+0x60>
 800ba9a:	d101      	bne.n	800baa0 <__ieee754_pow+0x58>
 800ba9c:	2e00      	cmp	r6, #0
 800ba9e:	d1ea      	bne.n	800ba76 <__ieee754_pow+0x2e>
 800baa0:	4592      	cmp	sl, r2
 800baa2:	d801      	bhi.n	800baa8 <__ieee754_pow+0x60>
 800baa4:	d10e      	bne.n	800bac4 <__ieee754_pow+0x7c>
 800baa6:	b169      	cbz	r1, 800bac4 <__ieee754_pow+0x7c>
 800baa8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800baac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bab0:	431d      	orrs	r5, r3
 800bab2:	d1e0      	bne.n	800ba76 <__ieee754_pow+0x2e>
 800bab4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bab8:	18db      	adds	r3, r3, r3
 800baba:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800babe:	4152      	adcs	r2, r2
 800bac0:	429d      	cmp	r5, r3
 800bac2:	e7d4      	b.n	800ba6e <__ieee754_pow+0x26>
 800bac4:	2d00      	cmp	r5, #0
 800bac6:	46c3      	mov	fp, r8
 800bac8:	da3a      	bge.n	800bb40 <__ieee754_pow+0xf8>
 800baca:	4a83      	ldr	r2, [pc, #524]	@ (800bcd8 <__ieee754_pow+0x290>)
 800bacc:	4592      	cmp	sl, r2
 800bace:	d84d      	bhi.n	800bb6c <__ieee754_pow+0x124>
 800bad0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bad4:	4592      	cmp	sl, r2
 800bad6:	f240 84c7 	bls.w	800c468 <__ieee754_pow+0xa20>
 800bada:	ea4f 522a 	mov.w	r2, sl, asr #20
 800bade:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bae2:	2a14      	cmp	r2, #20
 800bae4:	dd0f      	ble.n	800bb06 <__ieee754_pow+0xbe>
 800bae6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800baea:	fa21 f402 	lsr.w	r4, r1, r2
 800baee:	fa04 f202 	lsl.w	r2, r4, r2
 800baf2:	428a      	cmp	r2, r1
 800baf4:	f040 84b8 	bne.w	800c468 <__ieee754_pow+0xa20>
 800baf8:	f004 0401 	and.w	r4, r4, #1
 800bafc:	f1c4 0402 	rsb	r4, r4, #2
 800bb00:	2900      	cmp	r1, #0
 800bb02:	d158      	bne.n	800bbb6 <__ieee754_pow+0x16e>
 800bb04:	e00e      	b.n	800bb24 <__ieee754_pow+0xdc>
 800bb06:	2900      	cmp	r1, #0
 800bb08:	d154      	bne.n	800bbb4 <__ieee754_pow+0x16c>
 800bb0a:	f1c2 0214 	rsb	r2, r2, #20
 800bb0e:	fa4a f402 	asr.w	r4, sl, r2
 800bb12:	fa04 f202 	lsl.w	r2, r4, r2
 800bb16:	4552      	cmp	r2, sl
 800bb18:	f040 84a3 	bne.w	800c462 <__ieee754_pow+0xa1a>
 800bb1c:	f004 0401 	and.w	r4, r4, #1
 800bb20:	f1c4 0402 	rsb	r4, r4, #2
 800bb24:	4a6d      	ldr	r2, [pc, #436]	@ (800bcdc <__ieee754_pow+0x294>)
 800bb26:	4592      	cmp	sl, r2
 800bb28:	d12e      	bne.n	800bb88 <__ieee754_pow+0x140>
 800bb2a:	f1b9 0f00 	cmp.w	r9, #0
 800bb2e:	f280 8494 	bge.w	800c45a <__ieee754_pow+0xa12>
 800bb32:	496a      	ldr	r1, [pc, #424]	@ (800bcdc <__ieee754_pow+0x294>)
 800bb34:	4632      	mov	r2, r6
 800bb36:	463b      	mov	r3, r7
 800bb38:	2000      	movs	r0, #0
 800bb3a:	f7f4 fe8f 	bl	800085c <__aeabi_ddiv>
 800bb3e:	e7a0      	b.n	800ba82 <__ieee754_pow+0x3a>
 800bb40:	2400      	movs	r4, #0
 800bb42:	bbc1      	cbnz	r1, 800bbb6 <__ieee754_pow+0x16e>
 800bb44:	4a63      	ldr	r2, [pc, #396]	@ (800bcd4 <__ieee754_pow+0x28c>)
 800bb46:	4592      	cmp	sl, r2
 800bb48:	d1ec      	bne.n	800bb24 <__ieee754_pow+0xdc>
 800bb4a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bb4e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bb52:	431a      	orrs	r2, r3
 800bb54:	f000 8479 	beq.w	800c44a <__ieee754_pow+0xa02>
 800bb58:	4b61      	ldr	r3, [pc, #388]	@ (800bce0 <__ieee754_pow+0x298>)
 800bb5a:	4598      	cmp	r8, r3
 800bb5c:	d908      	bls.n	800bb70 <__ieee754_pow+0x128>
 800bb5e:	f1b9 0f00 	cmp.w	r9, #0
 800bb62:	f2c0 8476 	blt.w	800c452 <__ieee754_pow+0xa0a>
 800bb66:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb6a:	e78a      	b.n	800ba82 <__ieee754_pow+0x3a>
 800bb6c:	2402      	movs	r4, #2
 800bb6e:	e7e8      	b.n	800bb42 <__ieee754_pow+0xfa>
 800bb70:	f1b9 0f00 	cmp.w	r9, #0
 800bb74:	f04f 0000 	mov.w	r0, #0
 800bb78:	f04f 0100 	mov.w	r1, #0
 800bb7c:	da81      	bge.n	800ba82 <__ieee754_pow+0x3a>
 800bb7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bb82:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bb86:	e77c      	b.n	800ba82 <__ieee754_pow+0x3a>
 800bb88:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bb8c:	d106      	bne.n	800bb9c <__ieee754_pow+0x154>
 800bb8e:	4632      	mov	r2, r6
 800bb90:	463b      	mov	r3, r7
 800bb92:	4630      	mov	r0, r6
 800bb94:	4639      	mov	r1, r7
 800bb96:	f7f4 fd37 	bl	8000608 <__aeabi_dmul>
 800bb9a:	e772      	b.n	800ba82 <__ieee754_pow+0x3a>
 800bb9c:	4a51      	ldr	r2, [pc, #324]	@ (800bce4 <__ieee754_pow+0x29c>)
 800bb9e:	4591      	cmp	r9, r2
 800bba0:	d109      	bne.n	800bbb6 <__ieee754_pow+0x16e>
 800bba2:	2d00      	cmp	r5, #0
 800bba4:	db07      	blt.n	800bbb6 <__ieee754_pow+0x16e>
 800bba6:	ec47 6b10 	vmov	d0, r6, r7
 800bbaa:	b011      	add	sp, #68	@ 0x44
 800bbac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb0:	f000 bd52 	b.w	800c658 <__ieee754_sqrt>
 800bbb4:	2400      	movs	r4, #0
 800bbb6:	ec47 6b10 	vmov	d0, r6, r7
 800bbba:	9302      	str	r3, [sp, #8]
 800bbbc:	f000 fc88 	bl	800c4d0 <fabs>
 800bbc0:	9b02      	ldr	r3, [sp, #8]
 800bbc2:	ec51 0b10 	vmov	r0, r1, d0
 800bbc6:	bb53      	cbnz	r3, 800bc1e <__ieee754_pow+0x1d6>
 800bbc8:	4b44      	ldr	r3, [pc, #272]	@ (800bcdc <__ieee754_pow+0x294>)
 800bbca:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d002      	beq.n	800bbd8 <__ieee754_pow+0x190>
 800bbd2:	f1b8 0f00 	cmp.w	r8, #0
 800bbd6:	d122      	bne.n	800bc1e <__ieee754_pow+0x1d6>
 800bbd8:	f1b9 0f00 	cmp.w	r9, #0
 800bbdc:	da05      	bge.n	800bbea <__ieee754_pow+0x1a2>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	2000      	movs	r0, #0
 800bbe4:	493d      	ldr	r1, [pc, #244]	@ (800bcdc <__ieee754_pow+0x294>)
 800bbe6:	f7f4 fe39 	bl	800085c <__aeabi_ddiv>
 800bbea:	2d00      	cmp	r5, #0
 800bbec:	f6bf af49 	bge.w	800ba82 <__ieee754_pow+0x3a>
 800bbf0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bbf4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bbf8:	ea58 0804 	orrs.w	r8, r8, r4
 800bbfc:	d108      	bne.n	800bc10 <__ieee754_pow+0x1c8>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4610      	mov	r0, r2
 800bc04:	4619      	mov	r1, r3
 800bc06:	f7f4 fb47 	bl	8000298 <__aeabi_dsub>
 800bc0a:	4602      	mov	r2, r0
 800bc0c:	460b      	mov	r3, r1
 800bc0e:	e794      	b.n	800bb3a <__ieee754_pow+0xf2>
 800bc10:	2c01      	cmp	r4, #1
 800bc12:	f47f af36 	bne.w	800ba82 <__ieee754_pow+0x3a>
 800bc16:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	e731      	b.n	800ba82 <__ieee754_pow+0x3a>
 800bc1e:	0feb      	lsrs	r3, r5, #31
 800bc20:	3b01      	subs	r3, #1
 800bc22:	ea53 0204 	orrs.w	r2, r3, r4
 800bc26:	d102      	bne.n	800bc2e <__ieee754_pow+0x1e6>
 800bc28:	4632      	mov	r2, r6
 800bc2a:	463b      	mov	r3, r7
 800bc2c:	e7e9      	b.n	800bc02 <__ieee754_pow+0x1ba>
 800bc2e:	3c01      	subs	r4, #1
 800bc30:	431c      	orrs	r4, r3
 800bc32:	d016      	beq.n	800bc62 <__ieee754_pow+0x21a>
 800bc34:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800bcc0 <__ieee754_pow+0x278>
 800bc38:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800bc3c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bc40:	f240 8112 	bls.w	800be68 <__ieee754_pow+0x420>
 800bc44:	4b28      	ldr	r3, [pc, #160]	@ (800bce8 <__ieee754_pow+0x2a0>)
 800bc46:	459a      	cmp	sl, r3
 800bc48:	4b25      	ldr	r3, [pc, #148]	@ (800bce0 <__ieee754_pow+0x298>)
 800bc4a:	d916      	bls.n	800bc7a <__ieee754_pow+0x232>
 800bc4c:	4598      	cmp	r8, r3
 800bc4e:	d80b      	bhi.n	800bc68 <__ieee754_pow+0x220>
 800bc50:	f1b9 0f00 	cmp.w	r9, #0
 800bc54:	da0b      	bge.n	800bc6e <__ieee754_pow+0x226>
 800bc56:	2000      	movs	r0, #0
 800bc58:	b011      	add	sp, #68	@ 0x44
 800bc5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5e:	f000 bcf3 	b.w	800c648 <__math_oflow>
 800bc62:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800bcc8 <__ieee754_pow+0x280>
 800bc66:	e7e7      	b.n	800bc38 <__ieee754_pow+0x1f0>
 800bc68:	f1b9 0f00 	cmp.w	r9, #0
 800bc6c:	dcf3      	bgt.n	800bc56 <__ieee754_pow+0x20e>
 800bc6e:	2000      	movs	r0, #0
 800bc70:	b011      	add	sp, #68	@ 0x44
 800bc72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc76:	f000 bcdf 	b.w	800c638 <__math_uflow>
 800bc7a:	4598      	cmp	r8, r3
 800bc7c:	d20c      	bcs.n	800bc98 <__ieee754_pow+0x250>
 800bc7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc82:	2200      	movs	r2, #0
 800bc84:	2300      	movs	r3, #0
 800bc86:	f7f4 ff31 	bl	8000aec <__aeabi_dcmplt>
 800bc8a:	3800      	subs	r0, #0
 800bc8c:	bf18      	it	ne
 800bc8e:	2001      	movne	r0, #1
 800bc90:	f1b9 0f00 	cmp.w	r9, #0
 800bc94:	daec      	bge.n	800bc70 <__ieee754_pow+0x228>
 800bc96:	e7df      	b.n	800bc58 <__ieee754_pow+0x210>
 800bc98:	4b10      	ldr	r3, [pc, #64]	@ (800bcdc <__ieee754_pow+0x294>)
 800bc9a:	4598      	cmp	r8, r3
 800bc9c:	f04f 0200 	mov.w	r2, #0
 800bca0:	d924      	bls.n	800bcec <__ieee754_pow+0x2a4>
 800bca2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bca6:	2300      	movs	r3, #0
 800bca8:	f7f4 ff20 	bl	8000aec <__aeabi_dcmplt>
 800bcac:	3800      	subs	r0, #0
 800bcae:	bf18      	it	ne
 800bcb0:	2001      	movne	r0, #1
 800bcb2:	f1b9 0f00 	cmp.w	r9, #0
 800bcb6:	dccf      	bgt.n	800bc58 <__ieee754_pow+0x210>
 800bcb8:	e7da      	b.n	800bc70 <__ieee754_pow+0x228>
 800bcba:	bf00      	nop
 800bcbc:	f3af 8000 	nop.w
 800bcc0:	00000000 	.word	0x00000000
 800bcc4:	3ff00000 	.word	0x3ff00000
 800bcc8:	00000000 	.word	0x00000000
 800bccc:	bff00000 	.word	0xbff00000
 800bcd0:	fff00000 	.word	0xfff00000
 800bcd4:	7ff00000 	.word	0x7ff00000
 800bcd8:	433fffff 	.word	0x433fffff
 800bcdc:	3ff00000 	.word	0x3ff00000
 800bce0:	3fefffff 	.word	0x3fefffff
 800bce4:	3fe00000 	.word	0x3fe00000
 800bce8:	43f00000 	.word	0x43f00000
 800bcec:	4b5a      	ldr	r3, [pc, #360]	@ (800be58 <__ieee754_pow+0x410>)
 800bcee:	f7f4 fad3 	bl	8000298 <__aeabi_dsub>
 800bcf2:	a351      	add	r3, pc, #324	@ (adr r3, 800be38 <__ieee754_pow+0x3f0>)
 800bcf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	460d      	mov	r5, r1
 800bcfc:	f7f4 fc84 	bl	8000608 <__aeabi_dmul>
 800bd00:	a34f      	add	r3, pc, #316	@ (adr r3, 800be40 <__ieee754_pow+0x3f8>)
 800bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd06:	4606      	mov	r6, r0
 800bd08:	460f      	mov	r7, r1
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	4629      	mov	r1, r5
 800bd0e:	f7f4 fc7b 	bl	8000608 <__aeabi_dmul>
 800bd12:	4b52      	ldr	r3, [pc, #328]	@ (800be5c <__ieee754_pow+0x414>)
 800bd14:	4682      	mov	sl, r0
 800bd16:	468b      	mov	fp, r1
 800bd18:	2200      	movs	r2, #0
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	f7f4 fc73 	bl	8000608 <__aeabi_dmul>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	a148      	add	r1, pc, #288	@ (adr r1, 800be48 <__ieee754_pow+0x400>)
 800bd28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd2c:	f7f4 fab4 	bl	8000298 <__aeabi_dsub>
 800bd30:	4622      	mov	r2, r4
 800bd32:	462b      	mov	r3, r5
 800bd34:	f7f4 fc68 	bl	8000608 <__aeabi_dmul>
 800bd38:	4602      	mov	r2, r0
 800bd3a:	460b      	mov	r3, r1
 800bd3c:	2000      	movs	r0, #0
 800bd3e:	4948      	ldr	r1, [pc, #288]	@ (800be60 <__ieee754_pow+0x418>)
 800bd40:	f7f4 faaa 	bl	8000298 <__aeabi_dsub>
 800bd44:	4622      	mov	r2, r4
 800bd46:	4680      	mov	r8, r0
 800bd48:	4689      	mov	r9, r1
 800bd4a:	462b      	mov	r3, r5
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	4629      	mov	r1, r5
 800bd50:	f7f4 fc5a 	bl	8000608 <__aeabi_dmul>
 800bd54:	4602      	mov	r2, r0
 800bd56:	460b      	mov	r3, r1
 800bd58:	4640      	mov	r0, r8
 800bd5a:	4649      	mov	r1, r9
 800bd5c:	f7f4 fc54 	bl	8000608 <__aeabi_dmul>
 800bd60:	a33b      	add	r3, pc, #236	@ (adr r3, 800be50 <__ieee754_pow+0x408>)
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	f7f4 fc4f 	bl	8000608 <__aeabi_dmul>
 800bd6a:	4602      	mov	r2, r0
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	4650      	mov	r0, sl
 800bd70:	4659      	mov	r1, fp
 800bd72:	f7f4 fa91 	bl	8000298 <__aeabi_dsub>
 800bd76:	4602      	mov	r2, r0
 800bd78:	460b      	mov	r3, r1
 800bd7a:	4680      	mov	r8, r0
 800bd7c:	4689      	mov	r9, r1
 800bd7e:	4630      	mov	r0, r6
 800bd80:	4639      	mov	r1, r7
 800bd82:	f7f4 fa8b 	bl	800029c <__adddf3>
 800bd86:	2400      	movs	r4, #0
 800bd88:	4632      	mov	r2, r6
 800bd8a:	463b      	mov	r3, r7
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	460d      	mov	r5, r1
 800bd90:	f7f4 fa82 	bl	8000298 <__aeabi_dsub>
 800bd94:	4602      	mov	r2, r0
 800bd96:	460b      	mov	r3, r1
 800bd98:	4640      	mov	r0, r8
 800bd9a:	4649      	mov	r1, r9
 800bd9c:	f7f4 fa7c 	bl	8000298 <__aeabi_dsub>
 800bda0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bda4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bda8:	2300      	movs	r3, #0
 800bdaa:	9304      	str	r3, [sp, #16]
 800bdac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	460f      	mov	r7, r1
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	465b      	mov	r3, fp
 800bdb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bdbc:	f7f4 fa6c 	bl	8000298 <__aeabi_dsub>
 800bdc0:	4622      	mov	r2, r4
 800bdc2:	462b      	mov	r3, r5
 800bdc4:	f7f4 fc20 	bl	8000608 <__aeabi_dmul>
 800bdc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdcc:	4680      	mov	r8, r0
 800bdce:	4689      	mov	r9, r1
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7f4 fc18 	bl	8000608 <__aeabi_dmul>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4640      	mov	r0, r8
 800bdde:	4649      	mov	r1, r9
 800bde0:	f7f4 fa5c 	bl	800029c <__adddf3>
 800bde4:	4652      	mov	r2, sl
 800bde6:	465b      	mov	r3, fp
 800bde8:	4606      	mov	r6, r0
 800bdea:	460f      	mov	r7, r1
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fc0a 	bl	8000608 <__aeabi_dmul>
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	4689      	mov	r9, r1
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fa4c 	bl	800029c <__adddf3>
 800be04:	4b17      	ldr	r3, [pc, #92]	@ (800be64 <__ieee754_pow+0x41c>)
 800be06:	4299      	cmp	r1, r3
 800be08:	4604      	mov	r4, r0
 800be0a:	460d      	mov	r5, r1
 800be0c:	468a      	mov	sl, r1
 800be0e:	468b      	mov	fp, r1
 800be10:	f340 82ef 	ble.w	800c3f2 <__ieee754_pow+0x9aa>
 800be14:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800be18:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800be1c:	4303      	orrs	r3, r0
 800be1e:	f000 81e8 	beq.w	800c1f2 <__ieee754_pow+0x7aa>
 800be22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be26:	2200      	movs	r2, #0
 800be28:	2300      	movs	r3, #0
 800be2a:	f7f4 fe5f 	bl	8000aec <__aeabi_dcmplt>
 800be2e:	3800      	subs	r0, #0
 800be30:	bf18      	it	ne
 800be32:	2001      	movne	r0, #1
 800be34:	e710      	b.n	800bc58 <__ieee754_pow+0x210>
 800be36:	bf00      	nop
 800be38:	60000000 	.word	0x60000000
 800be3c:	3ff71547 	.word	0x3ff71547
 800be40:	f85ddf44 	.word	0xf85ddf44
 800be44:	3e54ae0b 	.word	0x3e54ae0b
 800be48:	55555555 	.word	0x55555555
 800be4c:	3fd55555 	.word	0x3fd55555
 800be50:	652b82fe 	.word	0x652b82fe
 800be54:	3ff71547 	.word	0x3ff71547
 800be58:	3ff00000 	.word	0x3ff00000
 800be5c:	3fd00000 	.word	0x3fd00000
 800be60:	3fe00000 	.word	0x3fe00000
 800be64:	408fffff 	.word	0x408fffff
 800be68:	4bd5      	ldr	r3, [pc, #852]	@ (800c1c0 <__ieee754_pow+0x778>)
 800be6a:	402b      	ands	r3, r5
 800be6c:	2200      	movs	r2, #0
 800be6e:	b92b      	cbnz	r3, 800be7c <__ieee754_pow+0x434>
 800be70:	4bd4      	ldr	r3, [pc, #848]	@ (800c1c4 <__ieee754_pow+0x77c>)
 800be72:	f7f4 fbc9 	bl	8000608 <__aeabi_dmul>
 800be76:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800be7a:	468b      	mov	fp, r1
 800be7c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800be80:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800be84:	4413      	add	r3, r2
 800be86:	930a      	str	r3, [sp, #40]	@ 0x28
 800be88:	4bcf      	ldr	r3, [pc, #828]	@ (800c1c8 <__ieee754_pow+0x780>)
 800be8a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800be8e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800be92:	459b      	cmp	fp, r3
 800be94:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800be98:	dd08      	ble.n	800beac <__ieee754_pow+0x464>
 800be9a:	4bcc      	ldr	r3, [pc, #816]	@ (800c1cc <__ieee754_pow+0x784>)
 800be9c:	459b      	cmp	fp, r3
 800be9e:	f340 81a5 	ble.w	800c1ec <__ieee754_pow+0x7a4>
 800bea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bea4:	3301      	adds	r3, #1
 800bea6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bea8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800beac:	f04f 0a00 	mov.w	sl, #0
 800beb0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800beb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800beb6:	4bc6      	ldr	r3, [pc, #792]	@ (800c1d0 <__ieee754_pow+0x788>)
 800beb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bebc:	ed93 7b00 	vldr	d7, [r3]
 800bec0:	4629      	mov	r1, r5
 800bec2:	ec53 2b17 	vmov	r2, r3, d7
 800bec6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800beca:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bece:	f7f4 f9e3 	bl	8000298 <__aeabi_dsub>
 800bed2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bed6:	4606      	mov	r6, r0
 800bed8:	460f      	mov	r7, r1
 800beda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bede:	f7f4 f9dd 	bl	800029c <__adddf3>
 800bee2:	4602      	mov	r2, r0
 800bee4:	460b      	mov	r3, r1
 800bee6:	2000      	movs	r0, #0
 800bee8:	49ba      	ldr	r1, [pc, #744]	@ (800c1d4 <__ieee754_pow+0x78c>)
 800beea:	f7f4 fcb7 	bl	800085c <__aeabi_ddiv>
 800beee:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4630      	mov	r0, r6
 800bef8:	4639      	mov	r1, r7
 800befa:	f7f4 fb85 	bl	8000608 <__aeabi_dmul>
 800befe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf02:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bf06:	106d      	asrs	r5, r5, #1
 800bf08:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bf0c:	f04f 0b00 	mov.w	fp, #0
 800bf10:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bf14:	4661      	mov	r1, ip
 800bf16:	2200      	movs	r2, #0
 800bf18:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bf1c:	4658      	mov	r0, fp
 800bf1e:	46e1      	mov	r9, ip
 800bf20:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bf24:	4614      	mov	r4, r2
 800bf26:	461d      	mov	r5, r3
 800bf28:	f7f4 fb6e 	bl	8000608 <__aeabi_dmul>
 800bf2c:	4602      	mov	r2, r0
 800bf2e:	460b      	mov	r3, r1
 800bf30:	4630      	mov	r0, r6
 800bf32:	4639      	mov	r1, r7
 800bf34:	f7f4 f9b0 	bl	8000298 <__aeabi_dsub>
 800bf38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf3c:	4606      	mov	r6, r0
 800bf3e:	460f      	mov	r7, r1
 800bf40:	4620      	mov	r0, r4
 800bf42:	4629      	mov	r1, r5
 800bf44:	f7f4 f9a8 	bl	8000298 <__aeabi_dsub>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	460b      	mov	r3, r1
 800bf4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf50:	f7f4 f9a2 	bl	8000298 <__aeabi_dsub>
 800bf54:	465a      	mov	r2, fp
 800bf56:	464b      	mov	r3, r9
 800bf58:	f7f4 fb56 	bl	8000608 <__aeabi_dmul>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 f998 	bl	8000298 <__aeabi_dsub>
 800bf68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf6c:	f7f4 fb4c 	bl	8000608 <__aeabi_dmul>
 800bf70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf74:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf78:	4610      	mov	r0, r2
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	f7f4 fb44 	bl	8000608 <__aeabi_dmul>
 800bf80:	a37d      	add	r3, pc, #500	@ (adr r3, 800c178 <__ieee754_pow+0x730>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	4604      	mov	r4, r0
 800bf88:	460d      	mov	r5, r1
 800bf8a:	f7f4 fb3d 	bl	8000608 <__aeabi_dmul>
 800bf8e:	a37c      	add	r3, pc, #496	@ (adr r3, 800c180 <__ieee754_pow+0x738>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f7f4 f982 	bl	800029c <__adddf3>
 800bf98:	4622      	mov	r2, r4
 800bf9a:	462b      	mov	r3, r5
 800bf9c:	f7f4 fb34 	bl	8000608 <__aeabi_dmul>
 800bfa0:	a379      	add	r3, pc, #484	@ (adr r3, 800c188 <__ieee754_pow+0x740>)
 800bfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa6:	f7f4 f979 	bl	800029c <__adddf3>
 800bfaa:	4622      	mov	r2, r4
 800bfac:	462b      	mov	r3, r5
 800bfae:	f7f4 fb2b 	bl	8000608 <__aeabi_dmul>
 800bfb2:	a377      	add	r3, pc, #476	@ (adr r3, 800c190 <__ieee754_pow+0x748>)
 800bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfb8:	f7f4 f970 	bl	800029c <__adddf3>
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	f7f4 fb22 	bl	8000608 <__aeabi_dmul>
 800bfc4:	a374      	add	r3, pc, #464	@ (adr r3, 800c198 <__ieee754_pow+0x750>)
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	f7f4 f967 	bl	800029c <__adddf3>
 800bfce:	4622      	mov	r2, r4
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	f7f4 fb19 	bl	8000608 <__aeabi_dmul>
 800bfd6:	a372      	add	r3, pc, #456	@ (adr r3, 800c1a0 <__ieee754_pow+0x758>)
 800bfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfdc:	f7f4 f95e 	bl	800029c <__adddf3>
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	4606      	mov	r6, r0
 800bfe4:	460f      	mov	r7, r1
 800bfe6:	462b      	mov	r3, r5
 800bfe8:	4620      	mov	r0, r4
 800bfea:	4629      	mov	r1, r5
 800bfec:	f7f4 fb0c 	bl	8000608 <__aeabi_dmul>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	4630      	mov	r0, r6
 800bff6:	4639      	mov	r1, r7
 800bff8:	f7f4 fb06 	bl	8000608 <__aeabi_dmul>
 800bffc:	465a      	mov	r2, fp
 800bffe:	4604      	mov	r4, r0
 800c000:	460d      	mov	r5, r1
 800c002:	464b      	mov	r3, r9
 800c004:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c008:	f7f4 f948 	bl	800029c <__adddf3>
 800c00c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c010:	f7f4 fafa 	bl	8000608 <__aeabi_dmul>
 800c014:	4622      	mov	r2, r4
 800c016:	462b      	mov	r3, r5
 800c018:	f7f4 f940 	bl	800029c <__adddf3>
 800c01c:	465a      	mov	r2, fp
 800c01e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c022:	464b      	mov	r3, r9
 800c024:	4658      	mov	r0, fp
 800c026:	4649      	mov	r1, r9
 800c028:	f7f4 faee 	bl	8000608 <__aeabi_dmul>
 800c02c:	4b6a      	ldr	r3, [pc, #424]	@ (800c1d8 <__ieee754_pow+0x790>)
 800c02e:	2200      	movs	r2, #0
 800c030:	4606      	mov	r6, r0
 800c032:	460f      	mov	r7, r1
 800c034:	f7f4 f932 	bl	800029c <__adddf3>
 800c038:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c03c:	f7f4 f92e 	bl	800029c <__adddf3>
 800c040:	46d8      	mov	r8, fp
 800c042:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c046:	460d      	mov	r5, r1
 800c048:	465a      	mov	r2, fp
 800c04a:	460b      	mov	r3, r1
 800c04c:	4640      	mov	r0, r8
 800c04e:	4649      	mov	r1, r9
 800c050:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c054:	f7f4 fad8 	bl	8000608 <__aeabi_dmul>
 800c058:	465c      	mov	r4, fp
 800c05a:	4680      	mov	r8, r0
 800c05c:	4689      	mov	r9, r1
 800c05e:	4b5e      	ldr	r3, [pc, #376]	@ (800c1d8 <__ieee754_pow+0x790>)
 800c060:	2200      	movs	r2, #0
 800c062:	4620      	mov	r0, r4
 800c064:	4629      	mov	r1, r5
 800c066:	f7f4 f917 	bl	8000298 <__aeabi_dsub>
 800c06a:	4632      	mov	r2, r6
 800c06c:	463b      	mov	r3, r7
 800c06e:	f7f4 f913 	bl	8000298 <__aeabi_dsub>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c07a:	f7f4 f90d 	bl	8000298 <__aeabi_dsub>
 800c07e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c082:	f7f4 fac1 	bl	8000608 <__aeabi_dmul>
 800c086:	4622      	mov	r2, r4
 800c088:	4606      	mov	r6, r0
 800c08a:	460f      	mov	r7, r1
 800c08c:	462b      	mov	r3, r5
 800c08e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c092:	f7f4 fab9 	bl	8000608 <__aeabi_dmul>
 800c096:	4602      	mov	r2, r0
 800c098:	460b      	mov	r3, r1
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7f4 f8fd 	bl	800029c <__adddf3>
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	460f      	mov	r7, r1
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4640      	mov	r0, r8
 800c0ac:	4649      	mov	r1, r9
 800c0ae:	f7f4 f8f5 	bl	800029c <__adddf3>
 800c0b2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c0b6:	a33c      	add	r3, pc, #240	@ (adr r3, 800c1a8 <__ieee754_pow+0x760>)
 800c0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0bc:	4658      	mov	r0, fp
 800c0be:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	f7f4 faa0 	bl	8000608 <__aeabi_dmul>
 800c0c8:	465c      	mov	r4, fp
 800c0ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0ce:	4642      	mov	r2, r8
 800c0d0:	464b      	mov	r3, r9
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	f7f4 f8df 	bl	8000298 <__aeabi_dsub>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	460b      	mov	r3, r1
 800c0de:	4630      	mov	r0, r6
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	f7f4 f8d9 	bl	8000298 <__aeabi_dsub>
 800c0e6:	a332      	add	r3, pc, #200	@ (adr r3, 800c1b0 <__ieee754_pow+0x768>)
 800c0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ec:	f7f4 fa8c 	bl	8000608 <__aeabi_dmul>
 800c0f0:	a331      	add	r3, pc, #196	@ (adr r3, 800c1b8 <__ieee754_pow+0x770>)
 800c0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f6:	4606      	mov	r6, r0
 800c0f8:	460f      	mov	r7, r1
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	f7f4 fa83 	bl	8000608 <__aeabi_dmul>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4630      	mov	r0, r6
 800c108:	4639      	mov	r1, r7
 800c10a:	f7f4 f8c7 	bl	800029c <__adddf3>
 800c10e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c110:	4b32      	ldr	r3, [pc, #200]	@ (800c1dc <__ieee754_pow+0x794>)
 800c112:	4413      	add	r3, r2
 800c114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c118:	f7f4 f8c0 	bl	800029c <__adddf3>
 800c11c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c120:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c122:	f7f4 fa07 	bl	8000534 <__aeabi_i2d>
 800c126:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c128:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e0 <__ieee754_pow+0x798>)
 800c12a:	4413      	add	r3, r2
 800c12c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c130:	4606      	mov	r6, r0
 800c132:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c136:	460f      	mov	r7, r1
 800c138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c13c:	f7f4 f8ae 	bl	800029c <__adddf3>
 800c140:	4642      	mov	r2, r8
 800c142:	464b      	mov	r3, r9
 800c144:	f7f4 f8aa 	bl	800029c <__adddf3>
 800c148:	4632      	mov	r2, r6
 800c14a:	463b      	mov	r3, r7
 800c14c:	f7f4 f8a6 	bl	800029c <__adddf3>
 800c150:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c154:	4632      	mov	r2, r6
 800c156:	463b      	mov	r3, r7
 800c158:	4658      	mov	r0, fp
 800c15a:	460d      	mov	r5, r1
 800c15c:	f7f4 f89c 	bl	8000298 <__aeabi_dsub>
 800c160:	4642      	mov	r2, r8
 800c162:	464b      	mov	r3, r9
 800c164:	f7f4 f898 	bl	8000298 <__aeabi_dsub>
 800c168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c16c:	f7f4 f894 	bl	8000298 <__aeabi_dsub>
 800c170:	465c      	mov	r4, fp
 800c172:	4602      	mov	r2, r0
 800c174:	e036      	b.n	800c1e4 <__ieee754_pow+0x79c>
 800c176:	bf00      	nop
 800c178:	4a454eef 	.word	0x4a454eef
 800c17c:	3fca7e28 	.word	0x3fca7e28
 800c180:	93c9db65 	.word	0x93c9db65
 800c184:	3fcd864a 	.word	0x3fcd864a
 800c188:	a91d4101 	.word	0xa91d4101
 800c18c:	3fd17460 	.word	0x3fd17460
 800c190:	518f264d 	.word	0x518f264d
 800c194:	3fd55555 	.word	0x3fd55555
 800c198:	db6fabff 	.word	0xdb6fabff
 800c19c:	3fdb6db6 	.word	0x3fdb6db6
 800c1a0:	33333303 	.word	0x33333303
 800c1a4:	3fe33333 	.word	0x3fe33333
 800c1a8:	e0000000 	.word	0xe0000000
 800c1ac:	3feec709 	.word	0x3feec709
 800c1b0:	dc3a03fd 	.word	0xdc3a03fd
 800c1b4:	3feec709 	.word	0x3feec709
 800c1b8:	145b01f5 	.word	0x145b01f5
 800c1bc:	be3e2fe0 	.word	0xbe3e2fe0
 800c1c0:	7ff00000 	.word	0x7ff00000
 800c1c4:	43400000 	.word	0x43400000
 800c1c8:	0003988e 	.word	0x0003988e
 800c1cc:	000bb679 	.word	0x000bb679
 800c1d0:	0800cc20 	.word	0x0800cc20
 800c1d4:	3ff00000 	.word	0x3ff00000
 800c1d8:	40080000 	.word	0x40080000
 800c1dc:	0800cc00 	.word	0x0800cc00
 800c1e0:	0800cc10 	.word	0x0800cc10
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c1ea:	e5d7      	b.n	800bd9c <__ieee754_pow+0x354>
 800c1ec:	f04f 0a01 	mov.w	sl, #1
 800c1f0:	e65e      	b.n	800beb0 <__ieee754_pow+0x468>
 800c1f2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c4c4 <__ieee754_pow+0xa7c>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	4639      	mov	r1, r7
 800c1fc:	f7f4 f84e 	bl	800029c <__adddf3>
 800c200:	4642      	mov	r2, r8
 800c202:	e9cd 0100 	strd	r0, r1, [sp]
 800c206:	464b      	mov	r3, r9
 800c208:	4620      	mov	r0, r4
 800c20a:	4629      	mov	r1, r5
 800c20c:	f7f4 f844 	bl	8000298 <__aeabi_dsub>
 800c210:	4602      	mov	r2, r0
 800c212:	460b      	mov	r3, r1
 800c214:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c218:	f7f4 fc86 	bl	8000b28 <__aeabi_dcmpgt>
 800c21c:	2800      	cmp	r0, #0
 800c21e:	f47f ae00 	bne.w	800be22 <__ieee754_pow+0x3da>
 800c222:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c226:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c22a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c22e:	fa43 fa0a 	asr.w	sl, r3, sl
 800c232:	44da      	add	sl, fp
 800c234:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c238:	489d      	ldr	r0, [pc, #628]	@ (800c4b0 <__ieee754_pow+0xa68>)
 800c23a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c23e:	4108      	asrs	r0, r1
 800c240:	ea00 030a 	and.w	r3, r0, sl
 800c244:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c248:	f1c1 0114 	rsb	r1, r1, #20
 800c24c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c250:	fa4a fa01 	asr.w	sl, sl, r1
 800c254:	f1bb 0f00 	cmp.w	fp, #0
 800c258:	4640      	mov	r0, r8
 800c25a:	4649      	mov	r1, r9
 800c25c:	f04f 0200 	mov.w	r2, #0
 800c260:	bfb8      	it	lt
 800c262:	f1ca 0a00 	rsblt	sl, sl, #0
 800c266:	f7f4 f817 	bl	8000298 <__aeabi_dsub>
 800c26a:	4680      	mov	r8, r0
 800c26c:	4689      	mov	r9, r1
 800c26e:	4632      	mov	r2, r6
 800c270:	463b      	mov	r3, r7
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	f7f4 f811 	bl	800029c <__adddf3>
 800c27a:	2400      	movs	r4, #0
 800c27c:	a37c      	add	r3, pc, #496	@ (adr r3, 800c470 <__ieee754_pow+0xa28>)
 800c27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c282:	4620      	mov	r0, r4
 800c284:	460d      	mov	r5, r1
 800c286:	f7f4 f9bf 	bl	8000608 <__aeabi_dmul>
 800c28a:	4642      	mov	r2, r8
 800c28c:	e9cd 0100 	strd	r0, r1, [sp]
 800c290:	464b      	mov	r3, r9
 800c292:	4620      	mov	r0, r4
 800c294:	4629      	mov	r1, r5
 800c296:	f7f3 ffff 	bl	8000298 <__aeabi_dsub>
 800c29a:	4602      	mov	r2, r0
 800c29c:	460b      	mov	r3, r1
 800c29e:	4630      	mov	r0, r6
 800c2a0:	4639      	mov	r1, r7
 800c2a2:	f7f3 fff9 	bl	8000298 <__aeabi_dsub>
 800c2a6:	a374      	add	r3, pc, #464	@ (adr r3, 800c478 <__ieee754_pow+0xa30>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f7f4 f9ac 	bl	8000608 <__aeabi_dmul>
 800c2b0:	a373      	add	r3, pc, #460	@ (adr r3, 800c480 <__ieee754_pow+0xa38>)
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	4680      	mov	r8, r0
 800c2b8:	4689      	mov	r9, r1
 800c2ba:	4620      	mov	r0, r4
 800c2bc:	4629      	mov	r1, r5
 800c2be:	f7f4 f9a3 	bl	8000608 <__aeabi_dmul>
 800c2c2:	4602      	mov	r2, r0
 800c2c4:	460b      	mov	r3, r1
 800c2c6:	4640      	mov	r0, r8
 800c2c8:	4649      	mov	r1, r9
 800c2ca:	f7f3 ffe7 	bl	800029c <__adddf3>
 800c2ce:	4604      	mov	r4, r0
 800c2d0:	460d      	mov	r5, r1
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2da:	f7f3 ffdf 	bl	800029c <__adddf3>
 800c2de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2e2:	4680      	mov	r8, r0
 800c2e4:	4689      	mov	r9, r1
 800c2e6:	f7f3 ffd7 	bl	8000298 <__aeabi_dsub>
 800c2ea:	4602      	mov	r2, r0
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	4629      	mov	r1, r5
 800c2f2:	f7f3 ffd1 	bl	8000298 <__aeabi_dsub>
 800c2f6:	4642      	mov	r2, r8
 800c2f8:	4606      	mov	r6, r0
 800c2fa:	460f      	mov	r7, r1
 800c2fc:	464b      	mov	r3, r9
 800c2fe:	4640      	mov	r0, r8
 800c300:	4649      	mov	r1, r9
 800c302:	f7f4 f981 	bl	8000608 <__aeabi_dmul>
 800c306:	a360      	add	r3, pc, #384	@ (adr r3, 800c488 <__ieee754_pow+0xa40>)
 800c308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30c:	4604      	mov	r4, r0
 800c30e:	460d      	mov	r5, r1
 800c310:	f7f4 f97a 	bl	8000608 <__aeabi_dmul>
 800c314:	a35e      	add	r3, pc, #376	@ (adr r3, 800c490 <__ieee754_pow+0xa48>)
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	f7f3 ffbd 	bl	8000298 <__aeabi_dsub>
 800c31e:	4622      	mov	r2, r4
 800c320:	462b      	mov	r3, r5
 800c322:	f7f4 f971 	bl	8000608 <__aeabi_dmul>
 800c326:	a35c      	add	r3, pc, #368	@ (adr r3, 800c498 <__ieee754_pow+0xa50>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	f7f3 ffb6 	bl	800029c <__adddf3>
 800c330:	4622      	mov	r2, r4
 800c332:	462b      	mov	r3, r5
 800c334:	f7f4 f968 	bl	8000608 <__aeabi_dmul>
 800c338:	a359      	add	r3, pc, #356	@ (adr r3, 800c4a0 <__ieee754_pow+0xa58>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f7f3 ffab 	bl	8000298 <__aeabi_dsub>
 800c342:	4622      	mov	r2, r4
 800c344:	462b      	mov	r3, r5
 800c346:	f7f4 f95f 	bl	8000608 <__aeabi_dmul>
 800c34a:	a357      	add	r3, pc, #348	@ (adr r3, 800c4a8 <__ieee754_pow+0xa60>)
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	f7f3 ffa4 	bl	800029c <__adddf3>
 800c354:	4622      	mov	r2, r4
 800c356:	462b      	mov	r3, r5
 800c358:	f7f4 f956 	bl	8000608 <__aeabi_dmul>
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4640      	mov	r0, r8
 800c362:	4649      	mov	r1, r9
 800c364:	f7f3 ff98 	bl	8000298 <__aeabi_dsub>
 800c368:	4604      	mov	r4, r0
 800c36a:	460d      	mov	r5, r1
 800c36c:	4602      	mov	r2, r0
 800c36e:	460b      	mov	r3, r1
 800c370:	4640      	mov	r0, r8
 800c372:	4649      	mov	r1, r9
 800c374:	f7f4 f948 	bl	8000608 <__aeabi_dmul>
 800c378:	2200      	movs	r2, #0
 800c37a:	e9cd 0100 	strd	r0, r1, [sp]
 800c37e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c382:	4620      	mov	r0, r4
 800c384:	4629      	mov	r1, r5
 800c386:	f7f3 ff87 	bl	8000298 <__aeabi_dsub>
 800c38a:	4602      	mov	r2, r0
 800c38c:	460b      	mov	r3, r1
 800c38e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c392:	f7f4 fa63 	bl	800085c <__aeabi_ddiv>
 800c396:	4632      	mov	r2, r6
 800c398:	4604      	mov	r4, r0
 800c39a:	460d      	mov	r5, r1
 800c39c:	463b      	mov	r3, r7
 800c39e:	4640      	mov	r0, r8
 800c3a0:	4649      	mov	r1, r9
 800c3a2:	f7f4 f931 	bl	8000608 <__aeabi_dmul>
 800c3a6:	4632      	mov	r2, r6
 800c3a8:	463b      	mov	r3, r7
 800c3aa:	f7f3 ff77 	bl	800029c <__adddf3>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	460b      	mov	r3, r1
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	f7f3 ff6f 	bl	8000298 <__aeabi_dsub>
 800c3ba:	4642      	mov	r2, r8
 800c3bc:	464b      	mov	r3, r9
 800c3be:	f7f3 ff6b 	bl	8000298 <__aeabi_dsub>
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	493b      	ldr	r1, [pc, #236]	@ (800c4b4 <__ieee754_pow+0xa6c>)
 800c3c8:	2000      	movs	r0, #0
 800c3ca:	f7f3 ff65 	bl	8000298 <__aeabi_dsub>
 800c3ce:	ec41 0b10 	vmov	d0, r0, r1
 800c3d2:	ee10 3a90 	vmov	r3, s1
 800c3d6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c3da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3de:	da30      	bge.n	800c442 <__ieee754_pow+0x9fa>
 800c3e0:	4650      	mov	r0, sl
 800c3e2:	f000 f87d 	bl	800c4e0 <scalbn>
 800c3e6:	ec51 0b10 	vmov	r0, r1, d0
 800c3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3ee:	f7ff bbd2 	b.w	800bb96 <__ieee754_pow+0x14e>
 800c3f2:	4c31      	ldr	r4, [pc, #196]	@ (800c4b8 <__ieee754_pow+0xa70>)
 800c3f4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c3f8:	42a3      	cmp	r3, r4
 800c3fa:	d91a      	bls.n	800c432 <__ieee754_pow+0x9ea>
 800c3fc:	4b2f      	ldr	r3, [pc, #188]	@ (800c4bc <__ieee754_pow+0xa74>)
 800c3fe:	440b      	add	r3, r1
 800c400:	4303      	orrs	r3, r0
 800c402:	d009      	beq.n	800c418 <__ieee754_pow+0x9d0>
 800c404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c408:	2200      	movs	r2, #0
 800c40a:	2300      	movs	r3, #0
 800c40c:	f7f4 fb6e 	bl	8000aec <__aeabi_dcmplt>
 800c410:	3800      	subs	r0, #0
 800c412:	bf18      	it	ne
 800c414:	2001      	movne	r0, #1
 800c416:	e42b      	b.n	800bc70 <__ieee754_pow+0x228>
 800c418:	4642      	mov	r2, r8
 800c41a:	464b      	mov	r3, r9
 800c41c:	f7f3 ff3c 	bl	8000298 <__aeabi_dsub>
 800c420:	4632      	mov	r2, r6
 800c422:	463b      	mov	r3, r7
 800c424:	f7f4 fb76 	bl	8000b14 <__aeabi_dcmpge>
 800c428:	2800      	cmp	r0, #0
 800c42a:	d1eb      	bne.n	800c404 <__ieee754_pow+0x9bc>
 800c42c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c4cc <__ieee754_pow+0xa84>
 800c430:	e6f7      	b.n	800c222 <__ieee754_pow+0x7da>
 800c432:	469a      	mov	sl, r3
 800c434:	4b22      	ldr	r3, [pc, #136]	@ (800c4c0 <__ieee754_pow+0xa78>)
 800c436:	459a      	cmp	sl, r3
 800c438:	f63f aef3 	bhi.w	800c222 <__ieee754_pow+0x7da>
 800c43c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c440:	e715      	b.n	800c26e <__ieee754_pow+0x826>
 800c442:	ec51 0b10 	vmov	r0, r1, d0
 800c446:	4619      	mov	r1, r3
 800c448:	e7cf      	b.n	800c3ea <__ieee754_pow+0x9a2>
 800c44a:	491a      	ldr	r1, [pc, #104]	@ (800c4b4 <__ieee754_pow+0xa6c>)
 800c44c:	2000      	movs	r0, #0
 800c44e:	f7ff bb18 	b.w	800ba82 <__ieee754_pow+0x3a>
 800c452:	2000      	movs	r0, #0
 800c454:	2100      	movs	r1, #0
 800c456:	f7ff bb14 	b.w	800ba82 <__ieee754_pow+0x3a>
 800c45a:	4630      	mov	r0, r6
 800c45c:	4639      	mov	r1, r7
 800c45e:	f7ff bb10 	b.w	800ba82 <__ieee754_pow+0x3a>
 800c462:	460c      	mov	r4, r1
 800c464:	f7ff bb5e 	b.w	800bb24 <__ieee754_pow+0xdc>
 800c468:	2400      	movs	r4, #0
 800c46a:	f7ff bb49 	b.w	800bb00 <__ieee754_pow+0xb8>
 800c46e:	bf00      	nop
 800c470:	00000000 	.word	0x00000000
 800c474:	3fe62e43 	.word	0x3fe62e43
 800c478:	fefa39ef 	.word	0xfefa39ef
 800c47c:	3fe62e42 	.word	0x3fe62e42
 800c480:	0ca86c39 	.word	0x0ca86c39
 800c484:	be205c61 	.word	0xbe205c61
 800c488:	72bea4d0 	.word	0x72bea4d0
 800c48c:	3e663769 	.word	0x3e663769
 800c490:	c5d26bf1 	.word	0xc5d26bf1
 800c494:	3ebbbd41 	.word	0x3ebbbd41
 800c498:	af25de2c 	.word	0xaf25de2c
 800c49c:	3f11566a 	.word	0x3f11566a
 800c4a0:	16bebd93 	.word	0x16bebd93
 800c4a4:	3f66c16c 	.word	0x3f66c16c
 800c4a8:	5555553e 	.word	0x5555553e
 800c4ac:	3fc55555 	.word	0x3fc55555
 800c4b0:	fff00000 	.word	0xfff00000
 800c4b4:	3ff00000 	.word	0x3ff00000
 800c4b8:	4090cbff 	.word	0x4090cbff
 800c4bc:	3f6f3400 	.word	0x3f6f3400
 800c4c0:	3fe00000 	.word	0x3fe00000
 800c4c4:	652b82fe 	.word	0x652b82fe
 800c4c8:	3c971547 	.word	0x3c971547
 800c4cc:	4090cc00 	.word	0x4090cc00

0800c4d0 <fabs>:
 800c4d0:	ec51 0b10 	vmov	r0, r1, d0
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4da:	ec43 2b10 	vmov	d0, r2, r3
 800c4de:	4770      	bx	lr

0800c4e0 <scalbn>:
 800c4e0:	b570      	push	{r4, r5, r6, lr}
 800c4e2:	ec55 4b10 	vmov	r4, r5, d0
 800c4e6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c4ea:	4606      	mov	r6, r0
 800c4ec:	462b      	mov	r3, r5
 800c4ee:	b991      	cbnz	r1, 800c516 <scalbn+0x36>
 800c4f0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c4f4:	4323      	orrs	r3, r4
 800c4f6:	d03d      	beq.n	800c574 <scalbn+0x94>
 800c4f8:	4b35      	ldr	r3, [pc, #212]	@ (800c5d0 <scalbn+0xf0>)
 800c4fa:	4620      	mov	r0, r4
 800c4fc:	4629      	mov	r1, r5
 800c4fe:	2200      	movs	r2, #0
 800c500:	f7f4 f882 	bl	8000608 <__aeabi_dmul>
 800c504:	4b33      	ldr	r3, [pc, #204]	@ (800c5d4 <scalbn+0xf4>)
 800c506:	429e      	cmp	r6, r3
 800c508:	4604      	mov	r4, r0
 800c50a:	460d      	mov	r5, r1
 800c50c:	da0f      	bge.n	800c52e <scalbn+0x4e>
 800c50e:	a328      	add	r3, pc, #160	@ (adr r3, 800c5b0 <scalbn+0xd0>)
 800c510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c514:	e01e      	b.n	800c554 <scalbn+0x74>
 800c516:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c51a:	4291      	cmp	r1, r2
 800c51c:	d10b      	bne.n	800c536 <scalbn+0x56>
 800c51e:	4622      	mov	r2, r4
 800c520:	4620      	mov	r0, r4
 800c522:	4629      	mov	r1, r5
 800c524:	f7f3 feba 	bl	800029c <__adddf3>
 800c528:	4604      	mov	r4, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	e022      	b.n	800c574 <scalbn+0x94>
 800c52e:	460b      	mov	r3, r1
 800c530:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c534:	3936      	subs	r1, #54	@ 0x36
 800c536:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c53a:	4296      	cmp	r6, r2
 800c53c:	dd0d      	ble.n	800c55a <scalbn+0x7a>
 800c53e:	2d00      	cmp	r5, #0
 800c540:	a11d      	add	r1, pc, #116	@ (adr r1, 800c5b8 <scalbn+0xd8>)
 800c542:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c546:	da02      	bge.n	800c54e <scalbn+0x6e>
 800c548:	a11d      	add	r1, pc, #116	@ (adr r1, 800c5c0 <scalbn+0xe0>)
 800c54a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c54e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c5b8 <scalbn+0xd8>)
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	f7f4 f858 	bl	8000608 <__aeabi_dmul>
 800c558:	e7e6      	b.n	800c528 <scalbn+0x48>
 800c55a:	1872      	adds	r2, r6, r1
 800c55c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c560:	428a      	cmp	r2, r1
 800c562:	dcec      	bgt.n	800c53e <scalbn+0x5e>
 800c564:	2a00      	cmp	r2, #0
 800c566:	dd08      	ble.n	800c57a <scalbn+0x9a>
 800c568:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c56c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c570:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c574:	ec45 4b10 	vmov	d0, r4, r5
 800c578:	bd70      	pop	{r4, r5, r6, pc}
 800c57a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c57e:	da08      	bge.n	800c592 <scalbn+0xb2>
 800c580:	2d00      	cmp	r5, #0
 800c582:	a10b      	add	r1, pc, #44	@ (adr r1, 800c5b0 <scalbn+0xd0>)
 800c584:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c588:	dac1      	bge.n	800c50e <scalbn+0x2e>
 800c58a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c5c8 <scalbn+0xe8>)
 800c58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c590:	e7bd      	b.n	800c50e <scalbn+0x2e>
 800c592:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c596:	3236      	adds	r2, #54	@ 0x36
 800c598:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c59c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c5d8 <scalbn+0xf8>)
 800c5a4:	4629      	mov	r1, r5
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	e7d4      	b.n	800c554 <scalbn+0x74>
 800c5aa:	bf00      	nop
 800c5ac:	f3af 8000 	nop.w
 800c5b0:	c2f8f359 	.word	0xc2f8f359
 800c5b4:	01a56e1f 	.word	0x01a56e1f
 800c5b8:	8800759c 	.word	0x8800759c
 800c5bc:	7e37e43c 	.word	0x7e37e43c
 800c5c0:	8800759c 	.word	0x8800759c
 800c5c4:	fe37e43c 	.word	0xfe37e43c
 800c5c8:	c2f8f359 	.word	0xc2f8f359
 800c5cc:	81a56e1f 	.word	0x81a56e1f
 800c5d0:	43500000 	.word	0x43500000
 800c5d4:	ffff3cb0 	.word	0xffff3cb0
 800c5d8:	3c900000 	.word	0x3c900000

0800c5dc <with_errno>:
 800c5dc:	b510      	push	{r4, lr}
 800c5de:	ed2d 8b02 	vpush	{d8}
 800c5e2:	eeb0 8a40 	vmov.f32	s16, s0
 800c5e6:	eef0 8a60 	vmov.f32	s17, s1
 800c5ea:	4604      	mov	r4, r0
 800c5ec:	f7fd f93a 	bl	8009864 <__errno>
 800c5f0:	eeb0 0a48 	vmov.f32	s0, s16
 800c5f4:	eef0 0a68 	vmov.f32	s1, s17
 800c5f8:	ecbd 8b02 	vpop	{d8}
 800c5fc:	6004      	str	r4, [r0, #0]
 800c5fe:	bd10      	pop	{r4, pc}

0800c600 <xflow>:
 800c600:	4603      	mov	r3, r0
 800c602:	b507      	push	{r0, r1, r2, lr}
 800c604:	ec51 0b10 	vmov	r0, r1, d0
 800c608:	b183      	cbz	r3, 800c62c <xflow+0x2c>
 800c60a:	4602      	mov	r2, r0
 800c60c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c610:	e9cd 2300 	strd	r2, r3, [sp]
 800c614:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c618:	f7f3 fff6 	bl	8000608 <__aeabi_dmul>
 800c61c:	ec41 0b10 	vmov	d0, r0, r1
 800c620:	2022      	movs	r0, #34	@ 0x22
 800c622:	b003      	add	sp, #12
 800c624:	f85d eb04 	ldr.w	lr, [sp], #4
 800c628:	f7ff bfd8 	b.w	800c5dc <with_errno>
 800c62c:	4602      	mov	r2, r0
 800c62e:	460b      	mov	r3, r1
 800c630:	e7ee      	b.n	800c610 <xflow+0x10>
 800c632:	0000      	movs	r0, r0
 800c634:	0000      	movs	r0, r0
	...

0800c638 <__math_uflow>:
 800c638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c640 <__math_uflow+0x8>
 800c63c:	f7ff bfe0 	b.w	800c600 <xflow>
 800c640:	00000000 	.word	0x00000000
 800c644:	10000000 	.word	0x10000000

0800c648 <__math_oflow>:
 800c648:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c650 <__math_oflow+0x8>
 800c64c:	f7ff bfd8 	b.w	800c600 <xflow>
 800c650:	00000000 	.word	0x00000000
 800c654:	70000000 	.word	0x70000000

0800c658 <__ieee754_sqrt>:
 800c658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	4a68      	ldr	r2, [pc, #416]	@ (800c800 <__ieee754_sqrt+0x1a8>)
 800c65e:	ec55 4b10 	vmov	r4, r5, d0
 800c662:	43aa      	bics	r2, r5
 800c664:	462b      	mov	r3, r5
 800c666:	4621      	mov	r1, r4
 800c668:	d110      	bne.n	800c68c <__ieee754_sqrt+0x34>
 800c66a:	4622      	mov	r2, r4
 800c66c:	4620      	mov	r0, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	f7f3 ffca 	bl	8000608 <__aeabi_dmul>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	4620      	mov	r0, r4
 800c67a:	4629      	mov	r1, r5
 800c67c:	f7f3 fe0e 	bl	800029c <__adddf3>
 800c680:	4604      	mov	r4, r0
 800c682:	460d      	mov	r5, r1
 800c684:	ec45 4b10 	vmov	d0, r4, r5
 800c688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c68c:	2d00      	cmp	r5, #0
 800c68e:	dc0e      	bgt.n	800c6ae <__ieee754_sqrt+0x56>
 800c690:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c694:	4322      	orrs	r2, r4
 800c696:	d0f5      	beq.n	800c684 <__ieee754_sqrt+0x2c>
 800c698:	b19d      	cbz	r5, 800c6c2 <__ieee754_sqrt+0x6a>
 800c69a:	4622      	mov	r2, r4
 800c69c:	4620      	mov	r0, r4
 800c69e:	4629      	mov	r1, r5
 800c6a0:	f7f3 fdfa 	bl	8000298 <__aeabi_dsub>
 800c6a4:	4602      	mov	r2, r0
 800c6a6:	460b      	mov	r3, r1
 800c6a8:	f7f4 f8d8 	bl	800085c <__aeabi_ddiv>
 800c6ac:	e7e8      	b.n	800c680 <__ieee754_sqrt+0x28>
 800c6ae:	152a      	asrs	r2, r5, #20
 800c6b0:	d115      	bne.n	800c6de <__ieee754_sqrt+0x86>
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	e009      	b.n	800c6ca <__ieee754_sqrt+0x72>
 800c6b6:	0acb      	lsrs	r3, r1, #11
 800c6b8:	3a15      	subs	r2, #21
 800c6ba:	0549      	lsls	r1, r1, #21
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d0fa      	beq.n	800c6b6 <__ieee754_sqrt+0x5e>
 800c6c0:	e7f7      	b.n	800c6b2 <__ieee754_sqrt+0x5a>
 800c6c2:	462a      	mov	r2, r5
 800c6c4:	e7fa      	b.n	800c6bc <__ieee754_sqrt+0x64>
 800c6c6:	005b      	lsls	r3, r3, #1
 800c6c8:	3001      	adds	r0, #1
 800c6ca:	02dc      	lsls	r4, r3, #11
 800c6cc:	d5fb      	bpl.n	800c6c6 <__ieee754_sqrt+0x6e>
 800c6ce:	1e44      	subs	r4, r0, #1
 800c6d0:	1b12      	subs	r2, r2, r4
 800c6d2:	f1c0 0420 	rsb	r4, r0, #32
 800c6d6:	fa21 f404 	lsr.w	r4, r1, r4
 800c6da:	4323      	orrs	r3, r4
 800c6dc:	4081      	lsls	r1, r0
 800c6de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6e2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c6e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c6ea:	07d2      	lsls	r2, r2, #31
 800c6ec:	bf5c      	itt	pl
 800c6ee:	005b      	lslpl	r3, r3, #1
 800c6f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c6f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c6f8:	bf58      	it	pl
 800c6fa:	0049      	lslpl	r1, r1, #1
 800c6fc:	2600      	movs	r6, #0
 800c6fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c702:	106d      	asrs	r5, r5, #1
 800c704:	0049      	lsls	r1, r1, #1
 800c706:	2016      	movs	r0, #22
 800c708:	4632      	mov	r2, r6
 800c70a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c70e:	1917      	adds	r7, r2, r4
 800c710:	429f      	cmp	r7, r3
 800c712:	bfde      	ittt	le
 800c714:	193a      	addle	r2, r7, r4
 800c716:	1bdb      	suble	r3, r3, r7
 800c718:	1936      	addle	r6, r6, r4
 800c71a:	0fcf      	lsrs	r7, r1, #31
 800c71c:	3801      	subs	r0, #1
 800c71e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c722:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c726:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c72a:	d1f0      	bne.n	800c70e <__ieee754_sqrt+0xb6>
 800c72c:	4604      	mov	r4, r0
 800c72e:	2720      	movs	r7, #32
 800c730:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c734:	429a      	cmp	r2, r3
 800c736:	eb00 0e0c 	add.w	lr, r0, ip
 800c73a:	db02      	blt.n	800c742 <__ieee754_sqrt+0xea>
 800c73c:	d113      	bne.n	800c766 <__ieee754_sqrt+0x10e>
 800c73e:	458e      	cmp	lr, r1
 800c740:	d811      	bhi.n	800c766 <__ieee754_sqrt+0x10e>
 800c742:	f1be 0f00 	cmp.w	lr, #0
 800c746:	eb0e 000c 	add.w	r0, lr, ip
 800c74a:	da42      	bge.n	800c7d2 <__ieee754_sqrt+0x17a>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	db40      	blt.n	800c7d2 <__ieee754_sqrt+0x17a>
 800c750:	f102 0801 	add.w	r8, r2, #1
 800c754:	1a9b      	subs	r3, r3, r2
 800c756:	458e      	cmp	lr, r1
 800c758:	bf88      	it	hi
 800c75a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c75e:	eba1 010e 	sub.w	r1, r1, lr
 800c762:	4464      	add	r4, ip
 800c764:	4642      	mov	r2, r8
 800c766:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c76a:	3f01      	subs	r7, #1
 800c76c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c770:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c774:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c778:	d1dc      	bne.n	800c734 <__ieee754_sqrt+0xdc>
 800c77a:	4319      	orrs	r1, r3
 800c77c:	d01b      	beq.n	800c7b6 <__ieee754_sqrt+0x15e>
 800c77e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c804 <__ieee754_sqrt+0x1ac>
 800c782:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c808 <__ieee754_sqrt+0x1b0>
 800c786:	e9da 0100 	ldrd	r0, r1, [sl]
 800c78a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c78e:	f7f3 fd83 	bl	8000298 <__aeabi_dsub>
 800c792:	e9da 8900 	ldrd	r8, r9, [sl]
 800c796:	4602      	mov	r2, r0
 800c798:	460b      	mov	r3, r1
 800c79a:	4640      	mov	r0, r8
 800c79c:	4649      	mov	r1, r9
 800c79e:	f7f4 f9af 	bl	8000b00 <__aeabi_dcmple>
 800c7a2:	b140      	cbz	r0, 800c7b6 <__ieee754_sqrt+0x15e>
 800c7a4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c7a8:	e9da 0100 	ldrd	r0, r1, [sl]
 800c7ac:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7b0:	d111      	bne.n	800c7d6 <__ieee754_sqrt+0x17e>
 800c7b2:	3601      	adds	r6, #1
 800c7b4:	463c      	mov	r4, r7
 800c7b6:	1072      	asrs	r2, r6, #1
 800c7b8:	0863      	lsrs	r3, r4, #1
 800c7ba:	07f1      	lsls	r1, r6, #31
 800c7bc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c7c0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c7c4:	bf48      	it	mi
 800c7c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c7ca:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	e756      	b.n	800c680 <__ieee754_sqrt+0x28>
 800c7d2:	4690      	mov	r8, r2
 800c7d4:	e7be      	b.n	800c754 <__ieee754_sqrt+0xfc>
 800c7d6:	f7f3 fd61 	bl	800029c <__adddf3>
 800c7da:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4640      	mov	r0, r8
 800c7e4:	4649      	mov	r1, r9
 800c7e6:	f7f4 f981 	bl	8000aec <__aeabi_dcmplt>
 800c7ea:	b120      	cbz	r0, 800c7f6 <__ieee754_sqrt+0x19e>
 800c7ec:	1ca0      	adds	r0, r4, #2
 800c7ee:	bf08      	it	eq
 800c7f0:	3601      	addeq	r6, #1
 800c7f2:	3402      	adds	r4, #2
 800c7f4:	e7df      	b.n	800c7b6 <__ieee754_sqrt+0x15e>
 800c7f6:	1c63      	adds	r3, r4, #1
 800c7f8:	f023 0401 	bic.w	r4, r3, #1
 800c7fc:	e7db      	b.n	800c7b6 <__ieee754_sqrt+0x15e>
 800c7fe:	bf00      	nop
 800c800:	7ff00000 	.word	0x7ff00000
 800c804:	200002d0 	.word	0x200002d0
 800c808:	200002c8 	.word	0x200002c8

0800c80c <_init>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr

0800c818 <_fini>:
 800c818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81a:	bf00      	nop
 800c81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c81e:	bc08      	pop	{r3}
 800c820:	469e      	mov	lr, r3
 800c822:	4770      	bx	lr
