
PWM_Delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6c0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800c860  0800c860  0001c860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc70  0800cc70  000202d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc70  0800cc70  0001cc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc78  0800cc78  000202d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc78  0800cc78  0001cc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc7c  0800cc7c  0001cc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  0800cc80  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  200002d8  0800cf58  000202d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002110  0800cf58  00022110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020308  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121f0  00000000  00000000  0002034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003300  00000000  00000000  0003253b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00035840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c07  00000000  00000000  00036830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a9d8  00000000  00000000  00037437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015dae  00000000  00000000  00051e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097ddb  00000000  00000000  00067bbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000555c  00000000  00000000  000ff998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00104ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c848 	.word	0x0800c848

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	0800c848 	.word	0x0800c848

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <count2volt>:

#define Vref 3.3 // Reference voltage (in volts)

int max_count;

double count2volt(int res, int count){
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]

	    max_count = pow(2, res) - 1;
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff fb36 	bl	8000534 <__aeabi_i2d>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	ec43 2b11 	vmov	d1, r2, r3
 8000ed0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8000f40 <count2volt+0x88>
 8000ed4:	f00a fd80 	bl	800b9d8 <pow>
 8000ed8:	ec51 0b10 	vmov	r0, r1, d0
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <count2volt+0x98>)
 8000ee2:	f7ff f9d9 	bl	8000298 <__aeabi_dsub>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	4610      	mov	r0, r2
 8000eec:	4619      	mov	r1, r3
 8000eee:	f7ff fe3b 	bl	8000b68 <__aeabi_d2iz>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a17      	ldr	r2, [pc, #92]	; (8000f54 <count2volt+0x9c>)
 8000ef6:	6013      	str	r3, [r2, #0]

	    return(Vref / max_count * count);
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <count2volt+0x9c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb19 	bl	8000534 <__aeabi_i2d>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	a110      	add	r1, pc, #64	; (adr r1, 8000f48 <count2volt+0x90>)
 8000f08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f0c:	f7ff fca6 	bl	800085c <__aeabi_ddiv>
 8000f10:	4602      	mov	r2, r0
 8000f12:	460b      	mov	r3, r1
 8000f14:	4614      	mov	r4, r2
 8000f16:	461d      	mov	r5, r3
 8000f18:	6838      	ldr	r0, [r7, #0]
 8000f1a:	f7ff fb0b 	bl	8000534 <__aeabi_i2d>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4620      	mov	r0, r4
 8000f24:	4629      	mov	r1, r5
 8000f26:	f7ff fb6f 	bl	8000608 <__aeabi_dmul>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f32:	eeb0 0a47 	vmov.f32	s0, s14
 8000f36:	eef0 0a67 	vmov.f32	s1, s15
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f40:	00000000 	.word	0x00000000
 8000f44:	40000000 	.word	0x40000000
 8000f48:	66666666 	.word	0x66666666
 8000f4c:	400a6666 	.word	0x400a6666
 8000f50:	3ff00000 	.word	0x3ff00000
 8000f54:	200002f4 	.word	0x200002f4

08000f58 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f5e:	f000 fc29 	bl	80017b4 <HAL_Init>
	/* USER CODE BEGIN Init */
	//HAL_StatusTypeDef RET;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f62:	f000 f8ad 	bl	80010c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f66:	f000 f997 	bl	8001298 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f6a:	f000 f915 	bl	8001198 <MX_ADC1_Init>
	MX_I2C2_Init();
 8000f6e:	f000 f965 	bl	800123c <MX_I2C2_Init>
	MX_USB_DEVICE_Init();
 8000f72:	f007 f9ab 	bl	80082cc <MX_USB_DEVICE_Init>
	// generateSineWave();


	while (1) {

		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000f76:	2101      	movs	r1, #1
 8000f78:	4845      	ldr	r0, [pc, #276]	; (8001090 <main+0x138>)
 8000f7a:	f001 fb39 	bl	80025f0 <HAL_GPIO_ReadPin>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b44      	ldr	r3, [pc, #272]	; (8001094 <main+0x13c>)
 8000f84:	701a      	strb	r2, [r3, #0]

		if (pinState == GPIO_PIN_RESET) {
 8000f86:	4b43      	ldr	r3, [pc, #268]	; (8001094 <main+0x13c>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d106      	bne.n	8000f9c <main+0x44>
			bufon[0] = FULLSCALE >> 8;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	; (8001098 <main+0x140>)
 8000f90:	220f      	movs	r2, #15
 8000f92:	701a      	strb	r2, [r3, #0]
			bufon[1] = FULLSCALE;
 8000f94:	4b40      	ldr	r3, [pc, #256]	; (8001098 <main+0x140>)
 8000f96:	22ff      	movs	r2, #255	; 0xff
 8000f98:	705a      	strb	r2, [r3, #1]
 8000f9a:	e005      	b.n	8000fa8 <main+0x50>
		}
		else {
			bufon[0] = MIDSCALE >> 8;
 8000f9c:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <main+0x140>)
 8000f9e:	2207      	movs	r2, #7
 8000fa0:	701a      	strb	r2, [r3, #0]
			bufon[1] = MIDSCALE;
 8000fa2:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <main+0x140>)
 8000fa4:	2245      	movs	r2, #69	; 0x45
 8000fa6:	705a      	strb	r2, [r3, #1]
		}

		if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufon, 2, 50) == HAL_OK) {
 8000fa8:	2332      	movs	r3, #50	; 0x32
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2302      	movs	r3, #2
 8000fae:	4a3a      	ldr	r2, [pc, #232]	; (8001098 <main+0x140>)
 8000fb0:	21c0      	movs	r1, #192	; 0xc0
 8000fb2:	483a      	ldr	r0, [pc, #232]	; (800109c <main+0x144>)
 8000fb4:	f001 fc92 	bl	80028dc <HAL_I2C_Master_Transmit>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d105      	bne.n	8000fca <main+0x72>
			adcValue = readADCValue();
 8000fbe:	f000 f9d9 	bl	8001374 <readADCValue>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <main+0x148>)
 8000fc8:	601a      	str	r2, [r3, #0]
		}
		voltsOn = count2volt(ADCRES, adcValue);
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <main+0x148>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4619      	mov	r1, r3
 8000fd0:	200c      	movs	r0, #12
 8000fd2:	f7ff ff71 	bl	8000eb8 <count2volt>
 8000fd6:	eeb0 7a40 	vmov.f32	s14, s0
 8000fda:	eef0 7a60 	vmov.f32	s15, s1
 8000fde:	4b31      	ldr	r3, [pc, #196]	; (80010a4 <main+0x14c>)
 8000fe0:	ed83 7b00 	vstr	d7, [r3]
		ton = 80 * adcValue / 4096 + 10;
 8000fe4:	4b2e      	ldr	r3, [pc, #184]	; (80010a0 <main+0x148>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4613      	mov	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da01      	bge.n	8000ff8 <main+0xa0>
 8000ff4:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8000ff8:	131b      	asrs	r3, r3, #12
 8000ffa:	330a      	adds	r3, #10
 8000ffc:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <main+0x150>)
 8000ffe:	6013      	str	r3, [r2, #0]
		toff = 100 - ton;
 8001000:	4b29      	ldr	r3, [pc, #164]	; (80010a8 <main+0x150>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001008:	4a28      	ldr	r2, [pc, #160]	; (80010ac <main+0x154>)
 800100a:	6013      	str	r3, [r2, #0]
		sprintf(buffer, "%.3f\r\n", voltsOn);
 800100c:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <main+0x14c>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	4927      	ldr	r1, [pc, #156]	; (80010b0 <main+0x158>)
 8001014:	4827      	ldr	r0, [pc, #156]	; (80010b4 <main+0x15c>)
 8001016:	f008 fb81 	bl	800971c <siprintf>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 800101a:	2120      	movs	r1, #32
 800101c:	4825      	ldr	r0, [pc, #148]	; (80010b4 <main+0x15c>)
 800101e:	f007 fa13 	bl	8008448 <CDC_Transmit_FS>
		HAL_Delay(ton);
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <main+0x150>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 fc36 	bl	8001898 <HAL_Delay>

		if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufoff, 2, 50) == HAL_OK) {
 800102c:	2332      	movs	r3, #50	; 0x32
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2302      	movs	r3, #2
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <main+0x160>)
 8001034:	21c0      	movs	r1, #192	; 0xc0
 8001036:	4819      	ldr	r0, [pc, #100]	; (800109c <main+0x144>)
 8001038:	f001 fc50 	bl	80028dc <HAL_I2C_Master_Transmit>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d105      	bne.n	800104e <main+0xf6>
			adcValue = readADCValue();
 8001042:	f000 f997 	bl	8001374 <readADCValue>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <main+0x148>)
 800104c:	601a      	str	r2, [r3, #0]
		}
		voltsOff = count2volt(ADCRES, adcValue);
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <main+0x148>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4619      	mov	r1, r3
 8001054:	200c      	movs	r0, #12
 8001056:	f7ff ff2f 	bl	8000eb8 <count2volt>
 800105a:	eeb0 7a40 	vmov.f32	s14, s0
 800105e:	eef0 7a60 	vmov.f32	s15, s1
 8001062:	4b16      	ldr	r3, [pc, #88]	; (80010bc <main+0x164>)
 8001064:	ed83 7b00 	vstr	d7, [r3]
		sprintf(buffer, "%.3f\r\n", voltsOff);
 8001068:	4b14      	ldr	r3, [pc, #80]	; (80010bc <main+0x164>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	4910      	ldr	r1, [pc, #64]	; (80010b0 <main+0x158>)
 8001070:	4810      	ldr	r0, [pc, #64]	; (80010b4 <main+0x15c>)
 8001072:	f008 fb53 	bl	800971c <siprintf>
		CDC_Transmit_FS(buffer, sizeof(buffer));
 8001076:	2120      	movs	r1, #32
 8001078:	480e      	ldr	r0, [pc, #56]	; (80010b4 <main+0x15c>)
 800107a:	f007 f9e5 	bl	8008448 <CDC_Transmit_FS>
		HAL_Delay(100 - ton);
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <main+0x150>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fc06 	bl	8001898 <HAL_Delay>
		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800108c:	e773      	b.n	8000f76 <main+0x1e>
 800108e:	bf00      	nop
 8001090:	40020000 	.word	0x40020000
 8001094:	200003d6 	.word	0x200003d6
 8001098:	200003d0 	.word	0x200003d0
 800109c:	20000340 	.word	0x20000340
 80010a0:	20000394 	.word	0x20000394
 80010a4:	200003a0 	.word	0x200003a0
 80010a8:	20000398 	.word	0x20000398
 80010ac:	2000039c 	.word	0x2000039c
 80010b0:	0800c860 	.word	0x0800c860
 80010b4:	200003b0 	.word	0x200003b0
 80010b8:	200003d4 	.word	0x200003d4
 80010bc:	200003a8 	.word	0x200003a8

080010c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	; 0x50
 80010c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	; 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f008 fb87 	bl	80097e2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <SystemClock_Config+0xd0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <SystemClock_Config+0xd0>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <SystemClock_Config+0xd0>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <SystemClock_Config+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a22      	ldr	r2, [pc, #136]	; (8001194 <SystemClock_Config+0xd4>)
 800110a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <SystemClock_Config+0xd4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800111c:	2303      	movs	r3, #3
 800111e:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001120:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001126:	2301      	movs	r3, #1
 8001128:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800112a:	2310      	movs	r3, #16
 800112c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 8001138:	230f      	movs	r3, #15
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 800113c:	2390      	movs	r3, #144	; 0x90
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8001144:	2305      	movs	r3, #5
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f003 f96f 	bl	8004430 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x9c>
		Error_Handler();
 8001158:	f000 f92c 	bl	80013b4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f003 fbd2 	bl	8004920 <HAL_RCC_ClockConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0xc6>
		Error_Handler();
 8001182:	f000 f917 	bl	80013b4 <Error_Handler>
	}
}
 8001186:	bf00      	nop
 8001188:	3750      	adds	r7, #80	; 0x50
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80011aa:	4b21      	ldr	r3, [pc, #132]	; (8001230 <MX_ADC1_Init+0x98>)
 80011ac:	4a21      	ldr	r2, [pc, #132]	; (8001234 <MX_ADC1_Init+0x9c>)
 80011ae:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	; (8001230 <MX_ADC1_Init+0x98>)
 80011b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011b6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	; (8001230 <MX_ADC1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	; (8001230 <MX_ADC1_Init+0x98>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d2:	4b17      	ldr	r3, [pc, #92]	; (8001230 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d8:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_ADC1_Init+0x98>)
 80011da:	4a17      	ldr	r2, [pc, #92]	; (8001238 <MX_ADC1_Init+0xa0>)
 80011dc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <MX_ADC1_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <MX_ADC1_Init+0x98>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <MX_ADC1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	; (8001230 <MX_ADC1_Init+0x98>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_ADC1_Init+0x98>)
 80011fa:	f000 fb71 	bl	80018e0 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x70>
		Error_Handler();
 8001204:	f000 f8d6 	bl	80013b4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001208:	2301      	movs	r3, #1
 800120a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_ADC1_Init+0x98>)
 800121a:	f000 fd25 	bl	8001c68 <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x90>
		Error_Handler();
 8001224:	f000 f8c6 	bl	80013b4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200002f8 	.word	0x200002f8
 8001234:	40012000 	.word	0x40012000
 8001238:	0f000001 	.word	0x0f000001

0800123c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C2_Init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	; (8001290 <MX_I2C2_Init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C2_Init+0x50>)
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_I2C2_Init+0x58>)
 800124a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C2_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_I2C2_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_I2C2_Init+0x50>)
 800125a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_I2C2_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_I2C2_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_I2C2_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_I2C2_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_I2C2_Init+0x50>)
 800127a:	f001 f9eb 	bl	8002654 <HAL_I2C_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001284:	f000 f896 	bl	80013b4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000340 	.word	0x20000340
 8001290:	40005800 	.word	0x40005800
 8001294:	00061a80 	.word	0x00061a80

08001298 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	; 0x28
 800129c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a2c      	ldr	r2, [pc, #176]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b2a      	ldr	r3, [pc, #168]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	4a25      	ldr	r2, [pc, #148]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012d8:	6313      	str	r3, [r2, #48]	; 0x30
 80012da:	4b23      	ldr	r3, [pc, #140]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_GPIO_Init+0xd0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_GPIO_Init+0xd0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	4a17      	ldr	r2, [pc, #92]	; (8001368 <MX_GPIO_Init+0xd0>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	; 0x30
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_GPIO_Init+0xd0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	4811      	ldr	r0, [pc, #68]	; (800136c <MX_GPIO_Init+0xd4>)
 8001326:	f001 f97b 	bl	8002620 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800132a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001330:	2301      	movs	r3, #1
 8001332:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001334:	2301      	movs	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001338:	2300      	movs	r3, #0
 800133a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	480a      	ldr	r0, [pc, #40]	; (800136c <MX_GPIO_Init+0xd4>)
 8001344:	f000 ffd0 	bl	80022e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	4619      	mov	r1, r3
 800135a:	4805      	ldr	r0, [pc, #20]	; (8001370 <MX_GPIO_Init+0xd8>)
 800135c:	f000 ffc4 	bl	80022e8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	40023800 	.word	0x40023800
 800136c:	40020800 	.word	0x40020800
 8001370:	40020000 	.word	0x40020000

08001374 <readADCValue>:
 //ton=(((80*adcValue)/4095)+10);
 //toff=100-ton;
 HAL_ADC_Stop_IT(hadc1);
 }*/

uint32_t readADCValue(void) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
	uint32_t adc_value = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]

	// Inicia a conversão do ADC de forma síncrona
	if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <readADCValue+0x3c>)
 8001380:	f000 faf2 	bl	8001968 <HAL_ADC_Start>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10d      	bne.n	80013a6 <readADCValue+0x32>
		// Espera até que a conversão seja concluída
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 800138a:	2164      	movs	r1, #100	; 0x64
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <readADCValue+0x3c>)
 800138e:	f000 fbd2 	bl	8001b36 <HAL_ADC_PollForConversion>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <readADCValue+0x2c>
			// Obtém o valor convertido
			adc_value = HAL_ADC_GetValue(&hadc1);
 8001398:	4805      	ldr	r0, [pc, #20]	; (80013b0 <readADCValue+0x3c>)
 800139a:	f000 fc57 	bl	8001c4c <HAL_ADC_GetValue>
 800139e:	6078      	str	r0, [r7, #4]
		}
		// Stop ADC to save power and resources
		HAL_ADC_Stop(&hadc1);
 80013a0:	4803      	ldr	r0, [pc, #12]	; (80013b0 <readADCValue+0x3c>)
 80013a2:	f000 fb95 	bl	8001ad0 <HAL_ADC_Stop>
	}

	return adc_value;
 80013a6:	687b      	ldr	r3, [r7, #4]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200002f8 	.word	0x200002f8

080013b4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013b8:	b672      	cpsid	i
}
 80013ba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013bc:	e7fe      	b.n	80013bc <Error_Handler+0x8>
	...

080013c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	4a0f      	ldr	r2, [pc, #60]	; (800140c <HAL_MspInit+0x4c>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013d4:	6453      	str	r3, [r2, #68]	; 0x44
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_MspInit+0x4c>)
 80013d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a08      	ldr	r2, [pc, #32]	; (800140c <HAL_MspInit+0x4c>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_MspInit+0x4c>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	603b      	str	r3, [r7, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_ADC_MspInit+0x7c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d127      	bne.n	8001482 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a15      	ldr	r2, [pc, #84]	; (8001490 <HAL_ADC_MspInit+0x80>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <HAL_ADC_MspInit+0x80>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800146e:	2303      	movs	r3, #3
 8001470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0314 	add.w	r3, r7, #20
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_ADC_MspInit+0x84>)
 800147e:	f000 ff33 	bl	80022e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40012000 	.word	0x40012000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08a      	sub	sp, #40	; 0x28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a21      	ldr	r2, [pc, #132]	; (800153c <HAL_I2C_MspInit+0xa4>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d13c      	bne.n	8001534 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <HAL_I2C_MspInit+0xa8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a1f      	ldr	r2, [pc, #124]	; (8001540 <HAL_I2C_MspInit+0xa8>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_I2C_MspInit+0xa8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014dc:	2312      	movs	r3, #18
 80014de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4619      	mov	r1, r3
 80014f2:	4814      	ldr	r0, [pc, #80]	; (8001544 <HAL_I2C_MspInit+0xac>)
 80014f4:	f000 fef8 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014f8:	2308      	movs	r3, #8
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014fc:	2312      	movs	r3, #18
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001508:	2309      	movs	r3, #9
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	4619      	mov	r1, r3
 8001512:	480c      	ldr	r0, [pc, #48]	; (8001544 <HAL_I2C_MspInit+0xac>)
 8001514:	f000 fee8 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	4b08      	ldr	r3, [pc, #32]	; (8001540 <HAL_I2C_MspInit+0xa8>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a07      	ldr	r2, [pc, #28]	; (8001540 <HAL_I2C_MspInit+0xa8>)
 8001522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <HAL_I2C_MspInit+0xa8>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40005800 	.word	0x40005800
 8001540:	40023800 	.word	0x40023800
 8001544:	40020400 	.word	0x40020400

08001548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800154c:	e7fe      	b.n	800154c <NMI_Handler+0x4>

0800154e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001594:	f000 f960 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015a0:	4802      	ldr	r0, [pc, #8]	; (80015ac <OTG_FS_IRQHandler+0x10>)
 80015a2:	f001 fe38 	bl	8003216 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	200018c0 	.word	0x200018c0

080015b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return 1;
 80015b4:	2301      	movs	r3, #1
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_kill>:

int _kill(int pid, int sig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015ca:	f008 f95d 	bl	8009888 <__errno>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2216      	movs	r2, #22
 80015d2:	601a      	str	r2, [r3, #0]
  return -1;
 80015d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <_exit>:

void _exit (int status)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff ffe7 	bl	80015c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015f2:	e7fe      	b.n	80015f2 <_exit+0x12>

080015f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e00a      	b.n	800161c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001606:	f3af 8000 	nop.w
 800160a:	4601      	mov	r1, r0
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	60ba      	str	r2, [r7, #8]
 8001612:	b2ca      	uxtb	r2, r1
 8001614:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	dbf0      	blt.n	8001606 <_read+0x12>
  }

  return len;
 8001624:	687b      	ldr	r3, [r7, #4]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e009      	b.n	8001654 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	60ba      	str	r2, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	3301      	adds	r3, #1
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	697a      	ldr	r2, [r7, #20]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	429a      	cmp	r2, r3
 800165a:	dbf1      	blt.n	8001640 <_write+0x12>
  }
  return len;
 800165c:	687b      	ldr	r3, [r7, #4]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_close>:

int _close(int file)
{
 8001666:	b480      	push	{r7}
 8001668:	b083      	sub	sp, #12
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800166e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001672:	4618      	mov	r0, r3
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800167e:	b480      	push	{r7}
 8001680:	b083      	sub	sp, #12
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168e:	605a      	str	r2, [r3, #4]
  return 0;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_isatty>:

int _isatty(int file)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016a6:	2301      	movs	r3, #1
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
	...

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f008 f8c2 	bl	8009888 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20020000 	.word	0x20020000
 8001730:	00000400 	.word	0x00000400
 8001734:	200003d8 	.word	0x200003d8
 8001738:	20002110 	.word	0x20002110

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001764:	f7ff ffea 	bl	800173c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480c      	ldr	r0, [pc, #48]	; (800179c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800176c:	4a0d      	ldr	r2, [pc, #52]	; (80017a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0a      	ldr	r2, [pc, #40]	; (80017a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001780:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800178e:	f008 f881 	bl	8009894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff fbe1 	bl	8000f58 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 80017a4:	0800cc80 	.word	0x0800cc80
  ldr r2, =_sbss
 80017a8:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 80017ac:	20002110 	.word	0x20002110

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 fd41 	bl	8002264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fdea 	bl	80013c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fd59 	bl	80022ce <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 fd21 	bl	800227a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000000 	.word	0x20000000
 8001850:	20000008 	.word	0x20000008
 8001854:	20000004 	.word	0x20000004

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008
 800187c:	200003dc 	.word	0x200003dc

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200003dc 	.word	0x200003dc

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018e8:	2300      	movs	r3, #0
 80018ea:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e033      	b.n	800195e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d109      	bne.n	8001912 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff fd86 	bl	8001410 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	d118      	bne.n	8001950 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001926:	f023 0302 	bic.w	r3, r3, #2
 800192a:	f043 0202 	orr.w	r2, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 faca 	bl	8001ecc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f023 0303 	bic.w	r3, r3, #3
 8001946:	f043 0201 	orr.w	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40
 800194e:	e001      	b.n	8001954 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800195c:	7bfb      	ldrb	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
	...

08001968 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800197a:	2b01      	cmp	r3, #1
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Start+0x1a>
 800197e:	2302      	movs	r3, #2
 8001980:	e097      	b.n	8001ab2 <HAL_ADC_Start+0x14a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2201      	movs	r2, #1
 8001986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d018      	beq.n	80019ca <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <HAL_ADC_Start+0x158>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a45      	ldr	r2, [pc, #276]	; (8001ac4 <HAL_ADC_Start+0x15c>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	0c9a      	lsrs	r2, r3, #18
 80019b4:	4613      	mov	r3, r2
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019bc:	e002      	b.n	80019c4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f9      	bne.n	80019be <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d15f      	bne.n	8001a98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a16:	d106      	bne.n	8001a26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1c:	f023 0206 	bic.w	r2, r3, #6
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	645a      	str	r2, [r3, #68]	; 0x44
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_ADC_Start+0x160>)
 8001a36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a40:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d129      	bne.n	8001ab0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	e020      	b.n	8001ab0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <HAL_ADC_Start+0x164>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d11b      	bne.n	8001ab0 <HAL_ADC_Start+0x148>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d114      	bne.n	8001ab0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	e00b      	b.n	8001ab0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f043 0210 	orr.w	r2, r3, #16
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f043 0201 	orr.w	r2, r3, #1
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	20000000 	.word	0x20000000
 8001ac4:	431bde83 	.word	0x431bde83
 8001ac8:	40012300 	.word	0x40012300
 8001acc:	40012000 	.word	0x40012000

08001ad0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Stop+0x16>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e021      	b.n	8001b2a <HAL_ADC_Stop+0x5a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	f043 0201 	orr.w	r2, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b52:	d113      	bne.n	8001b7c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b62:	d10b      	bne.n	8001b7c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f043 0220 	orr.w	r2, r3, #32
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e063      	b.n	8001c44 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b7c:	f7ff fe80 	bl	8001880 <HAL_GetTick>
 8001b80:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b82:	e021      	b.n	8001bc8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b8a:	d01d      	beq.n	8001bc8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_ADC_PollForConversion+0x6c>
 8001b92:	f7ff fe75 	bl	8001880 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d212      	bcs.n	8001bc8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d00b      	beq.n	8001bc8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f043 0204 	orr.w	r2, r3, #4
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e03d      	b.n	8001c44 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d1d6      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f06f 0212 	mvn.w	r2, #18
 8001bde:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d123      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11f      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d006      	beq.n	8001c1e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d105      	bne.n	8001c42 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_ADC_ConfigChannel+0x1c>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e113      	b.n	8001eac <HAL_ADC_ConfigChannel+0x244>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b09      	cmp	r3, #9
 8001c92:	d925      	bls.n	8001ce0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68d9      	ldr	r1, [r3, #12]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b1e      	subs	r3, #30
 8001caa:	2207      	movs	r2, #7
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	400a      	ands	r2, r1
 8001cb8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68d9      	ldr	r1, [r3, #12]
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	4603      	mov	r3, r0
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4403      	add	r3, r0
 8001cd2:	3b1e      	subs	r3, #30
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	e022      	b.n	8001d26 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6919      	ldr	r1, [r3, #16]
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	461a      	mov	r2, r3
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	400a      	ands	r2, r1
 8001d02:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6919      	ldr	r1, [r3, #16]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	4603      	mov	r3, r0
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4403      	add	r3, r0
 8001d1c:	409a      	lsls	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d824      	bhi.n	8001d78 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	3b05      	subs	r3, #5
 8001d40:	221f      	movs	r2, #31
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	400a      	ands	r2, r1
 8001d4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685a      	ldr	r2, [r3, #4]
 8001d62:	4613      	mov	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	4413      	add	r3, r2
 8001d68:	3b05      	subs	r3, #5
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	635a      	str	r2, [r3, #52]	; 0x34
 8001d76:	e04c      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d824      	bhi.n	8001dca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	4413      	add	r3, r2
 8001d90:	3b23      	subs	r3, #35	; 0x23
 8001d92:	221f      	movs	r2, #31
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43da      	mvns	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	400a      	ands	r2, r1
 8001da0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b23      	subs	r3, #35	; 0x23
 8001dbc:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc8:	e023      	b.n	8001e12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b41      	subs	r3, #65	; 0x41
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43da      	mvns	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	400a      	ands	r2, r1
 8001dea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	3b41      	subs	r3, #65	; 0x41
 8001e06:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <HAL_ADC_ConfigChannel+0x250>)
 8001e14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <HAL_ADC_ConfigChannel+0x254>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d10f      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1d8>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b12      	cmp	r3, #18
 8001e26:	d10b      	bne.n	8001e40 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1d      	ldr	r2, [pc, #116]	; (8001ebc <HAL_ADC_ConfigChannel+0x254>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12b      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x23a>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <HAL_ADC_ConfigChannel+0x258>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <HAL_ADC_ConfigChannel+0x1f4>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b11      	cmp	r3, #17
 8001e5a:	d122      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a11      	ldr	r2, [pc, #68]	; (8001ec0 <HAL_ADC_ConfigChannel+0x258>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d111      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_ADC_ConfigChannel+0x25c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a11      	ldr	r2, [pc, #68]	; (8001ec8 <HAL_ADC_ConfigChannel+0x260>)
 8001e84:	fba2 2303 	umull	r2, r3, r2, r3
 8001e88:	0c9a      	lsrs	r2, r3, #18
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e94:	e002      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f9      	bne.n	8001e96 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3714      	adds	r7, #20
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40012300 	.word	0x40012300
 8001ebc:	40012000 	.word	0x40012000
 8001ec0:	10000012 	.word	0x10000012
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	431bde83 	.word	0x431bde83

08001ecc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed4:	4b79      	ldr	r3, [pc, #484]	; (80020bc <ADC_Init+0x1f0>)
 8001ed6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6859      	ldr	r1, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	021a      	lsls	r2, r3, #8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	6859      	ldr	r1, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5e:	4a58      	ldr	r2, [pc, #352]	; (80020c0 <ADC_Init+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d022      	beq.n	8001faa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6899      	ldr	r1, [r3, #8]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	e00f      	b.n	8001fca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 0202 	bic.w	r2, r2, #2
 8001fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	7e1b      	ldrb	r3, [r3, #24]
 8001fe4:	005a      	lsls	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002006:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002016:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6859      	ldr	r1, [r3, #4]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002022:	3b01      	subs	r3, #1
 8002024:	035a      	lsls	r2, r3, #13
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	e007      	b.n	8002040 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800204e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	3b01      	subs	r3, #1
 800205c:	051a      	lsls	r2, r3, #20
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6899      	ldr	r1, [r3, #8]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002082:	025a      	lsls	r2, r3, #9
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	430a      	orrs	r2, r1
 800208a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	029a      	lsls	r2, r3, #10
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	609a      	str	r2, [r3, #8]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	40012300 	.word	0x40012300
 80020c0:	0f000001 	.word	0x0f000001

080020c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b085      	sub	sp, #20
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020d4:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020e0:	4013      	ands	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020f6:	4a04      	ldr	r2, [pc, #16]	; (8002108 <__NVIC_SetPriorityGrouping+0x44>)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	60d3      	str	r3, [r2, #12]
}
 80020fc:	bf00      	nop
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <__NVIC_GetPriorityGrouping+0x18>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	0a1b      	lsrs	r3, r3, #8
 8002116:	f003 0307 	and.w	r3, r3, #7
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	e000ed00 	.word	0xe000ed00

08002128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	2b00      	cmp	r3, #0
 8002138:	db0b      	blt.n	8002152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	4907      	ldr	r1, [pc, #28]	; (8002160 <__NVIC_EnableIRQ+0x38>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	2001      	movs	r0, #1
 800214a:	fa00 f202 	lsl.w	r2, r0, r2
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000e100 	.word	0xe000e100

08002164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002174:	2b00      	cmp	r3, #0
 8002176:	db0a      	blt.n	800218e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	490c      	ldr	r1, [pc, #48]	; (80021b0 <__NVIC_SetPriority+0x4c>)
 800217e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002182:	0112      	lsls	r2, r2, #4
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	440b      	add	r3, r1
 8002188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800218c:	e00a      	b.n	80021a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4908      	ldr	r1, [pc, #32]	; (80021b4 <__NVIC_SetPriority+0x50>)
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	3b04      	subs	r3, #4
 800219c:	0112      	lsls	r2, r2, #4
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	440b      	add	r3, r1
 80021a2:	761a      	strb	r2, [r3, #24]
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b089      	sub	sp, #36	; 0x24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f1c3 0307 	rsb	r3, r3, #7
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	bf28      	it	cs
 80021d6:	2304      	movcs	r3, #4
 80021d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3304      	adds	r3, #4
 80021de:	2b06      	cmp	r3, #6
 80021e0:	d902      	bls.n	80021e8 <NVIC_EncodePriority+0x30>
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3b03      	subs	r3, #3
 80021e6:	e000      	b.n	80021ea <NVIC_EncodePriority+0x32>
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	f04f 32ff 	mov.w	r2, #4294967295
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	401a      	ands	r2, r3
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002200:	f04f 31ff 	mov.w	r1, #4294967295
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	fa01 f303 	lsl.w	r3, r1, r3
 800220a:	43d9      	mvns	r1, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	4313      	orrs	r3, r2
         );
}
 8002212:	4618      	mov	r0, r3
 8002214:	3724      	adds	r7, #36	; 0x24
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3b01      	subs	r3, #1
 800222c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002230:	d301      	bcc.n	8002236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002232:	2301      	movs	r3, #1
 8002234:	e00f      	b.n	8002256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002236:	4a0a      	ldr	r2, [pc, #40]	; (8002260 <SysTick_Config+0x40>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800223e:	210f      	movs	r1, #15
 8002240:	f04f 30ff 	mov.w	r0, #4294967295
 8002244:	f7ff ff8e 	bl	8002164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002248:	4b05      	ldr	r3, [pc, #20]	; (8002260 <SysTick_Config+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800224e:	4b04      	ldr	r3, [pc, #16]	; (8002260 <SysTick_Config+0x40>)
 8002250:	2207      	movs	r2, #7
 8002252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	e000e010 	.word	0xe000e010

08002264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff ff29 	bl	80020c4 <__NVIC_SetPriorityGrouping>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}

0800227a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800227a:	b580      	push	{r7, lr}
 800227c:	b086      	sub	sp, #24
 800227e:	af00      	add	r7, sp, #0
 8002280:	4603      	mov	r3, r0
 8002282:	60b9      	str	r1, [r7, #8]
 8002284:	607a      	str	r2, [r7, #4]
 8002286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800228c:	f7ff ff3e 	bl	800210c <__NVIC_GetPriorityGrouping>
 8002290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f7ff ff8e 	bl	80021b8 <NVIC_EncodePriority>
 800229c:	4602      	mov	r2, r0
 800229e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a2:	4611      	mov	r1, r2
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff5d 	bl	8002164 <__NVIC_SetPriority>
}
 80022aa:	bf00      	nop
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff31 	bl	8002128 <__NVIC_EnableIRQ>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7ff ffa2 	bl	8002220 <SysTick_Config>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e159      	b.n	80025b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 8148 	bne.w	80025b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b01      	cmp	r3, #1
 800232c:	d005      	beq.n	800233a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002336:	2b02      	cmp	r3, #2
 8002338:	d130      	bne.n	800239c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	2203      	movs	r2, #3
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	43db      	mvns	r3, r3
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	4013      	ands	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 0201 	and.w	r2, r3, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4313      	orrs	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d017      	beq.n	80023d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80a2 	beq.w	80025b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	4a56      	ldr	r2, [pc, #344]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247c:	6453      	str	r3, [r2, #68]	; 0x44
 800247e:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x2e8>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_GPIO_Init+0x2ec>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a49      	ldr	r2, [pc, #292]	; (80025d8 <HAL_GPIO_Init+0x2f0>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d019      	beq.n	80024ea <HAL_GPIO_Init+0x202>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a48      	ldr	r2, [pc, #288]	; (80025dc <HAL_GPIO_Init+0x2f4>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d013      	beq.n	80024e6 <HAL_GPIO_Init+0x1fe>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a47      	ldr	r2, [pc, #284]	; (80025e0 <HAL_GPIO_Init+0x2f8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00d      	beq.n	80024e2 <HAL_GPIO_Init+0x1fa>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a46      	ldr	r2, [pc, #280]	; (80025e4 <HAL_GPIO_Init+0x2fc>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d007      	beq.n	80024de <HAL_GPIO_Init+0x1f6>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a45      	ldr	r2, [pc, #276]	; (80025e8 <HAL_GPIO_Init+0x300>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d101      	bne.n	80024da <HAL_GPIO_Init+0x1f2>
 80024d6:	2304      	movs	r3, #4
 80024d8:	e008      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024da:	2307      	movs	r3, #7
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024de:	2303      	movs	r3, #3
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x204>
 80024ea:	2300      	movs	r3, #0
 80024ec:	69fa      	ldr	r2, [r7, #28]
 80024ee:	f002 0203 	and.w	r2, r2, #3
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x2ec>)
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <HAL_GPIO_Init+0x304>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_GPIO_Init+0x304>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800255e:	4b23      	ldr	r3, [pc, #140]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	43db      	mvns	r3, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4013      	ands	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002582:	4a1a      	ldr	r2, [pc, #104]	; (80025ec <HAL_GPIO_Init+0x304>)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002588:	4b18      	ldr	r3, [pc, #96]	; (80025ec <HAL_GPIO_Init+0x304>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ac:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <HAL_GPIO_Init+0x304>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3301      	adds	r3, #1
 80025b6:	61fb      	str	r3, [r7, #28]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	2b0f      	cmp	r3, #15
 80025bc:	f67f aea2 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025c0:	bf00      	nop
 80025c2:	bf00      	nop
 80025c4:	3724      	adds	r7, #36	; 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40013800 	.word	0x40013800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40020400 	.word	0x40020400
 80025e0:	40020800 	.word	0x40020800
 80025e4:	40020c00 	.word	0x40020c00
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40013c00 	.word	0x40013c00

080025f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
 800260c:	e001      	b.n	8002612 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3714      	adds	r7, #20
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e12b      	b.n	80028be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe ff0c 	bl	8001498 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b8:	f002 faea 	bl	8004c90 <HAL_RCC_GetPCLK1Freq>
 80026bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a81      	ldr	r2, [pc, #516]	; (80028c8 <HAL_I2C_Init+0x274>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d807      	bhi.n	80026d8 <HAL_I2C_Init+0x84>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a80      	ldr	r2, [pc, #512]	; (80028cc <HAL_I2C_Init+0x278>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e006      	b.n	80026e6 <HAL_I2C_Init+0x92>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <HAL_I2C_Init+0x27c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0e7      	b.n	80028be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a78      	ldr	r2, [pc, #480]	; (80028d4 <HAL_I2C_Init+0x280>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_I2C_Init+0x274>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d802      	bhi.n	8002728 <HAL_I2C_Init+0xd4>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	e009      	b.n	800273c <HAL_I2C_Init+0xe8>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	4a69      	ldr	r2, [pc, #420]	; (80028d8 <HAL_I2C_Init+0x284>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	3301      	adds	r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	430b      	orrs	r3, r1
 8002742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	495c      	ldr	r1, [pc, #368]	; (80028c8 <HAL_I2C_Init+0x274>)
 8002758:	428b      	cmp	r3, r1
 800275a:	d819      	bhi.n	8002790 <HAL_I2C_Init+0x13c>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e59      	subs	r1, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fbb1 f3f3 	udiv	r3, r1, r3
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002770:	400b      	ands	r3, r1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_I2C_Init+0x138>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e59      	subs	r1, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fbb1 f3f3 	udiv	r3, r1, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	e051      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 800278c:	2304      	movs	r3, #4
 800278e:	e04f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <HAL_I2C_Init+0x168>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e012      	b.n	80027e2 <HAL_I2C_Init+0x18e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x196>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e022      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10e      	bne.n	8002810 <HAL_I2C_Init+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e58      	subs	r0, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	440b      	add	r3, r1
 8002800:	fbb0 f3f3 	udiv	r3, r0, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280e:	e00f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6809      	ldr	r1, [r1, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800285e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6911      	ldr	r1, [r2, #16]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	4311      	orrs	r1, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	000186a0 	.word	0x000186a0
 80028cc:	001e847f 	.word	0x001e847f
 80028d0:	003d08ff 	.word	0x003d08ff
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	460b      	mov	r3, r1
 80028ea:	817b      	strh	r3, [r7, #10]
 80028ec:	4613      	mov	r3, r2
 80028ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028f0:	f7fe ffc6 	bl	8001880 <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	f040 80e0 	bne.w	8002ac4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	2319      	movs	r3, #25
 800290a:	2201      	movs	r2, #1
 800290c:	4970      	ldr	r1, [pc, #448]	; (8002ad0 <HAL_I2C_Master_Transmit+0x1f4>)
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 f964 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800291a:	2302      	movs	r3, #2
 800291c:	e0d3      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002924:	2b01      	cmp	r3, #1
 8002926:	d101      	bne.n	800292c <HAL_I2C_Master_Transmit+0x50>
 8002928:	2302      	movs	r3, #2
 800292a:	e0cc      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d007      	beq.n	8002952 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002960:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2221      	movs	r2, #33	; 0x21
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2210      	movs	r2, #16
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	893a      	ldrh	r2, [r7, #8]
 8002982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4a50      	ldr	r2, [pc, #320]	; (8002ad4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002994:	8979      	ldrh	r1, [r7, #10]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6a3a      	ldr	r2, [r7, #32]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 f89c 	bl	8002ad8 <I2C_MasterRequestWrite>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e08d      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	613b      	str	r3, [r7, #16]
 80029be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029c0:	e066      	b.n	8002a90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	6a39      	ldr	r1, [r7, #32]
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 fa22 	bl	8002e10 <I2C_WaitOnTXEFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00d      	beq.n	80029ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d107      	bne.n	80029ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e06b      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	781a      	ldrb	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f003 0304 	and.w	r3, r3, #4
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d11b      	bne.n	8002a64 <HAL_I2C_Master_Transmit+0x188>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d017      	beq.n	8002a64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	6a39      	ldr	r1, [r7, #32]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 fa19 	bl	8002ea0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01a      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d194      	bne.n	80029c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	e000      	b.n	8002ac6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
  }
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3718      	adds	r7, #24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	00100002 	.word	0x00100002
 8002ad4:	ffff0000 	.word	0xffff0000

08002ad8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607a      	str	r2, [r7, #4]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d006      	beq.n	8002b02 <I2C_MasterRequestWrite+0x2a>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d003      	beq.n	8002b02 <I2C_MasterRequestWrite+0x2a>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b00:	d108      	bne.n	8002b14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e00b      	b.n	8002b2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	2b12      	cmp	r3, #18
 8002b1a:	d107      	bne.n	8002b2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f000 f84f 	bl	8002bdc <I2C_WaitOnFlagUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00d      	beq.n	8002b60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b52:	d103      	bne.n	8002b5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e035      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b68:	d108      	bne.n	8002b7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b78:	611a      	str	r2, [r3, #16]
 8002b7a:	e01b      	b.n	8002bb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b7c:	897b      	ldrh	r3, [r7, #10]
 8002b7e:	11db      	asrs	r3, r3, #7
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	f003 0306 	and.w	r3, r3, #6
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	f063 030f 	orn	r3, r3, #15
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <I2C_MasterRequestWrite+0xfc>)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f898 	bl	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e010      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002baa:	897b      	ldrh	r3, [r7, #10]
 8002bac:	b2da      	uxtb	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	4907      	ldr	r1, [pc, #28]	; (8002bd8 <I2C_MasterRequestWrite+0x100>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f888 	bl	8002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	00010008 	.word	0x00010008
 8002bd8:	00010002 	.word	0x00010002

08002bdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	603b      	str	r3, [r7, #0]
 8002be8:	4613      	mov	r3, r2
 8002bea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bec:	e048      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf4:	d044      	beq.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bf6:	f7fe fe43 	bl	8001880 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d302      	bcc.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d139      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10d      	bne.n	8002c32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	e00c      	b.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d116      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	f043 0220 	orr.w	r2, r3, #32
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e023      	b.n	8002cc8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d10d      	bne.n	8002ca6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf0c      	ite	eq
 8002c9c:	2301      	moveq	r3, #1
 8002c9e:	2300      	movne	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	e00c      	b.n	8002cc0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	43da      	mvns	r2, r3
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	bf0c      	ite	eq
 8002cb8:	2301      	moveq	r3, #1
 8002cba:	2300      	movne	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d093      	beq.n	8002bee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	607a      	str	r2, [r7, #4]
 8002cdc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cde:	e071      	b.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cee:	d123      	bne.n	8002d38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0204 	orr.w	r2, r3, #4
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e067      	b.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3e:	d041      	beq.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d40:	f7fe fd9e 	bl	8001880 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d302      	bcc.n	8002d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d136      	bne.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d10c      	bne.n	8002d7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	bf14      	ite	ne
 8002d72:	2301      	movne	r3, #1
 8002d74:	2300      	moveq	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	e00b      	b.n	8002d92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	43da      	mvns	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	4013      	ands	r3, r2
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf14      	ite	ne
 8002d8c:	2301      	movne	r3, #1
 8002d8e:	2300      	moveq	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f043 0220 	orr.w	r2, r3, #32
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e021      	b.n	8002e08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10c      	bne.n	8002de8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf14      	ite	ne
 8002de0:	2301      	movne	r3, #1
 8002de2:	2300      	moveq	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e00b      	b.n	8002e00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f af6d 	bne.w	8002ce0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e1c:	e034      	b.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f886 	bl	8002f30 <I2C_IsAcknowledgeFailed>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e034      	b.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d028      	beq.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fd23 	bl	8001880 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11d      	bne.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e56:	2b80      	cmp	r3, #128	; 0x80
 8002e58:	d016      	beq.n	8002e88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d1c3      	bne.n	8002e1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eac:	e034      	b.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eae:	68f8      	ldr	r0, [r7, #12]
 8002eb0:	f000 f83e 	bl	8002f30 <I2C_IsAcknowledgeFailed>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e034      	b.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d028      	beq.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fe fcdb 	bl	8001880 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d11d      	bne.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f003 0304 	and.w	r3, r3, #4
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	d016      	beq.n	8002f18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e007      	b.n	8002f28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d1c3      	bne.n	8002eae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f46:	d11b      	bne.n	8002f80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	f043 0204 	orr.w	r2, r3, #4
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af02      	add	r7, sp, #8
 8002f94:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e101      	b.n	80031a4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f005 fb7c 	bl	80086b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fce:	d102      	bne.n	8002fd6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 ff83 	bl	8004ee6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6818      	ldr	r0, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	7c1a      	ldrb	r2, [r3, #16]
 8002fe8:	f88d 2000 	strb.w	r2, [sp]
 8002fec:	3304      	adds	r3, #4
 8002fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ff0:	f001 fe62 	bl	8004cb8 <USB_CoreInit>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d005      	beq.n	8003006 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e0ce      	b.n	80031a4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f001 ff7b 	bl	8004f08 <USB_SetCurrentMode>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e0bf      	b.n	80031a4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e04a      	b.n	80030c0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800302a:	7bfa      	ldrb	r2, [r7, #15]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3315      	adds	r3, #21
 800303a:	2201      	movs	r2, #1
 800303c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4413      	add	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	440b      	add	r3, r1
 800304c:	3314      	adds	r3, #20
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003052:	7bfa      	ldrb	r2, [r7, #15]
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	b298      	uxth	r0, r3
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	332e      	adds	r3, #46	; 0x2e
 8003066:	4602      	mov	r2, r0
 8003068:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800306a:	7bfa      	ldrb	r2, [r7, #15]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4413      	add	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	3318      	adds	r3, #24
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	331c      	adds	r3, #28
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003092:	7bfa      	ldrb	r2, [r7, #15]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	3320      	adds	r3, #32
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	3324      	adds	r3, #36	; 0x24
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	3301      	adds	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	791b      	ldrb	r3, [r3, #4]
 80030c4:	7bfa      	ldrb	r2, [r7, #15]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d3af      	bcc.n	800302a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]
 80030ce:	e044      	b.n	800315a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030d0:	7bfa      	ldrb	r2, [r7, #15]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	f203 2355 	addw	r3, r3, #597	; 0x255
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80030e6:	7bfa      	ldrb	r2, [r7, #15]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80030f8:	7bfa      	ldrb	r2, [r7, #15]
 80030fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030fc:	7bfa      	ldrb	r2, [r7, #15]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4413      	add	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003128:	7bfa      	ldrb	r2, [r7, #15]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800313e:	7bfa      	ldrb	r2, [r7, #15]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	3301      	adds	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	791b      	ldrb	r3, [r3, #4]
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	429a      	cmp	r2, r3
 8003162:	d3b5      	bcc.n	80030d0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7c1a      	ldrb	r2, [r3, #16]
 800316c:	f88d 2000 	strb.w	r2, [sp]
 8003170:	3304      	adds	r3, #4
 8003172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003174:	f001 ff14 	bl	8004fa0 <USB_DevInit>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2202      	movs	r2, #2
 8003182:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e00c      	b.n	80031a4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f002 ff58 	bl	8006052 <USB_DevDisconnect>

  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d101      	bne.n	80031c8 <HAL_PCD_Start+0x1c>
 80031c4:	2302      	movs	r3, #2
 80031c6:	e022      	b.n	800320e <HAL_PCD_Start+0x62>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d009      	beq.n	80031f0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fe65 	bl	8004ec4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f002 ff06 	bl	8006010 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b08d      	sub	sp, #52	; 0x34
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f002 ffc4 	bl	80061ba <USB_GetMode>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 848c 	bne.w	8003b52 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f002 ff28 	bl	8006094 <USB_ReadInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 8482 	beq.w	8003b50 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f002 ff15 	bl	8006094 <USB_ReadInterrupts>
 800326a:	4603      	mov	r3, r0
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b02      	cmp	r3, #2
 8003272:	d107      	bne.n	8003284 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f002 0202 	and.w	r2, r2, #2
 8003282:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f002 ff03 	bl	8006094 <USB_ReadInterrupts>
 800328e:	4603      	mov	r3, r0
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b10      	cmp	r3, #16
 8003296:	d161      	bne.n	800335c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0210 	bic.w	r2, r2, #16
 80032a6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	4413      	add	r3, r2
 80032c4:	3304      	adds	r3, #4
 80032c6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	0c5b      	lsrs	r3, r3, #17
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d124      	bne.n	800331e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d035      	beq.n	800334c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80032ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	6a38      	ldr	r0, [r7, #32]
 80032f4:	f002 fd3a 	bl	8005d6c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	68da      	ldr	r2, [r3, #12]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	091b      	lsrs	r3, r3, #4
 8003300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003304:	441a      	add	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003316:	441a      	add	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	615a      	str	r2, [r3, #20]
 800331c:	e016      	b.n	800334c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	0c5b      	lsrs	r3, r3, #17
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	2b06      	cmp	r3, #6
 8003328:	d110      	bne.n	800334c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003330:	2208      	movs	r2, #8
 8003332:	4619      	mov	r1, r3
 8003334:	6a38      	ldr	r0, [r7, #32]
 8003336:	f002 fd19 	bl	8005d6c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003346:	441a      	add	r2, r3
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0210 	orr.w	r2, r2, #16
 800335a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f002 fe97 	bl	8006094 <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003370:	f040 80a7 	bne.w	80034c2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f002 fe9c 	bl	80060ba <USB_ReadDevAllOutEpInterrupt>
 8003382:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003384:	e099      	b.n	80034ba <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 808e 	beq.w	80034ae <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f002 fec0 	bl	8006122 <USB_ReadDevOutEPInterrupt>
 80033a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00c      	beq.n	80033c8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ba:	461a      	mov	r2, r3
 80033bc:	2301      	movs	r3, #1
 80033be:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f000 fea2 	bl	800410c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d00c      	beq.n	80033ec <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	015a      	lsls	r2, r3, #5
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	4413      	add	r3, r2
 80033da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033de:	461a      	mov	r2, r3
 80033e0:	2308      	movs	r3, #8
 80033e2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 ff78 	bl	80042dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003402:	461a      	mov	r2, r3
 8003404:	2310      	movs	r3, #16
 8003406:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d030      	beq.n	8003474 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341a:	2b80      	cmp	r3, #128	; 0x80
 800341c:	d109      	bne.n	8003432 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800342c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003430:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	3304      	adds	r3, #4
 8003446:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	78db      	ldrb	r3, [r3, #3]
 800344c:	2b01      	cmp	r3, #1
 800344e:	d108      	bne.n	8003462 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	2200      	movs	r2, #0
 8003454:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	b2db      	uxtb	r3, r3
 800345a:	4619      	mov	r1, r3
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f005 fa27 	bl	80088b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800346e:	461a      	mov	r2, r3
 8003470:	2302      	movs	r3, #2
 8003472:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	015a      	lsls	r2, r3, #5
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	4413      	add	r3, r2
 8003486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348a:	461a      	mov	r2, r3
 800348c:	2320      	movs	r3, #32
 800348e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d009      	beq.n	80034ae <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	461a      	mov	r2, r3
 80034a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ac:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b0:	3301      	adds	r3, #1
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f47f af62 	bne.w	8003386 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fde4 	bl	8006094 <USB_ReadInterrupts>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034d6:	f040 80db 	bne.w	8003690 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f002 fe05 	bl	80060ee <USB_ReadDevAllInEpInterrupt>
 80034e4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80034ea:	e0cd      	b.n	8003688 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80c2 	beq.w	800367c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034fe:	b2d2      	uxtb	r2, r2
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f002 fe2b 	bl	800615e <USB_ReadDevInEPInterrupt>
 8003508:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d057      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	2201      	movs	r2, #1
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003528:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43db      	mvns	r3, r3
 800352e:	69f9      	ldr	r1, [r7, #28]
 8003530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003534:	4013      	ands	r3, r2
 8003536:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003544:	461a      	mov	r2, r3
 8003546:	2301      	movs	r3, #1
 8003548:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	799b      	ldrb	r3, [r3, #6]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d132      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003556:	4613      	mov	r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	3320      	adds	r3, #32
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4403      	add	r3, r0
 8003572:	331c      	adds	r3, #28
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4419      	add	r1, r3
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4403      	add	r3, r0
 8003586:	3320      	adds	r3, #32
 8003588:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x3a2>
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3324      	adds	r3, #36	; 0x24
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d108      	bne.n	80035b8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80035b0:	461a      	mov	r2, r3
 80035b2:	2101      	movs	r1, #1
 80035b4:	f002 fe32 	bl	800621c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f005 f8fb 	bl	80087ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0308 	and.w	r3, r3, #8
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d008      	beq.n	80035e0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035da:	461a      	mov	r2, r3
 80035dc:	2308      	movs	r3, #8
 80035de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d008      	beq.n	80035fc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035f6:	461a      	mov	r2, r3
 80035f8:	2310      	movs	r3, #16
 80035fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003612:	461a      	mov	r2, r3
 8003614:	2340      	movs	r3, #64	; 0x40
 8003616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d023      	beq.n	800366a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003624:	6a38      	ldr	r0, [r7, #32]
 8003626:	f001 fe1f 	bl	8005268 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	4613      	mov	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	3310      	adds	r3, #16
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	3304      	adds	r3, #4
 800363c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	78db      	ldrb	r3, [r3, #3]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d108      	bne.n	8003658 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2200      	movs	r2, #0
 800364a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	b2db      	uxtb	r3, r3
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f005 f93e 	bl	80088d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	461a      	mov	r2, r3
 8003666:	2302      	movs	r3, #2
 8003668:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b00      	cmp	r3, #0
 8003672:	d003      	beq.n	800367c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003674:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fcbb 	bl	8003ff2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	3301      	adds	r3, #1
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	f47f af2e 	bne.w	80034ec <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f002 fcfd 	bl	8006094 <USB_ReadInterrupts>
 800369a:	4603      	mov	r3, r0
 800369c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036a4:	d122      	bne.n	80036ec <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d108      	bne.n	80036d6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80036cc:	2100      	movs	r1, #0
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 fea2 	bl	8004418 <HAL_PCDEx_LPM_Callback>
 80036d4:	e002      	b.n	80036dc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f005 f8dc 	bl	8008894 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80036ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f002 fccf 	bl	8006094 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003700:	d112      	bne.n	8003728 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b01      	cmp	r3, #1
 8003710:	d102      	bne.n	8003718 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f005 f898 	bl	8008848 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003726:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fcb1 	bl	8006094 <USB_ReadInterrupts>
 8003732:	4603      	mov	r3, r0
 8003734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800373c:	f040 80b7 	bne.w	80038ae <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	69fa      	ldr	r2, [r7, #28]
 800374a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2110      	movs	r1, #16
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fd84 	bl	8005268 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003760:	2300      	movs	r3, #0
 8003762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003764:	e046      	b.n	80037f4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003772:	461a      	mov	r2, r3
 8003774:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003778:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800377c:	015a      	lsls	r2, r3, #5
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	4413      	add	r3, r2
 8003782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378a:	0151      	lsls	r1, r2, #5
 800378c:	69fa      	ldr	r2, [r7, #28]
 800378e:	440a      	add	r2, r1
 8003790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003794:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003798:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	015a      	lsls	r2, r3, #5
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	4413      	add	r3, r2
 80037a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a6:	461a      	mov	r2, r3
 80037a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037be:	0151      	lsls	r1, r2, #5
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	440a      	add	r2, r1
 80037c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037de:	0151      	lsls	r1, r2, #5
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	440a      	add	r2, r1
 80037e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80037ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	3301      	adds	r3, #1
 80037f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	791b      	ldrb	r3, [r3, #4]
 80037f8:	461a      	mov	r2, r3
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d3b2      	bcc.n	8003766 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	69db      	ldr	r3, [r3, #28]
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003812:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7bdb      	ldrb	r3, [r3, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d016      	beq.n	800384a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003826:	69fa      	ldr	r2, [r7, #28]
 8003828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800382c:	f043 030b 	orr.w	r3, r3, #11
 8003830:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003842:	f043 030b 	orr.w	r3, r3, #11
 8003846:	6453      	str	r3, [r2, #68]	; 0x44
 8003848:	e015      	b.n	8003876 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	69fa      	ldr	r2, [r7, #28]
 8003854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003858:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800385c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003860:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003870:	f043 030b 	orr.w	r3, r3, #11
 8003874:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003884:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003888:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003898:	461a      	mov	r2, r3
 800389a:	f002 fcbf 	bl	800621c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f002 fbee 	bl	8006094 <USB_ReadInterrupts>
 80038b8:	4603      	mov	r3, r0
 80038ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c2:	d123      	bne.n	800390c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 fc84 	bl	80061d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f001 fd41 	bl	800535a <USB_GetDevSpeed>
 80038d8:	4603      	mov	r3, r0
 80038da:	461a      	mov	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681c      	ldr	r4, [r3, #0]
 80038e4:	f001 f9c8 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 80038e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80038ee:	461a      	mov	r2, r3
 80038f0:	4620      	mov	r0, r4
 80038f2:	f001 fa45 	bl	8004d80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f004 ff87 	bl	800880a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695a      	ldr	r2, [r3, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800390a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f002 fbbf 	bl	8006094 <USB_ReadInterrupts>
 8003916:	4603      	mov	r3, r0
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b08      	cmp	r3, #8
 800391e:	d10a      	bne.n	8003936 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f004 ff64 	bl	80087ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f002 0208 	and.w	r2, r2, #8
 8003934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4618      	mov	r0, r3
 800393c:	f002 fbaa 	bl	8006094 <USB_ReadInterrupts>
 8003940:	4603      	mov	r3, r0
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b80      	cmp	r3, #128	; 0x80
 8003948:	d123      	bne.n	8003992 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800394a:	6a3b      	ldr	r3, [r7, #32]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003956:	2301      	movs	r3, #1
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	e014      	b.n	8003986 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	f203 2357 	addw	r3, r3, #599	; 0x257
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d105      	bne.n	8003980 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	b2db      	uxtb	r3, r3
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fb08 	bl	8003f90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	3301      	adds	r3, #1
 8003984:	627b      	str	r3, [r7, #36]	; 0x24
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	791b      	ldrb	r3, [r3, #4]
 800398a:	461a      	mov	r2, r3
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	4293      	cmp	r3, r2
 8003990:	d3e4      	bcc.n	800395c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f002 fb7c 	bl	8006094 <USB_ReadInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039a6:	d13c      	bne.n	8003a22 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039a8:	2301      	movs	r3, #1
 80039aa:	627b      	str	r3, [r7, #36]	; 0x24
 80039ac:	e02b      	b.n	8003a06 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	4613      	mov	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	3318      	adds	r3, #24
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d115      	bne.n	8003a00 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80039d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da12      	bge.n	8003a00 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	3317      	adds	r3, #23
 80039ea:	2201      	movs	r2, #1
 80039ec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4619      	mov	r1, r3
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fac8 	bl	8003f90 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	3301      	adds	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	791b      	ldrb	r3, [r3, #4]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d3cd      	bcc.n	80039ae <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695a      	ldr	r2, [r3, #20]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f002 fb34 	bl	8006094 <USB_ReadInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a36:	d156      	bne.n	8003ae6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a38:	2301      	movs	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3c:	e045      	b.n	8003aca <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a40:	015a      	lsls	r2, r3, #5
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	4413      	add	r3, r2
 8003a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	440b      	add	r3, r1
 8003a5c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d12e      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	da2b      	bge.n	8003ac4 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8003a78:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d121      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	f203 2357 	addw	r3, r3, #599	; 0x257
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10a      	bne.n	8003ac4 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003abc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ac0:	6053      	str	r3, [r2, #4]
            break;
 8003ac2:	e008      	b.n	8003ad6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	791b      	ldrb	r3, [r3, #4]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d3b3      	bcc.n	8003a3e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695a      	ldr	r2, [r3, #20]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f002 fad2 	bl	8006094 <USB_ReadInterrupts>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d10a      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f004 fefb 	bl	80088f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f002 fabc 	bl	8006094 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	d115      	bne.n	8003b52 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f004 feeb 	bl	8008914 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6859      	ldr	r1, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	e000      	b.n	8003b52 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003b50:	bf00      	nop
    }
  }
}
 8003b52:	3734      	adds	r7, #52	; 0x34
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd90      	pop	{r4, r7, pc}

08003b58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_PCD_SetAddress+0x1a>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e012      	b.n	8003b98 <HAL_PCD_SetAddress+0x40>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fa1b 	bl	8005fc4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	4608      	mov	r0, r1
 8003baa:	4611      	mov	r1, r2
 8003bac:	461a      	mov	r2, r3
 8003bae:	4603      	mov	r3, r0
 8003bb0:	70fb      	strb	r3, [r7, #3]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	803b      	strh	r3, [r7, #0]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da0f      	bge.n	8003be6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	f003 020f 	and.w	r2, r3, #15
 8003bcc:	4613      	mov	r3, r2
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	4413      	add	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	3310      	adds	r3, #16
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3304      	adds	r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	705a      	strb	r2, [r3, #1]
 8003be4:	e00f      	b.n	8003c06 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	f003 020f 	and.w	r2, r3, #15
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c06:	78fb      	ldrb	r3, [r7, #3]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c12:	883a      	ldrh	r2, [r7, #0]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	78ba      	ldrb	r2, [r7, #2]
 8003c1c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	785b      	ldrb	r3, [r3, #1]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d004      	beq.n	8003c30 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c30:	78bb      	ldrb	r3, [r7, #2]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d102      	bne.n	8003c3c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_PCD_EP_Open+0xaa>
 8003c46:	2302      	movs	r3, #2
 8003c48:	e00e      	b.n	8003c68 <HAL_PCD_EP_Open+0xc8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 fba3 	bl	80053a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8003c66:	7afb      	ldrb	r3, [r7, #11]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	460b      	mov	r3, r1
 8003c7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da0f      	bge.n	8003ca4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	3310      	adds	r3, #16
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	705a      	strb	r2, [r3, #1]
 8003ca2:	e00f      	b.n	8003cc4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4413      	add	r3, r2
 8003cba:	3304      	adds	r3, #4
 8003cbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <HAL_PCD_EP_Close+0x6e>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e00e      	b.n	8003cfc <HAL_PCD_EP_Close+0x8c>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68f9      	ldr	r1, [r7, #12]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f001 fbe1 	bl	80054b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	460b      	mov	r3, r1
 8003d12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d14:	7afb      	ldrb	r3, [r7, #11]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	2200      	movs	r2, #0
 8003d44:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	f003 030f 	and.w	r3, r3, #15
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	799b      	ldrb	r3, [r3, #6]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d102      	bne.n	8003d60 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	799b      	ldrb	r3, [r3, #6]
 8003d68:	461a      	mov	r2, r3
 8003d6a:	6979      	ldr	r1, [r7, #20]
 8003d6c:	f001 fc7e 	bl	800566c <USB_EPStartXfer>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	460b      	mov	r3, r1
 8003d84:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d86:	78fb      	ldrb	r3, [r7, #3]
 8003d88:	f003 020f 	and.w	r2, r3, #15
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8003d9c:	681b      	ldr	r3, [r3, #0]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	60f8      	str	r0, [r7, #12]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	460b      	mov	r3, r1
 8003db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 020f 	and.w	r2, r3, #15
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	3310      	adds	r3, #16
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4413      	add	r3, r2
 8003dce:	3304      	adds	r3, #4
 8003dd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	683a      	ldr	r2, [r7, #0]
 8003ddc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	2201      	movs	r2, #1
 8003de8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dea:	7afb      	ldrb	r3, [r7, #11]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	799b      	ldrb	r3, [r3, #6]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	799b      	ldrb	r3, [r3, #6]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6979      	ldr	r1, [r7, #20]
 8003e10:	f001 fc2c 	bl	800566c <USB_EPStartXfer>

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
 8003e26:	460b      	mov	r3, r1
 8003e28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e2a:	78fb      	ldrb	r3, [r7, #3]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	7912      	ldrb	r2, [r2, #4]
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d901      	bls.n	8003e3c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e04f      	b.n	8003edc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	da0f      	bge.n	8003e64 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	3310      	adds	r3, #16
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	3304      	adds	r3, #4
 8003e5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	705a      	strb	r2, [r3, #1]
 8003e62:	e00d      	b.n	8003e80 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e64:	78fa      	ldrb	r2, [r7, #3]
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_EP_SetStall+0x82>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e01d      	b.n	8003edc <HAL_PCD_EP_SetStall+0xbe>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 ffb4 	bl	8005e1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eb4:	78fb      	ldrb	r3, [r7, #3]
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d109      	bne.n	8003ed2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7999      	ldrb	r1, [r3, #6]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f002 f9a5 	bl	800621c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	7912      	ldrb	r2, [r2, #4]
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e042      	b.n	8003f88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	da0f      	bge.n	8003f2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	4613      	mov	r3, r2
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	3310      	adds	r3, #16
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	3304      	adds	r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2201      	movs	r2, #1
 8003f26:	705a      	strb	r2, [r3, #1]
 8003f28:	e00f      	b.n	8003f4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <HAL_PCD_EP_ClrStall+0x86>
 8003f66:	2302      	movs	r3, #2
 8003f68:	e00e      	b.n	8003f88 <HAL_PCD_EP_ClrStall+0xa4>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68f9      	ldr	r1, [r7, #12]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 ffbd 	bl	8005ef8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da0c      	bge.n	8003fbe <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	3310      	adds	r3, #16
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	e00c      	b.n	8003fd8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	f003 020f 	and.w	r2, r3, #15
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4413      	add	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68f9      	ldr	r1, [r7, #12]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f001 fddc 	bl	8005b9c <USB_EPStopXfer>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b08a      	sub	sp, #40	; 0x28
 8003ff6:	af02      	add	r7, sp, #8
 8003ff8:	6078      	str	r0, [r7, #4]
 8003ffa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	4613      	mov	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	4413      	add	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	3310      	adds	r3, #16
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	695a      	ldr	r2, [r3, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	429a      	cmp	r2, r3
 8004024:	d901      	bls.n	800402a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e06b      	b.n	8004102 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	429a      	cmp	r2, r3
 800403e:	d902      	bls.n	8004046 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	3303      	adds	r3, #3
 800404a:	089b      	lsrs	r3, r3, #2
 800404c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800404e:	e02a      	b.n	80040a6 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	429a      	cmp	r2, r3
 8004064:	d902      	bls.n	800406c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3303      	adds	r3, #3
 8004070:	089b      	lsrs	r3, r3, #2
 8004072:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68d9      	ldr	r1, [r3, #12]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	b2da      	uxtb	r2, r3
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	4603      	mov	r3, r0
 8004088:	6978      	ldr	r0, [r7, #20]
 800408a:	f001 fe31 	bl	8005cf0 <USB_WritePacket>

    ep->xfer_buff  += len;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	441a      	add	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	695a      	ldr	r2, [r3, #20]
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	441a      	add	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d809      	bhi.n	80040d0 <PCD_WriteEmptyTxFifo+0xde>
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d203      	bcs.n	80040d0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	691b      	ldr	r3, [r3, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1bf      	bne.n	8004050 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d811      	bhi.n	8004100 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f003 030f 	and.w	r3, r3, #15
 80040e2:	2201      	movs	r2, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	43db      	mvns	r3, r3
 80040f6:	6939      	ldr	r1, [r7, #16]
 80040f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040fc:	4013      	ands	r3, r2
 80040fe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b088      	sub	sp, #32
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	333c      	adds	r3, #60	; 0x3c
 8004124:	3304      	adds	r3, #4
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	799b      	ldrb	r3, [r3, #6]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d17b      	bne.n	800423a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b00      	cmp	r3, #0
 800414a:	d015      	beq.n	8004178 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	4a61      	ldr	r2, [pc, #388]	; (80042d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004150:	4293      	cmp	r3, r2
 8004152:	f240 80b9 	bls.w	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 80b3 	beq.w	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	015a      	lsls	r2, r3, #5
 8004166:	69bb      	ldr	r3, [r7, #24]
 8004168:	4413      	add	r3, r2
 800416a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416e:	461a      	mov	r2, r3
 8004170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004174:	6093      	str	r3, [r2, #8]
 8004176:	e0a7      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	2320      	movs	r3, #32
 8004192:	6093      	str	r3, [r2, #8]
 8004194:	e098      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 8093 	bne.w	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	4a4b      	ldr	r2, [pc, #300]	; (80042d4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d90f      	bls.n	80041ca <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041c6:	6093      	str	r3, [r2, #8]
 80041c8:	e07e      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4613      	mov	r3, r2
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4413      	add	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1a      	ldr	r2, [r3, #32]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	0159      	lsls	r1, r3, #5
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	440b      	add	r3, r1
 80041ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f6:	1ad2      	subs	r2, r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d114      	bne.n	800422c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d109      	bne.n	800421e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004214:	461a      	mov	r2, r3
 8004216:	2101      	movs	r1, #1
 8004218:	f002 f800 	bl	800621c <USB_EP0_OutStart>
 800421c:	e006      	b.n	800422c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	b2db      	uxtb	r3, r3
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f004 faa6 	bl	8008784 <HAL_PCD_DataOutStageCallback>
 8004238:	e046      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4a26      	ldr	r2, [pc, #152]	; (80042d8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d124      	bne.n	800428c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800425e:	6093      	str	r3, [r2, #8]
 8004260:	e032      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f003 0320 	and.w	r3, r3, #32
 8004268:	2b00      	cmp	r3, #0
 800426a:	d008      	beq.n	800427e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	4413      	add	r3, r2
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	2320      	movs	r3, #32
 800427c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	4619      	mov	r1, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f004 fa7d 	bl	8008784 <HAL_PCD_DataOutStageCallback>
 800428a:	e01d      	b.n	80042c8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d114      	bne.n	80042bc <PCD_EP_OutXfrComplete_int+0x1b0>
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d108      	bne.n	80042bc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80042b4:	461a      	mov	r2, r3
 80042b6:	2100      	movs	r1, #0
 80042b8:	f001 ffb0 	bl	800621c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f004 fa5e 	bl	8008784 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3720      	adds	r7, #32
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	4f54300a 	.word	0x4f54300a
 80042d8:	4f54310a 	.word	0x4f54310a

080042dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	333c      	adds	r3, #60	; 0x3c
 80042f4:	3304      	adds	r3, #4
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a15      	ldr	r2, [pc, #84]	; (8004364 <PCD_EP_OutSetupPacket_int+0x88>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d90e      	bls.n	8004330 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004318:	2b00      	cmp	r3, #0
 800431a:	d009      	beq.n	8004330 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f004 fa15 	bl	8008760 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <PCD_EP_OutSetupPacket_int+0x88>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d90c      	bls.n	8004358 <PCD_EP_OutSetupPacket_int+0x7c>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	799b      	ldrb	r3, [r3, #6]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d108      	bne.n	8004358 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8004350:	461a      	mov	r2, r3
 8004352:	2101      	movs	r1, #1
 8004354:	f001 ff62 	bl	800621c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	4f54300a 	.word	0x4f54300a

08004368 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	460b      	mov	r3, r1
 8004372:	70fb      	strb	r3, [r7, #3]
 8004374:	4613      	mov	r3, r2
 8004376:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d107      	bne.n	8004396 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004386:	883b      	ldrh	r3, [r7, #0]
 8004388:	0419      	lsls	r1, r3, #16
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	430a      	orrs	r2, r1
 8004392:	629a      	str	r2, [r3, #40]	; 0x28
 8004394:	e028      	b.n	80043e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4413      	add	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043a4:	2300      	movs	r3, #0
 80043a6:	73fb      	strb	r3, [r7, #15]
 80043a8:	e00d      	b.n	80043c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
 80043b0:	3340      	adds	r3, #64	; 0x40
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	0c1b      	lsrs	r3, r3, #16
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	4413      	add	r3, r2
 80043be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	3301      	adds	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	7bfa      	ldrb	r2, [r7, #15]
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3ec      	bcc.n	80043aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80043d0:	883b      	ldrh	r3, [r7, #0]
 80043d2:	0418      	lsls	r0, r3, #16
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6819      	ldr	r1, [r3, #0]
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	3b01      	subs	r3, #1
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	4302      	orrs	r2, r0
 80043e0:	3340      	adds	r3, #64	; 0x40
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	460b      	mov	r3, r1
 8004400:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	887a      	ldrh	r2, [r7, #2]
 8004408:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e267      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d075      	beq.n	800453a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800444e:	4b88      	ldr	r3, [pc, #544]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 030c 	and.w	r3, r3, #12
 8004456:	2b04      	cmp	r3, #4
 8004458:	d00c      	beq.n	8004474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800445a:	4b85      	ldr	r3, [pc, #532]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004462:	2b08      	cmp	r3, #8
 8004464:	d112      	bne.n	800448c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004466:	4b82      	ldr	r3, [pc, #520]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004472:	d10b      	bne.n	800448c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004474:	4b7e      	ldr	r3, [pc, #504]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d05b      	beq.n	8004538 <HAL_RCC_OscConfig+0x108>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d157      	bne.n	8004538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e242      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004494:	d106      	bne.n	80044a4 <HAL_RCC_OscConfig+0x74>
 8004496:	4b76      	ldr	r3, [pc, #472]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a75      	ldr	r2, [pc, #468]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e01d      	b.n	80044e0 <HAL_RCC_OscConfig+0xb0>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ac:	d10c      	bne.n	80044c8 <HAL_RCC_OscConfig+0x98>
 80044ae:	4b70      	ldr	r3, [pc, #448]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a6f      	ldr	r2, [pc, #444]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044b8:	6013      	str	r3, [r2, #0]
 80044ba:	4b6d      	ldr	r3, [pc, #436]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a6c      	ldr	r2, [pc, #432]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	e00b      	b.n	80044e0 <HAL_RCC_OscConfig+0xb0>
 80044c8:	4b69      	ldr	r3, [pc, #420]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a68      	ldr	r2, [pc, #416]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b66      	ldr	r3, [pc, #408]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a65      	ldr	r2, [pc, #404]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80044da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d013      	beq.n	8004510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e8:	f7fd f9ca 	bl	8001880 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f0:	f7fd f9c6 	bl	8001880 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e207      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b5b      	ldr	r3, [pc, #364]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0f0      	beq.n	80044f0 <HAL_RCC_OscConfig+0xc0>
 800450e:	e014      	b.n	800453a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fd f9b6 	bl	8001880 <HAL_GetTick>
 8004514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	e008      	b.n	800452a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004518:	f7fd f9b2 	bl	8001880 <HAL_GetTick>
 800451c:	4602      	mov	r2, r0
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	1ad3      	subs	r3, r2, r3
 8004522:	2b64      	cmp	r3, #100	; 0x64
 8004524:	d901      	bls.n	800452a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e1f3      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	4b51      	ldr	r3, [pc, #324]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1f0      	bne.n	8004518 <HAL_RCC_OscConfig+0xe8>
 8004536:	e000      	b.n	800453a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0302 	and.w	r3, r3, #2
 8004542:	2b00      	cmp	r3, #0
 8004544:	d063      	beq.n	800460e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004546:	4b4a      	ldr	r3, [pc, #296]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00b      	beq.n	800456a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004552:	4b47      	ldr	r3, [pc, #284]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800455a:	2b08      	cmp	r3, #8
 800455c:	d11c      	bne.n	8004598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800455e:	4b44      	ldr	r3, [pc, #272]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d116      	bne.n	8004598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800456a:	4b41      	ldr	r3, [pc, #260]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d005      	beq.n	8004582 <HAL_RCC_OscConfig+0x152>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d001      	beq.n	8004582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e1c7      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004582:	4b3b      	ldr	r3, [pc, #236]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	4937      	ldr	r1, [pc, #220]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004592:	4313      	orrs	r3, r2
 8004594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	e03a      	b.n	800460e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d020      	beq.n	80045e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045a0:	4b34      	ldr	r3, [pc, #208]	; (8004674 <HAL_RCC_OscConfig+0x244>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd f96b 	bl	8001880 <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ae:	f7fd f967 	bl	8001880 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e1a8      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c0:	4b2b      	ldr	r3, [pc, #172]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045cc:	4b28      	ldr	r3, [pc, #160]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	691b      	ldr	r3, [r3, #16]
 80045d8:	00db      	lsls	r3, r3, #3
 80045da:	4925      	ldr	r1, [pc, #148]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]
 80045e0:	e015      	b.n	800460e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045e2:	4b24      	ldr	r3, [pc, #144]	; (8004674 <HAL_RCC_OscConfig+0x244>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fd f94a 	bl	8001880 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fd f946 	bl	8001880 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e187      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004602:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0302 	and.w	r3, r3, #2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f0      	bne.n	80045f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d036      	beq.n	8004688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d016      	beq.n	8004650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004622:	4b15      	ldr	r3, [pc, #84]	; (8004678 <HAL_RCC_OscConfig+0x248>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fd f92a 	bl	8001880 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004630:	f7fd f926 	bl	8001880 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e167      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004642:	4b0b      	ldr	r3, [pc, #44]	; (8004670 <HAL_RCC_OscConfig+0x240>)
 8004644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x200>
 800464e:	e01b      	b.n	8004688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_OscConfig+0x248>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004656:	f7fd f913 	bl	8001880 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800465c:	e00e      	b.n	800467c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465e:	f7fd f90f 	bl	8001880 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d907      	bls.n	800467c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e150      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
 8004670:	40023800 	.word	0x40023800
 8004674:	42470000 	.word	0x42470000
 8004678:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467c:	4b88      	ldr	r3, [pc, #544]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800467e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004680:	f003 0302 	and.w	r3, r3, #2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1ea      	bne.n	800465e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 8097 	beq.w	80047c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800469a:	4b81      	ldr	r3, [pc, #516]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a6:	2300      	movs	r3, #0
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	4b7d      	ldr	r3, [pc, #500]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	4a7c      	ldr	r2, [pc, #496]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 80046b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6413      	str	r3, [r2, #64]	; 0x40
 80046b6:	4b7a      	ldr	r3, [pc, #488]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046be:	60bb      	str	r3, [r7, #8]
 80046c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c2:	2301      	movs	r3, #1
 80046c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c6:	4b77      	ldr	r3, [pc, #476]	; (80048a4 <HAL_RCC_OscConfig+0x474>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d118      	bne.n	8004704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046d2:	4b74      	ldr	r3, [pc, #464]	; (80048a4 <HAL_RCC_OscConfig+0x474>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a73      	ldr	r2, [pc, #460]	; (80048a4 <HAL_RCC_OscConfig+0x474>)
 80046d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046de:	f7fd f8cf 	bl	8001880 <HAL_GetTick>
 80046e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e6:	f7fd f8cb 	bl	8001880 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e10c      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f8:	4b6a      	ldr	r3, [pc, #424]	; (80048a4 <HAL_RCC_OscConfig+0x474>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x2ea>
 800470c:	4b64      	ldr	r3, [pc, #400]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a63      	ldr	r2, [pc, #396]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004712:	f043 0301 	orr.w	r3, r3, #1
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
 8004718:	e01c      	b.n	8004754 <HAL_RCC_OscConfig+0x324>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b05      	cmp	r3, #5
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x30c>
 8004722:	4b5f      	ldr	r3, [pc, #380]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	4a5e      	ldr	r2, [pc, #376]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004728:	f043 0304 	orr.w	r3, r3, #4
 800472c:	6713      	str	r3, [r2, #112]	; 0x70
 800472e:	4b5c      	ldr	r3, [pc, #368]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004732:	4a5b      	ldr	r2, [pc, #364]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	6713      	str	r3, [r2, #112]	; 0x70
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0x324>
 800473c:	4b58      	ldr	r3, [pc, #352]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800473e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004740:	4a57      	ldr	r2, [pc, #348]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	6713      	str	r3, [r2, #112]	; 0x70
 8004748:	4b55      	ldr	r3, [pc, #340]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800474a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474c:	4a54      	ldr	r2, [pc, #336]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800474e:	f023 0304 	bic.w	r3, r3, #4
 8004752:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d015      	beq.n	8004788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fd f890 	bl	8001880 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004762:	e00a      	b.n	800477a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fd f88c 	bl	8001880 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e0cb      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477a:	4b49      	ldr	r3, [pc, #292]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ee      	beq.n	8004764 <HAL_RCC_OscConfig+0x334>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004788:	f7fd f87a 	bl	8001880 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fd f876 	bl	8001880 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e0b5      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047a6:	4b3e      	ldr	r3, [pc, #248]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1ee      	bne.n	8004790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b8:	4b39      	ldr	r3, [pc, #228]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 80047ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047bc:	4a38      	ldr	r2, [pc, #224]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 80047be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80a1 	beq.w	8004910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ce:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 030c 	and.w	r3, r3, #12
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d05c      	beq.n	8004894 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d141      	bne.n	8004866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e2:	4b31      	ldr	r3, [pc, #196]	; (80048a8 <HAL_RCC_OscConfig+0x478>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fd f84a 	bl	8001880 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f0:	f7fd f846 	bl	8001880 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e087      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004802:	4b27      	ldr	r3, [pc, #156]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	019b      	lsls	r3, r3, #6
 800481e:	431a      	orrs	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	3b01      	subs	r3, #1
 8004828:	041b      	lsls	r3, r3, #16
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004830:	061b      	lsls	r3, r3, #24
 8004832:	491b      	ldr	r1, [pc, #108]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004838:	4b1b      	ldr	r3, [pc, #108]	; (80048a8 <HAL_RCC_OscConfig+0x478>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800483e:	f7fd f81f 	bl	8001880 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004846:	f7fd f81b 	bl	8001880 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e05c      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x416>
 8004864:	e054      	b.n	8004910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <HAL_RCC_OscConfig+0x478>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fd f808 	bl	8001880 <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004874:	f7fd f804 	bl	8001880 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e045      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_RCC_OscConfig+0x470>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x444>
 8004892:	e03d      	b.n	8004910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d107      	bne.n	80048ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e038      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40007000 	.word	0x40007000
 80048a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_RCC_OscConfig+0x4ec>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d028      	beq.n	800490c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d121      	bne.n	800490c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d11a      	bne.n	800490c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048dc:	4013      	ands	r3, r2
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d111      	bne.n	800490c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f2:	085b      	lsrs	r3, r3, #1
 80048f4:	3b01      	subs	r3, #1
 80048f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d107      	bne.n	800490c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3718      	adds	r7, #24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023800 	.word	0x40023800

08004920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0cc      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004934:	4b68      	ldr	r3, [pc, #416]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d90c      	bls.n	800495c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b65      	ldr	r3, [pc, #404]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b63      	ldr	r3, [pc, #396]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0b8      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d020      	beq.n	80049aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004974:	4b59      	ldr	r3, [pc, #356]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a58      	ldr	r2, [pc, #352]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800497e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d005      	beq.n	8004998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800498c:	4b53      	ldr	r3, [pc, #332]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a52      	ldr	r2, [pc, #328]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004998:	4b50      	ldr	r3, [pc, #320]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	494d      	ldr	r1, [pc, #308]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d044      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d107      	bne.n	80049ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049be:	4b47      	ldr	r3, [pc, #284]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d119      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e07f      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d003      	beq.n	80049de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d107      	bne.n	80049ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049de:	4b3f      	ldr	r3, [pc, #252]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e06f      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ee:	4b3b      	ldr	r3, [pc, #236]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e067      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049fe:	4b37      	ldr	r3, [pc, #220]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f023 0203 	bic.w	r2, r3, #3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4934      	ldr	r1, [pc, #208]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a10:	f7fc ff36 	bl	8001880 <HAL_GetTick>
 8004a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	e00a      	b.n	8004a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a18:	f7fc ff32 	bl	8001880 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e04f      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2e:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 020c 	and.w	r2, r3, #12
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d1eb      	bne.n	8004a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a40:	4b25      	ldr	r3, [pc, #148]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0307 	and.w	r3, r3, #7
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d20c      	bcs.n	8004a68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a4e:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	683a      	ldr	r2, [r7, #0]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d001      	beq.n	8004a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e032      	b.n	8004ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d008      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4916      	ldr	r1, [pc, #88]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0308 	and.w	r3, r3, #8
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d009      	beq.n	8004aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	490e      	ldr	r1, [pc, #56]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa6:	f000 f821 	bl	8004aec <HAL_RCC_GetSysClockFreq>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	f003 030f 	and.w	r3, r3, #15
 8004ab6:	490a      	ldr	r1, [pc, #40]	; (8004ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab8:	5ccb      	ldrb	r3, [r1, r3]
 8004aba:	fa22 f303 	lsr.w	r3, r2, r3
 8004abe:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fc fe96 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	40023c00 	.word	0x40023c00
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	0800c8b0 	.word	0x0800c8b0
 8004ae4:	20000000 	.word	0x20000000
 8004ae8:	20000004 	.word	0x20000004

08004aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004af0:	b090      	sub	sp, #64	; 0x40
 8004af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
 8004af8:	2300      	movs	r3, #0
 8004afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004afc:	2300      	movs	r3, #0
 8004afe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b04:	4b59      	ldr	r3, [pc, #356]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d00d      	beq.n	8004b2c <HAL_RCC_GetSysClockFreq+0x40>
 8004b10:	2b08      	cmp	r3, #8
 8004b12:	f200 80a1 	bhi.w	8004c58 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d002      	beq.n	8004b20 <HAL_RCC_GetSysClockFreq+0x34>
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d003      	beq.n	8004b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b1e:	e09b      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b20:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b22:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b24:	e09b      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b26:	4b53      	ldr	r3, [pc, #332]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b2a:	e098      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b2c:	4b4f      	ldr	r3, [pc, #316]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b34:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b36:	4b4d      	ldr	r3, [pc, #308]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d028      	beq.n	8004b94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b42:	4b4a      	ldr	r3, [pc, #296]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	099b      	lsrs	r3, r3, #6
 8004b48:	2200      	movs	r2, #0
 8004b4a:	623b      	str	r3, [r7, #32]
 8004b4c:	627a      	str	r2, [r7, #36]	; 0x24
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b54:	2100      	movs	r1, #0
 8004b56:	4b47      	ldr	r3, [pc, #284]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b58:	fb03 f201 	mul.w	r2, r3, r1
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	fb00 f303 	mul.w	r3, r0, r3
 8004b62:	4413      	add	r3, r2
 8004b64:	4a43      	ldr	r2, [pc, #268]	; (8004c74 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b66:	fba0 1202 	umull	r1, r2, r0, r2
 8004b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b72:	4413      	add	r3, r2
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	2200      	movs	r2, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	61fa      	str	r2, [r7, #28]
 8004b7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b86:	f7fc f817 	bl	8000bb8 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4613      	mov	r3, r2
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b92:	e053      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b94:	4b35      	ldr	r3, [pc, #212]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	099b      	lsrs	r3, r3, #6
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	617a      	str	r2, [r7, #20]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004ba6:	f04f 0b00 	mov.w	fp, #0
 8004baa:	4652      	mov	r2, sl
 8004bac:	465b      	mov	r3, fp
 8004bae:	f04f 0000 	mov.w	r0, #0
 8004bb2:	f04f 0100 	mov.w	r1, #0
 8004bb6:	0159      	lsls	r1, r3, #5
 8004bb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bbc:	0150      	lsls	r0, r2, #5
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	ebb2 080a 	subs.w	r8, r2, sl
 8004bc6:	eb63 090b 	sbc.w	r9, r3, fp
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bde:	ebb2 0408 	subs.w	r4, r2, r8
 8004be2:	eb63 0509 	sbc.w	r5, r3, r9
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	00eb      	lsls	r3, r5, #3
 8004bf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bf4:	00e2      	lsls	r2, r4, #3
 8004bf6:	4614      	mov	r4, r2
 8004bf8:	461d      	mov	r5, r3
 8004bfa:	eb14 030a 	adds.w	r3, r4, sl
 8004bfe:	603b      	str	r3, [r7, #0]
 8004c00:	eb45 030b 	adc.w	r3, r5, fp
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	f04f 0200 	mov.w	r2, #0
 8004c0a:	f04f 0300 	mov.w	r3, #0
 8004c0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c12:	4629      	mov	r1, r5
 8004c14:	028b      	lsls	r3, r1, #10
 8004c16:	4621      	mov	r1, r4
 8004c18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	028a      	lsls	r2, r1, #10
 8004c20:	4610      	mov	r0, r2
 8004c22:	4619      	mov	r1, r3
 8004c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c26:	2200      	movs	r2, #0
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	60fa      	str	r2, [r7, #12]
 8004c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c30:	f7fb ffc2 	bl	8000bb8 <__aeabi_uldivmod>
 8004c34:	4602      	mov	r2, r0
 8004c36:	460b      	mov	r3, r1
 8004c38:	4613      	mov	r3, r2
 8004c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c3c:	4b0b      	ldr	r3, [pc, #44]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	0c1b      	lsrs	r3, r3, #16
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	3301      	adds	r3, #1
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c56:	e002      	b.n	8004c5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3740      	adds	r7, #64	; 0x40
 8004c64:	46bd      	mov	sp, r7
 8004c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c6a:	bf00      	nop
 8004c6c:	40023800 	.word	0x40023800
 8004c70:	00f42400 	.word	0x00f42400
 8004c74:	017d7840 	.word	0x017d7840

08004c78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000000 	.word	0x20000000

08004c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c94:	f7ff fff0 	bl	8004c78 <HAL_RCC_GetHCLKFreq>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	4b05      	ldr	r3, [pc, #20]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	0a9b      	lsrs	r3, r3, #10
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	4903      	ldr	r1, [pc, #12]	; (8004cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ca6:	5ccb      	ldrb	r3, [r1, r3]
 8004ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	40023800 	.word	0x40023800
 8004cb4:	0800c8c0 	.word	0x0800c8c0

08004cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb8:	b084      	sub	sp, #16
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	f107 001c 	add.w	r0, r7, #28
 8004cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d123      	bne.n	8004d1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f001 fae2 	bl	80062d8 <USB_CoreReset>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e01b      	b.n	8004d52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f001 fad6 	bl	80062d8 <USB_CoreReset>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
 8004d44:	e005      	b.n	8004d52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d52:	7fbb      	ldrb	r3, [r7, #30]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d10b      	bne.n	8004d70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f043 0206 	orr.w	r2, r3, #6
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d7c:	b004      	add	sp, #16
 8004d7e:	4770      	bx	lr

08004d80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b087      	sub	sp, #28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d165      	bne.n	8004e60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	4a41      	ldr	r2, [pc, #260]	; (8004e9c <USB_SetTurnaroundTime+0x11c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d906      	bls.n	8004daa <USB_SetTurnaroundTime+0x2a>
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	4a40      	ldr	r2, [pc, #256]	; (8004ea0 <USB_SetTurnaroundTime+0x120>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d202      	bcs.n	8004daa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004da4:	230f      	movs	r3, #15
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	e062      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	4a3c      	ldr	r2, [pc, #240]	; (8004ea0 <USB_SetTurnaroundTime+0x120>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d306      	bcc.n	8004dc0 <USB_SetTurnaroundTime+0x40>
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	4a3b      	ldr	r2, [pc, #236]	; (8004ea4 <USB_SetTurnaroundTime+0x124>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d202      	bcs.n	8004dc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004dba:	230e      	movs	r3, #14
 8004dbc:	617b      	str	r3, [r7, #20]
 8004dbe:	e057      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4a38      	ldr	r2, [pc, #224]	; (8004ea4 <USB_SetTurnaroundTime+0x124>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d306      	bcc.n	8004dd6 <USB_SetTurnaroundTime+0x56>
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	4a37      	ldr	r2, [pc, #220]	; (8004ea8 <USB_SetTurnaroundTime+0x128>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d202      	bcs.n	8004dd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004dd0:	230d      	movs	r3, #13
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e04c      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4a33      	ldr	r2, [pc, #204]	; (8004ea8 <USB_SetTurnaroundTime+0x128>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d306      	bcc.n	8004dec <USB_SetTurnaroundTime+0x6c>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4a32      	ldr	r2, [pc, #200]	; (8004eac <USB_SetTurnaroundTime+0x12c>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d802      	bhi.n	8004dec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004de6:	230c      	movs	r3, #12
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e041      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	4a2f      	ldr	r2, [pc, #188]	; (8004eac <USB_SetTurnaroundTime+0x12c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d906      	bls.n	8004e02 <USB_SetTurnaroundTime+0x82>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4a2e      	ldr	r2, [pc, #184]	; (8004eb0 <USB_SetTurnaroundTime+0x130>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d802      	bhi.n	8004e02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004dfc:	230b      	movs	r3, #11
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e036      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	4a2a      	ldr	r2, [pc, #168]	; (8004eb0 <USB_SetTurnaroundTime+0x130>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d906      	bls.n	8004e18 <USB_SetTurnaroundTime+0x98>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	4a29      	ldr	r2, [pc, #164]	; (8004eb4 <USB_SetTurnaroundTime+0x134>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d802      	bhi.n	8004e18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004e12:	230a      	movs	r3, #10
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	e02b      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	4a26      	ldr	r2, [pc, #152]	; (8004eb4 <USB_SetTurnaroundTime+0x134>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d906      	bls.n	8004e2e <USB_SetTurnaroundTime+0xae>
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	4a25      	ldr	r2, [pc, #148]	; (8004eb8 <USB_SetTurnaroundTime+0x138>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d202      	bcs.n	8004e2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004e28:	2309      	movs	r3, #9
 8004e2a:	617b      	str	r3, [r7, #20]
 8004e2c:	e020      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <USB_SetTurnaroundTime+0x138>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d306      	bcc.n	8004e44 <USB_SetTurnaroundTime+0xc4>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	4a20      	ldr	r2, [pc, #128]	; (8004ebc <USB_SetTurnaroundTime+0x13c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d802      	bhi.n	8004e44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004e3e:	2308      	movs	r3, #8
 8004e40:	617b      	str	r3, [r7, #20]
 8004e42:	e015      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	4a1d      	ldr	r2, [pc, #116]	; (8004ebc <USB_SetTurnaroundTime+0x13c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d906      	bls.n	8004e5a <USB_SetTurnaroundTime+0xda>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	; (8004ec0 <USB_SetTurnaroundTime+0x140>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d202      	bcs.n	8004e5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004e54:	2307      	movs	r3, #7
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	e00a      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004e5a:	2306      	movs	r3, #6
 8004e5c:	617b      	str	r3, [r7, #20]
 8004e5e:	e007      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004e66:	2309      	movs	r3, #9
 8004e68:	617b      	str	r3, [r7, #20]
 8004e6a:	e001      	b.n	8004e70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004e6c:	2309      	movs	r3, #9
 8004e6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	029b      	lsls	r3, r3, #10
 8004e84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e8e:	2300      	movs	r3, #0
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	371c      	adds	r7, #28
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	00d8acbf 	.word	0x00d8acbf
 8004ea0:	00e4e1c0 	.word	0x00e4e1c0
 8004ea4:	00f42400 	.word	0x00f42400
 8004ea8:	01067380 	.word	0x01067380
 8004eac:	011a499f 	.word	0x011a499f
 8004eb0:	01312cff 	.word	0x01312cff
 8004eb4:	014ca43f 	.word	0x014ca43f
 8004eb8:	016e3600 	.word	0x016e3600
 8004ebc:	01a6ab1f 	.word	0x01a6ab1f
 8004ec0:	01e84800 	.word	0x01e84800

08004ec4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f043 0201 	orr.w	r2, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	460b      	mov	r3, r1
 8004f12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f24:	78fb      	ldrb	r3, [r7, #3]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d115      	bne.n	8004f56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f36:	200a      	movs	r0, #10
 8004f38:	f7fc fcae 	bl	8001898 <HAL_Delay>
      ms += 10U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	330a      	adds	r3, #10
 8004f40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f939 	bl	80061ba <USB_GetMode>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d01e      	beq.n	8004f8c <USB_SetCurrentMode+0x84>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2bc7      	cmp	r3, #199	; 0xc7
 8004f52:	d9f0      	bls.n	8004f36 <USB_SetCurrentMode+0x2e>
 8004f54:	e01a      	b.n	8004f8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f56:	78fb      	ldrb	r3, [r7, #3]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d115      	bne.n	8004f88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f68:	200a      	movs	r0, #10
 8004f6a:	f7fc fc95 	bl	8001898 <HAL_Delay>
      ms += 10U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	330a      	adds	r3, #10
 8004f72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f001 f920 	bl	80061ba <USB_GetMode>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <USB_SetCurrentMode+0x84>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2bc7      	cmp	r3, #199	; 0xc7
 8004f84:	d9f0      	bls.n	8004f68 <USB_SetCurrentMode+0x60>
 8004f86:	e001      	b.n	8004f8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e005      	b.n	8004f98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2bc8      	cmp	r3, #200	; 0xc8
 8004f90:	d101      	bne.n	8004f96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa0:	b084      	sub	sp, #16
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b086      	sub	sp, #24
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004fae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004fba:	2300      	movs	r3, #0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	e009      	b.n	8004fd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	3340      	adds	r3, #64	; 0x40
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b0e      	cmp	r3, #14
 8004fd8:	d9f2      	bls.n	8004fc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004fda:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d11c      	bne.n	800501c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ff0:	f043 0302 	orr.w	r3, r3, #2
 8004ff4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005012:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
 800501a:	e00b      	b.n	8005034 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800503a:	461a      	mov	r2, r3
 800503c:	2300      	movs	r3, #0
 800503e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005040:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005044:	2b01      	cmp	r3, #1
 8005046:	d10d      	bne.n	8005064 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800504c:	2b00      	cmp	r3, #0
 800504e:	d104      	bne.n	800505a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005050:	2100      	movs	r1, #0
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f968 	bl	8005328 <USB_SetDevSpeed>
 8005058:	e008      	b.n	800506c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800505a:	2101      	movs	r1, #1
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f963 	bl	8005328 <USB_SetDevSpeed>
 8005062:	e003      	b.n	800506c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005064:	2103      	movs	r1, #3
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f95e 	bl	8005328 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800506c:	2110      	movs	r1, #16
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f8fa 	bl	8005268 <USB_FlushTxFifo>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f924 	bl	80052cc <USB_FlushRxFifo>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	461a      	mov	r2, r3
 8005096:	2300      	movs	r3, #0
 8005098:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a0:	461a      	mov	r2, r3
 80050a2:	2300      	movs	r3, #0
 80050a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ac:	461a      	mov	r2, r3
 80050ae:	2300      	movs	r3, #0
 80050b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	613b      	str	r3, [r7, #16]
 80050b6:	e043      	b.n	8005140 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050ce:	d118      	bne.n	8005102 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	461a      	mov	r2, r3
 80050e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e013      	b.n	8005114 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f8:	461a      	mov	r2, r3
 80050fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80050fe:	6013      	str	r3, [r2, #0]
 8005100:	e008      	b.n	8005114 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800510e:	461a      	mov	r2, r3
 8005110:	2300      	movs	r3, #0
 8005112:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	461a      	mov	r2, r3
 8005122:	2300      	movs	r3, #0
 8005124:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005132:	461a      	mov	r2, r3
 8005134:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005138:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3301      	adds	r3, #1
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005144:	461a      	mov	r2, r3
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4293      	cmp	r3, r2
 800514a:	d3b5      	bcc.n	80050b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800514c:	2300      	movs	r3, #0
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	e043      	b.n	80051da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005168:	d118      	bne.n	800519c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517c:	461a      	mov	r2, r3
 800517e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005182:	6013      	str	r3, [r2, #0]
 8005184:	e013      	b.n	80051ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	015a      	lsls	r2, r3, #5
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4413      	add	r3, r2
 800518e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005192:	461a      	mov	r2, r3
 8005194:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	e008      	b.n	80051ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	015a      	lsls	r2, r3, #5
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a8:	461a      	mov	r2, r3
 80051aa:	2300      	movs	r3, #0
 80051ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	461a      	mov	r2, r3
 80051bc:	2300      	movs	r3, #0
 80051be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	3301      	adds	r3, #1
 80051d8:	613b      	str	r3, [r7, #16]
 80051da:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80051de:	461a      	mov	r2, r3
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d3b5      	bcc.n	8005152 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005206:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f043 0210 	orr.w	r2, r3, #16
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <USB_DevInit+0x2c4>)
 8005222:	4313      	orrs	r3, r2
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005228:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	f043 0208 	orr.w	r2, r3, #8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800523c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005240:	2b01      	cmp	r3, #1
 8005242:	d107      	bne.n	8005254 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524c:	f043 0304 	orr.w	r3, r3, #4
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005254:	7dfb      	ldrb	r3, [r7, #23]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3718      	adds	r7, #24
 800525a:	46bd      	mov	sp, r7
 800525c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005260:	b004      	add	sp, #16
 8005262:	4770      	bx	lr
 8005264:	803c3800 	.word	0x803c3800

08005268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	3301      	adds	r3, #1
 800527a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005282:	d901      	bls.n	8005288 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e01b      	b.n	80052c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	2b00      	cmp	r3, #0
 800528e:	daf2      	bge.n	8005276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	019b      	lsls	r3, r3, #6
 8005298:	f043 0220 	orr.w	r2, r3, #32
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052ac:	d901      	bls.n	80052b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e006      	b.n	80052c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d0f0      	beq.n	80052a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b085      	sub	sp, #20
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	3301      	adds	r3, #1
 80052dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80052e4:	d901      	bls.n	80052ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e018      	b.n	800531c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	daf2      	bge.n	80052d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2210      	movs	r2, #16
 80052fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	3301      	adds	r3, #1
 8005300:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005308:	d901      	bls.n	800530e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e006      	b.n	800531c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0310 	and.w	r3, r3, #16
 8005316:	2b10      	cmp	r3, #16
 8005318:	d0f0      	beq.n	80052fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	68f9      	ldr	r1, [r7, #12]
 8005344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005348:	4313      	orrs	r3, r2
 800534a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800535a:	b480      	push	{r7}
 800535c:	b087      	sub	sp, #28
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f003 0306 	and.w	r3, r3, #6
 8005372:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800537a:	2300      	movs	r3, #0
 800537c:	75fb      	strb	r3, [r7, #23]
 800537e:	e00a      	b.n	8005396 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d002      	beq.n	800538c <USB_GetDevSpeed+0x32>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2b06      	cmp	r3, #6
 800538a:	d102      	bne.n	8005392 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800538c:	2302      	movs	r3, #2
 800538e:	75fb      	strb	r3, [r7, #23]
 8005390:	e001      	b.n	8005396 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005392:	230f      	movs	r3, #15
 8005394:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
}
 8005398:	4618      	mov	r0, r3
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	785b      	ldrb	r3, [r3, #1]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d13a      	bne.n	8005436 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c6:	69da      	ldr	r2, [r3, #28]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	2101      	movs	r1, #1
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	68f9      	ldr	r1, [r7, #12]
 80053da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053de:	4313      	orrs	r3, r2
 80053e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d155      	bne.n	80054a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	791b      	ldrb	r3, [r3, #4]
 8005412:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005414:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	059b      	lsls	r3, r3, #22
 800541a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800541c:	4313      	orrs	r3, r2
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	e036      	b.n	80054a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543c:	69da      	ldr	r2, [r3, #28]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	2101      	movs	r1, #1
 8005448:	fa01 f303 	lsl.w	r3, r1, r3
 800544c:	041b      	lsls	r3, r3, #16
 800544e:	68f9      	ldr	r1, [r7, #12]
 8005450:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005454:	4313      	orrs	r3, r2
 8005456:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	015a      	lsls	r2, r3, #5
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d11a      	bne.n	80054a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	791b      	ldrb	r3, [r3, #4]
 8005488:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800548a:	430b      	orrs	r3, r1
 800548c:	4313      	orrs	r3, r2
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	0151      	lsls	r1, r2, #5
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	440a      	add	r2, r1
 8005496:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
	...

080054b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d161      	bne.n	8005594 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054e6:	d11f      	bne.n	8005528 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	0151      	lsls	r1, r2, #5
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	440a      	add	r2, r1
 80054fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005502:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005506:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005526:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	2101      	movs	r1, #1
 800553a:	fa01 f303 	lsl.w	r3, r1, r3
 800553e:	b29b      	uxth	r3, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005548:	4013      	ands	r3, r2
 800554a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	f003 030f 	and.w	r3, r3, #15
 800555c:	2101      	movs	r1, #1
 800555e:	fa01 f303 	lsl.w	r3, r1, r3
 8005562:	b29b      	uxth	r3, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800556c:	4013      	ands	r3, r2
 800556e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	0159      	lsls	r1, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	440b      	add	r3, r1
 8005586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558a:	4619      	mov	r1, r3
 800558c:	4b35      	ldr	r3, [pc, #212]	; (8005664 <USB_DeactivateEndpoint+0x1b0>)
 800558e:	4013      	ands	r3, r2
 8005590:	600b      	str	r3, [r1, #0]
 8005592:	e060      	b.n	8005656 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055aa:	d11f      	bne.n	80055ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	0151      	lsls	r1, r2, #5
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	440a      	add	r2, r1
 80055c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	2101      	movs	r1, #1
 80055fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005602:	041b      	lsls	r3, r3, #16
 8005604:	43db      	mvns	r3, r3
 8005606:	68f9      	ldr	r1, [r7, #12]
 8005608:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800560c:	4013      	ands	r3, r2
 800560e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005616:	69da      	ldr	r2, [r3, #28]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f003 030f 	and.w	r3, r3, #15
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	43db      	mvns	r3, r3
 800562a:	68f9      	ldr	r1, [r7, #12]
 800562c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005630:	4013      	ands	r3, r2
 8005632:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	0159      	lsls	r1, r3, #5
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	440b      	add	r3, r1
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	4619      	mov	r1, r3
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <USB_DeactivateEndpoint+0x1b4>)
 8005652:	4013      	ands	r3, r2
 8005654:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	ec337800 	.word	0xec337800
 8005668:	eff37800 	.word	0xeff37800

0800566c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b08a      	sub	sp, #40	; 0x28
 8005670:	af02      	add	r7, sp, #8
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	4613      	mov	r3, r2
 8005678:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	785b      	ldrb	r3, [r3, #1]
 8005688:	2b01      	cmp	r3, #1
 800568a:	f040 817a 	bne.w	8005982 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d132      	bne.n	80056fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	015a      	lsls	r2, r3, #5
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	4413      	add	r3, r2
 800569e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	69ba      	ldr	r2, [r7, #24]
 80056a6:	0151      	lsls	r1, r2, #5
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	440a      	add	r2, r1
 80056ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	015a      	lsls	r2, r3, #5
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	4413      	add	r3, r2
 80056c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	69ba      	ldr	r2, [r7, #24]
 80056ca:	0151      	lsls	r1, r2, #5
 80056cc:	69fa      	ldr	r2, [r7, #28]
 80056ce:	440a      	add	r2, r1
 80056d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f4:	0cdb      	lsrs	r3, r3, #19
 80056f6:	04db      	lsls	r3, r3, #19
 80056f8:	6113      	str	r3, [r2, #16]
 80056fa:	e092      	b.n	8005822 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	440a      	add	r2, r1
 8005712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005716:	0cdb      	lsrs	r3, r3, #19
 8005718:	04db      	lsls	r3, r3, #19
 800571a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	4413      	add	r3, r2
 8005724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	0151      	lsls	r1, r2, #5
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	440a      	add	r2, r1
 8005732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005736:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800573a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800573e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d11a      	bne.n	800577c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	d903      	bls.n	800575a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	69ba      	ldr	r2, [r7, #24]
 800576a:	0151      	lsls	r1, r2, #5
 800576c:	69fa      	ldr	r2, [r7, #28]
 800576e:	440a      	add	r2, r1
 8005770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005778:	6113      	str	r3, [r2, #16]
 800577a:	e01b      	b.n	80057b4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	015a      	lsls	r2, r3, #5
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	4413      	add	r3, r2
 8005784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005788:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	6919      	ldr	r1, [r3, #16]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	440b      	add	r3, r1
 8005794:	1e59      	subs	r1, r3, #1
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	fbb1 f3f3 	udiv	r3, r1, r3
 800579e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80057a0:	4ba2      	ldr	r3, [pc, #648]	; (8005a2c <USB_EPStartXfer+0x3c0>)
 80057a2:	400b      	ands	r3, r1
 80057a4:	69b9      	ldr	r1, [r7, #24]
 80057a6:	0148      	lsls	r0, r1, #5
 80057a8:	69f9      	ldr	r1, [r7, #28]
 80057aa:	4401      	add	r1, r0
 80057ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057b0:	4313      	orrs	r3, r2
 80057b2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	015a      	lsls	r2, r3, #5
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	4413      	add	r3, r2
 80057bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c0:	691a      	ldr	r2, [r3, #16]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057ca:	69b9      	ldr	r1, [r7, #24]
 80057cc:	0148      	lsls	r0, r1, #5
 80057ce:	69f9      	ldr	r1, [r7, #28]
 80057d0:	4401      	add	r1, r0
 80057d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057d6:	4313      	orrs	r3, r2
 80057d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	791b      	ldrb	r3, [r3, #4]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d11f      	bne.n	8005822 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ee:	691b      	ldr	r3, [r3, #16]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	0151      	lsls	r1, r2, #5
 80057f4:	69fa      	ldr	r2, [r7, #28]
 80057f6:	440a      	add	r2, r1
 80057f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005800:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	015a      	lsls	r2, r3, #5
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4413      	add	r3, r2
 800580a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	69ba      	ldr	r2, [r7, #24]
 8005812:	0151      	lsls	r1, r2, #5
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	440a      	add	r2, r1
 8005818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005820:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d14b      	bne.n	80058c0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d009      	beq.n	8005844 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	4413      	add	r3, r2
 8005838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583c:	461a      	mov	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	791b      	ldrb	r3, [r3, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d128      	bne.n	800589e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d110      	bne.n	800587e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005876:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e00f      	b.n	800589e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	015a      	lsls	r2, r3, #5
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69ba      	ldr	r2, [r7, #24]
 80058ae:	0151      	lsls	r1, r2, #5
 80058b0:	69fa      	ldr	r2, [r7, #28]
 80058b2:	440a      	add	r2, r1
 80058b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	e165      	b.n	8005b8c <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80058de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	791b      	ldrb	r3, [r3, #4]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d015      	beq.n	8005914 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 814d 	beq.w	8005b8c <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	2101      	movs	r1, #1
 8005904:	fa01 f303 	lsl.w	r3, r1, r3
 8005908:	69f9      	ldr	r1, [r7, #28]
 800590a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800590e:	4313      	orrs	r3, r2
 8005910:	634b      	str	r3, [r1, #52]	; 0x34
 8005912:	e13b      	b.n	8005b8c <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005920:	2b00      	cmp	r3, #0
 8005922:	d110      	bne.n	8005946 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	015a      	lsls	r2, r3, #5
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	4413      	add	r3, r2
 800592c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	0151      	lsls	r1, r2, #5
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	440a      	add	r2, r1
 800593a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005942:	6013      	str	r3, [r2, #0]
 8005944:	e00f      	b.n	8005966 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005964:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	68d9      	ldr	r1, [r3, #12]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	b298      	uxth	r0, r3
 8005974:	79fb      	ldrb	r3, [r7, #7]
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4603      	mov	r3, r0
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 f9b8 	bl	8005cf0 <USB_WritePacket>
 8005980:	e104      	b.n	8005b8c <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	0151      	lsls	r1, r2, #5
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	440a      	add	r2, r1
 8005998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599c:	0cdb      	lsrs	r3, r3, #19
 800599e:	04db      	lsls	r3, r3, #19
 80059a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059c4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d131      	bne.n	8005a30 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	689a      	ldr	r2, [r3, #8]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	015a      	lsls	r2, r3, #5
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	4413      	add	r3, r2
 80059ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059fa:	69b9      	ldr	r1, [r7, #24]
 80059fc:	0148      	lsls	r0, r1, #5
 80059fe:	69f9      	ldr	r1, [r7, #28]
 8005a00:	4401      	add	r1, r0
 8005a02:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a06:	4313      	orrs	r3, r2
 8005a08:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	0151      	lsls	r1, r2, #5
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	440a      	add	r2, r1
 8005a20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a28:	6113      	str	r3, [r2, #16]
 8005a2a:	e061      	b.n	8005af0 <USB_EPStartXfer+0x484>
 8005a2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d123      	bne.n	8005a80 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a4e:	69b9      	ldr	r1, [r7, #24]
 8005a50:	0148      	lsls	r0, r1, #5
 8005a52:	69f9      	ldr	r1, [r7, #28]
 8005a54:	4401      	add	r1, r0
 8005a56:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	0151      	lsls	r1, r2, #5
 8005a70:	69fa      	ldr	r2, [r7, #28]
 8005a72:	440a      	add	r2, r1
 8005a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a7c:	6113      	str	r3, [r2, #16]
 8005a7e:	e037      	b.n	8005af0 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	4413      	add	r3, r2
 8005a8a:	1e5a      	subs	r2, r3, #1
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a94:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	8afa      	ldrh	r2, [r7, #22]
 8005a9c:	fb03 f202 	mul.w	r2, r3, r2
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab0:	691a      	ldr	r2, [r3, #16]
 8005ab2:	8afb      	ldrh	r3, [r7, #22]
 8005ab4:	04d9      	lsls	r1, r3, #19
 8005ab6:	4b38      	ldr	r3, [pc, #224]	; (8005b98 <USB_EPStartXfer+0x52c>)
 8005ab8:	400b      	ands	r3, r1
 8005aba:	69b9      	ldr	r1, [r7, #24]
 8005abc:	0148      	lsls	r0, r1, #5
 8005abe:	69f9      	ldr	r1, [r7, #28]
 8005ac0:	4401      	add	r1, r0
 8005ac2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae0:	69b9      	ldr	r1, [r7, #24]
 8005ae2:	0148      	lsls	r0, r1, #5
 8005ae4:	69f9      	ldr	r1, [r7, #28]
 8005ae6:	4401      	add	r1, r0
 8005ae8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005aec:	4313      	orrs	r3, r2
 8005aee:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10d      	bne.n	8005b12 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	68d9      	ldr	r1, [r3, #12]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0e:	460a      	mov	r2, r1
 8005b10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	791b      	ldrb	r3, [r3, #4]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d128      	bne.n	8005b6c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d110      	bne.n	8005b4c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005b48:	6013      	str	r3, [r2, #0]
 8005b4a:	e00f      	b.n	8005b6c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005b8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3720      	adds	r7, #32
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	1ff80000 	.word	0x1ff80000

08005b9c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	785b      	ldrb	r3, [r3, #1]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d14a      	bne.n	8005c50 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd2:	f040 8086 	bne.w	8005ce2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	015a      	lsls	r2, r3, #5
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	4413      	add	r3, r2
 8005be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	7812      	ldrb	r2, [r2, #0]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bf8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	7812      	ldrb	r2, [r2, #0]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	3301      	adds	r3, #1
 8005c22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f242 7210 	movw	r2, #10000	; 0x2710
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d902      	bls.n	8005c34 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
          break;
 8005c32:	e056      	b.n	8005ce2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c4c:	d0e7      	beq.n	8005c1e <USB_EPStopXfer+0x82>
 8005c4e:	e048      	b.n	8005ce2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c68:	d13b      	bne.n	8005ce2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	693b      	ldr	r3, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	7812      	ldrb	r2, [r2, #0]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c88:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c8c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	7812      	ldrb	r2, [r2, #0]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cb0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	3301      	adds	r3, #1
 8005cb6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f242 7210 	movw	r2, #10000	; 0x2710
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d902      	bls.n	8005cc8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
          break;
 8005cc6:	e00c      	b.n	8005ce2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ce0:	d0e7      	beq.n	8005cb2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b089      	sub	sp, #36	; 0x24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	460b      	mov	r3, r1
 8005d00:	71fb      	strb	r3, [r7, #7]
 8005d02:	4613      	mov	r3, r2
 8005d04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005d0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d123      	bne.n	8005d5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d16:	88bb      	ldrh	r3, [r7, #4]
 8005d18:	3303      	adds	r3, #3
 8005d1a:	089b      	lsrs	r3, r3, #2
 8005d1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d1e:	2300      	movs	r3, #0
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	e018      	b.n	8005d56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d24:	79fb      	ldrb	r3, [r7, #7]
 8005d26:	031a      	lsls	r2, r3, #12
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d30:	461a      	mov	r2, r3
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	3301      	adds	r3, #1
 8005d42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	3301      	adds	r3, #1
 8005d48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	3301      	adds	r3, #1
 8005d54:	61bb      	str	r3, [r7, #24]
 8005d56:	69ba      	ldr	r2, [r7, #24]
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d3e2      	bcc.n	8005d24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3724      	adds	r7, #36	; 0x24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b08b      	sub	sp, #44	; 0x2c
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	4613      	mov	r3, r2
 8005d78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005d82:	88fb      	ldrh	r3, [r7, #6]
 8005d84:	089b      	lsrs	r3, r3, #2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005d8a:	88fb      	ldrh	r3, [r7, #6]
 8005d8c:	f003 0303 	and.w	r3, r3, #3
 8005d90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005d92:	2300      	movs	r3, #0
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	e014      	b.n	8005dc2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da6:	3301      	adds	r3, #1
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dac:	3301      	adds	r3, #1
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db2:	3301      	adds	r3, #1
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	3301      	adds	r3, #1
 8005dba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005dbc:	6a3b      	ldr	r3, [r7, #32]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	623b      	str	r3, [r7, #32]
 8005dc2:	6a3a      	ldr	r2, [r7, #32]
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d3e6      	bcc.n	8005d98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005dca:	8bfb      	ldrh	r3, [r7, #30]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d01e      	beq.n	8005e0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f107 0310 	add.w	r3, r7, #16
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	fa22 f303 	lsr.w	r3, r2, r3
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	701a      	strb	r2, [r3, #0]
      i++;
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	3301      	adds	r3, #1
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005e02:	8bfb      	ldrh	r3, [r7, #30]
 8005e04:	3b01      	subs	r3, #1
 8005e06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005e08:	8bfb      	ldrh	r3, [r7, #30]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1ea      	bne.n	8005de4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	372c      	adds	r7, #44	; 0x2c
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	785b      	ldrb	r3, [r3, #1]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d12c      	bne.n	8005e92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	db12      	blt.n	8005e70 <USB_EPSetStall+0x54>
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00f      	beq.n	8005e70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	015a      	lsls	r2, r3, #5
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4413      	add	r3, r2
 8005e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	0151      	lsls	r1, r2, #5
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	440a      	add	r2, r1
 8005e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0151      	lsls	r1, r2, #5
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	440a      	add	r2, r1
 8005e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e8e:	6013      	str	r3, [r2, #0]
 8005e90:	e02b      	b.n	8005eea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	015a      	lsls	r2, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4413      	add	r3, r2
 8005e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	db12      	blt.n	8005eca <USB_EPSetStall+0xae>
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00f      	beq.n	8005eca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	0151      	lsls	r1, r2, #5
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	440a      	add	r2, r1
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ec4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ec8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	015a      	lsls	r2, r3, #5
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4413      	add	r3, r2
 8005ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	0151      	lsls	r1, r2, #5
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	440a      	add	r2, r1
 8005ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ee8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3714      	adds	r7, #20
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b085      	sub	sp, #20
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	785b      	ldrb	r3, [r3, #1]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d128      	bne.n	8005f66 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f32:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	791b      	ldrb	r3, [r3, #4]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d003      	beq.n	8005f44 <USB_EPClearStall+0x4c>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	791b      	ldrb	r3, [r3, #4]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d138      	bne.n	8005fb6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	e027      	b.n	8005fb6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	015a      	lsls	r2, r3, #5
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	0151      	lsls	r1, r2, #5
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	440a      	add	r2, r1
 8005f7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	791b      	ldrb	r3, [r3, #4]
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d003      	beq.n	8005f96 <USB_EPClearStall+0x9e>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	791b      	ldrb	r3, [r3, #4]
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d10f      	bne.n	8005fb6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	0151      	lsls	r1, r2, #5
 8005fa8:	68fa      	ldr	r2, [r7, #12]
 8005faa:	440a      	add	r2, r1
 8005fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b085      	sub	sp, #20
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005fe6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ff8:	68f9      	ldr	r1, [r7, #12]
 8005ffa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006002:	2300      	movs	r3, #0
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800602a:	f023 0303 	bic.w	r3, r3, #3
 800602e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800603e:	f023 0302 	bic.w	r3, r3, #2
 8006042:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006052:	b480      	push	{r7}
 8006054:	b085      	sub	sp, #20
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800606c:	f023 0303 	bic.w	r3, r3, #3
 8006070:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006080:	f043 0302 	orr.w	r3, r3, #2
 8006084:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	4013      	ands	r3, r2
 80060aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80060ac:	68fb      	ldr	r3, [r7, #12]
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3714      	adds	r7, #20
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	68ba      	ldr	r2, [r7, #8]
 80060da:	4013      	ands	r3, r2
 80060dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	0c1b      	lsrs	r3, r3, #16
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3714      	adds	r7, #20
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b085      	sub	sp, #20
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	b29b      	uxth	r3, r3
}
 8006116:	4618      	mov	r0, r3
 8006118:	3714      	adds	r7, #20
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006122:	b480      	push	{r7}
 8006124:	b085      	sub	sp, #20
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	4013      	ands	r3, r2
 800614e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006150:	68bb      	ldr	r3, [r7, #8]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800615e:	b480      	push	{r7}
 8006160:	b087      	sub	sp, #28
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
 8006166:	460b      	mov	r3, r1
 8006168:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006180:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	fa22 f303 	lsr.w	r3, r2, r3
 800618e:	01db      	lsls	r3, r3, #7
 8006190:	b2db      	uxtb	r3, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4013      	ands	r3, r2
 80061aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80061ac:	68bb      	ldr	r3, [r7, #8]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	371c      	adds	r7, #28
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	f003 0301 	and.w	r3, r3, #1
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80061f4:	f023 0307 	bic.w	r3, r3, #7
 80061f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800621c:	b480      	push	{r7}
 800621e:	b087      	sub	sp, #28
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	460b      	mov	r3, r1
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	333c      	adds	r3, #60	; 0x3c
 8006232:	3304      	adds	r3, #4
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	4a26      	ldr	r2, [pc, #152]	; (80062d4 <USB_EP0_OutStart+0xb8>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d90a      	bls.n	8006256 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800624c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006250:	d101      	bne.n	8006256 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006252:	2300      	movs	r3, #0
 8006254:	e037      	b.n	80062c6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006274:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006284:	f043 0318 	orr.w	r3, r3, #24
 8006288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006298:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800629c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d10f      	bne.n	80062c4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062aa:	461a      	mov	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062be:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80062c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	371c      	adds	r7, #28
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	4f54300a 	.word	0x4f54300a

080062d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	3301      	adds	r3, #1
 80062e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80062f0:	d901      	bls.n	80062f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80062f2:	2303      	movs	r3, #3
 80062f4:	e01b      	b.n	800632e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	daf2      	bge.n	80062e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f043 0201 	orr.w	r2, r3, #1
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800631a:	d901      	bls.n	8006320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e006      	b.n	800632e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b01      	cmp	r3, #1
 800632a:	d0f0      	beq.n	800630e <USB_CoreReset+0x36>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
	...

0800633c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006348:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800634c:	f002 fc7a 	bl	8008c44 <USBD_static_malloc>
 8006350:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d109      	bne.n	800636c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	32b0      	adds	r2, #176	; 0xb0
 8006362:	2100      	movs	r1, #0
 8006364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006368:	2302      	movs	r3, #2
 800636a:	e0d4      	b.n	8006516 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800636c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006370:	2100      	movs	r1, #0
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f003 fa35 	bl	80097e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	32b0      	adds	r2, #176	; 0xb0
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	32b0      	adds	r2, #176	; 0xb0
 8006392:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	7c1b      	ldrb	r3, [r3, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d138      	bne.n	8006416 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80063a4:	4b5e      	ldr	r3, [pc, #376]	; (8006520 <USBD_CDC_Init+0x1e4>)
 80063a6:	7819      	ldrb	r1, [r3, #0]
 80063a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ac:	2202      	movs	r2, #2
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f002 fb25 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80063b4:	4b5a      	ldr	r3, [pc, #360]	; (8006520 <USBD_CDC_Init+0x1e4>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f003 020f 	and.w	r2, r3, #15
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	4613      	mov	r3, r2
 80063c0:	009b      	lsls	r3, r3, #2
 80063c2:	4413      	add	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	440b      	add	r3, r1
 80063c8:	3324      	adds	r3, #36	; 0x24
 80063ca:	2201      	movs	r2, #1
 80063cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80063ce:	4b55      	ldr	r3, [pc, #340]	; (8006524 <USBD_CDC_Init+0x1e8>)
 80063d0:	7819      	ldrb	r1, [r3, #0]
 80063d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063d6:	2202      	movs	r2, #2
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f002 fb10 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80063de:	4b51      	ldr	r3, [pc, #324]	; (8006524 <USBD_CDC_Init+0x1e8>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f003 020f 	and.w	r2, r3, #15
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	440b      	add	r3, r1
 80063f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80063f6:	2201      	movs	r2, #1
 80063f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80063fa:	4b4b      	ldr	r3, [pc, #300]	; (8006528 <USBD_CDC_Init+0x1ec>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 020f 	and.w	r2, r3, #15
 8006402:	6879      	ldr	r1, [r7, #4]
 8006404:	4613      	mov	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	440b      	add	r3, r1
 800640e:	3326      	adds	r3, #38	; 0x26
 8006410:	2210      	movs	r2, #16
 8006412:	801a      	strh	r2, [r3, #0]
 8006414:	e035      	b.n	8006482 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006416:	4b42      	ldr	r3, [pc, #264]	; (8006520 <USBD_CDC_Init+0x1e4>)
 8006418:	7819      	ldrb	r1, [r3, #0]
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	2202      	movs	r2, #2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f002 faed 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006424:	4b3e      	ldr	r3, [pc, #248]	; (8006520 <USBD_CDC_Init+0x1e4>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	f003 020f 	and.w	r2, r3, #15
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	3324      	adds	r3, #36	; 0x24
 800643a:	2201      	movs	r2, #1
 800643c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800643e:	4b39      	ldr	r3, [pc, #228]	; (8006524 <USBD_CDC_Init+0x1e8>)
 8006440:	7819      	ldrb	r1, [r3, #0]
 8006442:	2340      	movs	r3, #64	; 0x40
 8006444:	2202      	movs	r2, #2
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f002 fad9 	bl	80089fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800644c:	4b35      	ldr	r3, [pc, #212]	; (8006524 <USBD_CDC_Init+0x1e8>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 020f 	and.w	r2, r3, #15
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006464:	2201      	movs	r2, #1
 8006466:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006468:	4b2f      	ldr	r3, [pc, #188]	; (8006528 <USBD_CDC_Init+0x1ec>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	f003 020f 	and.w	r2, r3, #15
 8006470:	6879      	ldr	r1, [r7, #4]
 8006472:	4613      	mov	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	009b      	lsls	r3, r3, #2
 800647a:	440b      	add	r3, r1
 800647c:	3326      	adds	r3, #38	; 0x26
 800647e:	2210      	movs	r2, #16
 8006480:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006482:	4b29      	ldr	r3, [pc, #164]	; (8006528 <USBD_CDC_Init+0x1ec>)
 8006484:	7819      	ldrb	r1, [r3, #0]
 8006486:	2308      	movs	r3, #8
 8006488:	2203      	movs	r2, #3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f002 fab7 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <USBD_CDC_Init+0x1ec>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 020f 	and.w	r2, r3, #15
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	3324      	adds	r3, #36	; 0x24
 80064a6:	2201      	movs	r2, #1
 80064a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	33b0      	adds	r3, #176	; 0xb0
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d101      	bne.n	80064e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80064e0:	2302      	movs	r3, #2
 80064e2:	e018      	b.n	8006516 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	7c1b      	ldrb	r3, [r3, #16]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10a      	bne.n	8006502 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80064ec:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <USBD_CDC_Init+0x1e8>)
 80064ee:	7819      	ldrb	r1, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 fb6e 	bl	8008bdc <USBD_LL_PrepareReceive>
 8006500:	e008      	b.n	8006514 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006502:	4b08      	ldr	r3, [pc, #32]	; (8006524 <USBD_CDC_Init+0x1e8>)
 8006504:	7819      	ldrb	r1, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800650c:	2340      	movs	r3, #64	; 0x40
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f002 fb64 	bl	8008bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop
 8006520:	20000093 	.word	0x20000093
 8006524:	20000094 	.word	0x20000094
 8006528:	20000095 	.word	0x20000095

0800652c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b082      	sub	sp, #8
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006538:	4b3a      	ldr	r3, [pc, #232]	; (8006624 <USBD_CDC_DeInit+0xf8>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f002 fa83 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006544:	4b37      	ldr	r3, [pc, #220]	; (8006624 <USBD_CDC_DeInit+0xf8>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	f003 020f 	and.w	r2, r3, #15
 800654c:	6879      	ldr	r1, [r7, #4]
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	3324      	adds	r3, #36	; 0x24
 800655a:	2200      	movs	r2, #0
 800655c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800655e:	4b32      	ldr	r3, [pc, #200]	; (8006628 <USBD_CDC_DeInit+0xfc>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	4619      	mov	r1, r3
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f002 fa70 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800656a:	4b2f      	ldr	r3, [pc, #188]	; (8006628 <USBD_CDC_DeInit+0xfc>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	f003 020f 	and.w	r2, r3, #15
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006582:	2200      	movs	r2, #0
 8006584:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006586:	4b29      	ldr	r3, [pc, #164]	; (800662c <USBD_CDC_DeInit+0x100>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f002 fa5c 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006592:	4b26      	ldr	r3, [pc, #152]	; (800662c <USBD_CDC_DeInit+0x100>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f003 020f 	and.w	r2, r3, #15
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	3324      	adds	r3, #36	; 0x24
 80065a8:	2200      	movs	r2, #0
 80065aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80065ac:	4b1f      	ldr	r3, [pc, #124]	; (800662c <USBD_CDC_DeInit+0x100>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	3326      	adds	r3, #38	; 0x26
 80065c2:	2200      	movs	r2, #0
 80065c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	32b0      	adds	r2, #176	; 0xb0
 80065d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01f      	beq.n	8006618 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	33b0      	adds	r3, #176	; 0xb0
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32b0      	adds	r2, #176	; 0xb0
 80065f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f002 fb30 	bl	8008c60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	32b0      	adds	r2, #176	; 0xb0
 800660a:	2100      	movs	r1, #0
 800660c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000093 	.word	0x20000093
 8006628:	20000094 	.word	0x20000094
 800662c:	20000095 	.word	0x20000095

08006630 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b086      	sub	sp, #24
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	32b0      	adds	r2, #176	; 0xb0
 8006644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006648:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800664e:	2300      	movs	r3, #0
 8006650:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d101      	bne.n	8006660 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800665c:	2303      	movs	r3, #3
 800665e:	e0bf      	b.n	80067e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006668:	2b00      	cmp	r3, #0
 800666a:	d050      	beq.n	800670e <USBD_CDC_Setup+0xde>
 800666c:	2b20      	cmp	r3, #32
 800666e:	f040 80af 	bne.w	80067d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	88db      	ldrh	r3, [r3, #6]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d03a      	beq.n	80066f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b25b      	sxtb	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	da1b      	bge.n	80066bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	33b0      	adds	r3, #176	; 0xb0
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4413      	add	r3, r2
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800669a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800669c:	683a      	ldr	r2, [r7, #0]
 800669e:	88d2      	ldrh	r2, [r2, #6]
 80066a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	88db      	ldrh	r3, [r3, #6]
 80066a6:	2b07      	cmp	r3, #7
 80066a8:	bf28      	it	cs
 80066aa:	2307      	movcs	r3, #7
 80066ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	89fa      	ldrh	r2, [r7, #14]
 80066b2:	4619      	mov	r1, r3
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 fd89 	bl	80081cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80066ba:	e090      	b.n	80067de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	785a      	ldrb	r2, [r3, #1]
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	88db      	ldrh	r3, [r3, #6]
 80066ca:	2b3f      	cmp	r3, #63	; 0x3f
 80066cc:	d803      	bhi.n	80066d6 <USBD_CDC_Setup+0xa6>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	88db      	ldrh	r3, [r3, #6]
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	e000      	b.n	80066d8 <USBD_CDC_Setup+0xa8>
 80066d6:	2240      	movs	r2, #64	; 0x40
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80066de:	6939      	ldr	r1, [r7, #16]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80066e6:	461a      	mov	r2, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 fd9b 	bl	8008224 <USBD_CtlPrepareRx>
      break;
 80066ee:	e076      	b.n	80067de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	33b0      	adds	r3, #176	; 0xb0
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	7850      	ldrb	r0, [r2, #1]
 8006706:	2200      	movs	r2, #0
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	4798      	blx	r3
      break;
 800670c:	e067      	b.n	80067de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	785b      	ldrb	r3, [r3, #1]
 8006712:	2b0b      	cmp	r3, #11
 8006714:	d851      	bhi.n	80067ba <USBD_CDC_Setup+0x18a>
 8006716:	a201      	add	r2, pc, #4	; (adr r2, 800671c <USBD_CDC_Setup+0xec>)
 8006718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671c:	0800674d 	.word	0x0800674d
 8006720:	080067c9 	.word	0x080067c9
 8006724:	080067bb 	.word	0x080067bb
 8006728:	080067bb 	.word	0x080067bb
 800672c:	080067bb 	.word	0x080067bb
 8006730:	080067bb 	.word	0x080067bb
 8006734:	080067bb 	.word	0x080067bb
 8006738:	080067bb 	.word	0x080067bb
 800673c:	080067bb 	.word	0x080067bb
 8006740:	080067bb 	.word	0x080067bb
 8006744:	08006777 	.word	0x08006777
 8006748:	080067a1 	.word	0x080067a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b03      	cmp	r3, #3
 8006756:	d107      	bne.n	8006768 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006758:	f107 030a 	add.w	r3, r7, #10
 800675c:	2202      	movs	r2, #2
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fd33 	bl	80081cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006766:	e032      	b.n	80067ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006768:	6839      	ldr	r1, [r7, #0]
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fcbd 	bl	80080ea <USBD_CtlError>
            ret = USBD_FAIL;
 8006770:	2303      	movs	r3, #3
 8006772:	75fb      	strb	r3, [r7, #23]
          break;
 8006774:	e02b      	b.n	80067ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b03      	cmp	r3, #3
 8006780:	d107      	bne.n	8006792 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006782:	f107 030d 	add.w	r3, r7, #13
 8006786:	2201      	movs	r2, #1
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 fd1e 	bl	80081cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006790:	e01d      	b.n	80067ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006792:	6839      	ldr	r1, [r7, #0]
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f001 fca8 	bl	80080ea <USBD_CtlError>
            ret = USBD_FAIL;
 800679a:	2303      	movs	r3, #3
 800679c:	75fb      	strb	r3, [r7, #23]
          break;
 800679e:	e016      	b.n	80067ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d00f      	beq.n	80067cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f001 fc9b 	bl	80080ea <USBD_CtlError>
            ret = USBD_FAIL;
 80067b4:	2303      	movs	r3, #3
 80067b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80067b8:	e008      	b.n	80067cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f001 fc94 	bl	80080ea <USBD_CtlError>
          ret = USBD_FAIL;
 80067c2:	2303      	movs	r3, #3
 80067c4:	75fb      	strb	r3, [r7, #23]
          break;
 80067c6:	e002      	b.n	80067ce <USBD_CDC_Setup+0x19e>
          break;
 80067c8:	bf00      	nop
 80067ca:	e008      	b.n	80067de <USBD_CDC_Setup+0x1ae>
          break;
 80067cc:	bf00      	nop
      }
      break;
 80067ce:	e006      	b.n	80067de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f001 fc89 	bl	80080ea <USBD_CtlError>
      ret = USBD_FAIL;
 80067d8:	2303      	movs	r3, #3
 80067da:	75fb      	strb	r3, [r7, #23]
      break;
 80067dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	460b      	mov	r3, r1
 80067f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80067fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	32b0      	adds	r2, #176	; 0xb0
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800680e:	2303      	movs	r3, #3
 8006810:	e065      	b.n	80068de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	32b0      	adds	r2, #176	; 0xb0
 800681c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006820:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	3318      	adds	r3, #24
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d02f      	beq.n	800689c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	f003 020f 	and.w	r2, r3, #15
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	4613      	mov	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	4413      	add	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	3318      	adds	r3, #24
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	f003 010f 	and.w	r1, r3, #15
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	460b      	mov	r3, r1
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	440b      	add	r3, r1
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	4403      	add	r3, r0
 8006864:	331c      	adds	r3, #28
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	fbb2 f1f3 	udiv	r1, r2, r3
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006872:	2b00      	cmp	r3, #0
 8006874:	d112      	bne.n	800689c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006876:	78fb      	ldrb	r3, [r7, #3]
 8006878:	f003 020f 	and.w	r2, r3, #15
 800687c:	6879      	ldr	r1, [r7, #4]
 800687e:	4613      	mov	r3, r2
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	440b      	add	r3, r1
 8006888:	3318      	adds	r3, #24
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800688e:	78f9      	ldrb	r1, [r7, #3]
 8006890:	2300      	movs	r3, #0
 8006892:	2200      	movs	r2, #0
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f002 f980 	bl	8008b9a <USBD_LL_Transmit>
 800689a:	e01f      	b.n	80068dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	33b0      	adds	r3, #176	; 0xb0
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d010      	beq.n	80068dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	33b0      	adds	r3, #176	; 0xb0
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80068d8:	78fa      	ldrb	r2, [r7, #3]
 80068da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3710      	adds	r7, #16
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b084      	sub	sp, #16
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	460b      	mov	r3, r1
 80068f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	32b0      	adds	r2, #176	; 0xb0
 80068fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006900:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	32b0      	adds	r2, #176	; 0xb0
 800690c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	e01a      	b.n	800694e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f002 f97e 	bl	8008c1e <USBD_LL_GetRxDataSize>
 8006922:	4602      	mov	r2, r0
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	33b0      	adds	r3, #176	; 0xb0
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006948:	4611      	mov	r1, r2
 800694a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3710      	adds	r7, #16
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b084      	sub	sp, #16
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	32b0      	adds	r2, #176	; 0xb0
 8006968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006974:	2303      	movs	r3, #3
 8006976:	e025      	b.n	80069c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	33b0      	adds	r3, #176	; 0xb0
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d01a      	beq.n	80069c2 <USBD_CDC_EP0_RxReady+0x6c>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006992:	2bff      	cmp	r3, #255	; 0xff
 8006994:	d015      	beq.n	80069c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	33b0      	adds	r3, #176	; 0xb0
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80069ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80069b6:	b292      	uxth	r2, r2
 80069b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	22ff      	movs	r2, #255	; 0xff
 80069be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069d4:	2182      	movs	r1, #130	; 0x82
 80069d6:	4818      	ldr	r0, [pc, #96]	; (8006a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069d8:	f000 fd4f 	bl	800747a <USBD_GetEpDesc>
 80069dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069de:	2101      	movs	r1, #1
 80069e0:	4815      	ldr	r0, [pc, #84]	; (8006a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069e2:	f000 fd4a 	bl	800747a <USBD_GetEpDesc>
 80069e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069e8:	2181      	movs	r1, #129	; 0x81
 80069ea:	4813      	ldr	r0, [pc, #76]	; (8006a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80069ec:	f000 fd45 	bl	800747a <USBD_GetEpDesc>
 80069f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	2210      	movs	r2, #16
 80069fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d006      	beq.n	8006a12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a0c:	711a      	strb	r2, [r3, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d006      	beq.n	8006a26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a20:	711a      	strb	r2, [r3, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2243      	movs	r2, #67	; 0x43
 8006a2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a2c:	4b02      	ldr	r3, [pc, #8]	; (8006a38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3718      	adds	r7, #24
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	20000050 	.word	0x20000050

08006a3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006a44:	2182      	movs	r1, #130	; 0x82
 8006a46:	4818      	ldr	r0, [pc, #96]	; (8006aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a48:	f000 fd17 	bl	800747a <USBD_GetEpDesc>
 8006a4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006a4e:	2101      	movs	r1, #1
 8006a50:	4815      	ldr	r0, [pc, #84]	; (8006aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a52:	f000 fd12 	bl	800747a <USBD_GetEpDesc>
 8006a56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006a58:	2181      	movs	r1, #129	; 0x81
 8006a5a:	4813      	ldr	r0, [pc, #76]	; (8006aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006a5c:	f000 fd0d 	bl	800747a <USBD_GetEpDesc>
 8006a60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d006      	beq.n	8006a82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2200      	movs	r2, #0
 8006a78:	711a      	strb	r2, [r3, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f042 0202 	orr.w	r2, r2, #2
 8006a80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d006      	beq.n	8006a96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	711a      	strb	r2, [r3, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f042 0202 	orr.w	r2, r2, #2
 8006a94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2243      	movs	r2, #67	; 0x43
 8006a9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a9c:	4b02      	ldr	r3, [pc, #8]	; (8006aa8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	20000050 	.word	0x20000050

08006aac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ab4:	2182      	movs	r1, #130	; 0x82
 8006ab6:	4818      	ldr	r0, [pc, #96]	; (8006b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ab8:	f000 fcdf 	bl	800747a <USBD_GetEpDesc>
 8006abc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006abe:	2101      	movs	r1, #1
 8006ac0:	4815      	ldr	r0, [pc, #84]	; (8006b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006ac2:	f000 fcda 	bl	800747a <USBD_GetEpDesc>
 8006ac6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006ac8:	2181      	movs	r1, #129	; 0x81
 8006aca:	4813      	ldr	r0, [pc, #76]	; (8006b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006acc:	f000 fcd5 	bl	800747a <USBD_GetEpDesc>
 8006ad0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	2210      	movs	r2, #16
 8006adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d006      	beq.n	8006af2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aec:	711a      	strb	r2, [r3, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d006      	beq.n	8006b06 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b00:	711a      	strb	r2, [r3, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2243      	movs	r2, #67	; 0x43
 8006b0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b0c:	4b02      	ldr	r3, [pc, #8]	; (8006b18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3718      	adds	r7, #24
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
 8006b16:	bf00      	nop
 8006b18:	20000050 	.word	0x20000050

08006b1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	220a      	movs	r2, #10
 8006b28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006b2a:	4b03      	ldr	r3, [pc, #12]	; (8006b38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	2000000c 	.word	0x2000000c

08006b3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e009      	b.n	8006b64 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	33b0      	adds	r3, #176	; 0xb0
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006b62:	2300      	movs	r3, #0
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	32b0      	adds	r2, #176	; 0xb0
 8006b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e008      	b.n	8006ba8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	371c      	adds	r7, #28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	32b0      	adds	r2, #176	; 0xb0
 8006bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e004      	b.n	8006be2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	683a      	ldr	r2, [r7, #0]
 8006bdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3714      	adds	r7, #20
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	32b0      	adds	r2, #176	; 0xb0
 8006c02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c06:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e025      	b.n	8006c62 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d11f      	bne.n	8006c60 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006c28:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <USBD_CDC_TransmitPacket+0x7c>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	f003 020f 	and.w	r2, r3, #15
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	009b      	lsls	r3, r3, #2
 8006c3c:	4413      	add	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4403      	add	r3, r0
 8006c42:	3318      	adds	r3, #24
 8006c44:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006c46:	4b09      	ldr	r3, [pc, #36]	; (8006c6c <USBD_CDC_TransmitPacket+0x7c>)
 8006c48:	7819      	ldrb	r1, [r3, #0]
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 ff9f 	bl	8008b9a <USBD_LL_Transmit>

    ret = USBD_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	20000093 	.word	0x20000093

08006c70 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	32b0      	adds	r2, #176	; 0xb0
 8006c82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c86:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	32b0      	adds	r2, #176	; 0xb0
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e018      	b.n	8006cd0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	7c1b      	ldrb	r3, [r3, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10a      	bne.n	8006cbc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006ca6:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <USBD_CDC_ReceivePacket+0x68>)
 8006ca8:	7819      	ldrb	r1, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 ff91 	bl	8008bdc <USBD_LL_PrepareReceive>
 8006cba:	e008      	b.n	8006cce <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <USBD_CDC_ReceivePacket+0x68>)
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 ff87 	bl	8008bdc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20000094 	.word	0x20000094

08006cdc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d101      	bne.n	8006cf4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e01f      	b.n	8006d34 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	79fa      	ldrb	r2, [r7, #7]
 8006d26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	f001 fe01 	bl	8008930 <USBD_LL_Init>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006d32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e025      	b.n	8006da0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	32ae      	adds	r2, #174	; 0xae
 8006d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00f      	beq.n	8006d90 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	32ae      	adds	r2, #174	; 0xae
 8006d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	f107 020e 	add.w	r2, r7, #14
 8006d84:	4610      	mov	r0, r2
 8006d86:	4798      	blx	r3
 8006d88:	4602      	mov	r2, r0
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 fe09 	bl	80089c8 <USBD_LL_Start>
 8006db6:	4603      	mov	r3, r0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dc8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	370c      	adds	r7, #12
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b084      	sub	sp, #16
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d009      	beq.n	8006e04 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	78fa      	ldrb	r2, [r7, #3]
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}

08006e0e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e0e:	b580      	push	{r7, lr}
 8006e10:	b084      	sub	sp, #16
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
 8006e16:	460b      	mov	r3, r1
 8006e18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	4798      	blx	r3
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d001      	beq.n	8006e38 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006e34:	2303      	movs	r3, #3
 8006e36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f001 f90e 	bl	8008076 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d01a      	beq.n	8006eb4 <USBD_LL_SetupStage+0x72>
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d822      	bhi.n	8006ec8 <USBD_LL_SetupStage+0x86>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d002      	beq.n	8006e8c <USBD_LL_SetupStage+0x4a>
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d00a      	beq.n	8006ea0 <USBD_LL_SetupStage+0x5e>
 8006e8a:	e01d      	b.n	8006ec8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb65 	bl	8007564 <USBD_StdDevReq>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e9e:	e020      	b.n	8006ee2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 fbcd 	bl	8007648 <USBD_StdItfReq>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006eb2:	e016      	b.n	8006ee2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 fc2f 	bl	8007720 <USBD_StdEPReq>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ec6:	e00c      	b.n	8006ee2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006ece:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fdd6 	bl	8008a88 <USBD_LL_StallEP>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee0:	bf00      	nop
  }

  return ret;
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d16e      	bne.n	8006fe2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f12:	2b03      	cmp	r3, #3
 8006f14:	f040 8098 	bne.w	8007048 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d913      	bls.n	8006f4c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	1ad2      	subs	r2, r2, r3
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	bf28      	it	cs
 8006f3e:	4613      	movcs	r3, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f001 f98a 	bl	800825e <USBD_CtlContinueRx>
 8006f4a:	e07d      	b.n	8007048 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2b02      	cmp	r3, #2
 8006f58:	d014      	beq.n	8006f84 <USBD_LL_DataOutStage+0x98>
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d81d      	bhi.n	8006f9a <USBD_LL_DataOutStage+0xae>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <USBD_LL_DataOutStage+0x7c>
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d003      	beq.n	8006f6e <USBD_LL_DataOutStage+0x82>
 8006f66:	e018      	b.n	8006f9a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	75bb      	strb	r3, [r7, #22]
            break;
 8006f6c:	e018      	b.n	8006fa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	4619      	mov	r1, r3
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f000 fa64 	bl	8007446 <USBD_CoreFindIF>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	75bb      	strb	r3, [r7, #22]
            break;
 8006f82:	e00d      	b.n	8006fa0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 fa66 	bl	8007460 <USBD_CoreFindEP>
 8006f94:	4603      	mov	r3, r0
 8006f96:	75bb      	strb	r3, [r7, #22]
            break;
 8006f98:	e002      	b.n	8006fa0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75bb      	strb	r3, [r7, #22]
            break;
 8006f9e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006fa0:	7dbb      	ldrb	r3, [r7, #22]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d119      	bne.n	8006fda <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d113      	bne.n	8006fda <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006fb2:	7dba      	ldrb	r2, [r7, #22]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	32ae      	adds	r2, #174	; 0xae
 8006fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006fc2:	7dba      	ldrb	r2, [r7, #22]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006fca:	7dba      	ldrb	r2, [r7, #22]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	32ae      	adds	r2, #174	; 0xae
 8006fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f001 f950 	bl	8008280 <USBD_CtlSendStatus>
 8006fe0:	e032      	b.n	8007048 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006fe2:	7afb      	ldrb	r3, [r7, #11]
 8006fe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	4619      	mov	r1, r3
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fa37 	bl	8007460 <USBD_CoreFindEP>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ff6:	7dbb      	ldrb	r3, [r7, #22]
 8006ff8:	2bff      	cmp	r3, #255	; 0xff
 8006ffa:	d025      	beq.n	8007048 <USBD_LL_DataOutStage+0x15c>
 8006ffc:	7dbb      	ldrb	r3, [r7, #22]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d122      	bne.n	8007048 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b03      	cmp	r3, #3
 800700c:	d117      	bne.n	800703e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800700e:	7dba      	ldrb	r2, [r7, #22]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	32ae      	adds	r2, #174	; 0xae
 8007014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007018:	699b      	ldr	r3, [r3, #24]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00f      	beq.n	800703e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800701e:	7dba      	ldrb	r2, [r7, #22]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007026:	7dba      	ldrb	r2, [r7, #22]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	32ae      	adds	r2, #174	; 0xae
 800702c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	7afa      	ldrb	r2, [r7, #11]
 8007034:	4611      	mov	r1, r2
 8007036:	68f8      	ldr	r0, [r7, #12]
 8007038:	4798      	blx	r3
 800703a:	4603      	mov	r3, r0
 800703c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	e000      	b.n	800704a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	460b      	mov	r3, r1
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d16f      	bne.n	8007146 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3314      	adds	r3, #20
 800706a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007072:	2b02      	cmp	r3, #2
 8007074:	d15a      	bne.n	800712c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	689a      	ldr	r2, [r3, #8]
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	429a      	cmp	r2, r3
 8007080:	d914      	bls.n	80070ac <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	461a      	mov	r2, r3
 8007096:	6879      	ldr	r1, [r7, #4]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f001 f8b2 	bl	8008202 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800709e:	2300      	movs	r3, #0
 80070a0:	2200      	movs	r2, #0
 80070a2:	2100      	movs	r1, #0
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f001 fd99 	bl	8008bdc <USBD_LL_PrepareReceive>
 80070aa:	e03f      	b.n	800712c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d11c      	bne.n	80070f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d316      	bcc.n	80070f2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d20f      	bcs.n	80070f2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f001 f893 	bl	8008202 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e4:	2300      	movs	r3, #0
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f001 fd76 	bl	8008bdc <USBD_LL_PrepareReceive>
 80070f0:	e01c      	b.n	800712c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070f8:	b2db      	uxtb	r3, r3
 80070fa:	2b03      	cmp	r3, #3
 80070fc:	d10f      	bne.n	800711e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800711e:	2180      	movs	r1, #128	; 0x80
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f001 fcb1 	bl	8008a88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 f8bd 	bl	80082a6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d03a      	beq.n	80071ac <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7ff fe42 	bl	8006dc0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007144:	e032      	b.n	80071ac <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800714c:	b2db      	uxtb	r3, r3
 800714e:	4619      	mov	r1, r3
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 f985 	bl	8007460 <USBD_CoreFindEP>
 8007156:	4603      	mov	r3, r0
 8007158:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800715a:	7dfb      	ldrb	r3, [r7, #23]
 800715c:	2bff      	cmp	r3, #255	; 0xff
 800715e:	d025      	beq.n	80071ac <USBD_LL_DataInStage+0x15a>
 8007160:	7dfb      	ldrb	r3, [r7, #23]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d122      	bne.n	80071ac <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b03      	cmp	r3, #3
 8007170:	d11c      	bne.n	80071ac <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007172:	7dfa      	ldrb	r2, [r7, #23]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	32ae      	adds	r2, #174	; 0xae
 8007178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d014      	beq.n	80071ac <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007182:	7dfa      	ldrb	r2, [r7, #23]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800718a:	7dfa      	ldrb	r2, [r7, #23]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	32ae      	adds	r2, #174	; 0xae
 8007190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	7afa      	ldrb	r2, [r7, #11]
 8007198:	4611      	mov	r1, r2
 800719a:	68f8      	ldr	r0, [r7, #12]
 800719c:	4798      	blx	r3
 800719e:	4603      	mov	r3, r0
 80071a0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80071a2:	7dbb      	ldrb	r3, [r7, #22]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80071a8:	7dbb      	ldrb	r3, [r7, #22]
 80071aa:	e000      	b.n	80071ae <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d014      	beq.n	800721c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00e      	beq.n	800721c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6852      	ldr	r2, [r2, #4]
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	4611      	mov	r1, r2
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	2200      	movs	r2, #0
 8007220:	2100      	movs	r1, #0
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f001 fbeb 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2240      	movs	r2, #64	; 0x40
 8007234:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	2200      	movs	r2, #0
 800723c:	2180      	movs	r1, #128	; 0x80
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 fbdd 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2240      	movs	r2, #64	; 0x40
 800724e:	621a      	str	r2, [r3, #32]

  return ret;
 8007250:	7bfb      	ldrb	r3, [r7, #15]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b04      	cmp	r3, #4
 800728c:	d006      	beq.n	800729c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007294:	b2da      	uxtb	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2204      	movs	r2, #4
 80072a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	d106      	bne.n	80072d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b082      	sub	sp, #8
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d110      	bne.n	8007318 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d00b      	beq.n	8007318 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	32ae      	adds	r2, #174	; 0xae
 8007338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007340:	2303      	movs	r3, #3
 8007342:	e01c      	b.n	800737e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b03      	cmp	r3, #3
 800734e:	d115      	bne.n	800737c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	32ae      	adds	r2, #174	; 0xae
 800735a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00b      	beq.n	800737c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	32ae      	adds	r2, #174	; 0xae
 800736e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	78fa      	ldrb	r2, [r7, #3]
 8007376:	4611      	mov	r1, r2
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	32ae      	adds	r2, #174	; 0xae
 800739c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80073a4:	2303      	movs	r3, #3
 80073a6:	e01c      	b.n	80073e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d115      	bne.n	80073e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	32ae      	adds	r2, #174	; 0xae
 80073be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	32ae      	adds	r2, #174	; 0xae
 80073d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	78fa      	ldrb	r2, [r7, #3]
 80073da:	4611      	mov	r1, r2
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00e      	beq.n	800743c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6852      	ldr	r2, [r2, #4]
 800742a:	b2d2      	uxtb	r2, r2
 800742c:	4611      	mov	r1, r2
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	4798      	blx	r3
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d001      	beq.n	800743c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007438:	2303      	movs	r3, #3
 800743a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800743c:	7bfb      	ldrb	r3, [r7, #15]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007446:	b480      	push	{r7}
 8007448:	b083      	sub	sp, #12
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007452:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	460b      	mov	r3, r1
 800746a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800746c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800746e:	4618      	mov	r0, r3
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b086      	sub	sp, #24
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	460b      	mov	r3, r1
 8007484:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	885b      	ldrh	r3, [r3, #2]
 8007496:	b29a      	uxth	r2, r3
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	b29b      	uxth	r3, r3
 800749e:	429a      	cmp	r2, r3
 80074a0:	d920      	bls.n	80074e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80074aa:	e013      	b.n	80074d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80074ac:	f107 030a 	add.w	r3, r7, #10
 80074b0:	4619      	mov	r1, r3
 80074b2:	6978      	ldr	r0, [r7, #20]
 80074b4:	f000 f81b 	bl	80074ee <USBD_GetNextDesc>
 80074b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	785b      	ldrb	r3, [r3, #1]
 80074be:	2b05      	cmp	r3, #5
 80074c0:	d108      	bne.n	80074d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	789b      	ldrb	r3, [r3, #2]
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d008      	beq.n	80074e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	885b      	ldrh	r3, [r3, #2]
 80074d8:	b29a      	uxth	r2, r3
 80074da:	897b      	ldrh	r3, [r7, #10]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d8e5      	bhi.n	80074ac <USBD_GetEpDesc+0x32>
 80074e0:	e000      	b.n	80074e4 <USBD_GetEpDesc+0x6a>
          break;
 80074e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80074e4:	693b      	ldr	r3, [r7, #16]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80074ee:	b480      	push	{r7}
 80074f0:	b085      	sub	sp, #20
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	881a      	ldrh	r2, [r3, #0]
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	b29b      	uxth	r3, r3
 8007506:	4413      	add	r3, r2
 8007508:	b29a      	uxth	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4413      	add	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800751a:	68fb      	ldr	r3, [r7, #12]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	3301      	adds	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007546:	8a3b      	ldrh	r3, [r7, #16]
 8007548:	021b      	lsls	r3, r3, #8
 800754a:	b21a      	sxth	r2, r3
 800754c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007550:	4313      	orrs	r3, r2
 8007552:	b21b      	sxth	r3, r3
 8007554:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007556:	89fb      	ldrh	r3, [r7, #14]
}
 8007558:	4618      	mov	r0, r3
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800757a:	2b40      	cmp	r3, #64	; 0x40
 800757c:	d005      	beq.n	800758a <USBD_StdDevReq+0x26>
 800757e:	2b40      	cmp	r3, #64	; 0x40
 8007580:	d857      	bhi.n	8007632 <USBD_StdDevReq+0xce>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00f      	beq.n	80075a6 <USBD_StdDevReq+0x42>
 8007586:	2b20      	cmp	r3, #32
 8007588:	d153      	bne.n	8007632 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	32ae      	adds	r2, #174	; 0xae
 8007594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4798      	blx	r3
 80075a0:	4603      	mov	r3, r0
 80075a2:	73fb      	strb	r3, [r7, #15]
      break;
 80075a4:	e04a      	b.n	800763c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	2b09      	cmp	r3, #9
 80075ac:	d83b      	bhi.n	8007626 <USBD_StdDevReq+0xc2>
 80075ae:	a201      	add	r2, pc, #4	; (adr r2, 80075b4 <USBD_StdDevReq+0x50>)
 80075b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075b4:	08007609 	.word	0x08007609
 80075b8:	0800761d 	.word	0x0800761d
 80075bc:	08007627 	.word	0x08007627
 80075c0:	08007613 	.word	0x08007613
 80075c4:	08007627 	.word	0x08007627
 80075c8:	080075e7 	.word	0x080075e7
 80075cc:	080075dd 	.word	0x080075dd
 80075d0:	08007627 	.word	0x08007627
 80075d4:	080075ff 	.word	0x080075ff
 80075d8:	080075f1 	.word	0x080075f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa3c 	bl	8007a5c <USBD_GetDescriptor>
          break;
 80075e4:	e024      	b.n	8007630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 fba1 	bl	8007d30 <USBD_SetAddress>
          break;
 80075ee:	e01f      	b.n	8007630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fbe0 	bl	8007db8 <USBD_SetConfig>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]
          break;
 80075fc:	e018      	b.n	8007630 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fc83 	bl	8007f0c <USBD_GetConfig>
          break;
 8007606:	e013      	b.n	8007630 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fcb4 	bl	8007f78 <USBD_GetStatus>
          break;
 8007610:	e00e      	b.n	8007630 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fce3 	bl	8007fe0 <USBD_SetFeature>
          break;
 800761a:	e009      	b.n	8007630 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 fd07 	bl	8008032 <USBD_ClrFeature>
          break;
 8007624:	e004      	b.n	8007630 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007626:	6839      	ldr	r1, [r7, #0]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fd5e 	bl	80080ea <USBD_CtlError>
          break;
 800762e:	bf00      	nop
      }
      break;
 8007630:	e004      	b.n	800763c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007632:	6839      	ldr	r1, [r7, #0]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fd58 	bl	80080ea <USBD_CtlError>
      break;
 800763a:	bf00      	nop
  }

  return ret;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop

08007648 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007652:	2300      	movs	r3, #0
 8007654:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800765e:	2b40      	cmp	r3, #64	; 0x40
 8007660:	d005      	beq.n	800766e <USBD_StdItfReq+0x26>
 8007662:	2b40      	cmp	r3, #64	; 0x40
 8007664:	d852      	bhi.n	800770c <USBD_StdItfReq+0xc4>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <USBD_StdItfReq+0x26>
 800766a:	2b20      	cmp	r3, #32
 800766c:	d14e      	bne.n	800770c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007674:	b2db      	uxtb	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	2b02      	cmp	r3, #2
 800767a:	d840      	bhi.n	80076fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	889b      	ldrh	r3, [r3, #4]
 8007680:	b2db      	uxtb	r3, r3
 8007682:	2b01      	cmp	r3, #1
 8007684:	d836      	bhi.n	80076f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	889b      	ldrh	r3, [r3, #4]
 800768a:	b2db      	uxtb	r3, r3
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7ff fed9 	bl	8007446 <USBD_CoreFindIF>
 8007694:	4603      	mov	r3, r0
 8007696:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	2bff      	cmp	r3, #255	; 0xff
 800769c:	d01d      	beq.n	80076da <USBD_StdItfReq+0x92>
 800769e:	7bbb      	ldrb	r3, [r7, #14]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d11a      	bne.n	80076da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80076a4:	7bba      	ldrb	r2, [r7, #14]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	32ae      	adds	r2, #174	; 0xae
 80076aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00f      	beq.n	80076d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80076b4:	7bba      	ldrb	r2, [r7, #14]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80076bc:	7bba      	ldrb	r2, [r7, #14]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	32ae      	adds	r2, #174	; 0xae
 80076c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	6839      	ldr	r1, [r7, #0]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	4798      	blx	r3
 80076ce:	4603      	mov	r3, r0
 80076d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076d2:	e004      	b.n	80076de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80076d4:	2303      	movs	r3, #3
 80076d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80076d8:	e001      	b.n	80076de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80076da:	2303      	movs	r3, #3
 80076dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	88db      	ldrh	r3, [r3, #6]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d110      	bne.n	8007708 <USBD_StdItfReq+0xc0>
 80076e6:	7bfb      	ldrb	r3, [r7, #15]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10d      	bne.n	8007708 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f000 fdc7 	bl	8008280 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80076f2:	e009      	b.n	8007708 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80076f4:	6839      	ldr	r1, [r7, #0]
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fcf7 	bl	80080ea <USBD_CtlError>
          break;
 80076fc:	e004      	b.n	8007708 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80076fe:	6839      	ldr	r1, [r7, #0]
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 fcf2 	bl	80080ea <USBD_CtlError>
          break;
 8007706:	e000      	b.n	800770a <USBD_StdItfReq+0xc2>
          break;
 8007708:	bf00      	nop
      }
      break;
 800770a:	e004      	b.n	8007716 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fceb 	bl	80080ea <USBD_CtlError>
      break;
 8007714:	bf00      	nop
  }

  return ret;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	889b      	ldrh	r3, [r3, #4]
 8007732:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800773c:	2b40      	cmp	r3, #64	; 0x40
 800773e:	d007      	beq.n	8007750 <USBD_StdEPReq+0x30>
 8007740:	2b40      	cmp	r3, #64	; 0x40
 8007742:	f200 817f 	bhi.w	8007a44 <USBD_StdEPReq+0x324>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d02a      	beq.n	80077a0 <USBD_StdEPReq+0x80>
 800774a:	2b20      	cmp	r3, #32
 800774c:	f040 817a 	bne.w	8007a44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007750:	7bbb      	ldrb	r3, [r7, #14]
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff fe83 	bl	8007460 <USBD_CoreFindEP>
 800775a:	4603      	mov	r3, r0
 800775c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800775e:	7b7b      	ldrb	r3, [r7, #13]
 8007760:	2bff      	cmp	r3, #255	; 0xff
 8007762:	f000 8174 	beq.w	8007a4e <USBD_StdEPReq+0x32e>
 8007766:	7b7b      	ldrb	r3, [r7, #13]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f040 8170 	bne.w	8007a4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800776e:	7b7a      	ldrb	r2, [r7, #13]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007776:	7b7a      	ldrb	r2, [r7, #13]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	32ae      	adds	r2, #174	; 0xae
 800777c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	2b00      	cmp	r3, #0
 8007784:	f000 8163 	beq.w	8007a4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007788:	7b7a      	ldrb	r2, [r7, #13]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	32ae      	adds	r2, #174	; 0xae
 800778e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800779e:	e156      	b.n	8007a4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	785b      	ldrb	r3, [r3, #1]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d008      	beq.n	80077ba <USBD_StdEPReq+0x9a>
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	f300 8145 	bgt.w	8007a38 <USBD_StdEPReq+0x318>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 809b 	beq.w	80078ea <USBD_StdEPReq+0x1ca>
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d03c      	beq.n	8007832 <USBD_StdEPReq+0x112>
 80077b8:	e13e      	b.n	8007a38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d002      	beq.n	80077cc <USBD_StdEPReq+0xac>
 80077c6:	2b03      	cmp	r3, #3
 80077c8:	d016      	beq.n	80077f8 <USBD_StdEPReq+0xd8>
 80077ca:	e02c      	b.n	8007826 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00d      	beq.n	80077ee <USBD_StdEPReq+0xce>
 80077d2:	7bbb      	ldrb	r3, [r7, #14]
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d00a      	beq.n	80077ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 f953 	bl	8008a88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80077e2:	2180      	movs	r1, #128	; 0x80
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 f94f 	bl	8008a88 <USBD_LL_StallEP>
 80077ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80077ec:	e020      	b.n	8007830 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fc7a 	bl	80080ea <USBD_CtlError>
              break;
 80077f6:	e01b      	b.n	8007830 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10e      	bne.n	800781e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007800:	7bbb      	ldrb	r3, [r7, #14]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <USBD_StdEPReq+0xfe>
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d008      	beq.n	800781e <USBD_StdEPReq+0xfe>
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	88db      	ldrh	r3, [r3, #6]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d104      	bne.n	800781e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007814:	7bbb      	ldrb	r3, [r7, #14]
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 f935 	bl	8008a88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fd2e 	bl	8008280 <USBD_CtlSendStatus>

              break;
 8007824:	e004      	b.n	8007830 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fc5e 	bl	80080ea <USBD_CtlError>
              break;
 800782e:	bf00      	nop
          }
          break;
 8007830:	e107      	b.n	8007a42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d002      	beq.n	8007844 <USBD_StdEPReq+0x124>
 800783e:	2b03      	cmp	r3, #3
 8007840:	d016      	beq.n	8007870 <USBD_StdEPReq+0x150>
 8007842:	e04b      	b.n	80078dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00d      	beq.n	8007866 <USBD_StdEPReq+0x146>
 800784a:	7bbb      	ldrb	r3, [r7, #14]
 800784c:	2b80      	cmp	r3, #128	; 0x80
 800784e:	d00a      	beq.n	8007866 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	4619      	mov	r1, r3
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 f917 	bl	8008a88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800785a:	2180      	movs	r1, #128	; 0x80
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f001 f913 	bl	8008a88 <USBD_LL_StallEP>
 8007862:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007864:	e040      	b.n	80078e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fc3e 	bl	80080ea <USBD_CtlError>
              break;
 800786e:	e03b      	b.n	80078e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d136      	bne.n	80078e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787e:	2b00      	cmp	r3, #0
 8007880:	d004      	beq.n	800788c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	4619      	mov	r1, r3
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f001 f91d 	bl	8008ac6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fcf7 	bl	8008280 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007892:	7bbb      	ldrb	r3, [r7, #14]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff fde2 	bl	8007460 <USBD_CoreFindEP>
 800789c:	4603      	mov	r3, r0
 800789e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078a0:	7b7b      	ldrb	r3, [r7, #13]
 80078a2:	2bff      	cmp	r3, #255	; 0xff
 80078a4:	d01f      	beq.n	80078e6 <USBD_StdEPReq+0x1c6>
 80078a6:	7b7b      	ldrb	r3, [r7, #13]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d11c      	bne.n	80078e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80078ac:	7b7a      	ldrb	r2, [r7, #13]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80078b4:	7b7a      	ldrb	r2, [r7, #13]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	32ae      	adds	r2, #174	; 0xae
 80078ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d010      	beq.n	80078e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078c4:	7b7a      	ldrb	r2, [r7, #13]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	32ae      	adds	r2, #174	; 0xae
 80078ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80078da:	e004      	b.n	80078e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc03 	bl	80080ea <USBD_CtlError>
              break;
 80078e4:	e000      	b.n	80078e8 <USBD_StdEPReq+0x1c8>
              break;
 80078e6:	bf00      	nop
          }
          break;
 80078e8:	e0ab      	b.n	8007a42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b02      	cmp	r3, #2
 80078f4:	d002      	beq.n	80078fc <USBD_StdEPReq+0x1dc>
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d032      	beq.n	8007960 <USBD_StdEPReq+0x240>
 80078fa:	e097      	b.n	8007a2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d007      	beq.n	8007912 <USBD_StdEPReq+0x1f2>
 8007902:	7bbb      	ldrb	r3, [r7, #14]
 8007904:	2b80      	cmp	r3, #128	; 0x80
 8007906:	d004      	beq.n	8007912 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fbed 	bl	80080ea <USBD_CtlError>
                break;
 8007910:	e091      	b.n	8007a36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007912:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007916:	2b00      	cmp	r3, #0
 8007918:	da0b      	bge.n	8007932 <USBD_StdEPReq+0x212>
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007920:	4613      	mov	r3, r2
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	3310      	adds	r3, #16
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	e00b      	b.n	800794a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007932:	7bbb      	ldrb	r3, [r7, #14]
 8007934:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007938:	4613      	mov	r3, r2
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	4413      	add	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	4413      	add	r3, r2
 8007948:	3304      	adds	r3, #4
 800794a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	2202      	movs	r2, #2
 8007956:	4619      	mov	r1, r3
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fc37 	bl	80081cc <USBD_CtlSendData>
              break;
 800795e:	e06a      	b.n	8007a36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007964:	2b00      	cmp	r3, #0
 8007966:	da11      	bge.n	800798c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	f003 020f 	and.w	r2, r3, #15
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	3324      	adds	r3, #36	; 0x24
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d117      	bne.n	80079b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fbb0 	bl	80080ea <USBD_CtlError>
                  break;
 800798a:	e054      	b.n	8007a36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800798c:	7bbb      	ldrb	r3, [r7, #14]
 800798e:	f003 020f 	and.w	r2, r3, #15
 8007992:	6879      	ldr	r1, [r7, #4]
 8007994:	4613      	mov	r3, r2
 8007996:	009b      	lsls	r3, r3, #2
 8007998:	4413      	add	r3, r2
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	440b      	add	r3, r1
 800799e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80079a2:	881b      	ldrh	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fb9d 	bl	80080ea <USBD_CtlError>
                  break;
 80079b0:	e041      	b.n	8007a36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da0b      	bge.n	80079d2 <USBD_StdEPReq+0x2b2>
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	3310      	adds	r3, #16
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	4413      	add	r3, r2
 80079ce:	3304      	adds	r3, #4
 80079d0:	e00b      	b.n	80079ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d002      	beq.n	80079f8 <USBD_StdEPReq+0x2d8>
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b80      	cmp	r3, #128	; 0x80
 80079f6:	d103      	bne.n	8007a00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e00e      	b.n	8007a1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	4619      	mov	r1, r3
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f87d 	bl	8008b04 <USBD_LL_IsStallEP>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d003      	beq.n	8007a18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	2201      	movs	r2, #1
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	e002      	b.n	8007a1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2202      	movs	r2, #2
 8007a22:	4619      	mov	r1, r3
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fbd1 	bl	80081cc <USBD_CtlSendData>
              break;
 8007a2a:	e004      	b.n	8007a36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fb5b 	bl	80080ea <USBD_CtlError>
              break;
 8007a34:	bf00      	nop
          }
          break;
 8007a36:	e004      	b.n	8007a42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fb55 	bl	80080ea <USBD_CtlError>
          break;
 8007a40:	bf00      	nop
      }
      break;
 8007a42:	e005      	b.n	8007a50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 fb4f 	bl	80080ea <USBD_CtlError>
      break;
 8007a4c:	e000      	b.n	8007a50 <USBD_StdEPReq+0x330>
      break;
 8007a4e:	bf00      	nop
  }

  return ret;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
	...

08007a5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	0a1b      	lsrs	r3, r3, #8
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	2b06      	cmp	r3, #6
 8007a7e:	f200 8128 	bhi.w	8007cd2 <USBD_GetDescriptor+0x276>
 8007a82:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <USBD_GetDescriptor+0x2c>)
 8007a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	08007abd 	.word	0x08007abd
 8007a90:	08007afd 	.word	0x08007afd
 8007a94:	08007cd3 	.word	0x08007cd3
 8007a98:	08007cd3 	.word	0x08007cd3
 8007a9c:	08007c73 	.word	0x08007c73
 8007aa0:	08007c9f 	.word	0x08007c9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	7c12      	ldrb	r2, [r2, #16]
 8007ab0:	f107 0108 	add.w	r1, r7, #8
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4798      	blx	r3
 8007ab8:	60f8      	str	r0, [r7, #12]
      break;
 8007aba:	e112      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	7c1b      	ldrb	r3, [r3, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d10d      	bne.n	8007ae0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007acc:	f107 0208 	add.w	r2, r7, #8
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	4798      	blx	r3
 8007ad4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	2202      	movs	r2, #2
 8007adc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007ade:	e100      	b.n	8007ce2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	f107 0208 	add.w	r2, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3301      	adds	r3, #1
 8007af6:	2202      	movs	r2, #2
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e0f2      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	885b      	ldrh	r3, [r3, #2]
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b05      	cmp	r3, #5
 8007b04:	f200 80ac 	bhi.w	8007c60 <USBD_GetDescriptor+0x204>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <USBD_GetDescriptor+0xb4>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b29 	.word	0x08007b29
 8007b14:	08007b5d 	.word	0x08007b5d
 8007b18:	08007b91 	.word	0x08007b91
 8007b1c:	08007bc5 	.word	0x08007bc5
 8007b20:	08007bf9 	.word	0x08007bf9
 8007b24:	08007c2d 	.word	0x08007c2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00b      	beq.n	8007b4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	7c12      	ldrb	r2, [r2, #16]
 8007b40:	f107 0108 	add.w	r1, r7, #8
 8007b44:	4610      	mov	r0, r2
 8007b46:	4798      	blx	r3
 8007b48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b4a:	e091      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 facb 	bl	80080ea <USBD_CtlError>
            err++;
 8007b54:	7afb      	ldrb	r3, [r7, #11]
 8007b56:	3301      	adds	r3, #1
 8007b58:	72fb      	strb	r3, [r7, #11]
          break;
 8007b5a:	e089      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d00b      	beq.n	8007b80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7c12      	ldrb	r2, [r2, #16]
 8007b74:	f107 0108 	add.w	r1, r7, #8
 8007b78:	4610      	mov	r0, r2
 8007b7a:	4798      	blx	r3
 8007b7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b7e:	e077      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b80:	6839      	ldr	r1, [r7, #0]
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 fab1 	bl	80080ea <USBD_CtlError>
            err++;
 8007b88:	7afb      	ldrb	r3, [r7, #11]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b8e:	e06f      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00b      	beq.n	8007bb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	7c12      	ldrb	r2, [r2, #16]
 8007ba8:	f107 0108 	add.w	r1, r7, #8
 8007bac:	4610      	mov	r0, r2
 8007bae:	4798      	blx	r3
 8007bb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bb2:	e05d      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bb4:	6839      	ldr	r1, [r7, #0]
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa97 	bl	80080ea <USBD_CtlError>
            err++;
 8007bbc:	7afb      	ldrb	r3, [r7, #11]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bc2:	e055      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bca:	691b      	ldr	r3, [r3, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bd6:	691b      	ldr	r3, [r3, #16]
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7c12      	ldrb	r2, [r2, #16]
 8007bdc:	f107 0108 	add.w	r1, r7, #8
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
 8007be4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007be6:	e043      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fa7d 	bl	80080ea <USBD_CtlError>
            err++;
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	72fb      	strb	r3, [r7, #11]
          break;
 8007bf6:	e03b      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00b      	beq.n	8007c1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	695b      	ldr	r3, [r3, #20]
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	7c12      	ldrb	r2, [r2, #16]
 8007c10:	f107 0108 	add.w	r1, r7, #8
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c1a:	e029      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fa63 	bl	80080ea <USBD_CtlError>
            err++;
 8007c24:	7afb      	ldrb	r3, [r7, #11]
 8007c26:	3301      	adds	r3, #1
 8007c28:	72fb      	strb	r3, [r7, #11]
          break;
 8007c2a:	e021      	b.n	8007c70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00b      	beq.n	8007c50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	7c12      	ldrb	r2, [r2, #16]
 8007c44:	f107 0108 	add.w	r1, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c4e:	e00f      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa49 	bl	80080ea <USBD_CtlError>
            err++;
 8007c58:	7afb      	ldrb	r3, [r7, #11]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c5e:	e007      	b.n	8007c70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007c60:	6839      	ldr	r1, [r7, #0]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 fa41 	bl	80080ea <USBD_CtlError>
          err++;
 8007c68:	7afb      	ldrb	r3, [r7, #11]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007c6e:	bf00      	nop
      }
      break;
 8007c70:	e037      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	7c1b      	ldrb	r3, [r3, #16]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d109      	bne.n	8007c8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	f107 0208 	add.w	r2, r7, #8
 8007c86:	4610      	mov	r0, r2
 8007c88:	4798      	blx	r3
 8007c8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c8c:	e029      	b.n	8007ce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007c8e:	6839      	ldr	r1, [r7, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fa2a 	bl	80080ea <USBD_CtlError>
        err++;
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	72fb      	strb	r3, [r7, #11]
      break;
 8007c9c:	e021      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	7c1b      	ldrb	r3, [r3, #16]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d10d      	bne.n	8007cc2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cae:	f107 0208 	add.w	r2, r7, #8
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	4798      	blx	r3
 8007cb6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	2207      	movs	r2, #7
 8007cbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cc0:	e00f      	b.n	8007ce2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cc2:	6839      	ldr	r1, [r7, #0]
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fa10 	bl	80080ea <USBD_CtlError>
        err++;
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	72fb      	strb	r3, [r7, #11]
      break;
 8007cd0:	e007      	b.n	8007ce2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fa08 	bl	80080ea <USBD_CtlError>
      err++;
 8007cda:	7afb      	ldrb	r3, [r7, #11]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	72fb      	strb	r3, [r7, #11]
      break;
 8007ce0:	bf00      	nop
  }

  if (err != 0U)
 8007ce2:	7afb      	ldrb	r3, [r7, #11]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d11e      	bne.n	8007d26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	88db      	ldrh	r3, [r3, #6]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d016      	beq.n	8007d1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007cf0:	893b      	ldrh	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00e      	beq.n	8007d14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88da      	ldrh	r2, [r3, #6]
 8007cfa:	893b      	ldrh	r3, [r7, #8]
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	bf28      	it	cs
 8007d00:	4613      	movcs	r3, r2
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d06:	893b      	ldrh	r3, [r7, #8]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	68f9      	ldr	r1, [r7, #12]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fa5d 	bl	80081cc <USBD_CtlSendData>
 8007d12:	e009      	b.n	8007d28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f9e7 	bl	80080ea <USBD_CtlError>
 8007d1c:	e004      	b.n	8007d28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 faae 	bl	8008280 <USBD_CtlSendStatus>
 8007d24:	e000      	b.n	8007d28 <USBD_GetDescriptor+0x2cc>
    return;
 8007d26:	bf00      	nop
  }
}
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop

08007d30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	889b      	ldrh	r3, [r3, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d131      	bne.n	8007da6 <USBD_SetAddress+0x76>
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	88db      	ldrh	r3, [r3, #6]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d12d      	bne.n	8007da6 <USBD_SetAddress+0x76>
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	885b      	ldrh	r3, [r3, #2]
 8007d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d50:	d829      	bhi.n	8007da6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	885b      	ldrh	r3, [r3, #2]
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b03      	cmp	r3, #3
 8007d68:	d104      	bne.n	8007d74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f9bc 	bl	80080ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d72:	e01d      	b.n	8007db0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	7bfa      	ldrb	r2, [r7, #15]
 8007d78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 feeb 	bl	8008b5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa7a 	bl	8008280 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007d8c:	7bfb      	ldrb	r3, [r7, #15]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d004      	beq.n	8007d9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2202      	movs	r2, #2
 8007d96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d9a:	e009      	b.n	8007db0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da4:	e004      	b.n	8007db0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 f99e 	bl	80080ea <USBD_CtlError>
  }
}
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	4b4e      	ldr	r3, [pc, #312]	; (8007f08 <USBD_SetConfig+0x150>)
 8007dce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007dd0:	4b4d      	ldr	r3, [pc, #308]	; (8007f08 <USBD_SetConfig+0x150>)
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d905      	bls.n	8007de4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007dd8:	6839      	ldr	r1, [r7, #0]
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f985 	bl	80080ea <USBD_CtlError>
    return USBD_FAIL;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e08c      	b.n	8007efe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d002      	beq.n	8007df6 <USBD_SetConfig+0x3e>
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d029      	beq.n	8007e48 <USBD_SetConfig+0x90>
 8007df4:	e075      	b.n	8007ee2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007df6:	4b44      	ldr	r3, [pc, #272]	; (8007f08 <USBD_SetConfig+0x150>)
 8007df8:	781b      	ldrb	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d020      	beq.n	8007e40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007dfe:	4b42      	ldr	r3, [pc, #264]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e08:	4b3f      	ldr	r3, [pc, #252]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7fe ffe1 	bl	8006dd6 <USBD_SetClassConfig>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d008      	beq.n	8007e30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 f962 	bl	80080ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e2e:	e065      	b.n	8007efc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa25 	bl	8008280 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2203      	movs	r2, #3
 8007e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007e3e:	e05d      	b.n	8007efc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fa1d 	bl	8008280 <USBD_CtlSendStatus>
      break;
 8007e46:	e059      	b.n	8007efc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007e48:	4b2f      	ldr	r3, [pc, #188]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d112      	bne.n	8007e76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2202      	movs	r2, #2
 8007e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007e58:	4b2b      	ldr	r3, [pc, #172]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007e62:	4b29      	ldr	r3, [pc, #164]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	4619      	mov	r1, r3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fe ffd0 	bl	8006e0e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 fa06 	bl	8008280 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007e74:	e042      	b.n	8007efc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007e76:	4b24      	ldr	r3, [pc, #144]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d02a      	beq.n	8007eda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f7fe ffbe 	bl	8006e0e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007e92:	4b1d      	ldr	r3, [pc, #116]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e9c:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <USBD_SetConfig+0x150>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fe ff97 	bl	8006dd6 <USBD_SetClassConfig>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00f      	beq.n	8007ed2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007eb2:	6839      	ldr	r1, [r7, #0]
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f918 	bl	80080ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f7fe ffa3 	bl	8006e0e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007ed0:	e014      	b.n	8007efc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9d4 	bl	8008280 <USBD_CtlSendStatus>
      break;
 8007ed8:	e010      	b.n	8007efc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f000 f9d0 	bl	8008280 <USBD_CtlSendStatus>
      break;
 8007ee0:	e00c      	b.n	8007efc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f900 	bl	80080ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eea:	4b07      	ldr	r3, [pc, #28]	; (8007f08 <USBD_SetConfig+0x150>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7fe ff8c 	bl	8006e0e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8007efa:	bf00      	nop
  }

  return ret;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
 8007f06:	bf00      	nop
 8007f08:	200003e0 	.word	0x200003e0

08007f0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	88db      	ldrh	r3, [r3, #6]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d004      	beq.n	8007f28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f8e2 	bl	80080ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f26:	e023      	b.n	8007f70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	dc02      	bgt.n	8007f3a <USBD_GetConfig+0x2e>
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	dc03      	bgt.n	8007f40 <USBD_GetConfig+0x34>
 8007f38:	e015      	b.n	8007f66 <USBD_GetConfig+0x5a>
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d00b      	beq.n	8007f56 <USBD_GetConfig+0x4a>
 8007f3e:	e012      	b.n	8007f66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3308      	adds	r3, #8
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f000 f93c 	bl	80081cc <USBD_CtlSendData>
        break;
 8007f54:	e00c      	b.n	8007f70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	3304      	adds	r3, #4
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 f934 	bl	80081cc <USBD_CtlSendData>
        break;
 8007f64:	e004      	b.n	8007f70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 f8be 	bl	80080ea <USBD_CtlError>
        break;
 8007f6e:	bf00      	nop
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	3b01      	subs	r3, #1
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d81e      	bhi.n	8007fce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	88db      	ldrh	r3, [r3, #6]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d004      	beq.n	8007fa2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f8a5 	bl	80080ea <USBD_CtlError>
        break;
 8007fa0:	e01a      	b.n	8007fd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d005      	beq.n	8007fbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f043 0202 	orr.w	r2, r3, #2
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f900 	bl	80081cc <USBD_CtlSendData>
      break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 f88a 	bl	80080ea <USBD_CtlError>
      break;
 8007fd6:	bf00      	nop
  }
}
 8007fd8:	bf00      	nop
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	885b      	ldrh	r3, [r3, #2]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d107      	bne.n	8008002 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 f940 	bl	8008280 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008000:	e013      	b.n	800802a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	885b      	ldrh	r3, [r3, #2]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d10b      	bne.n	8008022 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	889b      	ldrh	r3, [r3, #4]
 800800e:	0a1b      	lsrs	r3, r3, #8
 8008010:	b29b      	uxth	r3, r3
 8008012:	b2da      	uxtb	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f930 	bl	8008280 <USBD_CtlSendStatus>
}
 8008020:	e003      	b.n	800802a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f860 	bl	80080ea <USBD_CtlError>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008042:	b2db      	uxtb	r3, r3
 8008044:	3b01      	subs	r3, #1
 8008046:	2b02      	cmp	r3, #2
 8008048:	d80b      	bhi.n	8008062 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	885b      	ldrh	r3, [r3, #2]
 800804e:	2b01      	cmp	r3, #1
 8008050:	d10c      	bne.n	800806c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f910 	bl	8008280 <USBD_CtlSendStatus>
      }
      break;
 8008060:	e004      	b.n	800806c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008062:	6839      	ldr	r1, [r7, #0]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f000 f840 	bl	80080ea <USBD_CtlError>
      break;
 800806a:	e000      	b.n	800806e <USBD_ClrFeature+0x3c>
      break;
 800806c:	bf00      	nop
  }
}
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b084      	sub	sp, #16
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	781a      	ldrb	r2, [r3, #0]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	781a      	ldrb	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	3301      	adds	r3, #1
 800809e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f7ff fa41 	bl	8007528 <SWAPBYTE>
 80080a6:	4603      	mov	r3, r0
 80080a8:	461a      	mov	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3301      	adds	r3, #1
 80080b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fa34 	bl	8007528 <SWAPBYTE>
 80080c0:	4603      	mov	r3, r0
 80080c2:	461a      	mov	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f7ff fa27 	bl	8007528 <SWAPBYTE>
 80080da:	4603      	mov	r3, r0
 80080dc:	461a      	mov	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	80da      	strh	r2, [r3, #6]
}
 80080e2:	bf00      	nop
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b082      	sub	sp, #8
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
 80080f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80080f4:	2180      	movs	r1, #128	; 0x80
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fcc6 	bl	8008a88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80080fc:	2100      	movs	r1, #0
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fcc2 	bl	8008a88 <USBD_LL_StallEP>
}
 8008104:	bf00      	nop
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d036      	beq.n	8008190 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008126:	6938      	ldr	r0, [r7, #16]
 8008128:	f000 f836 	bl	8008198 <USBD_GetLen>
 800812c:	4603      	mov	r3, r0
 800812e:	3301      	adds	r3, #1
 8008130:	b29b      	uxth	r3, r3
 8008132:	005b      	lsls	r3, r3, #1
 8008134:	b29a      	uxth	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800813a:	7dfb      	ldrb	r3, [r7, #23]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	4413      	add	r3, r2
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	7812      	ldrb	r2, [r2, #0]
 8008144:	701a      	strb	r2, [r3, #0]
  idx++;
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	3301      	adds	r3, #1
 800814a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800814c:	7dfb      	ldrb	r3, [r7, #23]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	4413      	add	r3, r2
 8008152:	2203      	movs	r2, #3
 8008154:	701a      	strb	r2, [r3, #0]
  idx++;
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	3301      	adds	r3, #1
 800815a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800815c:	e013      	b.n	8008186 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800815e:	7dfb      	ldrb	r3, [r7, #23]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	4413      	add	r3, r2
 8008164:	693a      	ldr	r2, [r7, #16]
 8008166:	7812      	ldrb	r2, [r2, #0]
 8008168:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	3301      	adds	r3, #1
 800816e:	613b      	str	r3, [r7, #16]
    idx++;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	3301      	adds	r3, #1
 8008174:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4413      	add	r3, r2
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	3301      	adds	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e7      	bne.n	800815e <USBD_GetString+0x52>
 800818e:	e000      	b.n	8008192 <USBD_GetString+0x86>
    return;
 8008190:	bf00      	nop
  }
}
 8008192:	3718      	adds	r7, #24
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081a8:	e005      	b.n	80081b6 <USBD_GetLen+0x1e>
  {
    len++;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	3301      	adds	r3, #1
 80081ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	3301      	adds	r3, #1
 80081b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1f5      	bne.n	80081aa <USBD_GetLen+0x12>
  }

  return len;
 80081be:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2202      	movs	r2, #2
 80081dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	2100      	movs	r1, #0
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fcd1 	bl	8008b9a <USBD_LL_Transmit>

  return USBD_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	60f8      	str	r0, [r7, #12]
 800820a:	60b9      	str	r1, [r7, #8]
 800820c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	2100      	movs	r1, #0
 8008214:	68f8      	ldr	r0, [r7, #12]
 8008216:	f000 fcc0 	bl	8008b9a <USBD_LL_Transmit>

  return USBD_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2203      	movs	r2, #3
 8008234:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	2100      	movs	r1, #0
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fcc4 	bl	8008bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008254:	2300      	movs	r3, #0
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	60f8      	str	r0, [r7, #12]
 8008266:	60b9      	str	r1, [r7, #8]
 8008268:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	2100      	movs	r1, #0
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 fcb3 	bl	8008bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2204      	movs	r2, #4
 800828c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008290:	2300      	movs	r3, #0
 8008292:	2200      	movs	r2, #0
 8008294:	2100      	movs	r1, #0
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fc7f 	bl	8008b9a <USBD_LL_Transmit>

  return USBD_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b082      	sub	sp, #8
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2205      	movs	r2, #5
 80082b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082b6:	2300      	movs	r3, #0
 80082b8:	2200      	movs	r2, #0
 80082ba:	2100      	movs	r1, #0
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fc8d 	bl	8008bdc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082d0:	2200      	movs	r2, #0
 80082d2:	4912      	ldr	r1, [pc, #72]	; (800831c <MX_USB_DEVICE_Init+0x50>)
 80082d4:	4812      	ldr	r0, [pc, #72]	; (8008320 <MX_USB_DEVICE_Init+0x54>)
 80082d6:	f7fe fd01 	bl	8006cdc <USBD_Init>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082e0:	f7f9 f868 	bl	80013b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80082e4:	490f      	ldr	r1, [pc, #60]	; (8008324 <MX_USB_DEVICE_Init+0x58>)
 80082e6:	480e      	ldr	r0, [pc, #56]	; (8008320 <MX_USB_DEVICE_Init+0x54>)
 80082e8:	f7fe fd28 	bl	8006d3c <USBD_RegisterClass>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80082f2:	f7f9 f85f 	bl	80013b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80082f6:	490c      	ldr	r1, [pc, #48]	; (8008328 <MX_USB_DEVICE_Init+0x5c>)
 80082f8:	4809      	ldr	r0, [pc, #36]	; (8008320 <MX_USB_DEVICE_Init+0x54>)
 80082fa:	f7fe fc1f 	bl	8006b3c <USBD_CDC_RegisterInterface>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008304:	f7f9 f856 	bl	80013b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008308:	4805      	ldr	r0, [pc, #20]	; (8008320 <MX_USB_DEVICE_Init+0x54>)
 800830a:	f7fe fd4d 	bl	8006da8 <USBD_Start>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008314:	f7f9 f84e 	bl	80013b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008318:	bf00      	nop
 800831a:	bd80      	pop	{r7, pc}
 800831c:	200000ac 	.word	0x200000ac
 8008320:	200003e4 	.word	0x200003e4
 8008324:	20000018 	.word	0x20000018
 8008328:	20000098 	.word	0x20000098

0800832c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008330:	2200      	movs	r2, #0
 8008332:	4905      	ldr	r1, [pc, #20]	; (8008348 <CDC_Init_FS+0x1c>)
 8008334:	4805      	ldr	r0, [pc, #20]	; (800834c <CDC_Init_FS+0x20>)
 8008336:	f7fe fc1b 	bl	8006b70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800833a:	4905      	ldr	r1, [pc, #20]	; (8008350 <CDC_Init_FS+0x24>)
 800833c:	4803      	ldr	r0, [pc, #12]	; (800834c <CDC_Init_FS+0x20>)
 800833e:	f7fe fc39 	bl	8006bb4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008342:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008344:	4618      	mov	r0, r3
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000ec0 	.word	0x20000ec0
 800834c:	200003e4 	.word	0x200003e4
 8008350:	200006c0 	.word	0x200006c0

08008354 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008358:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800835a:	4618      	mov	r0, r3
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	4603      	mov	r3, r0
 800836c:	6039      	str	r1, [r7, #0]
 800836e:	71fb      	strb	r3, [r7, #7]
 8008370:	4613      	mov	r3, r2
 8008372:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008374:	79fb      	ldrb	r3, [r7, #7]
 8008376:	2b23      	cmp	r3, #35	; 0x23
 8008378:	d84a      	bhi.n	8008410 <CDC_Control_FS+0xac>
 800837a:	a201      	add	r2, pc, #4	; (adr r2, 8008380 <CDC_Control_FS+0x1c>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	08008411 	.word	0x08008411
 8008384:	08008411 	.word	0x08008411
 8008388:	08008411 	.word	0x08008411
 800838c:	08008411 	.word	0x08008411
 8008390:	08008411 	.word	0x08008411
 8008394:	08008411 	.word	0x08008411
 8008398:	08008411 	.word	0x08008411
 800839c:	08008411 	.word	0x08008411
 80083a0:	08008411 	.word	0x08008411
 80083a4:	08008411 	.word	0x08008411
 80083a8:	08008411 	.word	0x08008411
 80083ac:	08008411 	.word	0x08008411
 80083b0:	08008411 	.word	0x08008411
 80083b4:	08008411 	.word	0x08008411
 80083b8:	08008411 	.word	0x08008411
 80083bc:	08008411 	.word	0x08008411
 80083c0:	08008411 	.word	0x08008411
 80083c4:	08008411 	.word	0x08008411
 80083c8:	08008411 	.word	0x08008411
 80083cc:	08008411 	.word	0x08008411
 80083d0:	08008411 	.word	0x08008411
 80083d4:	08008411 	.word	0x08008411
 80083d8:	08008411 	.word	0x08008411
 80083dc:	08008411 	.word	0x08008411
 80083e0:	08008411 	.word	0x08008411
 80083e4:	08008411 	.word	0x08008411
 80083e8:	08008411 	.word	0x08008411
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008411 	.word	0x08008411
 80083f4:	08008411 	.word	0x08008411
 80083f8:	08008411 	.word	0x08008411
 80083fc:	08008411 	.word	0x08008411
 8008400:	08008411 	.word	0x08008411
 8008404:	08008411 	.word	0x08008411
 8008408:	08008411 	.word	0x08008411
 800840c:	08008411 	.word	0x08008411
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008410:	bf00      	nop
  }

  return (USBD_OK);
 8008412:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800842a:	6879      	ldr	r1, [r7, #4]
 800842c:	4805      	ldr	r0, [pc, #20]	; (8008444 <CDC_Receive_FS+0x24>)
 800842e:	f7fe fbc1 	bl	8006bb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008432:	4804      	ldr	r0, [pc, #16]	; (8008444 <CDC_Receive_FS+0x24>)
 8008434:	f7fe fc1c 	bl	8006c70 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008438:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	200003e4 	.word	0x200003e4

08008448 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	460b      	mov	r3, r1
 8008452:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008454:	2300      	movs	r3, #0
 8008456:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008458:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <CDC_Transmit_FS+0x48>)
 800845a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800845e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800846a:	2301      	movs	r3, #1
 800846c:	e00b      	b.n	8008486 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800846e:	887b      	ldrh	r3, [r7, #2]
 8008470:	461a      	mov	r2, r3
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4806      	ldr	r0, [pc, #24]	; (8008490 <CDC_Transmit_FS+0x48>)
 8008476:	f7fe fb7b 	bl	8006b70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800847a:	4805      	ldr	r0, [pc, #20]	; (8008490 <CDC_Transmit_FS+0x48>)
 800847c:	f7fe fbb8 	bl	8006bf0 <USBD_CDC_TransmitPacket>
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008484:	7bfb      	ldrb	r3, [r7, #15]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	200003e4 	.word	0x200003e4

08008494 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	371c      	adds	r7, #28
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
	...

080084b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	4603      	mov	r3, r0
 80084c0:	6039      	str	r1, [r7, #0]
 80084c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	2212      	movs	r2, #18
 80084c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80084ca:	4b03      	ldr	r3, [pc, #12]	; (80084d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr
 80084d8:	200000c8 	.word	0x200000c8

080084dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	6039      	str	r1, [r7, #0]
 80084e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	2204      	movs	r2, #4
 80084ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80084ee:	4b03      	ldr	r3, [pc, #12]	; (80084fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	200000dc 	.word	0x200000dc

08008500 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	4603      	mov	r3, r0
 8008508:	6039      	str	r1, [r7, #0]
 800850a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d105      	bne.n	800851e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008512:	683a      	ldr	r2, [r7, #0]
 8008514:	4907      	ldr	r1, [pc, #28]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
 8008516:	4808      	ldr	r0, [pc, #32]	; (8008538 <USBD_FS_ProductStrDescriptor+0x38>)
 8008518:	f7ff fdf8 	bl	800810c <USBD_GetString>
 800851c:	e004      	b.n	8008528 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800851e:	683a      	ldr	r2, [r7, #0]
 8008520:	4904      	ldr	r1, [pc, #16]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
 8008522:	4805      	ldr	r0, [pc, #20]	; (8008538 <USBD_FS_ProductStrDescriptor+0x38>)
 8008524:	f7ff fdf2 	bl	800810c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008528:	4b02      	ldr	r3, [pc, #8]	; (8008534 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800852a:	4618      	mov	r0, r3
 800852c:	3708      	adds	r7, #8
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	200016c0 	.word	0x200016c0
 8008538:	0800c868 	.word	0x0800c868

0800853c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	4603      	mov	r3, r0
 8008544:	6039      	str	r1, [r7, #0]
 8008546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008548:	683a      	ldr	r2, [r7, #0]
 800854a:	4904      	ldr	r1, [pc, #16]	; (800855c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800854c:	4804      	ldr	r0, [pc, #16]	; (8008560 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800854e:	f7ff fddd 	bl	800810c <USBD_GetString>
  return USBD_StrDesc;
 8008552:	4b02      	ldr	r3, [pc, #8]	; (800855c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	200016c0 	.word	0x200016c0
 8008560:	0800c880 	.word	0x0800c880

08008564 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b082      	sub	sp, #8
 8008568:	af00      	add	r7, sp, #0
 800856a:	4603      	mov	r3, r0
 800856c:	6039      	str	r1, [r7, #0]
 800856e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	221a      	movs	r2, #26
 8008574:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008576:	f000 f843 	bl	8008600 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800857a:	4b02      	ldr	r3, [pc, #8]	; (8008584 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800857c:	4618      	mov	r0, r3
 800857e:	3708      	adds	r7, #8
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	200000e0 	.word	0x200000e0

08008588 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b082      	sub	sp, #8
 800858c:	af00      	add	r7, sp, #0
 800858e:	4603      	mov	r3, r0
 8008590:	6039      	str	r1, [r7, #0]
 8008592:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d105      	bne.n	80085a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	4907      	ldr	r1, [pc, #28]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800859e:	4808      	ldr	r0, [pc, #32]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085a0:	f7ff fdb4 	bl	800810c <USBD_GetString>
 80085a4:	e004      	b.n	80085b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	4904      	ldr	r1, [pc, #16]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80085aa:	4805      	ldr	r0, [pc, #20]	; (80085c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085ac:	f7ff fdae 	bl	800810c <USBD_GetString>
  }
  return USBD_StrDesc;
 80085b0:	4b02      	ldr	r3, [pc, #8]	; (80085bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	200016c0 	.word	0x200016c0
 80085c0:	0800c894 	.word	0x0800c894

080085c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	6039      	str	r1, [r7, #0]
 80085ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d0:	79fb      	ldrb	r3, [r7, #7]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d105      	bne.n	80085e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085d6:	683a      	ldr	r2, [r7, #0]
 80085d8:	4907      	ldr	r1, [pc, #28]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085da:	4808      	ldr	r0, [pc, #32]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085dc:	f7ff fd96 	bl	800810c <USBD_GetString>
 80085e0:	e004      	b.n	80085ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	4904      	ldr	r1, [pc, #16]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80085e6:	4805      	ldr	r0, [pc, #20]	; (80085fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80085e8:	f7ff fd90 	bl	800810c <USBD_GetString>
  }
  return USBD_StrDesc;
 80085ec:	4b02      	ldr	r3, [pc, #8]	; (80085f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	200016c0 	.word	0x200016c0
 80085fc:	0800c8a0 	.word	0x0800c8a0

08008600 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 += deviceserial2;
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4413      	add	r3, r2
 800860c:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d009      	beq.n	8008628 <Get_SerialNum+0x28>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008614:	2208      	movs	r2, #8
 8008616:	4906      	ldr	r1, [pc, #24]	; (8008630 <Get_SerialNum+0x30>)
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f000 f80d 	bl	8008638 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800861e:	2204      	movs	r2, #4
 8008620:	4904      	ldr	r1, [pc, #16]	; (8008634 <Get_SerialNum+0x34>)
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f808 	bl	8008638 <IntToUnicode>
  }
}
 8008628:	bf00      	nop
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}
 8008630:	200000e2 	.word	0x200000e2
 8008634:	200000f2 	.word	0x200000f2

08008638 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	4613      	mov	r3, r2
 8008644:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008646:	2300      	movs	r3, #0
 8008648:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800864a:	2300      	movs	r3, #0
 800864c:	75fb      	strb	r3, [r7, #23]
 800864e:	e027      	b.n	80086a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	0f1b      	lsrs	r3, r3, #28
 8008654:	2b09      	cmp	r3, #9
 8008656:	d80b      	bhi.n	8008670 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	0f1b      	lsrs	r3, r3, #28
 800865c:	b2da      	uxtb	r2, r3
 800865e:	7dfb      	ldrb	r3, [r7, #23]
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	4619      	mov	r1, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	440b      	add	r3, r1
 8008668:	3230      	adds	r2, #48	; 0x30
 800866a:	b2d2      	uxtb	r2, r2
 800866c:	701a      	strb	r2, [r3, #0]
 800866e:	e00a      	b.n	8008686 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	0f1b      	lsrs	r3, r3, #28
 8008674:	b2da      	uxtb	r2, r3
 8008676:	7dfb      	ldrb	r3, [r7, #23]
 8008678:	005b      	lsls	r3, r3, #1
 800867a:	4619      	mov	r1, r3
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	440b      	add	r3, r1
 8008680:	3237      	adds	r2, #55	; 0x37
 8008682:	b2d2      	uxtb	r2, r2
 8008684:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	011b      	lsls	r3, r3, #4
 800868a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800868c:	7dfb      	ldrb	r3, [r7, #23]
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	3301      	adds	r3, #1
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	4413      	add	r3, r2
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800869a:	7dfb      	ldrb	r3, [r7, #23]
 800869c:	3301      	adds	r3, #1
 800869e:	75fb      	strb	r3, [r7, #23]
 80086a0:	7dfa      	ldrb	r2, [r7, #23]
 80086a2:	79fb      	ldrb	r3, [r7, #7]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d3d3      	bcc.n	8008650 <IntToUnicode+0x18>
  }
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	371c      	adds	r7, #28
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086c0:	f107 0314 	add.w	r3, r7, #20
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	605a      	str	r2, [r3, #4]
 80086ca:	609a      	str	r2, [r3, #8]
 80086cc:	60da      	str	r2, [r3, #12]
 80086ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086d8:	d13a      	bne.n	8008750 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086da:	2300      	movs	r3, #0
 80086dc:	613b      	str	r3, [r7, #16]
 80086de:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	4a1d      	ldr	r2, [pc, #116]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 80086e4:	f043 0301 	orr.w	r3, r3, #1
 80086e8:	6313      	str	r3, [r2, #48]	; 0x30
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 80086ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	613b      	str	r3, [r7, #16]
 80086f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086fc:	2302      	movs	r3, #2
 80086fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008700:	2300      	movs	r3, #0
 8008702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008704:	2303      	movs	r3, #3
 8008706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008708:	230a      	movs	r3, #10
 800870a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800870c:	f107 0314 	add.w	r3, r7, #20
 8008710:	4619      	mov	r1, r3
 8008712:	4812      	ldr	r0, [pc, #72]	; (800875c <HAL_PCD_MspInit+0xa4>)
 8008714:	f7f9 fde8 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008718:	4b0f      	ldr	r3, [pc, #60]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 800871a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871c:	4a0e      	ldr	r2, [pc, #56]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 800871e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008722:	6353      	str	r3, [r2, #52]	; 0x34
 8008724:	2300      	movs	r3, #0
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 800872a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800872c:	4a0a      	ldr	r2, [pc, #40]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 800872e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008732:	6453      	str	r3, [r2, #68]	; 0x44
 8008734:	4b08      	ldr	r3, [pc, #32]	; (8008758 <HAL_PCD_MspInit+0xa0>)
 8008736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008740:	2200      	movs	r2, #0
 8008742:	2100      	movs	r1, #0
 8008744:	2043      	movs	r0, #67	; 0x43
 8008746:	f7f9 fd98 	bl	800227a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800874a:	2043      	movs	r0, #67	; 0x43
 800874c:	f7f9 fdb1 	bl	80022b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008750:	bf00      	nop
 8008752:	3728      	adds	r7, #40	; 0x28
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}
 8008758:	40023800 	.word	0x40023800
 800875c:	40020000 	.word	0x40020000

08008760 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f7fe fb63 	bl	8006e42 <USBD_LL_SetupStage>
}
 800877c:	bf00      	nop
 800877e:	3708      	adds	r7, #8
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	6879      	ldr	r1, [r7, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	00db      	lsls	r3, r3, #3
 800879e:	4413      	add	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	440b      	add	r3, r1
 80087a4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fe fb9d 	bl	8006eec <USBD_LL_DataOutStage>
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	460b      	mov	r3, r1
 80087c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 80087cc:	78fa      	ldrb	r2, [r7, #3]
 80087ce:	6879      	ldr	r1, [r7, #4]
 80087d0:	4613      	mov	r3, r2
 80087d2:	00db      	lsls	r3, r3, #3
 80087d4:	4413      	add	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	440b      	add	r3, r1
 80087da:	3320      	adds	r3, #32
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	4619      	mov	r1, r3
 80087e2:	f7fe fc36 	bl	8007052 <USBD_LL_DataInStage>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f7fe fd70 	bl	80072e2 <USBD_LL_SOF>
}
 8008802:	bf00      	nop
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b084      	sub	sp, #16
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008812:	2301      	movs	r3, #1
 8008814:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	79db      	ldrb	r3, [r3, #7]
 800881a:	2b02      	cmp	r3, #2
 800881c:	d001      	beq.n	8008822 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800881e:	f7f8 fdc9 	bl	80013b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008828:	7bfa      	ldrb	r2, [r7, #15]
 800882a:	4611      	mov	r1, r2
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fd14 	bl	800725a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe fcbc 	bl	80071b6 <USBD_LL_Reset>
}
 800883e:	bf00      	nop
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
	...

08008848 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fd0f 	bl	800727a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6812      	ldr	r2, [r2, #0]
 800886a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800886e:	f043 0301 	orr.w	r3, r3, #1
 8008872:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	7adb      	ldrb	r3, [r3, #11]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800887c:	4b04      	ldr	r3, [pc, #16]	; (8008890 <HAL_PCD_SuspendCallback+0x48>)
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	4a03      	ldr	r2, [pc, #12]	; (8008890 <HAL_PCD_SuspendCallback+0x48>)
 8008882:	f043 0306 	orr.w	r3, r3, #6
 8008886:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	e000ed00 	.word	0xe000ed00

08008894 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe fd05 	bl	80072b2 <USBD_LL_Resume>
}
 80088a8:	bf00      	nop
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80088c2:	78fa      	ldrb	r2, [r7, #3]
 80088c4:	4611      	mov	r1, r2
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fe fd5d 	bl	8007386 <USBD_LL_IsoOUTIncomplete>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 80088e6:	78fa      	ldrb	r2, [r7, #3]
 80088e8:	4611      	mov	r1, r2
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fd19 	bl	8007322 <USBD_LL_IsoINIncomplete>
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fd6f 	bl	80073ea <USBD_LL_DevConnected>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8008922:	4618      	mov	r0, r3
 8008924:	f7fe fd6c 	bl	8007400 <USBD_LL_DevDisconnected>
}
 8008928:	bf00      	nop
 800892a:	3708      	adds	r7, #8
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d13c      	bne.n	80089ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008940:	4a20      	ldr	r2, [pc, #128]	; (80089c4 <USBD_LL_Init+0x94>)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a1e      	ldr	r2, [pc, #120]	; (80089c4 <USBD_LL_Init+0x94>)
 800894c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008950:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <USBD_LL_Init+0x94>)
 8008952:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008956:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008958:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <USBD_LL_Init+0x94>)
 800895a:	2204      	movs	r2, #4
 800895c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800895e:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <USBD_LL_Init+0x94>)
 8008960:	2202      	movs	r2, #2
 8008962:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008964:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <USBD_LL_Init+0x94>)
 8008966:	2200      	movs	r2, #0
 8008968:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <USBD_LL_Init+0x94>)
 800896c:	2202      	movs	r2, #2
 800896e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008970:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <USBD_LL_Init+0x94>)
 8008972:	2200      	movs	r2, #0
 8008974:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008976:	4b13      	ldr	r3, [pc, #76]	; (80089c4 <USBD_LL_Init+0x94>)
 8008978:	2200      	movs	r2, #0
 800897a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800897c:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <USBD_LL_Init+0x94>)
 800897e:	2200      	movs	r2, #0
 8008980:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008982:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <USBD_LL_Init+0x94>)
 8008984:	2200      	movs	r2, #0
 8008986:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008988:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <USBD_LL_Init+0x94>)
 800898a:	2200      	movs	r2, #0
 800898c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800898e:	480d      	ldr	r0, [pc, #52]	; (80089c4 <USBD_LL_Init+0x94>)
 8008990:	f7fa fafd 	bl	8002f8e <HAL_PCD_Init>
 8008994:	4603      	mov	r3, r0
 8008996:	2b00      	cmp	r3, #0
 8008998:	d001      	beq.n	800899e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800899a:	f7f8 fd0b 	bl	80013b4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800899e:	2180      	movs	r1, #128	; 0x80
 80089a0:	4808      	ldr	r0, [pc, #32]	; (80089c4 <USBD_LL_Init+0x94>)
 80089a2:	f7fb fd28 	bl	80043f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80089a6:	2240      	movs	r2, #64	; 0x40
 80089a8:	2100      	movs	r1, #0
 80089aa:	4806      	ldr	r0, [pc, #24]	; (80089c4 <USBD_LL_Init+0x94>)
 80089ac:	f7fb fcdc 	bl	8004368 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089b0:	2280      	movs	r2, #128	; 0x80
 80089b2:	2101      	movs	r1, #1
 80089b4:	4803      	ldr	r0, [pc, #12]	; (80089c4 <USBD_LL_Init+0x94>)
 80089b6:	f7fb fcd7 	bl	8004368 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3708      	adds	r7, #8
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	200018c0 	.word	0x200018c0

080089c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fa fbe4 	bl	80031ac <HAL_PCD_Start>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f942 	bl	8008c74 <USBD_Get_USB_Status>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	70fb      	strb	r3, [r7, #3]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70bb      	strb	r3, [r7, #2]
 8008a14:	4613      	mov	r3, r2
 8008a16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008a26:	78bb      	ldrb	r3, [r7, #2]
 8008a28:	883a      	ldrh	r2, [r7, #0]
 8008a2a:	78f9      	ldrb	r1, [r7, #3]
 8008a2c:	f7fb f8b8 	bl	8003ba0 <HAL_PCD_EP_Open>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f91c 	bl	8008c74 <USBD_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fb f901 	bl	8003c70 <HAL_PCD_EP_Close>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f8fd 	bl	8008c74 <USBD_Get_USB_Status>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fb f9b9 	bl	8003e1e <HAL_PCD_EP_SetStall>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f8de 	bl	8008c74 <USBD_Get_USB_Status>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fb f9fd 	bl	8003ee4 <HAL_PCD_EP_ClrStall>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f8bf 	bl	8008c74 <USBD_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	da0b      	bge.n	8008b38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	3316      	adds	r3, #22
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	e00b      	b.n	8008b50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b38:	78fb      	ldrb	r3, [r7, #3]
 8008b3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b3e:	68f9      	ldr	r1, [r7, #12]
 8008b40:	4613      	mov	r3, r2
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4413      	add	r3, r2
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	440b      	add	r3, r1
 8008b4a:	f203 2356 	addw	r3, r3, #598	; 0x256
 8008b4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	460b      	mov	r3, r1
 8008b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b76:	78fa      	ldrb	r2, [r7, #3]
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f7fa ffec 	bl	8003b58 <HAL_PCD_SetAddress>
 8008b80:	4603      	mov	r3, r0
 8008b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b84:	7bfb      	ldrb	r3, [r7, #15]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 f874 	bl	8008c74 <USBD_Get_USB_Status>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b086      	sub	sp, #24
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bb8:	7af9      	ldrb	r1, [r7, #11]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	f7fb f8f4 	bl	8003daa <HAL_PCD_EP_Transmit>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bc6:	7dfb      	ldrb	r3, [r7, #23]
 8008bc8:	4618      	mov	r0, r3
 8008bca:	f000 f853 	bl	8008c74 <USBD_Get_USB_Status>
 8008bce:	4603      	mov	r3, r0
 8008bd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bd2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3718      	adds	r7, #24
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	460b      	mov	r3, r1
 8008bea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008bfa:	7af9      	ldrb	r1, [r7, #11]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	f7fb f880 	bl	8003d04 <HAL_PCD_EP_Receive>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f832 	bl	8008c74 <USBD_Get_USB_Status>
 8008c10:	4603      	mov	r3, r0
 8008c12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c14:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fb f8a0 	bl	8003d7a <HAL_PCD_EP_GetRxCount>
 8008c3a:	4603      	mov	r3, r0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c4c:	4b03      	ldr	r3, [pc, #12]	; (8008c5c <USBD_static_malloc+0x18>)
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	20001da4 	.word	0x20001da4

08008c60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]

}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b085      	sub	sp, #20
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c82:	79fb      	ldrb	r3, [r7, #7]
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d817      	bhi.n	8008cb8 <USBD_Get_USB_Status+0x44>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <USBD_Get_USB_Status+0x1c>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008ca1 	.word	0x08008ca1
 8008c94:	08008ca7 	.word	0x08008ca7
 8008c98:	08008cad 	.word	0x08008cad
 8008c9c:	08008cb3 	.word	0x08008cb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ca4:	e00b      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8008caa:	e008      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cac:	2301      	movs	r3, #1
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	e005      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb6:	e002      	b.n	8008cbe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbc:	bf00      	nop
  }
  return usb_status;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <__cvt>:
 8008ccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd0:	ec55 4b10 	vmov	r4, r5, d0
 8008cd4:	2d00      	cmp	r5, #0
 8008cd6:	460e      	mov	r6, r1
 8008cd8:	4619      	mov	r1, r3
 8008cda:	462b      	mov	r3, r5
 8008cdc:	bfbb      	ittet	lt
 8008cde:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ce2:	461d      	movlt	r5, r3
 8008ce4:	2300      	movge	r3, #0
 8008ce6:	232d      	movlt	r3, #45	; 0x2d
 8008ce8:	700b      	strb	r3, [r1, #0]
 8008cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008cec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008cf0:	4691      	mov	r9, r2
 8008cf2:	f023 0820 	bic.w	r8, r3, #32
 8008cf6:	bfbc      	itt	lt
 8008cf8:	4622      	movlt	r2, r4
 8008cfa:	4614      	movlt	r4, r2
 8008cfc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d00:	d005      	beq.n	8008d0e <__cvt+0x42>
 8008d02:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008d06:	d100      	bne.n	8008d0a <__cvt+0x3e>
 8008d08:	3601      	adds	r6, #1
 8008d0a:	2102      	movs	r1, #2
 8008d0c:	e000      	b.n	8008d10 <__cvt+0x44>
 8008d0e:	2103      	movs	r1, #3
 8008d10:	ab03      	add	r3, sp, #12
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	ab02      	add	r3, sp, #8
 8008d16:	9300      	str	r3, [sp, #0]
 8008d18:	ec45 4b10 	vmov	d0, r4, r5
 8008d1c:	4653      	mov	r3, sl
 8008d1e:	4632      	mov	r2, r6
 8008d20:	f000 fe6a 	bl	80099f8 <_dtoa_r>
 8008d24:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008d28:	4607      	mov	r7, r0
 8008d2a:	d102      	bne.n	8008d32 <__cvt+0x66>
 8008d2c:	f019 0f01 	tst.w	r9, #1
 8008d30:	d022      	beq.n	8008d78 <__cvt+0xac>
 8008d32:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008d36:	eb07 0906 	add.w	r9, r7, r6
 8008d3a:	d110      	bne.n	8008d5e <__cvt+0x92>
 8008d3c:	783b      	ldrb	r3, [r7, #0]
 8008d3e:	2b30      	cmp	r3, #48	; 0x30
 8008d40:	d10a      	bne.n	8008d58 <__cvt+0x8c>
 8008d42:	2200      	movs	r2, #0
 8008d44:	2300      	movs	r3, #0
 8008d46:	4620      	mov	r0, r4
 8008d48:	4629      	mov	r1, r5
 8008d4a:	f7f7 fec5 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d4e:	b918      	cbnz	r0, 8008d58 <__cvt+0x8c>
 8008d50:	f1c6 0601 	rsb	r6, r6, #1
 8008d54:	f8ca 6000 	str.w	r6, [sl]
 8008d58:	f8da 3000 	ldr.w	r3, [sl]
 8008d5c:	4499      	add	r9, r3
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2300      	movs	r3, #0
 8008d62:	4620      	mov	r0, r4
 8008d64:	4629      	mov	r1, r5
 8008d66:	f7f7 feb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8008d6a:	b108      	cbz	r0, 8008d70 <__cvt+0xa4>
 8008d6c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008d70:	2230      	movs	r2, #48	; 0x30
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	454b      	cmp	r3, r9
 8008d76:	d307      	bcc.n	8008d88 <__cvt+0xbc>
 8008d78:	9b03      	ldr	r3, [sp, #12]
 8008d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d7c:	1bdb      	subs	r3, r3, r7
 8008d7e:	4638      	mov	r0, r7
 8008d80:	6013      	str	r3, [r2, #0]
 8008d82:	b004      	add	sp, #16
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d88:	1c59      	adds	r1, r3, #1
 8008d8a:	9103      	str	r1, [sp, #12]
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	e7f0      	b.n	8008d72 <__cvt+0xa6>

08008d90 <__exponent>:
 8008d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d92:	4603      	mov	r3, r0
 8008d94:	2900      	cmp	r1, #0
 8008d96:	bfb8      	it	lt
 8008d98:	4249      	neglt	r1, r1
 8008d9a:	f803 2b02 	strb.w	r2, [r3], #2
 8008d9e:	bfb4      	ite	lt
 8008da0:	222d      	movlt	r2, #45	; 0x2d
 8008da2:	222b      	movge	r2, #43	; 0x2b
 8008da4:	2909      	cmp	r1, #9
 8008da6:	7042      	strb	r2, [r0, #1]
 8008da8:	dd2a      	ble.n	8008e00 <__exponent+0x70>
 8008daa:	f10d 0207 	add.w	r2, sp, #7
 8008dae:	4617      	mov	r7, r2
 8008db0:	260a      	movs	r6, #10
 8008db2:	4694      	mov	ip, r2
 8008db4:	fb91 f5f6 	sdiv	r5, r1, r6
 8008db8:	fb06 1415 	mls	r4, r6, r5, r1
 8008dbc:	3430      	adds	r4, #48	; 0x30
 8008dbe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008dc2:	460c      	mov	r4, r1
 8008dc4:	2c63      	cmp	r4, #99	; 0x63
 8008dc6:	f102 32ff 	add.w	r2, r2, #4294967295
 8008dca:	4629      	mov	r1, r5
 8008dcc:	dcf1      	bgt.n	8008db2 <__exponent+0x22>
 8008dce:	3130      	adds	r1, #48	; 0x30
 8008dd0:	f1ac 0402 	sub.w	r4, ip, #2
 8008dd4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008dd8:	1c41      	adds	r1, r0, #1
 8008dda:	4622      	mov	r2, r4
 8008ddc:	42ba      	cmp	r2, r7
 8008dde:	d30a      	bcc.n	8008df6 <__exponent+0x66>
 8008de0:	f10d 0209 	add.w	r2, sp, #9
 8008de4:	eba2 020c 	sub.w	r2, r2, ip
 8008de8:	42bc      	cmp	r4, r7
 8008dea:	bf88      	it	hi
 8008dec:	2200      	movhi	r2, #0
 8008dee:	4413      	add	r3, r2
 8008df0:	1a18      	subs	r0, r3, r0
 8008df2:	b003      	add	sp, #12
 8008df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008df6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008dfa:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008dfe:	e7ed      	b.n	8008ddc <__exponent+0x4c>
 8008e00:	2330      	movs	r3, #48	; 0x30
 8008e02:	3130      	adds	r1, #48	; 0x30
 8008e04:	7083      	strb	r3, [r0, #2]
 8008e06:	70c1      	strb	r1, [r0, #3]
 8008e08:	1d03      	adds	r3, r0, #4
 8008e0a:	e7f1      	b.n	8008df0 <__exponent+0x60>

08008e0c <_printf_float>:
 8008e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e10:	ed2d 8b02 	vpush	{d8}
 8008e14:	b08d      	sub	sp, #52	; 0x34
 8008e16:	460c      	mov	r4, r1
 8008e18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008e1c:	4616      	mov	r6, r2
 8008e1e:	461f      	mov	r7, r3
 8008e20:	4605      	mov	r5, r0
 8008e22:	f000 fce7 	bl	80097f4 <_localeconv_r>
 8008e26:	f8d0 a000 	ldr.w	sl, [r0]
 8008e2a:	4650      	mov	r0, sl
 8008e2c:	f7f7 fa28 	bl	8000280 <strlen>
 8008e30:	2300      	movs	r3, #0
 8008e32:	930a      	str	r3, [sp, #40]	; 0x28
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	9305      	str	r3, [sp, #20]
 8008e38:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008e40:	3307      	adds	r3, #7
 8008e42:	f023 0307 	bic.w	r3, r3, #7
 8008e46:	f103 0208 	add.w	r2, r3, #8
 8008e4a:	f8c8 2000 	str.w	r2, [r8]
 8008e4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008e56:	9307      	str	r3, [sp, #28]
 8008e58:	f8cd 8018 	str.w	r8, [sp, #24]
 8008e5c:	ee08 0a10 	vmov	s16, r0
 8008e60:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e68:	4b9e      	ldr	r3, [pc, #632]	; (80090e4 <_printf_float+0x2d8>)
 8008e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e6e:	f7f7 fe65 	bl	8000b3c <__aeabi_dcmpun>
 8008e72:	bb88      	cbnz	r0, 8008ed8 <_printf_float+0xcc>
 8008e74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e78:	4b9a      	ldr	r3, [pc, #616]	; (80090e4 <_printf_float+0x2d8>)
 8008e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e7e:	f7f7 fe3f 	bl	8000b00 <__aeabi_dcmple>
 8008e82:	bb48      	cbnz	r0, 8008ed8 <_printf_float+0xcc>
 8008e84:	2200      	movs	r2, #0
 8008e86:	2300      	movs	r3, #0
 8008e88:	4640      	mov	r0, r8
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	f7f7 fe2e 	bl	8000aec <__aeabi_dcmplt>
 8008e90:	b110      	cbz	r0, 8008e98 <_printf_float+0x8c>
 8008e92:	232d      	movs	r3, #45	; 0x2d
 8008e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e98:	4a93      	ldr	r2, [pc, #588]	; (80090e8 <_printf_float+0x2dc>)
 8008e9a:	4b94      	ldr	r3, [pc, #592]	; (80090ec <_printf_float+0x2e0>)
 8008e9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008ea0:	bf94      	ite	ls
 8008ea2:	4690      	movls	r8, r2
 8008ea4:	4698      	movhi	r8, r3
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	9b05      	ldr	r3, [sp, #20]
 8008eac:	f023 0304 	bic.w	r3, r3, #4
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	f04f 0900 	mov.w	r9, #0
 8008eb6:	9700      	str	r7, [sp, #0]
 8008eb8:	4633      	mov	r3, r6
 8008eba:	aa0b      	add	r2, sp, #44	; 0x2c
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	f000 f9da 	bl	8009278 <_printf_common>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	f040 8090 	bne.w	8008fea <_printf_float+0x1de>
 8008eca:	f04f 30ff 	mov.w	r0, #4294967295
 8008ece:	b00d      	add	sp, #52	; 0x34
 8008ed0:	ecbd 8b02 	vpop	{d8}
 8008ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed8:	4642      	mov	r2, r8
 8008eda:	464b      	mov	r3, r9
 8008edc:	4640      	mov	r0, r8
 8008ede:	4649      	mov	r1, r9
 8008ee0:	f7f7 fe2c 	bl	8000b3c <__aeabi_dcmpun>
 8008ee4:	b140      	cbz	r0, 8008ef8 <_printf_float+0xec>
 8008ee6:	464b      	mov	r3, r9
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	bfbc      	itt	lt
 8008eec:	232d      	movlt	r3, #45	; 0x2d
 8008eee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008ef2:	4a7f      	ldr	r2, [pc, #508]	; (80090f0 <_printf_float+0x2e4>)
 8008ef4:	4b7f      	ldr	r3, [pc, #508]	; (80090f4 <_printf_float+0x2e8>)
 8008ef6:	e7d1      	b.n	8008e9c <_printf_float+0x90>
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008efe:	9206      	str	r2, [sp, #24]
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	d13f      	bne.n	8008f84 <_printf_float+0x178>
 8008f04:	2306      	movs	r3, #6
 8008f06:	6063      	str	r3, [r4, #4]
 8008f08:	9b05      	ldr	r3, [sp, #20]
 8008f0a:	6861      	ldr	r1, [r4, #4]
 8008f0c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008f10:	2300      	movs	r3, #0
 8008f12:	9303      	str	r3, [sp, #12]
 8008f14:	ab0a      	add	r3, sp, #40	; 0x28
 8008f16:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008f1a:	ab09      	add	r3, sp, #36	; 0x24
 8008f1c:	ec49 8b10 	vmov	d0, r8, r9
 8008f20:	9300      	str	r3, [sp, #0]
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f7ff fecf 	bl	8008ccc <__cvt>
 8008f2e:	9b06      	ldr	r3, [sp, #24]
 8008f30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f32:	2b47      	cmp	r3, #71	; 0x47
 8008f34:	4680      	mov	r8, r0
 8008f36:	d108      	bne.n	8008f4a <_printf_float+0x13e>
 8008f38:	1cc8      	adds	r0, r1, #3
 8008f3a:	db02      	blt.n	8008f42 <_printf_float+0x136>
 8008f3c:	6863      	ldr	r3, [r4, #4]
 8008f3e:	4299      	cmp	r1, r3
 8008f40:	dd41      	ble.n	8008fc6 <_printf_float+0x1ba>
 8008f42:	f1ab 0302 	sub.w	r3, fp, #2
 8008f46:	fa5f fb83 	uxtb.w	fp, r3
 8008f4a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008f4e:	d820      	bhi.n	8008f92 <_printf_float+0x186>
 8008f50:	3901      	subs	r1, #1
 8008f52:	465a      	mov	r2, fp
 8008f54:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008f58:	9109      	str	r1, [sp, #36]	; 0x24
 8008f5a:	f7ff ff19 	bl	8008d90 <__exponent>
 8008f5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f60:	1813      	adds	r3, r2, r0
 8008f62:	2a01      	cmp	r2, #1
 8008f64:	4681      	mov	r9, r0
 8008f66:	6123      	str	r3, [r4, #16]
 8008f68:	dc02      	bgt.n	8008f70 <_printf_float+0x164>
 8008f6a:	6822      	ldr	r2, [r4, #0]
 8008f6c:	07d2      	lsls	r2, r2, #31
 8008f6e:	d501      	bpl.n	8008f74 <_printf_float+0x168>
 8008f70:	3301      	adds	r3, #1
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d09c      	beq.n	8008eb6 <_printf_float+0xaa>
 8008f7c:	232d      	movs	r3, #45	; 0x2d
 8008f7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f82:	e798      	b.n	8008eb6 <_printf_float+0xaa>
 8008f84:	9a06      	ldr	r2, [sp, #24]
 8008f86:	2a47      	cmp	r2, #71	; 0x47
 8008f88:	d1be      	bne.n	8008f08 <_printf_float+0xfc>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1bc      	bne.n	8008f08 <_printf_float+0xfc>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e7b9      	b.n	8008f06 <_printf_float+0xfa>
 8008f92:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008f96:	d118      	bne.n	8008fca <_printf_float+0x1be>
 8008f98:	2900      	cmp	r1, #0
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	dd0b      	ble.n	8008fb6 <_printf_float+0x1aa>
 8008f9e:	6121      	str	r1, [r4, #16]
 8008fa0:	b913      	cbnz	r3, 8008fa8 <_printf_float+0x19c>
 8008fa2:	6822      	ldr	r2, [r4, #0]
 8008fa4:	07d0      	lsls	r0, r2, #31
 8008fa6:	d502      	bpl.n	8008fae <_printf_float+0x1a2>
 8008fa8:	3301      	adds	r3, #1
 8008faa:	440b      	add	r3, r1
 8008fac:	6123      	str	r3, [r4, #16]
 8008fae:	65a1      	str	r1, [r4, #88]	; 0x58
 8008fb0:	f04f 0900 	mov.w	r9, #0
 8008fb4:	e7de      	b.n	8008f74 <_printf_float+0x168>
 8008fb6:	b913      	cbnz	r3, 8008fbe <_printf_float+0x1b2>
 8008fb8:	6822      	ldr	r2, [r4, #0]
 8008fba:	07d2      	lsls	r2, r2, #31
 8008fbc:	d501      	bpl.n	8008fc2 <_printf_float+0x1b6>
 8008fbe:	3302      	adds	r3, #2
 8008fc0:	e7f4      	b.n	8008fac <_printf_float+0x1a0>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e7f2      	b.n	8008fac <_printf_float+0x1a0>
 8008fc6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008fca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	db05      	blt.n	8008fdc <_printf_float+0x1d0>
 8008fd0:	6823      	ldr	r3, [r4, #0]
 8008fd2:	6121      	str	r1, [r4, #16]
 8008fd4:	07d8      	lsls	r0, r3, #31
 8008fd6:	d5ea      	bpl.n	8008fae <_printf_float+0x1a2>
 8008fd8:	1c4b      	adds	r3, r1, #1
 8008fda:	e7e7      	b.n	8008fac <_printf_float+0x1a0>
 8008fdc:	2900      	cmp	r1, #0
 8008fde:	bfd4      	ite	le
 8008fe0:	f1c1 0202 	rsble	r2, r1, #2
 8008fe4:	2201      	movgt	r2, #1
 8008fe6:	4413      	add	r3, r2
 8008fe8:	e7e0      	b.n	8008fac <_printf_float+0x1a0>
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	055a      	lsls	r2, r3, #21
 8008fee:	d407      	bmi.n	8009000 <_printf_float+0x1f4>
 8008ff0:	6923      	ldr	r3, [r4, #16]
 8008ff2:	4642      	mov	r2, r8
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d12c      	bne.n	8009058 <_printf_float+0x24c>
 8008ffe:	e764      	b.n	8008eca <_printf_float+0xbe>
 8009000:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009004:	f240 80e0 	bls.w	80091c8 <_printf_float+0x3bc>
 8009008:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800900c:	2200      	movs	r2, #0
 800900e:	2300      	movs	r3, #0
 8009010:	f7f7 fd62 	bl	8000ad8 <__aeabi_dcmpeq>
 8009014:	2800      	cmp	r0, #0
 8009016:	d034      	beq.n	8009082 <_printf_float+0x276>
 8009018:	4a37      	ldr	r2, [pc, #220]	; (80090f8 <_printf_float+0x2ec>)
 800901a:	2301      	movs	r3, #1
 800901c:	4631      	mov	r1, r6
 800901e:	4628      	mov	r0, r5
 8009020:	47b8      	blx	r7
 8009022:	3001      	adds	r0, #1
 8009024:	f43f af51 	beq.w	8008eca <_printf_float+0xbe>
 8009028:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800902c:	429a      	cmp	r2, r3
 800902e:	db02      	blt.n	8009036 <_printf_float+0x22a>
 8009030:	6823      	ldr	r3, [r4, #0]
 8009032:	07d8      	lsls	r0, r3, #31
 8009034:	d510      	bpl.n	8009058 <_printf_float+0x24c>
 8009036:	ee18 3a10 	vmov	r3, s16
 800903a:	4652      	mov	r2, sl
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	f43f af41 	beq.w	8008eca <_printf_float+0xbe>
 8009048:	f04f 0800 	mov.w	r8, #0
 800904c:	f104 091a 	add.w	r9, r4, #26
 8009050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009052:	3b01      	subs	r3, #1
 8009054:	4543      	cmp	r3, r8
 8009056:	dc09      	bgt.n	800906c <_printf_float+0x260>
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	079b      	lsls	r3, r3, #30
 800905c:	f100 8107 	bmi.w	800926e <_printf_float+0x462>
 8009060:	68e0      	ldr	r0, [r4, #12]
 8009062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009064:	4298      	cmp	r0, r3
 8009066:	bfb8      	it	lt
 8009068:	4618      	movlt	r0, r3
 800906a:	e730      	b.n	8008ece <_printf_float+0xc2>
 800906c:	2301      	movs	r3, #1
 800906e:	464a      	mov	r2, r9
 8009070:	4631      	mov	r1, r6
 8009072:	4628      	mov	r0, r5
 8009074:	47b8      	blx	r7
 8009076:	3001      	adds	r0, #1
 8009078:	f43f af27 	beq.w	8008eca <_printf_float+0xbe>
 800907c:	f108 0801 	add.w	r8, r8, #1
 8009080:	e7e6      	b.n	8009050 <_printf_float+0x244>
 8009082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009084:	2b00      	cmp	r3, #0
 8009086:	dc39      	bgt.n	80090fc <_printf_float+0x2f0>
 8009088:	4a1b      	ldr	r2, [pc, #108]	; (80090f8 <_printf_float+0x2ec>)
 800908a:	2301      	movs	r3, #1
 800908c:	4631      	mov	r1, r6
 800908e:	4628      	mov	r0, r5
 8009090:	47b8      	blx	r7
 8009092:	3001      	adds	r0, #1
 8009094:	f43f af19 	beq.w	8008eca <_printf_float+0xbe>
 8009098:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800909c:	4313      	orrs	r3, r2
 800909e:	d102      	bne.n	80090a6 <_printf_float+0x29a>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	07d9      	lsls	r1, r3, #31
 80090a4:	d5d8      	bpl.n	8009058 <_printf_float+0x24c>
 80090a6:	ee18 3a10 	vmov	r3, s16
 80090aa:	4652      	mov	r2, sl
 80090ac:	4631      	mov	r1, r6
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b8      	blx	r7
 80090b2:	3001      	adds	r0, #1
 80090b4:	f43f af09 	beq.w	8008eca <_printf_float+0xbe>
 80090b8:	f04f 0900 	mov.w	r9, #0
 80090bc:	f104 0a1a 	add.w	sl, r4, #26
 80090c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090c2:	425b      	negs	r3, r3
 80090c4:	454b      	cmp	r3, r9
 80090c6:	dc01      	bgt.n	80090cc <_printf_float+0x2c0>
 80090c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ca:	e792      	b.n	8008ff2 <_printf_float+0x1e6>
 80090cc:	2301      	movs	r3, #1
 80090ce:	4652      	mov	r2, sl
 80090d0:	4631      	mov	r1, r6
 80090d2:	4628      	mov	r0, r5
 80090d4:	47b8      	blx	r7
 80090d6:	3001      	adds	r0, #1
 80090d8:	f43f aef7 	beq.w	8008eca <_printf_float+0xbe>
 80090dc:	f109 0901 	add.w	r9, r9, #1
 80090e0:	e7ee      	b.n	80090c0 <_printf_float+0x2b4>
 80090e2:	bf00      	nop
 80090e4:	7fefffff 	.word	0x7fefffff
 80090e8:	0800c8c8 	.word	0x0800c8c8
 80090ec:	0800c8cc 	.word	0x0800c8cc
 80090f0:	0800c8d0 	.word	0x0800c8d0
 80090f4:	0800c8d4 	.word	0x0800c8d4
 80090f8:	0800c8d8 	.word	0x0800c8d8
 80090fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009100:	429a      	cmp	r2, r3
 8009102:	bfa8      	it	ge
 8009104:	461a      	movge	r2, r3
 8009106:	2a00      	cmp	r2, #0
 8009108:	4691      	mov	r9, r2
 800910a:	dc37      	bgt.n	800917c <_printf_float+0x370>
 800910c:	f04f 0b00 	mov.w	fp, #0
 8009110:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009114:	f104 021a 	add.w	r2, r4, #26
 8009118:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800911a:	9305      	str	r3, [sp, #20]
 800911c:	eba3 0309 	sub.w	r3, r3, r9
 8009120:	455b      	cmp	r3, fp
 8009122:	dc33      	bgt.n	800918c <_printf_float+0x380>
 8009124:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009128:	429a      	cmp	r2, r3
 800912a:	db3b      	blt.n	80091a4 <_printf_float+0x398>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	07da      	lsls	r2, r3, #31
 8009130:	d438      	bmi.n	80091a4 <_printf_float+0x398>
 8009132:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009136:	eba2 0903 	sub.w	r9, r2, r3
 800913a:	9b05      	ldr	r3, [sp, #20]
 800913c:	1ad2      	subs	r2, r2, r3
 800913e:	4591      	cmp	r9, r2
 8009140:	bfa8      	it	ge
 8009142:	4691      	movge	r9, r2
 8009144:	f1b9 0f00 	cmp.w	r9, #0
 8009148:	dc35      	bgt.n	80091b6 <_printf_float+0x3aa>
 800914a:	f04f 0800 	mov.w	r8, #0
 800914e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009152:	f104 0a1a 	add.w	sl, r4, #26
 8009156:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800915a:	1a9b      	subs	r3, r3, r2
 800915c:	eba3 0309 	sub.w	r3, r3, r9
 8009160:	4543      	cmp	r3, r8
 8009162:	f77f af79 	ble.w	8009058 <_printf_float+0x24c>
 8009166:	2301      	movs	r3, #1
 8009168:	4652      	mov	r2, sl
 800916a:	4631      	mov	r1, r6
 800916c:	4628      	mov	r0, r5
 800916e:	47b8      	blx	r7
 8009170:	3001      	adds	r0, #1
 8009172:	f43f aeaa 	beq.w	8008eca <_printf_float+0xbe>
 8009176:	f108 0801 	add.w	r8, r8, #1
 800917a:	e7ec      	b.n	8009156 <_printf_float+0x34a>
 800917c:	4613      	mov	r3, r2
 800917e:	4631      	mov	r1, r6
 8009180:	4642      	mov	r2, r8
 8009182:	4628      	mov	r0, r5
 8009184:	47b8      	blx	r7
 8009186:	3001      	adds	r0, #1
 8009188:	d1c0      	bne.n	800910c <_printf_float+0x300>
 800918a:	e69e      	b.n	8008eca <_printf_float+0xbe>
 800918c:	2301      	movs	r3, #1
 800918e:	4631      	mov	r1, r6
 8009190:	4628      	mov	r0, r5
 8009192:	9205      	str	r2, [sp, #20]
 8009194:	47b8      	blx	r7
 8009196:	3001      	adds	r0, #1
 8009198:	f43f ae97 	beq.w	8008eca <_printf_float+0xbe>
 800919c:	9a05      	ldr	r2, [sp, #20]
 800919e:	f10b 0b01 	add.w	fp, fp, #1
 80091a2:	e7b9      	b.n	8009118 <_printf_float+0x30c>
 80091a4:	ee18 3a10 	vmov	r3, s16
 80091a8:	4652      	mov	r2, sl
 80091aa:	4631      	mov	r1, r6
 80091ac:	4628      	mov	r0, r5
 80091ae:	47b8      	blx	r7
 80091b0:	3001      	adds	r0, #1
 80091b2:	d1be      	bne.n	8009132 <_printf_float+0x326>
 80091b4:	e689      	b.n	8008eca <_printf_float+0xbe>
 80091b6:	9a05      	ldr	r2, [sp, #20]
 80091b8:	464b      	mov	r3, r9
 80091ba:	4442      	add	r2, r8
 80091bc:	4631      	mov	r1, r6
 80091be:	4628      	mov	r0, r5
 80091c0:	47b8      	blx	r7
 80091c2:	3001      	adds	r0, #1
 80091c4:	d1c1      	bne.n	800914a <_printf_float+0x33e>
 80091c6:	e680      	b.n	8008eca <_printf_float+0xbe>
 80091c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091ca:	2a01      	cmp	r2, #1
 80091cc:	dc01      	bgt.n	80091d2 <_printf_float+0x3c6>
 80091ce:	07db      	lsls	r3, r3, #31
 80091d0:	d53a      	bpl.n	8009248 <_printf_float+0x43c>
 80091d2:	2301      	movs	r3, #1
 80091d4:	4642      	mov	r2, r8
 80091d6:	4631      	mov	r1, r6
 80091d8:	4628      	mov	r0, r5
 80091da:	47b8      	blx	r7
 80091dc:	3001      	adds	r0, #1
 80091de:	f43f ae74 	beq.w	8008eca <_printf_float+0xbe>
 80091e2:	ee18 3a10 	vmov	r3, s16
 80091e6:	4652      	mov	r2, sl
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f ae6b 	beq.w	8008eca <_printf_float+0xbe>
 80091f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091f8:	2200      	movs	r2, #0
 80091fa:	2300      	movs	r3, #0
 80091fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009200:	f7f7 fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009204:	b9d8      	cbnz	r0, 800923e <_printf_float+0x432>
 8009206:	f10a 33ff 	add.w	r3, sl, #4294967295
 800920a:	f108 0201 	add.w	r2, r8, #1
 800920e:	4631      	mov	r1, r6
 8009210:	4628      	mov	r0, r5
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	d10e      	bne.n	8009236 <_printf_float+0x42a>
 8009218:	e657      	b.n	8008eca <_printf_float+0xbe>
 800921a:	2301      	movs	r3, #1
 800921c:	4652      	mov	r2, sl
 800921e:	4631      	mov	r1, r6
 8009220:	4628      	mov	r0, r5
 8009222:	47b8      	blx	r7
 8009224:	3001      	adds	r0, #1
 8009226:	f43f ae50 	beq.w	8008eca <_printf_float+0xbe>
 800922a:	f108 0801 	add.w	r8, r8, #1
 800922e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009230:	3b01      	subs	r3, #1
 8009232:	4543      	cmp	r3, r8
 8009234:	dcf1      	bgt.n	800921a <_printf_float+0x40e>
 8009236:	464b      	mov	r3, r9
 8009238:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800923c:	e6da      	b.n	8008ff4 <_printf_float+0x1e8>
 800923e:	f04f 0800 	mov.w	r8, #0
 8009242:	f104 0a1a 	add.w	sl, r4, #26
 8009246:	e7f2      	b.n	800922e <_printf_float+0x422>
 8009248:	2301      	movs	r3, #1
 800924a:	4642      	mov	r2, r8
 800924c:	e7df      	b.n	800920e <_printf_float+0x402>
 800924e:	2301      	movs	r3, #1
 8009250:	464a      	mov	r2, r9
 8009252:	4631      	mov	r1, r6
 8009254:	4628      	mov	r0, r5
 8009256:	47b8      	blx	r7
 8009258:	3001      	adds	r0, #1
 800925a:	f43f ae36 	beq.w	8008eca <_printf_float+0xbe>
 800925e:	f108 0801 	add.w	r8, r8, #1
 8009262:	68e3      	ldr	r3, [r4, #12]
 8009264:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009266:	1a5b      	subs	r3, r3, r1
 8009268:	4543      	cmp	r3, r8
 800926a:	dcf0      	bgt.n	800924e <_printf_float+0x442>
 800926c:	e6f8      	b.n	8009060 <_printf_float+0x254>
 800926e:	f04f 0800 	mov.w	r8, #0
 8009272:	f104 0919 	add.w	r9, r4, #25
 8009276:	e7f4      	b.n	8009262 <_printf_float+0x456>

08009278 <_printf_common>:
 8009278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800927c:	4616      	mov	r6, r2
 800927e:	4699      	mov	r9, r3
 8009280:	688a      	ldr	r2, [r1, #8]
 8009282:	690b      	ldr	r3, [r1, #16]
 8009284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009288:	4293      	cmp	r3, r2
 800928a:	bfb8      	it	lt
 800928c:	4613      	movlt	r3, r2
 800928e:	6033      	str	r3, [r6, #0]
 8009290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009294:	4607      	mov	r7, r0
 8009296:	460c      	mov	r4, r1
 8009298:	b10a      	cbz	r2, 800929e <_printf_common+0x26>
 800929a:	3301      	adds	r3, #1
 800929c:	6033      	str	r3, [r6, #0]
 800929e:	6823      	ldr	r3, [r4, #0]
 80092a0:	0699      	lsls	r1, r3, #26
 80092a2:	bf42      	ittt	mi
 80092a4:	6833      	ldrmi	r3, [r6, #0]
 80092a6:	3302      	addmi	r3, #2
 80092a8:	6033      	strmi	r3, [r6, #0]
 80092aa:	6825      	ldr	r5, [r4, #0]
 80092ac:	f015 0506 	ands.w	r5, r5, #6
 80092b0:	d106      	bne.n	80092c0 <_printf_common+0x48>
 80092b2:	f104 0a19 	add.w	sl, r4, #25
 80092b6:	68e3      	ldr	r3, [r4, #12]
 80092b8:	6832      	ldr	r2, [r6, #0]
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	42ab      	cmp	r3, r5
 80092be:	dc26      	bgt.n	800930e <_printf_common+0x96>
 80092c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80092c4:	1e13      	subs	r3, r2, #0
 80092c6:	6822      	ldr	r2, [r4, #0]
 80092c8:	bf18      	it	ne
 80092ca:	2301      	movne	r3, #1
 80092cc:	0692      	lsls	r2, r2, #26
 80092ce:	d42b      	bmi.n	8009328 <_printf_common+0xb0>
 80092d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80092d4:	4649      	mov	r1, r9
 80092d6:	4638      	mov	r0, r7
 80092d8:	47c0      	blx	r8
 80092da:	3001      	adds	r0, #1
 80092dc:	d01e      	beq.n	800931c <_printf_common+0xa4>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	6922      	ldr	r2, [r4, #16]
 80092e2:	f003 0306 	and.w	r3, r3, #6
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	bf02      	ittt	eq
 80092ea:	68e5      	ldreq	r5, [r4, #12]
 80092ec:	6833      	ldreq	r3, [r6, #0]
 80092ee:	1aed      	subeq	r5, r5, r3
 80092f0:	68a3      	ldr	r3, [r4, #8]
 80092f2:	bf0c      	ite	eq
 80092f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092f8:	2500      	movne	r5, #0
 80092fa:	4293      	cmp	r3, r2
 80092fc:	bfc4      	itt	gt
 80092fe:	1a9b      	subgt	r3, r3, r2
 8009300:	18ed      	addgt	r5, r5, r3
 8009302:	2600      	movs	r6, #0
 8009304:	341a      	adds	r4, #26
 8009306:	42b5      	cmp	r5, r6
 8009308:	d11a      	bne.n	8009340 <_printf_common+0xc8>
 800930a:	2000      	movs	r0, #0
 800930c:	e008      	b.n	8009320 <_printf_common+0xa8>
 800930e:	2301      	movs	r3, #1
 8009310:	4652      	mov	r2, sl
 8009312:	4649      	mov	r1, r9
 8009314:	4638      	mov	r0, r7
 8009316:	47c0      	blx	r8
 8009318:	3001      	adds	r0, #1
 800931a:	d103      	bne.n	8009324 <_printf_common+0xac>
 800931c:	f04f 30ff 	mov.w	r0, #4294967295
 8009320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009324:	3501      	adds	r5, #1
 8009326:	e7c6      	b.n	80092b6 <_printf_common+0x3e>
 8009328:	18e1      	adds	r1, r4, r3
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	2030      	movs	r0, #48	; 0x30
 800932e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009332:	4422      	add	r2, r4
 8009334:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009338:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800933c:	3302      	adds	r3, #2
 800933e:	e7c7      	b.n	80092d0 <_printf_common+0x58>
 8009340:	2301      	movs	r3, #1
 8009342:	4622      	mov	r2, r4
 8009344:	4649      	mov	r1, r9
 8009346:	4638      	mov	r0, r7
 8009348:	47c0      	blx	r8
 800934a:	3001      	adds	r0, #1
 800934c:	d0e6      	beq.n	800931c <_printf_common+0xa4>
 800934e:	3601      	adds	r6, #1
 8009350:	e7d9      	b.n	8009306 <_printf_common+0x8e>
	...

08009354 <_printf_i>:
 8009354:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009358:	7e0f      	ldrb	r7, [r1, #24]
 800935a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800935c:	2f78      	cmp	r7, #120	; 0x78
 800935e:	4691      	mov	r9, r2
 8009360:	4680      	mov	r8, r0
 8009362:	460c      	mov	r4, r1
 8009364:	469a      	mov	sl, r3
 8009366:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800936a:	d807      	bhi.n	800937c <_printf_i+0x28>
 800936c:	2f62      	cmp	r7, #98	; 0x62
 800936e:	d80a      	bhi.n	8009386 <_printf_i+0x32>
 8009370:	2f00      	cmp	r7, #0
 8009372:	f000 80d4 	beq.w	800951e <_printf_i+0x1ca>
 8009376:	2f58      	cmp	r7, #88	; 0x58
 8009378:	f000 80c0 	beq.w	80094fc <_printf_i+0x1a8>
 800937c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009380:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009384:	e03a      	b.n	80093fc <_printf_i+0xa8>
 8009386:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800938a:	2b15      	cmp	r3, #21
 800938c:	d8f6      	bhi.n	800937c <_printf_i+0x28>
 800938e:	a101      	add	r1, pc, #4	; (adr r1, 8009394 <_printf_i+0x40>)
 8009390:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009394:	080093ed 	.word	0x080093ed
 8009398:	08009401 	.word	0x08009401
 800939c:	0800937d 	.word	0x0800937d
 80093a0:	0800937d 	.word	0x0800937d
 80093a4:	0800937d 	.word	0x0800937d
 80093a8:	0800937d 	.word	0x0800937d
 80093ac:	08009401 	.word	0x08009401
 80093b0:	0800937d 	.word	0x0800937d
 80093b4:	0800937d 	.word	0x0800937d
 80093b8:	0800937d 	.word	0x0800937d
 80093bc:	0800937d 	.word	0x0800937d
 80093c0:	08009505 	.word	0x08009505
 80093c4:	0800942d 	.word	0x0800942d
 80093c8:	080094bf 	.word	0x080094bf
 80093cc:	0800937d 	.word	0x0800937d
 80093d0:	0800937d 	.word	0x0800937d
 80093d4:	08009527 	.word	0x08009527
 80093d8:	0800937d 	.word	0x0800937d
 80093dc:	0800942d 	.word	0x0800942d
 80093e0:	0800937d 	.word	0x0800937d
 80093e4:	0800937d 	.word	0x0800937d
 80093e8:	080094c7 	.word	0x080094c7
 80093ec:	682b      	ldr	r3, [r5, #0]
 80093ee:	1d1a      	adds	r2, r3, #4
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	602a      	str	r2, [r5, #0]
 80093f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093fc:	2301      	movs	r3, #1
 80093fe:	e09f      	b.n	8009540 <_printf_i+0x1ec>
 8009400:	6820      	ldr	r0, [r4, #0]
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	0607      	lsls	r7, r0, #24
 8009406:	f103 0104 	add.w	r1, r3, #4
 800940a:	6029      	str	r1, [r5, #0]
 800940c:	d501      	bpl.n	8009412 <_printf_i+0xbe>
 800940e:	681e      	ldr	r6, [r3, #0]
 8009410:	e003      	b.n	800941a <_printf_i+0xc6>
 8009412:	0646      	lsls	r6, r0, #25
 8009414:	d5fb      	bpl.n	800940e <_printf_i+0xba>
 8009416:	f9b3 6000 	ldrsh.w	r6, [r3]
 800941a:	2e00      	cmp	r6, #0
 800941c:	da03      	bge.n	8009426 <_printf_i+0xd2>
 800941e:	232d      	movs	r3, #45	; 0x2d
 8009420:	4276      	negs	r6, r6
 8009422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009426:	485a      	ldr	r0, [pc, #360]	; (8009590 <_printf_i+0x23c>)
 8009428:	230a      	movs	r3, #10
 800942a:	e012      	b.n	8009452 <_printf_i+0xfe>
 800942c:	682b      	ldr	r3, [r5, #0]
 800942e:	6820      	ldr	r0, [r4, #0]
 8009430:	1d19      	adds	r1, r3, #4
 8009432:	6029      	str	r1, [r5, #0]
 8009434:	0605      	lsls	r5, r0, #24
 8009436:	d501      	bpl.n	800943c <_printf_i+0xe8>
 8009438:	681e      	ldr	r6, [r3, #0]
 800943a:	e002      	b.n	8009442 <_printf_i+0xee>
 800943c:	0641      	lsls	r1, r0, #25
 800943e:	d5fb      	bpl.n	8009438 <_printf_i+0xe4>
 8009440:	881e      	ldrh	r6, [r3, #0]
 8009442:	4853      	ldr	r0, [pc, #332]	; (8009590 <_printf_i+0x23c>)
 8009444:	2f6f      	cmp	r7, #111	; 0x6f
 8009446:	bf0c      	ite	eq
 8009448:	2308      	moveq	r3, #8
 800944a:	230a      	movne	r3, #10
 800944c:	2100      	movs	r1, #0
 800944e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009452:	6865      	ldr	r5, [r4, #4]
 8009454:	60a5      	str	r5, [r4, #8]
 8009456:	2d00      	cmp	r5, #0
 8009458:	bfa2      	ittt	ge
 800945a:	6821      	ldrge	r1, [r4, #0]
 800945c:	f021 0104 	bicge.w	r1, r1, #4
 8009460:	6021      	strge	r1, [r4, #0]
 8009462:	b90e      	cbnz	r6, 8009468 <_printf_i+0x114>
 8009464:	2d00      	cmp	r5, #0
 8009466:	d04b      	beq.n	8009500 <_printf_i+0x1ac>
 8009468:	4615      	mov	r5, r2
 800946a:	fbb6 f1f3 	udiv	r1, r6, r3
 800946e:	fb03 6711 	mls	r7, r3, r1, r6
 8009472:	5dc7      	ldrb	r7, [r0, r7]
 8009474:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009478:	4637      	mov	r7, r6
 800947a:	42bb      	cmp	r3, r7
 800947c:	460e      	mov	r6, r1
 800947e:	d9f4      	bls.n	800946a <_printf_i+0x116>
 8009480:	2b08      	cmp	r3, #8
 8009482:	d10b      	bne.n	800949c <_printf_i+0x148>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	07de      	lsls	r6, r3, #31
 8009488:	d508      	bpl.n	800949c <_printf_i+0x148>
 800948a:	6923      	ldr	r3, [r4, #16]
 800948c:	6861      	ldr	r1, [r4, #4]
 800948e:	4299      	cmp	r1, r3
 8009490:	bfde      	ittt	le
 8009492:	2330      	movle	r3, #48	; 0x30
 8009494:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009498:	f105 35ff 	addle.w	r5, r5, #4294967295
 800949c:	1b52      	subs	r2, r2, r5
 800949e:	6122      	str	r2, [r4, #16]
 80094a0:	f8cd a000 	str.w	sl, [sp]
 80094a4:	464b      	mov	r3, r9
 80094a6:	aa03      	add	r2, sp, #12
 80094a8:	4621      	mov	r1, r4
 80094aa:	4640      	mov	r0, r8
 80094ac:	f7ff fee4 	bl	8009278 <_printf_common>
 80094b0:	3001      	adds	r0, #1
 80094b2:	d14a      	bne.n	800954a <_printf_i+0x1f6>
 80094b4:	f04f 30ff 	mov.w	r0, #4294967295
 80094b8:	b004      	add	sp, #16
 80094ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094be:	6823      	ldr	r3, [r4, #0]
 80094c0:	f043 0320 	orr.w	r3, r3, #32
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	4833      	ldr	r0, [pc, #204]	; (8009594 <_printf_i+0x240>)
 80094c8:	2778      	movs	r7, #120	; 0x78
 80094ca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	6829      	ldr	r1, [r5, #0]
 80094d2:	061f      	lsls	r7, r3, #24
 80094d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80094d8:	d402      	bmi.n	80094e0 <_printf_i+0x18c>
 80094da:	065f      	lsls	r7, r3, #25
 80094dc:	bf48      	it	mi
 80094de:	b2b6      	uxthmi	r6, r6
 80094e0:	07df      	lsls	r7, r3, #31
 80094e2:	bf48      	it	mi
 80094e4:	f043 0320 	orrmi.w	r3, r3, #32
 80094e8:	6029      	str	r1, [r5, #0]
 80094ea:	bf48      	it	mi
 80094ec:	6023      	strmi	r3, [r4, #0]
 80094ee:	b91e      	cbnz	r6, 80094f8 <_printf_i+0x1a4>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	f023 0320 	bic.w	r3, r3, #32
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	2310      	movs	r3, #16
 80094fa:	e7a7      	b.n	800944c <_printf_i+0xf8>
 80094fc:	4824      	ldr	r0, [pc, #144]	; (8009590 <_printf_i+0x23c>)
 80094fe:	e7e4      	b.n	80094ca <_printf_i+0x176>
 8009500:	4615      	mov	r5, r2
 8009502:	e7bd      	b.n	8009480 <_printf_i+0x12c>
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	6826      	ldr	r6, [r4, #0]
 8009508:	6961      	ldr	r1, [r4, #20]
 800950a:	1d18      	adds	r0, r3, #4
 800950c:	6028      	str	r0, [r5, #0]
 800950e:	0635      	lsls	r5, r6, #24
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	d501      	bpl.n	8009518 <_printf_i+0x1c4>
 8009514:	6019      	str	r1, [r3, #0]
 8009516:	e002      	b.n	800951e <_printf_i+0x1ca>
 8009518:	0670      	lsls	r0, r6, #25
 800951a:	d5fb      	bpl.n	8009514 <_printf_i+0x1c0>
 800951c:	8019      	strh	r1, [r3, #0]
 800951e:	2300      	movs	r3, #0
 8009520:	6123      	str	r3, [r4, #16]
 8009522:	4615      	mov	r5, r2
 8009524:	e7bc      	b.n	80094a0 <_printf_i+0x14c>
 8009526:	682b      	ldr	r3, [r5, #0]
 8009528:	1d1a      	adds	r2, r3, #4
 800952a:	602a      	str	r2, [r5, #0]
 800952c:	681d      	ldr	r5, [r3, #0]
 800952e:	6862      	ldr	r2, [r4, #4]
 8009530:	2100      	movs	r1, #0
 8009532:	4628      	mov	r0, r5
 8009534:	f7f6 fe54 	bl	80001e0 <memchr>
 8009538:	b108      	cbz	r0, 800953e <_printf_i+0x1ea>
 800953a:	1b40      	subs	r0, r0, r5
 800953c:	6060      	str	r0, [r4, #4]
 800953e:	6863      	ldr	r3, [r4, #4]
 8009540:	6123      	str	r3, [r4, #16]
 8009542:	2300      	movs	r3, #0
 8009544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009548:	e7aa      	b.n	80094a0 <_printf_i+0x14c>
 800954a:	6923      	ldr	r3, [r4, #16]
 800954c:	462a      	mov	r2, r5
 800954e:	4649      	mov	r1, r9
 8009550:	4640      	mov	r0, r8
 8009552:	47d0      	blx	sl
 8009554:	3001      	adds	r0, #1
 8009556:	d0ad      	beq.n	80094b4 <_printf_i+0x160>
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	079b      	lsls	r3, r3, #30
 800955c:	d413      	bmi.n	8009586 <_printf_i+0x232>
 800955e:	68e0      	ldr	r0, [r4, #12]
 8009560:	9b03      	ldr	r3, [sp, #12]
 8009562:	4298      	cmp	r0, r3
 8009564:	bfb8      	it	lt
 8009566:	4618      	movlt	r0, r3
 8009568:	e7a6      	b.n	80094b8 <_printf_i+0x164>
 800956a:	2301      	movs	r3, #1
 800956c:	4632      	mov	r2, r6
 800956e:	4649      	mov	r1, r9
 8009570:	4640      	mov	r0, r8
 8009572:	47d0      	blx	sl
 8009574:	3001      	adds	r0, #1
 8009576:	d09d      	beq.n	80094b4 <_printf_i+0x160>
 8009578:	3501      	adds	r5, #1
 800957a:	68e3      	ldr	r3, [r4, #12]
 800957c:	9903      	ldr	r1, [sp, #12]
 800957e:	1a5b      	subs	r3, r3, r1
 8009580:	42ab      	cmp	r3, r5
 8009582:	dcf2      	bgt.n	800956a <_printf_i+0x216>
 8009584:	e7eb      	b.n	800955e <_printf_i+0x20a>
 8009586:	2500      	movs	r5, #0
 8009588:	f104 0619 	add.w	r6, r4, #25
 800958c:	e7f5      	b.n	800957a <_printf_i+0x226>
 800958e:	bf00      	nop
 8009590:	0800c8da 	.word	0x0800c8da
 8009594:	0800c8eb 	.word	0x0800c8eb

08009598 <std>:
 8009598:	2300      	movs	r3, #0
 800959a:	b510      	push	{r4, lr}
 800959c:	4604      	mov	r4, r0
 800959e:	e9c0 3300 	strd	r3, r3, [r0]
 80095a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095a6:	6083      	str	r3, [r0, #8]
 80095a8:	8181      	strh	r1, [r0, #12]
 80095aa:	6643      	str	r3, [r0, #100]	; 0x64
 80095ac:	81c2      	strh	r2, [r0, #14]
 80095ae:	6183      	str	r3, [r0, #24]
 80095b0:	4619      	mov	r1, r3
 80095b2:	2208      	movs	r2, #8
 80095b4:	305c      	adds	r0, #92	; 0x5c
 80095b6:	f000 f914 	bl	80097e2 <memset>
 80095ba:	4b0d      	ldr	r3, [pc, #52]	; (80095f0 <std+0x58>)
 80095bc:	6263      	str	r3, [r4, #36]	; 0x24
 80095be:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <std+0x5c>)
 80095c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80095c2:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <std+0x60>)
 80095c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80095c6:	4b0d      	ldr	r3, [pc, #52]	; (80095fc <std+0x64>)
 80095c8:	6323      	str	r3, [r4, #48]	; 0x30
 80095ca:	4b0d      	ldr	r3, [pc, #52]	; (8009600 <std+0x68>)
 80095cc:	6224      	str	r4, [r4, #32]
 80095ce:	429c      	cmp	r4, r3
 80095d0:	d006      	beq.n	80095e0 <std+0x48>
 80095d2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80095d6:	4294      	cmp	r4, r2
 80095d8:	d002      	beq.n	80095e0 <std+0x48>
 80095da:	33d0      	adds	r3, #208	; 0xd0
 80095dc:	429c      	cmp	r4, r3
 80095de:	d105      	bne.n	80095ec <std+0x54>
 80095e0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80095e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095e8:	f000 b978 	b.w	80098dc <__retarget_lock_init_recursive>
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	bf00      	nop
 80095f0:	0800975d 	.word	0x0800975d
 80095f4:	0800977f 	.word	0x0800977f
 80095f8:	080097b7 	.word	0x080097b7
 80095fc:	080097db 	.word	0x080097db
 8009600:	20001fc4 	.word	0x20001fc4

08009604 <stdio_exit_handler>:
 8009604:	4a02      	ldr	r2, [pc, #8]	; (8009610 <stdio_exit_handler+0xc>)
 8009606:	4903      	ldr	r1, [pc, #12]	; (8009614 <stdio_exit_handler+0x10>)
 8009608:	4803      	ldr	r0, [pc, #12]	; (8009618 <stdio_exit_handler+0x14>)
 800960a:	f000 b869 	b.w	80096e0 <_fwalk_sglue>
 800960e:	bf00      	nop
 8009610:	200000fc 	.word	0x200000fc
 8009614:	0800b291 	.word	0x0800b291
 8009618:	20000108 	.word	0x20000108

0800961c <cleanup_stdio>:
 800961c:	6841      	ldr	r1, [r0, #4]
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <cleanup_stdio+0x34>)
 8009620:	4299      	cmp	r1, r3
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
 8009626:	d001      	beq.n	800962c <cleanup_stdio+0x10>
 8009628:	f001 fe32 	bl	800b290 <_fflush_r>
 800962c:	68a1      	ldr	r1, [r4, #8]
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <cleanup_stdio+0x38>)
 8009630:	4299      	cmp	r1, r3
 8009632:	d002      	beq.n	800963a <cleanup_stdio+0x1e>
 8009634:	4620      	mov	r0, r4
 8009636:	f001 fe2b 	bl	800b290 <_fflush_r>
 800963a:	68e1      	ldr	r1, [r4, #12]
 800963c:	4b06      	ldr	r3, [pc, #24]	; (8009658 <cleanup_stdio+0x3c>)
 800963e:	4299      	cmp	r1, r3
 8009640:	d004      	beq.n	800964c <cleanup_stdio+0x30>
 8009642:	4620      	mov	r0, r4
 8009644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009648:	f001 be22 	b.w	800b290 <_fflush_r>
 800964c:	bd10      	pop	{r4, pc}
 800964e:	bf00      	nop
 8009650:	20001fc4 	.word	0x20001fc4
 8009654:	2000202c 	.word	0x2000202c
 8009658:	20002094 	.word	0x20002094

0800965c <global_stdio_init.part.0>:
 800965c:	b510      	push	{r4, lr}
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <global_stdio_init.part.0+0x30>)
 8009660:	4c0b      	ldr	r4, [pc, #44]	; (8009690 <global_stdio_init.part.0+0x34>)
 8009662:	4a0c      	ldr	r2, [pc, #48]	; (8009694 <global_stdio_init.part.0+0x38>)
 8009664:	601a      	str	r2, [r3, #0]
 8009666:	4620      	mov	r0, r4
 8009668:	2200      	movs	r2, #0
 800966a:	2104      	movs	r1, #4
 800966c:	f7ff ff94 	bl	8009598 <std>
 8009670:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009674:	2201      	movs	r2, #1
 8009676:	2109      	movs	r1, #9
 8009678:	f7ff ff8e 	bl	8009598 <std>
 800967c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009680:	2202      	movs	r2, #2
 8009682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009686:	2112      	movs	r1, #18
 8009688:	f7ff bf86 	b.w	8009598 <std>
 800968c:	200020fc 	.word	0x200020fc
 8009690:	20001fc4 	.word	0x20001fc4
 8009694:	08009605 	.word	0x08009605

08009698 <__sfp_lock_acquire>:
 8009698:	4801      	ldr	r0, [pc, #4]	; (80096a0 <__sfp_lock_acquire+0x8>)
 800969a:	f000 b920 	b.w	80098de <__retarget_lock_acquire_recursive>
 800969e:	bf00      	nop
 80096a0:	20002105 	.word	0x20002105

080096a4 <__sfp_lock_release>:
 80096a4:	4801      	ldr	r0, [pc, #4]	; (80096ac <__sfp_lock_release+0x8>)
 80096a6:	f000 b91b 	b.w	80098e0 <__retarget_lock_release_recursive>
 80096aa:	bf00      	nop
 80096ac:	20002105 	.word	0x20002105

080096b0 <__sinit>:
 80096b0:	b510      	push	{r4, lr}
 80096b2:	4604      	mov	r4, r0
 80096b4:	f7ff fff0 	bl	8009698 <__sfp_lock_acquire>
 80096b8:	6a23      	ldr	r3, [r4, #32]
 80096ba:	b11b      	cbz	r3, 80096c4 <__sinit+0x14>
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c0:	f7ff bff0 	b.w	80096a4 <__sfp_lock_release>
 80096c4:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <__sinit+0x28>)
 80096c6:	6223      	str	r3, [r4, #32]
 80096c8:	4b04      	ldr	r3, [pc, #16]	; (80096dc <__sinit+0x2c>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d1f5      	bne.n	80096bc <__sinit+0xc>
 80096d0:	f7ff ffc4 	bl	800965c <global_stdio_init.part.0>
 80096d4:	e7f2      	b.n	80096bc <__sinit+0xc>
 80096d6:	bf00      	nop
 80096d8:	0800961d 	.word	0x0800961d
 80096dc:	200020fc 	.word	0x200020fc

080096e0 <_fwalk_sglue>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	4607      	mov	r7, r0
 80096e6:	4688      	mov	r8, r1
 80096e8:	4614      	mov	r4, r2
 80096ea:	2600      	movs	r6, #0
 80096ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80096f0:	f1b9 0901 	subs.w	r9, r9, #1
 80096f4:	d505      	bpl.n	8009702 <_fwalk_sglue+0x22>
 80096f6:	6824      	ldr	r4, [r4, #0]
 80096f8:	2c00      	cmp	r4, #0
 80096fa:	d1f7      	bne.n	80096ec <_fwalk_sglue+0xc>
 80096fc:	4630      	mov	r0, r6
 80096fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009702:	89ab      	ldrh	r3, [r5, #12]
 8009704:	2b01      	cmp	r3, #1
 8009706:	d907      	bls.n	8009718 <_fwalk_sglue+0x38>
 8009708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800970c:	3301      	adds	r3, #1
 800970e:	d003      	beq.n	8009718 <_fwalk_sglue+0x38>
 8009710:	4629      	mov	r1, r5
 8009712:	4638      	mov	r0, r7
 8009714:	47c0      	blx	r8
 8009716:	4306      	orrs	r6, r0
 8009718:	3568      	adds	r5, #104	; 0x68
 800971a:	e7e9      	b.n	80096f0 <_fwalk_sglue+0x10>

0800971c <siprintf>:
 800971c:	b40e      	push	{r1, r2, r3}
 800971e:	b500      	push	{lr}
 8009720:	b09c      	sub	sp, #112	; 0x70
 8009722:	ab1d      	add	r3, sp, #116	; 0x74
 8009724:	9002      	str	r0, [sp, #8]
 8009726:	9006      	str	r0, [sp, #24]
 8009728:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800972c:	4809      	ldr	r0, [pc, #36]	; (8009754 <siprintf+0x38>)
 800972e:	9107      	str	r1, [sp, #28]
 8009730:	9104      	str	r1, [sp, #16]
 8009732:	4909      	ldr	r1, [pc, #36]	; (8009758 <siprintf+0x3c>)
 8009734:	f853 2b04 	ldr.w	r2, [r3], #4
 8009738:	9105      	str	r1, [sp, #20]
 800973a:	6800      	ldr	r0, [r0, #0]
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	a902      	add	r1, sp, #8
 8009740:	f001 fc22 	bl	800af88 <_svfiprintf_r>
 8009744:	9b02      	ldr	r3, [sp, #8]
 8009746:	2200      	movs	r2, #0
 8009748:	701a      	strb	r2, [r3, #0]
 800974a:	b01c      	add	sp, #112	; 0x70
 800974c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009750:	b003      	add	sp, #12
 8009752:	4770      	bx	lr
 8009754:	20000154 	.word	0x20000154
 8009758:	ffff0208 	.word	0xffff0208

0800975c <__sread>:
 800975c:	b510      	push	{r4, lr}
 800975e:	460c      	mov	r4, r1
 8009760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009764:	f000 f86c 	bl	8009840 <_read_r>
 8009768:	2800      	cmp	r0, #0
 800976a:	bfab      	itete	ge
 800976c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800976e:	89a3      	ldrhlt	r3, [r4, #12]
 8009770:	181b      	addge	r3, r3, r0
 8009772:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009776:	bfac      	ite	ge
 8009778:	6563      	strge	r3, [r4, #84]	; 0x54
 800977a:	81a3      	strhlt	r3, [r4, #12]
 800977c:	bd10      	pop	{r4, pc}

0800977e <__swrite>:
 800977e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009782:	461f      	mov	r7, r3
 8009784:	898b      	ldrh	r3, [r1, #12]
 8009786:	05db      	lsls	r3, r3, #23
 8009788:	4605      	mov	r5, r0
 800978a:	460c      	mov	r4, r1
 800978c:	4616      	mov	r6, r2
 800978e:	d505      	bpl.n	800979c <__swrite+0x1e>
 8009790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009794:	2302      	movs	r3, #2
 8009796:	2200      	movs	r2, #0
 8009798:	f000 f840 	bl	800981c <_lseek_r>
 800979c:	89a3      	ldrh	r3, [r4, #12]
 800979e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097a6:	81a3      	strh	r3, [r4, #12]
 80097a8:	4632      	mov	r2, r6
 80097aa:	463b      	mov	r3, r7
 80097ac:	4628      	mov	r0, r5
 80097ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097b2:	f000 b857 	b.w	8009864 <_write_r>

080097b6 <__sseek>:
 80097b6:	b510      	push	{r4, lr}
 80097b8:	460c      	mov	r4, r1
 80097ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097be:	f000 f82d 	bl	800981c <_lseek_r>
 80097c2:	1c43      	adds	r3, r0, #1
 80097c4:	89a3      	ldrh	r3, [r4, #12]
 80097c6:	bf15      	itete	ne
 80097c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80097ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097d2:	81a3      	strheq	r3, [r4, #12]
 80097d4:	bf18      	it	ne
 80097d6:	81a3      	strhne	r3, [r4, #12]
 80097d8:	bd10      	pop	{r4, pc}

080097da <__sclose>:
 80097da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097de:	f000 b80d 	b.w	80097fc <_close_r>

080097e2 <memset>:
 80097e2:	4402      	add	r2, r0
 80097e4:	4603      	mov	r3, r0
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d100      	bne.n	80097ec <memset+0xa>
 80097ea:	4770      	bx	lr
 80097ec:	f803 1b01 	strb.w	r1, [r3], #1
 80097f0:	e7f9      	b.n	80097e6 <memset+0x4>
	...

080097f4 <_localeconv_r>:
 80097f4:	4800      	ldr	r0, [pc, #0]	; (80097f8 <_localeconv_r+0x4>)
 80097f6:	4770      	bx	lr
 80097f8:	20000248 	.word	0x20000248

080097fc <_close_r>:
 80097fc:	b538      	push	{r3, r4, r5, lr}
 80097fe:	4d06      	ldr	r5, [pc, #24]	; (8009818 <_close_r+0x1c>)
 8009800:	2300      	movs	r3, #0
 8009802:	4604      	mov	r4, r0
 8009804:	4608      	mov	r0, r1
 8009806:	602b      	str	r3, [r5, #0]
 8009808:	f7f7 ff2d 	bl	8001666 <_close>
 800980c:	1c43      	adds	r3, r0, #1
 800980e:	d102      	bne.n	8009816 <_close_r+0x1a>
 8009810:	682b      	ldr	r3, [r5, #0]
 8009812:	b103      	cbz	r3, 8009816 <_close_r+0x1a>
 8009814:	6023      	str	r3, [r4, #0]
 8009816:	bd38      	pop	{r3, r4, r5, pc}
 8009818:	20002100 	.word	0x20002100

0800981c <_lseek_r>:
 800981c:	b538      	push	{r3, r4, r5, lr}
 800981e:	4d07      	ldr	r5, [pc, #28]	; (800983c <_lseek_r+0x20>)
 8009820:	4604      	mov	r4, r0
 8009822:	4608      	mov	r0, r1
 8009824:	4611      	mov	r1, r2
 8009826:	2200      	movs	r2, #0
 8009828:	602a      	str	r2, [r5, #0]
 800982a:	461a      	mov	r2, r3
 800982c:	f7f7 ff42 	bl	80016b4 <_lseek>
 8009830:	1c43      	adds	r3, r0, #1
 8009832:	d102      	bne.n	800983a <_lseek_r+0x1e>
 8009834:	682b      	ldr	r3, [r5, #0]
 8009836:	b103      	cbz	r3, 800983a <_lseek_r+0x1e>
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	bd38      	pop	{r3, r4, r5, pc}
 800983c:	20002100 	.word	0x20002100

08009840 <_read_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d07      	ldr	r5, [pc, #28]	; (8009860 <_read_r+0x20>)
 8009844:	4604      	mov	r4, r0
 8009846:	4608      	mov	r0, r1
 8009848:	4611      	mov	r1, r2
 800984a:	2200      	movs	r2, #0
 800984c:	602a      	str	r2, [r5, #0]
 800984e:	461a      	mov	r2, r3
 8009850:	f7f7 fed0 	bl	80015f4 <_read>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d102      	bne.n	800985e <_read_r+0x1e>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	b103      	cbz	r3, 800985e <_read_r+0x1e>
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	bd38      	pop	{r3, r4, r5, pc}
 8009860:	20002100 	.word	0x20002100

08009864 <_write_r>:
 8009864:	b538      	push	{r3, r4, r5, lr}
 8009866:	4d07      	ldr	r5, [pc, #28]	; (8009884 <_write_r+0x20>)
 8009868:	4604      	mov	r4, r0
 800986a:	4608      	mov	r0, r1
 800986c:	4611      	mov	r1, r2
 800986e:	2200      	movs	r2, #0
 8009870:	602a      	str	r2, [r5, #0]
 8009872:	461a      	mov	r2, r3
 8009874:	f7f7 fedb 	bl	800162e <_write>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d102      	bne.n	8009882 <_write_r+0x1e>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	b103      	cbz	r3, 8009882 <_write_r+0x1e>
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	bd38      	pop	{r3, r4, r5, pc}
 8009884:	20002100 	.word	0x20002100

08009888 <__errno>:
 8009888:	4b01      	ldr	r3, [pc, #4]	; (8009890 <__errno+0x8>)
 800988a:	6818      	ldr	r0, [r3, #0]
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000154 	.word	0x20000154

08009894 <__libc_init_array>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4d0d      	ldr	r5, [pc, #52]	; (80098cc <__libc_init_array+0x38>)
 8009898:	4c0d      	ldr	r4, [pc, #52]	; (80098d0 <__libc_init_array+0x3c>)
 800989a:	1b64      	subs	r4, r4, r5
 800989c:	10a4      	asrs	r4, r4, #2
 800989e:	2600      	movs	r6, #0
 80098a0:	42a6      	cmp	r6, r4
 80098a2:	d109      	bne.n	80098b8 <__libc_init_array+0x24>
 80098a4:	4d0b      	ldr	r5, [pc, #44]	; (80098d4 <__libc_init_array+0x40>)
 80098a6:	4c0c      	ldr	r4, [pc, #48]	; (80098d8 <__libc_init_array+0x44>)
 80098a8:	f002 ffce 	bl	800c848 <_init>
 80098ac:	1b64      	subs	r4, r4, r5
 80098ae:	10a4      	asrs	r4, r4, #2
 80098b0:	2600      	movs	r6, #0
 80098b2:	42a6      	cmp	r6, r4
 80098b4:	d105      	bne.n	80098c2 <__libc_init_array+0x2e>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80098bc:	4798      	blx	r3
 80098be:	3601      	adds	r6, #1
 80098c0:	e7ee      	b.n	80098a0 <__libc_init_array+0xc>
 80098c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80098c6:	4798      	blx	r3
 80098c8:	3601      	adds	r6, #1
 80098ca:	e7f2      	b.n	80098b2 <__libc_init_array+0x1e>
 80098cc:	0800cc78 	.word	0x0800cc78
 80098d0:	0800cc78 	.word	0x0800cc78
 80098d4:	0800cc78 	.word	0x0800cc78
 80098d8:	0800cc7c 	.word	0x0800cc7c

080098dc <__retarget_lock_init_recursive>:
 80098dc:	4770      	bx	lr

080098de <__retarget_lock_acquire_recursive>:
 80098de:	4770      	bx	lr

080098e0 <__retarget_lock_release_recursive>:
 80098e0:	4770      	bx	lr

080098e2 <quorem>:
 80098e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e6:	6903      	ldr	r3, [r0, #16]
 80098e8:	690c      	ldr	r4, [r1, #16]
 80098ea:	42a3      	cmp	r3, r4
 80098ec:	4607      	mov	r7, r0
 80098ee:	db7e      	blt.n	80099ee <quorem+0x10c>
 80098f0:	3c01      	subs	r4, #1
 80098f2:	f101 0814 	add.w	r8, r1, #20
 80098f6:	f100 0514 	add.w	r5, r0, #20
 80098fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009904:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009908:	3301      	adds	r3, #1
 800990a:	429a      	cmp	r2, r3
 800990c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009910:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009914:	fbb2 f6f3 	udiv	r6, r2, r3
 8009918:	d331      	bcc.n	800997e <quorem+0x9c>
 800991a:	f04f 0e00 	mov.w	lr, #0
 800991e:	4640      	mov	r0, r8
 8009920:	46ac      	mov	ip, r5
 8009922:	46f2      	mov	sl, lr
 8009924:	f850 2b04 	ldr.w	r2, [r0], #4
 8009928:	b293      	uxth	r3, r2
 800992a:	fb06 e303 	mla	r3, r6, r3, lr
 800992e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009932:	0c1a      	lsrs	r2, r3, #16
 8009934:	b29b      	uxth	r3, r3
 8009936:	ebaa 0303 	sub.w	r3, sl, r3
 800993a:	f8dc a000 	ldr.w	sl, [ip]
 800993e:	fa13 f38a 	uxtah	r3, r3, sl
 8009942:	fb06 220e 	mla	r2, r6, lr, r2
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	9b00      	ldr	r3, [sp, #0]
 800994a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800994e:	b292      	uxth	r2, r2
 8009950:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009954:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009958:	f8bd 3000 	ldrh.w	r3, [sp]
 800995c:	4581      	cmp	r9, r0
 800995e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009962:	f84c 3b04 	str.w	r3, [ip], #4
 8009966:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800996a:	d2db      	bcs.n	8009924 <quorem+0x42>
 800996c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009970:	b92b      	cbnz	r3, 800997e <quorem+0x9c>
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	3b04      	subs	r3, #4
 8009976:	429d      	cmp	r5, r3
 8009978:	461a      	mov	r2, r3
 800997a:	d32c      	bcc.n	80099d6 <quorem+0xf4>
 800997c:	613c      	str	r4, [r7, #16]
 800997e:	4638      	mov	r0, r7
 8009980:	f001 f9a8 	bl	800acd4 <__mcmp>
 8009984:	2800      	cmp	r0, #0
 8009986:	db22      	blt.n	80099ce <quorem+0xec>
 8009988:	3601      	adds	r6, #1
 800998a:	4629      	mov	r1, r5
 800998c:	2000      	movs	r0, #0
 800998e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009992:	f8d1 c000 	ldr.w	ip, [r1]
 8009996:	b293      	uxth	r3, r2
 8009998:	1ac3      	subs	r3, r0, r3
 800999a:	0c12      	lsrs	r2, r2, #16
 800999c:	fa13 f38c 	uxtah	r3, r3, ip
 80099a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80099a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099ae:	45c1      	cmp	r9, r8
 80099b0:	f841 3b04 	str.w	r3, [r1], #4
 80099b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80099b8:	d2e9      	bcs.n	800998e <quorem+0xac>
 80099ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099c2:	b922      	cbnz	r2, 80099ce <quorem+0xec>
 80099c4:	3b04      	subs	r3, #4
 80099c6:	429d      	cmp	r5, r3
 80099c8:	461a      	mov	r2, r3
 80099ca:	d30a      	bcc.n	80099e2 <quorem+0x100>
 80099cc:	613c      	str	r4, [r7, #16]
 80099ce:	4630      	mov	r0, r6
 80099d0:	b003      	add	sp, #12
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	3b04      	subs	r3, #4
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d1ce      	bne.n	800997c <quorem+0x9a>
 80099de:	3c01      	subs	r4, #1
 80099e0:	e7c9      	b.n	8009976 <quorem+0x94>
 80099e2:	6812      	ldr	r2, [r2, #0]
 80099e4:	3b04      	subs	r3, #4
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	d1f0      	bne.n	80099cc <quorem+0xea>
 80099ea:	3c01      	subs	r4, #1
 80099ec:	e7eb      	b.n	80099c6 <quorem+0xe4>
 80099ee:	2000      	movs	r0, #0
 80099f0:	e7ee      	b.n	80099d0 <quorem+0xee>
 80099f2:	0000      	movs	r0, r0
 80099f4:	0000      	movs	r0, r0
	...

080099f8 <_dtoa_r>:
 80099f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099fc:	ed2d 8b04 	vpush	{d8-d9}
 8009a00:	69c5      	ldr	r5, [r0, #28]
 8009a02:	b093      	sub	sp, #76	; 0x4c
 8009a04:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009a08:	ec57 6b10 	vmov	r6, r7, d0
 8009a0c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a10:	9107      	str	r1, [sp, #28]
 8009a12:	4604      	mov	r4, r0
 8009a14:	920a      	str	r2, [sp, #40]	; 0x28
 8009a16:	930d      	str	r3, [sp, #52]	; 0x34
 8009a18:	b975      	cbnz	r5, 8009a38 <_dtoa_r+0x40>
 8009a1a:	2010      	movs	r0, #16
 8009a1c:	f000 fe2a 	bl	800a674 <malloc>
 8009a20:	4602      	mov	r2, r0
 8009a22:	61e0      	str	r0, [r4, #28]
 8009a24:	b920      	cbnz	r0, 8009a30 <_dtoa_r+0x38>
 8009a26:	4bae      	ldr	r3, [pc, #696]	; (8009ce0 <_dtoa_r+0x2e8>)
 8009a28:	21ef      	movs	r1, #239	; 0xef
 8009a2a:	48ae      	ldr	r0, [pc, #696]	; (8009ce4 <_dtoa_r+0x2ec>)
 8009a2c:	f001 fc90 	bl	800b350 <__assert_func>
 8009a30:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a34:	6005      	str	r5, [r0, #0]
 8009a36:	60c5      	str	r5, [r0, #12]
 8009a38:	69e3      	ldr	r3, [r4, #28]
 8009a3a:	6819      	ldr	r1, [r3, #0]
 8009a3c:	b151      	cbz	r1, 8009a54 <_dtoa_r+0x5c>
 8009a3e:	685a      	ldr	r2, [r3, #4]
 8009a40:	604a      	str	r2, [r1, #4]
 8009a42:	2301      	movs	r3, #1
 8009a44:	4093      	lsls	r3, r2
 8009a46:	608b      	str	r3, [r1, #8]
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 ff07 	bl	800a85c <_Bfree>
 8009a4e:	69e3      	ldr	r3, [r4, #28]
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	1e3b      	subs	r3, r7, #0
 8009a56:	bfbb      	ittet	lt
 8009a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009a5c:	9303      	strlt	r3, [sp, #12]
 8009a5e:	2300      	movge	r3, #0
 8009a60:	2201      	movlt	r2, #1
 8009a62:	bfac      	ite	ge
 8009a64:	f8c8 3000 	strge.w	r3, [r8]
 8009a68:	f8c8 2000 	strlt.w	r2, [r8]
 8009a6c:	4b9e      	ldr	r3, [pc, #632]	; (8009ce8 <_dtoa_r+0x2f0>)
 8009a6e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009a72:	ea33 0308 	bics.w	r3, r3, r8
 8009a76:	d11b      	bne.n	8009ab0 <_dtoa_r+0xb8>
 8009a78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a7a:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a7e:	6013      	str	r3, [r2, #0]
 8009a80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009a84:	4333      	orrs	r3, r6
 8009a86:	f000 8593 	beq.w	800a5b0 <_dtoa_r+0xbb8>
 8009a8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a8c:	b963      	cbnz	r3, 8009aa8 <_dtoa_r+0xb0>
 8009a8e:	4b97      	ldr	r3, [pc, #604]	; (8009cec <_dtoa_r+0x2f4>)
 8009a90:	e027      	b.n	8009ae2 <_dtoa_r+0xea>
 8009a92:	4b97      	ldr	r3, [pc, #604]	; (8009cf0 <_dtoa_r+0x2f8>)
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	9800      	ldr	r0, [sp, #0]
 8009a9e:	b013      	add	sp, #76	; 0x4c
 8009aa0:	ecbd 8b04 	vpop	{d8-d9}
 8009aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa8:	4b90      	ldr	r3, [pc, #576]	; (8009cec <_dtoa_r+0x2f4>)
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	3303      	adds	r3, #3
 8009aae:	e7f3      	b.n	8009a98 <_dtoa_r+0xa0>
 8009ab0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	ec51 0b17 	vmov	r0, r1, d7
 8009aba:	eeb0 8a47 	vmov.f32	s16, s14
 8009abe:	eef0 8a67 	vmov.f32	s17, s15
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	f7f7 f808 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ac8:	4681      	mov	r9, r0
 8009aca:	b160      	cbz	r0, 8009ae6 <_dtoa_r+0xee>
 8009acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ace:	2301      	movs	r3, #1
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	f000 8568 	beq.w	800a5aa <_dtoa_r+0xbb2>
 8009ada:	4b86      	ldr	r3, [pc, #536]	; (8009cf4 <_dtoa_r+0x2fc>)
 8009adc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	3b01      	subs	r3, #1
 8009ae2:	9300      	str	r3, [sp, #0]
 8009ae4:	e7da      	b.n	8009a9c <_dtoa_r+0xa4>
 8009ae6:	aa10      	add	r2, sp, #64	; 0x40
 8009ae8:	a911      	add	r1, sp, #68	; 0x44
 8009aea:	4620      	mov	r0, r4
 8009aec:	eeb0 0a48 	vmov.f32	s0, s16
 8009af0:	eef0 0a68 	vmov.f32	s1, s17
 8009af4:	f001 f994 	bl	800ae20 <__d2b>
 8009af8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009afc:	4682      	mov	sl, r0
 8009afe:	2d00      	cmp	r5, #0
 8009b00:	d07f      	beq.n	8009c02 <_dtoa_r+0x20a>
 8009b02:	ee18 3a90 	vmov	r3, s17
 8009b06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b0a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009b0e:	ec51 0b18 	vmov	r0, r1, d8
 8009b12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b1a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009b1e:	4619      	mov	r1, r3
 8009b20:	2200      	movs	r2, #0
 8009b22:	4b75      	ldr	r3, [pc, #468]	; (8009cf8 <_dtoa_r+0x300>)
 8009b24:	f7f6 fbb8 	bl	8000298 <__aeabi_dsub>
 8009b28:	a367      	add	r3, pc, #412	; (adr r3, 8009cc8 <_dtoa_r+0x2d0>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7f6 fd6b 	bl	8000608 <__aeabi_dmul>
 8009b32:	a367      	add	r3, pc, #412	; (adr r3, 8009cd0 <_dtoa_r+0x2d8>)
 8009b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b38:	f7f6 fbb0 	bl	800029c <__adddf3>
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	4628      	mov	r0, r5
 8009b40:	460f      	mov	r7, r1
 8009b42:	f7f6 fcf7 	bl	8000534 <__aeabi_i2d>
 8009b46:	a364      	add	r3, pc, #400	; (adr r3, 8009cd8 <_dtoa_r+0x2e0>)
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f7f6 fd5c 	bl	8000608 <__aeabi_dmul>
 8009b50:	4602      	mov	r2, r0
 8009b52:	460b      	mov	r3, r1
 8009b54:	4630      	mov	r0, r6
 8009b56:	4639      	mov	r1, r7
 8009b58:	f7f6 fba0 	bl	800029c <__adddf3>
 8009b5c:	4606      	mov	r6, r0
 8009b5e:	460f      	mov	r7, r1
 8009b60:	f7f7 f802 	bl	8000b68 <__aeabi_d2iz>
 8009b64:	2200      	movs	r2, #0
 8009b66:	4683      	mov	fp, r0
 8009b68:	2300      	movs	r3, #0
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	f7f6 ffbd 	bl	8000aec <__aeabi_dcmplt>
 8009b72:	b148      	cbz	r0, 8009b88 <_dtoa_r+0x190>
 8009b74:	4658      	mov	r0, fp
 8009b76:	f7f6 fcdd 	bl	8000534 <__aeabi_i2d>
 8009b7a:	4632      	mov	r2, r6
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	f7f6 ffab 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b82:	b908      	cbnz	r0, 8009b88 <_dtoa_r+0x190>
 8009b84:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b88:	f1bb 0f16 	cmp.w	fp, #22
 8009b8c:	d857      	bhi.n	8009c3e <_dtoa_r+0x246>
 8009b8e:	4b5b      	ldr	r3, [pc, #364]	; (8009cfc <_dtoa_r+0x304>)
 8009b90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	ec51 0b18 	vmov	r0, r1, d8
 8009b9c:	f7f6 ffa6 	bl	8000aec <__aeabi_dcmplt>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	d04e      	beq.n	8009c42 <_dtoa_r+0x24a>
 8009ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009ba8:	2300      	movs	r3, #0
 8009baa:	930c      	str	r3, [sp, #48]	; 0x30
 8009bac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bae:	1b5b      	subs	r3, r3, r5
 8009bb0:	1e5a      	subs	r2, r3, #1
 8009bb2:	bf45      	ittet	mi
 8009bb4:	f1c3 0301 	rsbmi	r3, r3, #1
 8009bb8:	9305      	strmi	r3, [sp, #20]
 8009bba:	2300      	movpl	r3, #0
 8009bbc:	2300      	movmi	r3, #0
 8009bbe:	9206      	str	r2, [sp, #24]
 8009bc0:	bf54      	ite	pl
 8009bc2:	9305      	strpl	r3, [sp, #20]
 8009bc4:	9306      	strmi	r3, [sp, #24]
 8009bc6:	f1bb 0f00 	cmp.w	fp, #0
 8009bca:	db3c      	blt.n	8009c46 <_dtoa_r+0x24e>
 8009bcc:	9b06      	ldr	r3, [sp, #24]
 8009bce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009bd2:	445b      	add	r3, fp
 8009bd4:	9306      	str	r3, [sp, #24]
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9308      	str	r3, [sp, #32]
 8009bda:	9b07      	ldr	r3, [sp, #28]
 8009bdc:	2b09      	cmp	r3, #9
 8009bde:	d868      	bhi.n	8009cb2 <_dtoa_r+0x2ba>
 8009be0:	2b05      	cmp	r3, #5
 8009be2:	bfc4      	itt	gt
 8009be4:	3b04      	subgt	r3, #4
 8009be6:	9307      	strgt	r3, [sp, #28]
 8009be8:	9b07      	ldr	r3, [sp, #28]
 8009bea:	f1a3 0302 	sub.w	r3, r3, #2
 8009bee:	bfcc      	ite	gt
 8009bf0:	2500      	movgt	r5, #0
 8009bf2:	2501      	movle	r5, #1
 8009bf4:	2b03      	cmp	r3, #3
 8009bf6:	f200 8085 	bhi.w	8009d04 <_dtoa_r+0x30c>
 8009bfa:	e8df f003 	tbb	[pc, r3]
 8009bfe:	3b2e      	.short	0x3b2e
 8009c00:	5839      	.short	0x5839
 8009c02:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c06:	441d      	add	r5, r3
 8009c08:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c0c:	2b20      	cmp	r3, #32
 8009c0e:	bfc1      	itttt	gt
 8009c10:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c14:	fa08 f803 	lslgt.w	r8, r8, r3
 8009c18:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009c1c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009c20:	bfd6      	itet	le
 8009c22:	f1c3 0320 	rsble	r3, r3, #32
 8009c26:	ea48 0003 	orrgt.w	r0, r8, r3
 8009c2a:	fa06 f003 	lslle.w	r0, r6, r3
 8009c2e:	f7f6 fc71 	bl	8000514 <__aeabi_ui2d>
 8009c32:	2201      	movs	r2, #1
 8009c34:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009c38:	3d01      	subs	r5, #1
 8009c3a:	920e      	str	r2, [sp, #56]	; 0x38
 8009c3c:	e76f      	b.n	8009b1e <_dtoa_r+0x126>
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e7b3      	b.n	8009baa <_dtoa_r+0x1b2>
 8009c42:	900c      	str	r0, [sp, #48]	; 0x30
 8009c44:	e7b2      	b.n	8009bac <_dtoa_r+0x1b4>
 8009c46:	9b05      	ldr	r3, [sp, #20]
 8009c48:	eba3 030b 	sub.w	r3, r3, fp
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	f1cb 0300 	rsb	r3, fp, #0
 8009c52:	9308      	str	r3, [sp, #32]
 8009c54:	2300      	movs	r3, #0
 8009c56:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c58:	e7bf      	b.n	8009bda <_dtoa_r+0x1e2>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dc52      	bgt.n	8009d0a <_dtoa_r+0x312>
 8009c64:	2301      	movs	r3, #1
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	9304      	str	r3, [sp, #16]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	920a      	str	r2, [sp, #40]	; 0x28
 8009c6e:	e00b      	b.n	8009c88 <_dtoa_r+0x290>
 8009c70:	2301      	movs	r3, #1
 8009c72:	e7f3      	b.n	8009c5c <_dtoa_r+0x264>
 8009c74:	2300      	movs	r3, #0
 8009c76:	9309      	str	r3, [sp, #36]	; 0x24
 8009c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c7a:	445b      	add	r3, fp
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	bfb8      	it	lt
 8009c86:	2301      	movlt	r3, #1
 8009c88:	69e0      	ldr	r0, [r4, #28]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	2204      	movs	r2, #4
 8009c8e:	f102 0614 	add.w	r6, r2, #20
 8009c92:	429e      	cmp	r6, r3
 8009c94:	d93d      	bls.n	8009d12 <_dtoa_r+0x31a>
 8009c96:	6041      	str	r1, [r0, #4]
 8009c98:	4620      	mov	r0, r4
 8009c9a:	f000 fd9f 	bl	800a7dc <_Balloc>
 8009c9e:	9000      	str	r0, [sp, #0]
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	d139      	bne.n	8009d18 <_dtoa_r+0x320>
 8009ca4:	4b16      	ldr	r3, [pc, #88]	; (8009d00 <_dtoa_r+0x308>)
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	f240 11af 	movw	r1, #431	; 0x1af
 8009cac:	e6bd      	b.n	8009a2a <_dtoa_r+0x32>
 8009cae:	2301      	movs	r3, #1
 8009cb0:	e7e1      	b.n	8009c76 <_dtoa_r+0x27e>
 8009cb2:	2501      	movs	r5, #1
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	9307      	str	r3, [sp, #28]
 8009cb8:	9509      	str	r5, [sp, #36]	; 0x24
 8009cba:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	9304      	str	r3, [sp, #16]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2312      	movs	r3, #18
 8009cc6:	e7d1      	b.n	8009c6c <_dtoa_r+0x274>
 8009cc8:	636f4361 	.word	0x636f4361
 8009ccc:	3fd287a7 	.word	0x3fd287a7
 8009cd0:	8b60c8b3 	.word	0x8b60c8b3
 8009cd4:	3fc68a28 	.word	0x3fc68a28
 8009cd8:	509f79fb 	.word	0x509f79fb
 8009cdc:	3fd34413 	.word	0x3fd34413
 8009ce0:	0800c909 	.word	0x0800c909
 8009ce4:	0800c920 	.word	0x0800c920
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	0800c905 	.word	0x0800c905
 8009cf0:	0800c8fc 	.word	0x0800c8fc
 8009cf4:	0800c8d9 	.word	0x0800c8d9
 8009cf8:	3ff80000 	.word	0x3ff80000
 8009cfc:	0800ca10 	.word	0x0800ca10
 8009d00:	0800c978 	.word	0x0800c978
 8009d04:	2301      	movs	r3, #1
 8009d06:	9309      	str	r3, [sp, #36]	; 0x24
 8009d08:	e7d7      	b.n	8009cba <_dtoa_r+0x2c2>
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	9304      	str	r3, [sp, #16]
 8009d10:	e7ba      	b.n	8009c88 <_dtoa_r+0x290>
 8009d12:	3101      	adds	r1, #1
 8009d14:	0052      	lsls	r2, r2, #1
 8009d16:	e7ba      	b.n	8009c8e <_dtoa_r+0x296>
 8009d18:	69e3      	ldr	r3, [r4, #28]
 8009d1a:	9a00      	ldr	r2, [sp, #0]
 8009d1c:	601a      	str	r2, [r3, #0]
 8009d1e:	9b04      	ldr	r3, [sp, #16]
 8009d20:	2b0e      	cmp	r3, #14
 8009d22:	f200 80a8 	bhi.w	8009e76 <_dtoa_r+0x47e>
 8009d26:	2d00      	cmp	r5, #0
 8009d28:	f000 80a5 	beq.w	8009e76 <_dtoa_r+0x47e>
 8009d2c:	f1bb 0f00 	cmp.w	fp, #0
 8009d30:	dd38      	ble.n	8009da4 <_dtoa_r+0x3ac>
 8009d32:	4bc0      	ldr	r3, [pc, #768]	; (800a034 <_dtoa_r+0x63c>)
 8009d34:	f00b 020f 	and.w	r2, fp, #15
 8009d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009d40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009d44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009d48:	d019      	beq.n	8009d7e <_dtoa_r+0x386>
 8009d4a:	4bbb      	ldr	r3, [pc, #748]	; (800a038 <_dtoa_r+0x640>)
 8009d4c:	ec51 0b18 	vmov	r0, r1, d8
 8009d50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d54:	f7f6 fd82 	bl	800085c <__aeabi_ddiv>
 8009d58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d5c:	f008 080f 	and.w	r8, r8, #15
 8009d60:	2503      	movs	r5, #3
 8009d62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a038 <_dtoa_r+0x640>
 8009d66:	f1b8 0f00 	cmp.w	r8, #0
 8009d6a:	d10a      	bne.n	8009d82 <_dtoa_r+0x38a>
 8009d6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d70:	4632      	mov	r2, r6
 8009d72:	463b      	mov	r3, r7
 8009d74:	f7f6 fd72 	bl	800085c <__aeabi_ddiv>
 8009d78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d7c:	e02b      	b.n	8009dd6 <_dtoa_r+0x3de>
 8009d7e:	2502      	movs	r5, #2
 8009d80:	e7ef      	b.n	8009d62 <_dtoa_r+0x36a>
 8009d82:	f018 0f01 	tst.w	r8, #1
 8009d86:	d008      	beq.n	8009d9a <_dtoa_r+0x3a2>
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009d90:	f7f6 fc3a 	bl	8000608 <__aeabi_dmul>
 8009d94:	3501      	adds	r5, #1
 8009d96:	4606      	mov	r6, r0
 8009d98:	460f      	mov	r7, r1
 8009d9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009d9e:	f109 0908 	add.w	r9, r9, #8
 8009da2:	e7e0      	b.n	8009d66 <_dtoa_r+0x36e>
 8009da4:	f000 809f 	beq.w	8009ee6 <_dtoa_r+0x4ee>
 8009da8:	f1cb 0600 	rsb	r6, fp, #0
 8009dac:	4ba1      	ldr	r3, [pc, #644]	; (800a034 <_dtoa_r+0x63c>)
 8009dae:	4fa2      	ldr	r7, [pc, #648]	; (800a038 <_dtoa_r+0x640>)
 8009db0:	f006 020f 	and.w	r2, r6, #15
 8009db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	ec51 0b18 	vmov	r0, r1, d8
 8009dc0:	f7f6 fc22 	bl	8000608 <__aeabi_dmul>
 8009dc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009dc8:	1136      	asrs	r6, r6, #4
 8009dca:	2300      	movs	r3, #0
 8009dcc:	2502      	movs	r5, #2
 8009dce:	2e00      	cmp	r6, #0
 8009dd0:	d17e      	bne.n	8009ed0 <_dtoa_r+0x4d8>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1d0      	bne.n	8009d78 <_dtoa_r+0x380>
 8009dd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009dd8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 8084 	beq.w	8009eea <_dtoa_r+0x4f2>
 8009de2:	4b96      	ldr	r3, [pc, #600]	; (800a03c <_dtoa_r+0x644>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	4640      	mov	r0, r8
 8009de8:	4649      	mov	r1, r9
 8009dea:	f7f6 fe7f 	bl	8000aec <__aeabi_dcmplt>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d07b      	beq.n	8009eea <_dtoa_r+0x4f2>
 8009df2:	9b04      	ldr	r3, [sp, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d078      	beq.n	8009eea <_dtoa_r+0x4f2>
 8009df8:	9b01      	ldr	r3, [sp, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	dd39      	ble.n	8009e72 <_dtoa_r+0x47a>
 8009dfe:	4b90      	ldr	r3, [pc, #576]	; (800a040 <_dtoa_r+0x648>)
 8009e00:	2200      	movs	r2, #0
 8009e02:	4640      	mov	r0, r8
 8009e04:	4649      	mov	r1, r9
 8009e06:	f7f6 fbff 	bl	8000608 <__aeabi_dmul>
 8009e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e0e:	9e01      	ldr	r6, [sp, #4]
 8009e10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009e14:	3501      	adds	r5, #1
 8009e16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	f7f6 fb8a 	bl	8000534 <__aeabi_i2d>
 8009e20:	4642      	mov	r2, r8
 8009e22:	464b      	mov	r3, r9
 8009e24:	f7f6 fbf0 	bl	8000608 <__aeabi_dmul>
 8009e28:	4b86      	ldr	r3, [pc, #536]	; (800a044 <_dtoa_r+0x64c>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f7f6 fa36 	bl	800029c <__adddf3>
 8009e30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e38:	9303      	str	r3, [sp, #12]
 8009e3a:	2e00      	cmp	r6, #0
 8009e3c:	d158      	bne.n	8009ef0 <_dtoa_r+0x4f8>
 8009e3e:	4b82      	ldr	r3, [pc, #520]	; (800a048 <_dtoa_r+0x650>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	4640      	mov	r0, r8
 8009e44:	4649      	mov	r1, r9
 8009e46:	f7f6 fa27 	bl	8000298 <__aeabi_dsub>
 8009e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e4e:	4680      	mov	r8, r0
 8009e50:	4689      	mov	r9, r1
 8009e52:	f7f6 fe69 	bl	8000b28 <__aeabi_dcmpgt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	f040 8296 	bne.w	800a388 <_dtoa_r+0x990>
 8009e5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009e60:	4640      	mov	r0, r8
 8009e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e66:	4649      	mov	r1, r9
 8009e68:	f7f6 fe40 	bl	8000aec <__aeabi_dcmplt>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	f040 8289 	bne.w	800a384 <_dtoa_r+0x98c>
 8009e72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009e76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f2c0 814e 	blt.w	800a11a <_dtoa_r+0x722>
 8009e7e:	f1bb 0f0e 	cmp.w	fp, #14
 8009e82:	f300 814a 	bgt.w	800a11a <_dtoa_r+0x722>
 8009e86:	4b6b      	ldr	r3, [pc, #428]	; (800a034 <_dtoa_r+0x63c>)
 8009e88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	f280 80dc 	bge.w	800a050 <_dtoa_r+0x658>
 8009e98:	9b04      	ldr	r3, [sp, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f300 80d8 	bgt.w	800a050 <_dtoa_r+0x658>
 8009ea0:	f040 826f 	bne.w	800a382 <_dtoa_r+0x98a>
 8009ea4:	4b68      	ldr	r3, [pc, #416]	; (800a048 <_dtoa_r+0x650>)
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	4640      	mov	r0, r8
 8009eaa:	4649      	mov	r1, r9
 8009eac:	f7f6 fbac 	bl	8000608 <__aeabi_dmul>
 8009eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009eb4:	f7f6 fe2e 	bl	8000b14 <__aeabi_dcmpge>
 8009eb8:	9e04      	ldr	r6, [sp, #16]
 8009eba:	4637      	mov	r7, r6
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f040 8245 	bne.w	800a34c <_dtoa_r+0x954>
 8009ec2:	9d00      	ldr	r5, [sp, #0]
 8009ec4:	2331      	movs	r3, #49	; 0x31
 8009ec6:	f805 3b01 	strb.w	r3, [r5], #1
 8009eca:	f10b 0b01 	add.w	fp, fp, #1
 8009ece:	e241      	b.n	800a354 <_dtoa_r+0x95c>
 8009ed0:	07f2      	lsls	r2, r6, #31
 8009ed2:	d505      	bpl.n	8009ee0 <_dtoa_r+0x4e8>
 8009ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed8:	f7f6 fb96 	bl	8000608 <__aeabi_dmul>
 8009edc:	3501      	adds	r5, #1
 8009ede:	2301      	movs	r3, #1
 8009ee0:	1076      	asrs	r6, r6, #1
 8009ee2:	3708      	adds	r7, #8
 8009ee4:	e773      	b.n	8009dce <_dtoa_r+0x3d6>
 8009ee6:	2502      	movs	r5, #2
 8009ee8:	e775      	b.n	8009dd6 <_dtoa_r+0x3de>
 8009eea:	9e04      	ldr	r6, [sp, #16]
 8009eec:	465f      	mov	r7, fp
 8009eee:	e792      	b.n	8009e16 <_dtoa_r+0x41e>
 8009ef0:	9900      	ldr	r1, [sp, #0]
 8009ef2:	4b50      	ldr	r3, [pc, #320]	; (800a034 <_dtoa_r+0x63c>)
 8009ef4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ef8:	4431      	add	r1, r6
 8009efa:	9102      	str	r1, [sp, #8]
 8009efc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009efe:	eeb0 9a47 	vmov.f32	s18, s14
 8009f02:	eef0 9a67 	vmov.f32	s19, s15
 8009f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d044      	beq.n	8009f9c <_dtoa_r+0x5a4>
 8009f12:	494e      	ldr	r1, [pc, #312]	; (800a04c <_dtoa_r+0x654>)
 8009f14:	2000      	movs	r0, #0
 8009f16:	f7f6 fca1 	bl	800085c <__aeabi_ddiv>
 8009f1a:	ec53 2b19 	vmov	r2, r3, d9
 8009f1e:	f7f6 f9bb 	bl	8000298 <__aeabi_dsub>
 8009f22:	9d00      	ldr	r5, [sp, #0]
 8009f24:	ec41 0b19 	vmov	d9, r0, r1
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7f6 fe1c 	bl	8000b68 <__aeabi_d2iz>
 8009f30:	4606      	mov	r6, r0
 8009f32:	f7f6 faff 	bl	8000534 <__aeabi_i2d>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 f9ab 	bl	8000298 <__aeabi_dsub>
 8009f42:	3630      	adds	r6, #48	; 0x30
 8009f44:	f805 6b01 	strb.w	r6, [r5], #1
 8009f48:	ec53 2b19 	vmov	r2, r3, d9
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4689      	mov	r9, r1
 8009f50:	f7f6 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d164      	bne.n	800a022 <_dtoa_r+0x62a>
 8009f58:	4642      	mov	r2, r8
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	4937      	ldr	r1, [pc, #220]	; (800a03c <_dtoa_r+0x644>)
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7f6 f99a 	bl	8000298 <__aeabi_dsub>
 8009f64:	ec53 2b19 	vmov	r2, r3, d9
 8009f68:	f7f6 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f040 80b6 	bne.w	800a0de <_dtoa_r+0x6e6>
 8009f72:	9b02      	ldr	r3, [sp, #8]
 8009f74:	429d      	cmp	r5, r3
 8009f76:	f43f af7c 	beq.w	8009e72 <_dtoa_r+0x47a>
 8009f7a:	4b31      	ldr	r3, [pc, #196]	; (800a040 <_dtoa_r+0x648>)
 8009f7c:	ec51 0b19 	vmov	r0, r1, d9
 8009f80:	2200      	movs	r2, #0
 8009f82:	f7f6 fb41 	bl	8000608 <__aeabi_dmul>
 8009f86:	4b2e      	ldr	r3, [pc, #184]	; (800a040 <_dtoa_r+0x648>)
 8009f88:	ec41 0b19 	vmov	d9, r0, r1
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	4640      	mov	r0, r8
 8009f90:	4649      	mov	r1, r9
 8009f92:	f7f6 fb39 	bl	8000608 <__aeabi_dmul>
 8009f96:	4680      	mov	r8, r0
 8009f98:	4689      	mov	r9, r1
 8009f9a:	e7c5      	b.n	8009f28 <_dtoa_r+0x530>
 8009f9c:	ec51 0b17 	vmov	r0, r1, d7
 8009fa0:	f7f6 fb32 	bl	8000608 <__aeabi_dmul>
 8009fa4:	9b02      	ldr	r3, [sp, #8]
 8009fa6:	9d00      	ldr	r5, [sp, #0]
 8009fa8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009faa:	ec41 0b19 	vmov	d9, r0, r1
 8009fae:	4649      	mov	r1, r9
 8009fb0:	4640      	mov	r0, r8
 8009fb2:	f7f6 fdd9 	bl	8000b68 <__aeabi_d2iz>
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	f7f6 fabc 	bl	8000534 <__aeabi_i2d>
 8009fbc:	3630      	adds	r6, #48	; 0x30
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	4640      	mov	r0, r8
 8009fc4:	4649      	mov	r1, r9
 8009fc6:	f7f6 f967 	bl	8000298 <__aeabi_dsub>
 8009fca:	f805 6b01 	strb.w	r6, [r5], #1
 8009fce:	9b02      	ldr	r3, [sp, #8]
 8009fd0:	429d      	cmp	r5, r3
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	4689      	mov	r9, r1
 8009fd6:	f04f 0200 	mov.w	r2, #0
 8009fda:	d124      	bne.n	800a026 <_dtoa_r+0x62e>
 8009fdc:	4b1b      	ldr	r3, [pc, #108]	; (800a04c <_dtoa_r+0x654>)
 8009fde:	ec51 0b19 	vmov	r0, r1, d9
 8009fe2:	f7f6 f95b 	bl	800029c <__adddf3>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	460b      	mov	r3, r1
 8009fea:	4640      	mov	r0, r8
 8009fec:	4649      	mov	r1, r9
 8009fee:	f7f6 fd9b 	bl	8000b28 <__aeabi_dcmpgt>
 8009ff2:	2800      	cmp	r0, #0
 8009ff4:	d173      	bne.n	800a0de <_dtoa_r+0x6e6>
 8009ff6:	ec53 2b19 	vmov	r2, r3, d9
 8009ffa:	4914      	ldr	r1, [pc, #80]	; (800a04c <_dtoa_r+0x654>)
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f7f6 f94b 	bl	8000298 <__aeabi_dsub>
 800a002:	4602      	mov	r2, r0
 800a004:	460b      	mov	r3, r1
 800a006:	4640      	mov	r0, r8
 800a008:	4649      	mov	r1, r9
 800a00a:	f7f6 fd6f 	bl	8000aec <__aeabi_dcmplt>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f af2f 	beq.w	8009e72 <_dtoa_r+0x47a>
 800a014:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a016:	1e6b      	subs	r3, r5, #1
 800a018:	930f      	str	r3, [sp, #60]	; 0x3c
 800a01a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a01e:	2b30      	cmp	r3, #48	; 0x30
 800a020:	d0f8      	beq.n	800a014 <_dtoa_r+0x61c>
 800a022:	46bb      	mov	fp, r7
 800a024:	e04a      	b.n	800a0bc <_dtoa_r+0x6c4>
 800a026:	4b06      	ldr	r3, [pc, #24]	; (800a040 <_dtoa_r+0x648>)
 800a028:	f7f6 faee 	bl	8000608 <__aeabi_dmul>
 800a02c:	4680      	mov	r8, r0
 800a02e:	4689      	mov	r9, r1
 800a030:	e7bd      	b.n	8009fae <_dtoa_r+0x5b6>
 800a032:	bf00      	nop
 800a034:	0800ca10 	.word	0x0800ca10
 800a038:	0800c9e8 	.word	0x0800c9e8
 800a03c:	3ff00000 	.word	0x3ff00000
 800a040:	40240000 	.word	0x40240000
 800a044:	401c0000 	.word	0x401c0000
 800a048:	40140000 	.word	0x40140000
 800a04c:	3fe00000 	.word	0x3fe00000
 800a050:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a054:	9d00      	ldr	r5, [sp, #0]
 800a056:	4642      	mov	r2, r8
 800a058:	464b      	mov	r3, r9
 800a05a:	4630      	mov	r0, r6
 800a05c:	4639      	mov	r1, r7
 800a05e:	f7f6 fbfd 	bl	800085c <__aeabi_ddiv>
 800a062:	f7f6 fd81 	bl	8000b68 <__aeabi_d2iz>
 800a066:	9001      	str	r0, [sp, #4]
 800a068:	f7f6 fa64 	bl	8000534 <__aeabi_i2d>
 800a06c:	4642      	mov	r2, r8
 800a06e:	464b      	mov	r3, r9
 800a070:	f7f6 faca 	bl	8000608 <__aeabi_dmul>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	4630      	mov	r0, r6
 800a07a:	4639      	mov	r1, r7
 800a07c:	f7f6 f90c 	bl	8000298 <__aeabi_dsub>
 800a080:	9e01      	ldr	r6, [sp, #4]
 800a082:	9f04      	ldr	r7, [sp, #16]
 800a084:	3630      	adds	r6, #48	; 0x30
 800a086:	f805 6b01 	strb.w	r6, [r5], #1
 800a08a:	9e00      	ldr	r6, [sp, #0]
 800a08c:	1bae      	subs	r6, r5, r6
 800a08e:	42b7      	cmp	r7, r6
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	d134      	bne.n	800a100 <_dtoa_r+0x708>
 800a096:	f7f6 f901 	bl	800029c <__adddf3>
 800a09a:	4642      	mov	r2, r8
 800a09c:	464b      	mov	r3, r9
 800a09e:	4606      	mov	r6, r0
 800a0a0:	460f      	mov	r7, r1
 800a0a2:	f7f6 fd41 	bl	8000b28 <__aeabi_dcmpgt>
 800a0a6:	b9c8      	cbnz	r0, 800a0dc <_dtoa_r+0x6e4>
 800a0a8:	4642      	mov	r2, r8
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	f7f6 fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b4:	b110      	cbz	r0, 800a0bc <_dtoa_r+0x6c4>
 800a0b6:	9b01      	ldr	r3, [sp, #4]
 800a0b8:	07db      	lsls	r3, r3, #31
 800a0ba:	d40f      	bmi.n	800a0dc <_dtoa_r+0x6e4>
 800a0bc:	4651      	mov	r1, sl
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f000 fbcc 	bl	800a85c <_Bfree>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0c8:	702b      	strb	r3, [r5, #0]
 800a0ca:	f10b 0301 	add.w	r3, fp, #1
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f43f ace2 	beq.w	8009a9c <_dtoa_r+0xa4>
 800a0d8:	601d      	str	r5, [r3, #0]
 800a0da:	e4df      	b.n	8009a9c <_dtoa_r+0xa4>
 800a0dc:	465f      	mov	r7, fp
 800a0de:	462b      	mov	r3, r5
 800a0e0:	461d      	mov	r5, r3
 800a0e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e6:	2a39      	cmp	r2, #57	; 0x39
 800a0e8:	d106      	bne.n	800a0f8 <_dtoa_r+0x700>
 800a0ea:	9a00      	ldr	r2, [sp, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d1f7      	bne.n	800a0e0 <_dtoa_r+0x6e8>
 800a0f0:	9900      	ldr	r1, [sp, #0]
 800a0f2:	2230      	movs	r2, #48	; 0x30
 800a0f4:	3701      	adds	r7, #1
 800a0f6:	700a      	strb	r2, [r1, #0]
 800a0f8:	781a      	ldrb	r2, [r3, #0]
 800a0fa:	3201      	adds	r2, #1
 800a0fc:	701a      	strb	r2, [r3, #0]
 800a0fe:	e790      	b.n	800a022 <_dtoa_r+0x62a>
 800a100:	4ba3      	ldr	r3, [pc, #652]	; (800a390 <_dtoa_r+0x998>)
 800a102:	2200      	movs	r2, #0
 800a104:	f7f6 fa80 	bl	8000608 <__aeabi_dmul>
 800a108:	2200      	movs	r2, #0
 800a10a:	2300      	movs	r3, #0
 800a10c:	4606      	mov	r6, r0
 800a10e:	460f      	mov	r7, r1
 800a110:	f7f6 fce2 	bl	8000ad8 <__aeabi_dcmpeq>
 800a114:	2800      	cmp	r0, #0
 800a116:	d09e      	beq.n	800a056 <_dtoa_r+0x65e>
 800a118:	e7d0      	b.n	800a0bc <_dtoa_r+0x6c4>
 800a11a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11c:	2a00      	cmp	r2, #0
 800a11e:	f000 80ca 	beq.w	800a2b6 <_dtoa_r+0x8be>
 800a122:	9a07      	ldr	r2, [sp, #28]
 800a124:	2a01      	cmp	r2, #1
 800a126:	f300 80ad 	bgt.w	800a284 <_dtoa_r+0x88c>
 800a12a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	f000 80a5 	beq.w	800a27c <_dtoa_r+0x884>
 800a132:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a136:	9e08      	ldr	r6, [sp, #32]
 800a138:	9d05      	ldr	r5, [sp, #20]
 800a13a:	9a05      	ldr	r2, [sp, #20]
 800a13c:	441a      	add	r2, r3
 800a13e:	9205      	str	r2, [sp, #20]
 800a140:	9a06      	ldr	r2, [sp, #24]
 800a142:	2101      	movs	r1, #1
 800a144:	441a      	add	r2, r3
 800a146:	4620      	mov	r0, r4
 800a148:	9206      	str	r2, [sp, #24]
 800a14a:	f000 fc3d 	bl	800a9c8 <__i2b>
 800a14e:	4607      	mov	r7, r0
 800a150:	b165      	cbz	r5, 800a16c <_dtoa_r+0x774>
 800a152:	9b06      	ldr	r3, [sp, #24]
 800a154:	2b00      	cmp	r3, #0
 800a156:	dd09      	ble.n	800a16c <_dtoa_r+0x774>
 800a158:	42ab      	cmp	r3, r5
 800a15a:	9a05      	ldr	r2, [sp, #20]
 800a15c:	bfa8      	it	ge
 800a15e:	462b      	movge	r3, r5
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	9205      	str	r2, [sp, #20]
 800a164:	9a06      	ldr	r2, [sp, #24]
 800a166:	1aed      	subs	r5, r5, r3
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	9306      	str	r3, [sp, #24]
 800a16c:	9b08      	ldr	r3, [sp, #32]
 800a16e:	b1f3      	cbz	r3, 800a1ae <_dtoa_r+0x7b6>
 800a170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 80a3 	beq.w	800a2be <_dtoa_r+0x8c6>
 800a178:	2e00      	cmp	r6, #0
 800a17a:	dd10      	ble.n	800a19e <_dtoa_r+0x7a6>
 800a17c:	4639      	mov	r1, r7
 800a17e:	4632      	mov	r2, r6
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fce1 	bl	800ab48 <__pow5mult>
 800a186:	4652      	mov	r2, sl
 800a188:	4601      	mov	r1, r0
 800a18a:	4607      	mov	r7, r0
 800a18c:	4620      	mov	r0, r4
 800a18e:	f000 fc31 	bl	800a9f4 <__multiply>
 800a192:	4651      	mov	r1, sl
 800a194:	4680      	mov	r8, r0
 800a196:	4620      	mov	r0, r4
 800a198:	f000 fb60 	bl	800a85c <_Bfree>
 800a19c:	46c2      	mov	sl, r8
 800a19e:	9b08      	ldr	r3, [sp, #32]
 800a1a0:	1b9a      	subs	r2, r3, r6
 800a1a2:	d004      	beq.n	800a1ae <_dtoa_r+0x7b6>
 800a1a4:	4651      	mov	r1, sl
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f000 fcce 	bl	800ab48 <__pow5mult>
 800a1ac:	4682      	mov	sl, r0
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 fc09 	bl	800a9c8 <__i2b>
 800a1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	f340 8081 	ble.w	800a2c2 <_dtoa_r+0x8ca>
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	4601      	mov	r1, r0
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	f000 fcbf 	bl	800ab48 <__pow5mult>
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	4606      	mov	r6, r0
 800a1d0:	dd7a      	ble.n	800a2c8 <_dtoa_r+0x8d0>
 800a1d2:	f04f 0800 	mov.w	r8, #0
 800a1d6:	6933      	ldr	r3, [r6, #16]
 800a1d8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1dc:	6918      	ldr	r0, [r3, #16]
 800a1de:	f000 fba5 	bl	800a92c <__hi0bits>
 800a1e2:	f1c0 0020 	rsb	r0, r0, #32
 800a1e6:	9b06      	ldr	r3, [sp, #24]
 800a1e8:	4418      	add	r0, r3
 800a1ea:	f010 001f 	ands.w	r0, r0, #31
 800a1ee:	f000 8094 	beq.w	800a31a <_dtoa_r+0x922>
 800a1f2:	f1c0 0320 	rsb	r3, r0, #32
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	f340 8085 	ble.w	800a306 <_dtoa_r+0x90e>
 800a1fc:	9b05      	ldr	r3, [sp, #20]
 800a1fe:	f1c0 001c 	rsb	r0, r0, #28
 800a202:	4403      	add	r3, r0
 800a204:	9305      	str	r3, [sp, #20]
 800a206:	9b06      	ldr	r3, [sp, #24]
 800a208:	4403      	add	r3, r0
 800a20a:	4405      	add	r5, r0
 800a20c:	9306      	str	r3, [sp, #24]
 800a20e:	9b05      	ldr	r3, [sp, #20]
 800a210:	2b00      	cmp	r3, #0
 800a212:	dd05      	ble.n	800a220 <_dtoa_r+0x828>
 800a214:	4651      	mov	r1, sl
 800a216:	461a      	mov	r2, r3
 800a218:	4620      	mov	r0, r4
 800a21a:	f000 fcef 	bl	800abfc <__lshift>
 800a21e:	4682      	mov	sl, r0
 800a220:	9b06      	ldr	r3, [sp, #24]
 800a222:	2b00      	cmp	r3, #0
 800a224:	dd05      	ble.n	800a232 <_dtoa_r+0x83a>
 800a226:	4631      	mov	r1, r6
 800a228:	461a      	mov	r2, r3
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fce6 	bl	800abfc <__lshift>
 800a230:	4606      	mov	r6, r0
 800a232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a234:	2b00      	cmp	r3, #0
 800a236:	d072      	beq.n	800a31e <_dtoa_r+0x926>
 800a238:	4631      	mov	r1, r6
 800a23a:	4650      	mov	r0, sl
 800a23c:	f000 fd4a 	bl	800acd4 <__mcmp>
 800a240:	2800      	cmp	r0, #0
 800a242:	da6c      	bge.n	800a31e <_dtoa_r+0x926>
 800a244:	2300      	movs	r3, #0
 800a246:	4651      	mov	r1, sl
 800a248:	220a      	movs	r2, #10
 800a24a:	4620      	mov	r0, r4
 800a24c:	f000 fb28 	bl	800a8a0 <__multadd>
 800a250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a252:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a256:	4682      	mov	sl, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 81b0 	beq.w	800a5be <_dtoa_r+0xbc6>
 800a25e:	2300      	movs	r3, #0
 800a260:	4639      	mov	r1, r7
 800a262:	220a      	movs	r2, #10
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb1b 	bl	800a8a0 <__multadd>
 800a26a:	9b01      	ldr	r3, [sp, #4]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	4607      	mov	r7, r0
 800a270:	f300 8096 	bgt.w	800a3a0 <_dtoa_r+0x9a8>
 800a274:	9b07      	ldr	r3, [sp, #28]
 800a276:	2b02      	cmp	r3, #2
 800a278:	dc59      	bgt.n	800a32e <_dtoa_r+0x936>
 800a27a:	e091      	b.n	800a3a0 <_dtoa_r+0x9a8>
 800a27c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a27e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a282:	e758      	b.n	800a136 <_dtoa_r+0x73e>
 800a284:	9b04      	ldr	r3, [sp, #16]
 800a286:	1e5e      	subs	r6, r3, #1
 800a288:	9b08      	ldr	r3, [sp, #32]
 800a28a:	42b3      	cmp	r3, r6
 800a28c:	bfbf      	itttt	lt
 800a28e:	9b08      	ldrlt	r3, [sp, #32]
 800a290:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a292:	9608      	strlt	r6, [sp, #32]
 800a294:	1af3      	sublt	r3, r6, r3
 800a296:	bfb4      	ite	lt
 800a298:	18d2      	addlt	r2, r2, r3
 800a29a:	1b9e      	subge	r6, r3, r6
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	bfbc      	itt	lt
 800a2a0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a2a2:	2600      	movlt	r6, #0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	bfb7      	itett	lt
 800a2a8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a2ac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a2b0:	1a9d      	sublt	r5, r3, r2
 800a2b2:	2300      	movlt	r3, #0
 800a2b4:	e741      	b.n	800a13a <_dtoa_r+0x742>
 800a2b6:	9e08      	ldr	r6, [sp, #32]
 800a2b8:	9d05      	ldr	r5, [sp, #20]
 800a2ba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a2bc:	e748      	b.n	800a150 <_dtoa_r+0x758>
 800a2be:	9a08      	ldr	r2, [sp, #32]
 800a2c0:	e770      	b.n	800a1a4 <_dtoa_r+0x7ac>
 800a2c2:	9b07      	ldr	r3, [sp, #28]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	dc19      	bgt.n	800a2fc <_dtoa_r+0x904>
 800a2c8:	9b02      	ldr	r3, [sp, #8]
 800a2ca:	b9bb      	cbnz	r3, 800a2fc <_dtoa_r+0x904>
 800a2cc:	9b03      	ldr	r3, [sp, #12]
 800a2ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2d2:	b99b      	cbnz	r3, 800a2fc <_dtoa_r+0x904>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2da:	0d1b      	lsrs	r3, r3, #20
 800a2dc:	051b      	lsls	r3, r3, #20
 800a2de:	b183      	cbz	r3, 800a302 <_dtoa_r+0x90a>
 800a2e0:	9b05      	ldr	r3, [sp, #20]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9305      	str	r3, [sp, #20]
 800a2e6:	9b06      	ldr	r3, [sp, #24]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	9306      	str	r3, [sp, #24]
 800a2ec:	f04f 0801 	mov.w	r8, #1
 800a2f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f47f af6f 	bne.w	800a1d6 <_dtoa_r+0x7de>
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	e774      	b.n	800a1e6 <_dtoa_r+0x7ee>
 800a2fc:	f04f 0800 	mov.w	r8, #0
 800a300:	e7f6      	b.n	800a2f0 <_dtoa_r+0x8f8>
 800a302:	4698      	mov	r8, r3
 800a304:	e7f4      	b.n	800a2f0 <_dtoa_r+0x8f8>
 800a306:	d082      	beq.n	800a20e <_dtoa_r+0x816>
 800a308:	9a05      	ldr	r2, [sp, #20]
 800a30a:	331c      	adds	r3, #28
 800a30c:	441a      	add	r2, r3
 800a30e:	9205      	str	r2, [sp, #20]
 800a310:	9a06      	ldr	r2, [sp, #24]
 800a312:	441a      	add	r2, r3
 800a314:	441d      	add	r5, r3
 800a316:	9206      	str	r2, [sp, #24]
 800a318:	e779      	b.n	800a20e <_dtoa_r+0x816>
 800a31a:	4603      	mov	r3, r0
 800a31c:	e7f4      	b.n	800a308 <_dtoa_r+0x910>
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	dc37      	bgt.n	800a394 <_dtoa_r+0x99c>
 800a324:	9b07      	ldr	r3, [sp, #28]
 800a326:	2b02      	cmp	r3, #2
 800a328:	dd34      	ble.n	800a394 <_dtoa_r+0x99c>
 800a32a:	9b04      	ldr	r3, [sp, #16]
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	9b01      	ldr	r3, [sp, #4]
 800a330:	b963      	cbnz	r3, 800a34c <_dtoa_r+0x954>
 800a332:	4631      	mov	r1, r6
 800a334:	2205      	movs	r2, #5
 800a336:	4620      	mov	r0, r4
 800a338:	f000 fab2 	bl	800a8a0 <__multadd>
 800a33c:	4601      	mov	r1, r0
 800a33e:	4606      	mov	r6, r0
 800a340:	4650      	mov	r0, sl
 800a342:	f000 fcc7 	bl	800acd4 <__mcmp>
 800a346:	2800      	cmp	r0, #0
 800a348:	f73f adbb 	bgt.w	8009ec2 <_dtoa_r+0x4ca>
 800a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34e:	9d00      	ldr	r5, [sp, #0]
 800a350:	ea6f 0b03 	mvn.w	fp, r3
 800a354:	f04f 0800 	mov.w	r8, #0
 800a358:	4631      	mov	r1, r6
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 fa7e 	bl	800a85c <_Bfree>
 800a360:	2f00      	cmp	r7, #0
 800a362:	f43f aeab 	beq.w	800a0bc <_dtoa_r+0x6c4>
 800a366:	f1b8 0f00 	cmp.w	r8, #0
 800a36a:	d005      	beq.n	800a378 <_dtoa_r+0x980>
 800a36c:	45b8      	cmp	r8, r7
 800a36e:	d003      	beq.n	800a378 <_dtoa_r+0x980>
 800a370:	4641      	mov	r1, r8
 800a372:	4620      	mov	r0, r4
 800a374:	f000 fa72 	bl	800a85c <_Bfree>
 800a378:	4639      	mov	r1, r7
 800a37a:	4620      	mov	r0, r4
 800a37c:	f000 fa6e 	bl	800a85c <_Bfree>
 800a380:	e69c      	b.n	800a0bc <_dtoa_r+0x6c4>
 800a382:	2600      	movs	r6, #0
 800a384:	4637      	mov	r7, r6
 800a386:	e7e1      	b.n	800a34c <_dtoa_r+0x954>
 800a388:	46bb      	mov	fp, r7
 800a38a:	4637      	mov	r7, r6
 800a38c:	e599      	b.n	8009ec2 <_dtoa_r+0x4ca>
 800a38e:	bf00      	nop
 800a390:	40240000 	.word	0x40240000
 800a394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a396:	2b00      	cmp	r3, #0
 800a398:	f000 80c8 	beq.w	800a52c <_dtoa_r+0xb34>
 800a39c:	9b04      	ldr	r3, [sp, #16]
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	2d00      	cmp	r5, #0
 800a3a2:	dd05      	ble.n	800a3b0 <_dtoa_r+0x9b8>
 800a3a4:	4639      	mov	r1, r7
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 fc27 	bl	800abfc <__lshift>
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	f1b8 0f00 	cmp.w	r8, #0
 800a3b4:	d05b      	beq.n	800a46e <_dtoa_r+0xa76>
 800a3b6:	6879      	ldr	r1, [r7, #4]
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f000 fa0f 	bl	800a7dc <_Balloc>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	b928      	cbnz	r0, 800a3ce <_dtoa_r+0x9d6>
 800a3c2:	4b83      	ldr	r3, [pc, #524]	; (800a5d0 <_dtoa_r+0xbd8>)
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a3ca:	f7ff bb2e 	b.w	8009a2a <_dtoa_r+0x32>
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	3202      	adds	r2, #2
 800a3d2:	0092      	lsls	r2, r2, #2
 800a3d4:	f107 010c 	add.w	r1, r7, #12
 800a3d8:	300c      	adds	r0, #12
 800a3da:	f000 ffab 	bl	800b334 <memcpy>
 800a3de:	2201      	movs	r2, #1
 800a3e0:	4629      	mov	r1, r5
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f000 fc0a 	bl	800abfc <__lshift>
 800a3e8:	9b00      	ldr	r3, [sp, #0]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	9308      	str	r3, [sp, #32]
 800a3f6:	9b02      	ldr	r3, [sp, #8]
 800a3f8:	f003 0301 	and.w	r3, r3, #1
 800a3fc:	46b8      	mov	r8, r7
 800a3fe:	9306      	str	r3, [sp, #24]
 800a400:	4607      	mov	r7, r0
 800a402:	9b04      	ldr	r3, [sp, #16]
 800a404:	4631      	mov	r1, r6
 800a406:	3b01      	subs	r3, #1
 800a408:	4650      	mov	r0, sl
 800a40a:	9301      	str	r3, [sp, #4]
 800a40c:	f7ff fa69 	bl	80098e2 <quorem>
 800a410:	4641      	mov	r1, r8
 800a412:	9002      	str	r0, [sp, #8]
 800a414:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a418:	4650      	mov	r0, sl
 800a41a:	f000 fc5b 	bl	800acd4 <__mcmp>
 800a41e:	463a      	mov	r2, r7
 800a420:	9005      	str	r0, [sp, #20]
 800a422:	4631      	mov	r1, r6
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fc71 	bl	800ad0c <__mdiff>
 800a42a:	68c2      	ldr	r2, [r0, #12]
 800a42c:	4605      	mov	r5, r0
 800a42e:	bb02      	cbnz	r2, 800a472 <_dtoa_r+0xa7a>
 800a430:	4601      	mov	r1, r0
 800a432:	4650      	mov	r0, sl
 800a434:	f000 fc4e 	bl	800acd4 <__mcmp>
 800a438:	4602      	mov	r2, r0
 800a43a:	4629      	mov	r1, r5
 800a43c:	4620      	mov	r0, r4
 800a43e:	9209      	str	r2, [sp, #36]	; 0x24
 800a440:	f000 fa0c 	bl	800a85c <_Bfree>
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a448:	9d04      	ldr	r5, [sp, #16]
 800a44a:	ea43 0102 	orr.w	r1, r3, r2
 800a44e:	9b06      	ldr	r3, [sp, #24]
 800a450:	4319      	orrs	r1, r3
 800a452:	d110      	bne.n	800a476 <_dtoa_r+0xa7e>
 800a454:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a458:	d029      	beq.n	800a4ae <_dtoa_r+0xab6>
 800a45a:	9b05      	ldr	r3, [sp, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dd02      	ble.n	800a466 <_dtoa_r+0xa6e>
 800a460:	9b02      	ldr	r3, [sp, #8]
 800a462:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a466:	9b01      	ldr	r3, [sp, #4]
 800a468:	f883 9000 	strb.w	r9, [r3]
 800a46c:	e774      	b.n	800a358 <_dtoa_r+0x960>
 800a46e:	4638      	mov	r0, r7
 800a470:	e7ba      	b.n	800a3e8 <_dtoa_r+0x9f0>
 800a472:	2201      	movs	r2, #1
 800a474:	e7e1      	b.n	800a43a <_dtoa_r+0xa42>
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	db04      	blt.n	800a486 <_dtoa_r+0xa8e>
 800a47c:	9907      	ldr	r1, [sp, #28]
 800a47e:	430b      	orrs	r3, r1
 800a480:	9906      	ldr	r1, [sp, #24]
 800a482:	430b      	orrs	r3, r1
 800a484:	d120      	bne.n	800a4c8 <_dtoa_r+0xad0>
 800a486:	2a00      	cmp	r2, #0
 800a488:	dded      	ble.n	800a466 <_dtoa_r+0xa6e>
 800a48a:	4651      	mov	r1, sl
 800a48c:	2201      	movs	r2, #1
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 fbb4 	bl	800abfc <__lshift>
 800a494:	4631      	mov	r1, r6
 800a496:	4682      	mov	sl, r0
 800a498:	f000 fc1c 	bl	800acd4 <__mcmp>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dc03      	bgt.n	800a4a8 <_dtoa_r+0xab0>
 800a4a0:	d1e1      	bne.n	800a466 <_dtoa_r+0xa6e>
 800a4a2:	f019 0f01 	tst.w	r9, #1
 800a4a6:	d0de      	beq.n	800a466 <_dtoa_r+0xa6e>
 800a4a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4ac:	d1d8      	bne.n	800a460 <_dtoa_r+0xa68>
 800a4ae:	9a01      	ldr	r2, [sp, #4]
 800a4b0:	2339      	movs	r3, #57	; 0x39
 800a4b2:	7013      	strb	r3, [r2, #0]
 800a4b4:	462b      	mov	r3, r5
 800a4b6:	461d      	mov	r5, r3
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4be:	2a39      	cmp	r2, #57	; 0x39
 800a4c0:	d06c      	beq.n	800a59c <_dtoa_r+0xba4>
 800a4c2:	3201      	adds	r2, #1
 800a4c4:	701a      	strb	r2, [r3, #0]
 800a4c6:	e747      	b.n	800a358 <_dtoa_r+0x960>
 800a4c8:	2a00      	cmp	r2, #0
 800a4ca:	dd07      	ble.n	800a4dc <_dtoa_r+0xae4>
 800a4cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a4d0:	d0ed      	beq.n	800a4ae <_dtoa_r+0xab6>
 800a4d2:	9a01      	ldr	r2, [sp, #4]
 800a4d4:	f109 0301 	add.w	r3, r9, #1
 800a4d8:	7013      	strb	r3, [r2, #0]
 800a4da:	e73d      	b.n	800a358 <_dtoa_r+0x960>
 800a4dc:	9b04      	ldr	r3, [sp, #16]
 800a4de:	9a08      	ldr	r2, [sp, #32]
 800a4e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d043      	beq.n	800a570 <_dtoa_r+0xb78>
 800a4e8:	4651      	mov	r1, sl
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	220a      	movs	r2, #10
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f000 f9d6 	bl	800a8a0 <__multadd>
 800a4f4:	45b8      	cmp	r8, r7
 800a4f6:	4682      	mov	sl, r0
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	f04f 020a 	mov.w	r2, #10
 800a500:	4641      	mov	r1, r8
 800a502:	4620      	mov	r0, r4
 800a504:	d107      	bne.n	800a516 <_dtoa_r+0xb1e>
 800a506:	f000 f9cb 	bl	800a8a0 <__multadd>
 800a50a:	4680      	mov	r8, r0
 800a50c:	4607      	mov	r7, r0
 800a50e:	9b04      	ldr	r3, [sp, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	9304      	str	r3, [sp, #16]
 800a514:	e775      	b.n	800a402 <_dtoa_r+0xa0a>
 800a516:	f000 f9c3 	bl	800a8a0 <__multadd>
 800a51a:	4639      	mov	r1, r7
 800a51c:	4680      	mov	r8, r0
 800a51e:	2300      	movs	r3, #0
 800a520:	220a      	movs	r2, #10
 800a522:	4620      	mov	r0, r4
 800a524:	f000 f9bc 	bl	800a8a0 <__multadd>
 800a528:	4607      	mov	r7, r0
 800a52a:	e7f0      	b.n	800a50e <_dtoa_r+0xb16>
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	9d00      	ldr	r5, [sp, #0]
 800a532:	4631      	mov	r1, r6
 800a534:	4650      	mov	r0, sl
 800a536:	f7ff f9d4 	bl	80098e2 <quorem>
 800a53a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a53e:	9b00      	ldr	r3, [sp, #0]
 800a540:	f805 9b01 	strb.w	r9, [r5], #1
 800a544:	1aea      	subs	r2, r5, r3
 800a546:	9b01      	ldr	r3, [sp, #4]
 800a548:	4293      	cmp	r3, r2
 800a54a:	dd07      	ble.n	800a55c <_dtoa_r+0xb64>
 800a54c:	4651      	mov	r1, sl
 800a54e:	2300      	movs	r3, #0
 800a550:	220a      	movs	r2, #10
 800a552:	4620      	mov	r0, r4
 800a554:	f000 f9a4 	bl	800a8a0 <__multadd>
 800a558:	4682      	mov	sl, r0
 800a55a:	e7ea      	b.n	800a532 <_dtoa_r+0xb3a>
 800a55c:	9b01      	ldr	r3, [sp, #4]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	bfc8      	it	gt
 800a562:	461d      	movgt	r5, r3
 800a564:	9b00      	ldr	r3, [sp, #0]
 800a566:	bfd8      	it	le
 800a568:	2501      	movle	r5, #1
 800a56a:	441d      	add	r5, r3
 800a56c:	f04f 0800 	mov.w	r8, #0
 800a570:	4651      	mov	r1, sl
 800a572:	2201      	movs	r2, #1
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fb41 	bl	800abfc <__lshift>
 800a57a:	4631      	mov	r1, r6
 800a57c:	4682      	mov	sl, r0
 800a57e:	f000 fba9 	bl	800acd4 <__mcmp>
 800a582:	2800      	cmp	r0, #0
 800a584:	dc96      	bgt.n	800a4b4 <_dtoa_r+0xabc>
 800a586:	d102      	bne.n	800a58e <_dtoa_r+0xb96>
 800a588:	f019 0f01 	tst.w	r9, #1
 800a58c:	d192      	bne.n	800a4b4 <_dtoa_r+0xabc>
 800a58e:	462b      	mov	r3, r5
 800a590:	461d      	mov	r5, r3
 800a592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a596:	2a30      	cmp	r2, #48	; 0x30
 800a598:	d0fa      	beq.n	800a590 <_dtoa_r+0xb98>
 800a59a:	e6dd      	b.n	800a358 <_dtoa_r+0x960>
 800a59c:	9a00      	ldr	r2, [sp, #0]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d189      	bne.n	800a4b6 <_dtoa_r+0xabe>
 800a5a2:	f10b 0b01 	add.w	fp, fp, #1
 800a5a6:	2331      	movs	r3, #49	; 0x31
 800a5a8:	e796      	b.n	800a4d8 <_dtoa_r+0xae0>
 800a5aa:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <_dtoa_r+0xbdc>)
 800a5ac:	f7ff ba99 	b.w	8009ae2 <_dtoa_r+0xea>
 800a5b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f47f aa6d 	bne.w	8009a92 <_dtoa_r+0x9a>
 800a5b8:	4b07      	ldr	r3, [pc, #28]	; (800a5d8 <_dtoa_r+0xbe0>)
 800a5ba:	f7ff ba92 	b.w	8009ae2 <_dtoa_r+0xea>
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	dcb5      	bgt.n	800a530 <_dtoa_r+0xb38>
 800a5c4:	9b07      	ldr	r3, [sp, #28]
 800a5c6:	2b02      	cmp	r3, #2
 800a5c8:	f73f aeb1 	bgt.w	800a32e <_dtoa_r+0x936>
 800a5cc:	e7b0      	b.n	800a530 <_dtoa_r+0xb38>
 800a5ce:	bf00      	nop
 800a5d0:	0800c978 	.word	0x0800c978
 800a5d4:	0800c8d8 	.word	0x0800c8d8
 800a5d8:	0800c8fc 	.word	0x0800c8fc

0800a5dc <_free_r>:
 800a5dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5de:	2900      	cmp	r1, #0
 800a5e0:	d044      	beq.n	800a66c <_free_r+0x90>
 800a5e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5e6:	9001      	str	r0, [sp, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a5ee:	bfb8      	it	lt
 800a5f0:	18e4      	addlt	r4, r4, r3
 800a5f2:	f000 f8e7 	bl	800a7c4 <__malloc_lock>
 800a5f6:	4a1e      	ldr	r2, [pc, #120]	; (800a670 <_free_r+0x94>)
 800a5f8:	9801      	ldr	r0, [sp, #4]
 800a5fa:	6813      	ldr	r3, [r2, #0]
 800a5fc:	b933      	cbnz	r3, 800a60c <_free_r+0x30>
 800a5fe:	6063      	str	r3, [r4, #4]
 800a600:	6014      	str	r4, [r2, #0]
 800a602:	b003      	add	sp, #12
 800a604:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a608:	f000 b8e2 	b.w	800a7d0 <__malloc_unlock>
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	d908      	bls.n	800a622 <_free_r+0x46>
 800a610:	6825      	ldr	r5, [r4, #0]
 800a612:	1961      	adds	r1, r4, r5
 800a614:	428b      	cmp	r3, r1
 800a616:	bf01      	itttt	eq
 800a618:	6819      	ldreq	r1, [r3, #0]
 800a61a:	685b      	ldreq	r3, [r3, #4]
 800a61c:	1949      	addeq	r1, r1, r5
 800a61e:	6021      	streq	r1, [r4, #0]
 800a620:	e7ed      	b.n	800a5fe <_free_r+0x22>
 800a622:	461a      	mov	r2, r3
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	b10b      	cbz	r3, 800a62c <_free_r+0x50>
 800a628:	42a3      	cmp	r3, r4
 800a62a:	d9fa      	bls.n	800a622 <_free_r+0x46>
 800a62c:	6811      	ldr	r1, [r2, #0]
 800a62e:	1855      	adds	r5, r2, r1
 800a630:	42a5      	cmp	r5, r4
 800a632:	d10b      	bne.n	800a64c <_free_r+0x70>
 800a634:	6824      	ldr	r4, [r4, #0]
 800a636:	4421      	add	r1, r4
 800a638:	1854      	adds	r4, r2, r1
 800a63a:	42a3      	cmp	r3, r4
 800a63c:	6011      	str	r1, [r2, #0]
 800a63e:	d1e0      	bne.n	800a602 <_free_r+0x26>
 800a640:	681c      	ldr	r4, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	6053      	str	r3, [r2, #4]
 800a646:	440c      	add	r4, r1
 800a648:	6014      	str	r4, [r2, #0]
 800a64a:	e7da      	b.n	800a602 <_free_r+0x26>
 800a64c:	d902      	bls.n	800a654 <_free_r+0x78>
 800a64e:	230c      	movs	r3, #12
 800a650:	6003      	str	r3, [r0, #0]
 800a652:	e7d6      	b.n	800a602 <_free_r+0x26>
 800a654:	6825      	ldr	r5, [r4, #0]
 800a656:	1961      	adds	r1, r4, r5
 800a658:	428b      	cmp	r3, r1
 800a65a:	bf04      	itt	eq
 800a65c:	6819      	ldreq	r1, [r3, #0]
 800a65e:	685b      	ldreq	r3, [r3, #4]
 800a660:	6063      	str	r3, [r4, #4]
 800a662:	bf04      	itt	eq
 800a664:	1949      	addeq	r1, r1, r5
 800a666:	6021      	streq	r1, [r4, #0]
 800a668:	6054      	str	r4, [r2, #4]
 800a66a:	e7ca      	b.n	800a602 <_free_r+0x26>
 800a66c:	b003      	add	sp, #12
 800a66e:	bd30      	pop	{r4, r5, pc}
 800a670:	20002108 	.word	0x20002108

0800a674 <malloc>:
 800a674:	4b02      	ldr	r3, [pc, #8]	; (800a680 <malloc+0xc>)
 800a676:	4601      	mov	r1, r0
 800a678:	6818      	ldr	r0, [r3, #0]
 800a67a:	f000 b823 	b.w	800a6c4 <_malloc_r>
 800a67e:	bf00      	nop
 800a680:	20000154 	.word	0x20000154

0800a684 <sbrk_aligned>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	4e0e      	ldr	r6, [pc, #56]	; (800a6c0 <sbrk_aligned+0x3c>)
 800a688:	460c      	mov	r4, r1
 800a68a:	6831      	ldr	r1, [r6, #0]
 800a68c:	4605      	mov	r5, r0
 800a68e:	b911      	cbnz	r1, 800a696 <sbrk_aligned+0x12>
 800a690:	f000 fe40 	bl	800b314 <_sbrk_r>
 800a694:	6030      	str	r0, [r6, #0]
 800a696:	4621      	mov	r1, r4
 800a698:	4628      	mov	r0, r5
 800a69a:	f000 fe3b 	bl	800b314 <_sbrk_r>
 800a69e:	1c43      	adds	r3, r0, #1
 800a6a0:	d00a      	beq.n	800a6b8 <sbrk_aligned+0x34>
 800a6a2:	1cc4      	adds	r4, r0, #3
 800a6a4:	f024 0403 	bic.w	r4, r4, #3
 800a6a8:	42a0      	cmp	r0, r4
 800a6aa:	d007      	beq.n	800a6bc <sbrk_aligned+0x38>
 800a6ac:	1a21      	subs	r1, r4, r0
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 fe30 	bl	800b314 <_sbrk_r>
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d101      	bne.n	800a6bc <sbrk_aligned+0x38>
 800a6b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a6bc:	4620      	mov	r0, r4
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	2000210c 	.word	0x2000210c

0800a6c4 <_malloc_r>:
 800a6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c8:	1ccd      	adds	r5, r1, #3
 800a6ca:	f025 0503 	bic.w	r5, r5, #3
 800a6ce:	3508      	adds	r5, #8
 800a6d0:	2d0c      	cmp	r5, #12
 800a6d2:	bf38      	it	cc
 800a6d4:	250c      	movcc	r5, #12
 800a6d6:	2d00      	cmp	r5, #0
 800a6d8:	4607      	mov	r7, r0
 800a6da:	db01      	blt.n	800a6e0 <_malloc_r+0x1c>
 800a6dc:	42a9      	cmp	r1, r5
 800a6de:	d905      	bls.n	800a6ec <_malloc_r+0x28>
 800a6e0:	230c      	movs	r3, #12
 800a6e2:	603b      	str	r3, [r7, #0]
 800a6e4:	2600      	movs	r6, #0
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a7c0 <_malloc_r+0xfc>
 800a6f0:	f000 f868 	bl	800a7c4 <__malloc_lock>
 800a6f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a6f8:	461c      	mov	r4, r3
 800a6fa:	bb5c      	cbnz	r4, 800a754 <_malloc_r+0x90>
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	4638      	mov	r0, r7
 800a700:	f7ff ffc0 	bl	800a684 <sbrk_aligned>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	4604      	mov	r4, r0
 800a708:	d155      	bne.n	800a7b6 <_malloc_r+0xf2>
 800a70a:	f8d8 4000 	ldr.w	r4, [r8]
 800a70e:	4626      	mov	r6, r4
 800a710:	2e00      	cmp	r6, #0
 800a712:	d145      	bne.n	800a7a0 <_malloc_r+0xdc>
 800a714:	2c00      	cmp	r4, #0
 800a716:	d048      	beq.n	800a7aa <_malloc_r+0xe6>
 800a718:	6823      	ldr	r3, [r4, #0]
 800a71a:	4631      	mov	r1, r6
 800a71c:	4638      	mov	r0, r7
 800a71e:	eb04 0903 	add.w	r9, r4, r3
 800a722:	f000 fdf7 	bl	800b314 <_sbrk_r>
 800a726:	4581      	cmp	r9, r0
 800a728:	d13f      	bne.n	800a7aa <_malloc_r+0xe6>
 800a72a:	6821      	ldr	r1, [r4, #0]
 800a72c:	1a6d      	subs	r5, r5, r1
 800a72e:	4629      	mov	r1, r5
 800a730:	4638      	mov	r0, r7
 800a732:	f7ff ffa7 	bl	800a684 <sbrk_aligned>
 800a736:	3001      	adds	r0, #1
 800a738:	d037      	beq.n	800a7aa <_malloc_r+0xe6>
 800a73a:	6823      	ldr	r3, [r4, #0]
 800a73c:	442b      	add	r3, r5
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	f8d8 3000 	ldr.w	r3, [r8]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d038      	beq.n	800a7ba <_malloc_r+0xf6>
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	42a2      	cmp	r2, r4
 800a74c:	d12b      	bne.n	800a7a6 <_malloc_r+0xe2>
 800a74e:	2200      	movs	r2, #0
 800a750:	605a      	str	r2, [r3, #4]
 800a752:	e00f      	b.n	800a774 <_malloc_r+0xb0>
 800a754:	6822      	ldr	r2, [r4, #0]
 800a756:	1b52      	subs	r2, r2, r5
 800a758:	d41f      	bmi.n	800a79a <_malloc_r+0xd6>
 800a75a:	2a0b      	cmp	r2, #11
 800a75c:	d917      	bls.n	800a78e <_malloc_r+0xca>
 800a75e:	1961      	adds	r1, r4, r5
 800a760:	42a3      	cmp	r3, r4
 800a762:	6025      	str	r5, [r4, #0]
 800a764:	bf18      	it	ne
 800a766:	6059      	strne	r1, [r3, #4]
 800a768:	6863      	ldr	r3, [r4, #4]
 800a76a:	bf08      	it	eq
 800a76c:	f8c8 1000 	streq.w	r1, [r8]
 800a770:	5162      	str	r2, [r4, r5]
 800a772:	604b      	str	r3, [r1, #4]
 800a774:	4638      	mov	r0, r7
 800a776:	f104 060b 	add.w	r6, r4, #11
 800a77a:	f000 f829 	bl	800a7d0 <__malloc_unlock>
 800a77e:	f026 0607 	bic.w	r6, r6, #7
 800a782:	1d23      	adds	r3, r4, #4
 800a784:	1af2      	subs	r2, r6, r3
 800a786:	d0ae      	beq.n	800a6e6 <_malloc_r+0x22>
 800a788:	1b9b      	subs	r3, r3, r6
 800a78a:	50a3      	str	r3, [r4, r2]
 800a78c:	e7ab      	b.n	800a6e6 <_malloc_r+0x22>
 800a78e:	42a3      	cmp	r3, r4
 800a790:	6862      	ldr	r2, [r4, #4]
 800a792:	d1dd      	bne.n	800a750 <_malloc_r+0x8c>
 800a794:	f8c8 2000 	str.w	r2, [r8]
 800a798:	e7ec      	b.n	800a774 <_malloc_r+0xb0>
 800a79a:	4623      	mov	r3, r4
 800a79c:	6864      	ldr	r4, [r4, #4]
 800a79e:	e7ac      	b.n	800a6fa <_malloc_r+0x36>
 800a7a0:	4634      	mov	r4, r6
 800a7a2:	6876      	ldr	r6, [r6, #4]
 800a7a4:	e7b4      	b.n	800a710 <_malloc_r+0x4c>
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	e7cc      	b.n	800a744 <_malloc_r+0x80>
 800a7aa:	230c      	movs	r3, #12
 800a7ac:	603b      	str	r3, [r7, #0]
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f000 f80e 	bl	800a7d0 <__malloc_unlock>
 800a7b4:	e797      	b.n	800a6e6 <_malloc_r+0x22>
 800a7b6:	6025      	str	r5, [r4, #0]
 800a7b8:	e7dc      	b.n	800a774 <_malloc_r+0xb0>
 800a7ba:	605b      	str	r3, [r3, #4]
 800a7bc:	deff      	udf	#255	; 0xff
 800a7be:	bf00      	nop
 800a7c0:	20002108 	.word	0x20002108

0800a7c4 <__malloc_lock>:
 800a7c4:	4801      	ldr	r0, [pc, #4]	; (800a7cc <__malloc_lock+0x8>)
 800a7c6:	f7ff b88a 	b.w	80098de <__retarget_lock_acquire_recursive>
 800a7ca:	bf00      	nop
 800a7cc:	20002104 	.word	0x20002104

0800a7d0 <__malloc_unlock>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__malloc_unlock+0x8>)
 800a7d2:	f7ff b885 	b.w	80098e0 <__retarget_lock_release_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	20002104 	.word	0x20002104

0800a7dc <_Balloc>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	69c6      	ldr	r6, [r0, #28]
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	b976      	cbnz	r6, 800a804 <_Balloc+0x28>
 800a7e6:	2010      	movs	r0, #16
 800a7e8:	f7ff ff44 	bl	800a674 <malloc>
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	61e0      	str	r0, [r4, #28]
 800a7f0:	b920      	cbnz	r0, 800a7fc <_Balloc+0x20>
 800a7f2:	4b18      	ldr	r3, [pc, #96]	; (800a854 <_Balloc+0x78>)
 800a7f4:	4818      	ldr	r0, [pc, #96]	; (800a858 <_Balloc+0x7c>)
 800a7f6:	216b      	movs	r1, #107	; 0x6b
 800a7f8:	f000 fdaa 	bl	800b350 <__assert_func>
 800a7fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a800:	6006      	str	r6, [r0, #0]
 800a802:	60c6      	str	r6, [r0, #12]
 800a804:	69e6      	ldr	r6, [r4, #28]
 800a806:	68f3      	ldr	r3, [r6, #12]
 800a808:	b183      	cbz	r3, 800a82c <_Balloc+0x50>
 800a80a:	69e3      	ldr	r3, [r4, #28]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a812:	b9b8      	cbnz	r0, 800a844 <_Balloc+0x68>
 800a814:	2101      	movs	r1, #1
 800a816:	fa01 f605 	lsl.w	r6, r1, r5
 800a81a:	1d72      	adds	r2, r6, #5
 800a81c:	0092      	lsls	r2, r2, #2
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 fdb4 	bl	800b38c <_calloc_r>
 800a824:	b160      	cbz	r0, 800a840 <_Balloc+0x64>
 800a826:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a82a:	e00e      	b.n	800a84a <_Balloc+0x6e>
 800a82c:	2221      	movs	r2, #33	; 0x21
 800a82e:	2104      	movs	r1, #4
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fdab 	bl	800b38c <_calloc_r>
 800a836:	69e3      	ldr	r3, [r4, #28]
 800a838:	60f0      	str	r0, [r6, #12]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1e4      	bne.n	800a80a <_Balloc+0x2e>
 800a840:	2000      	movs	r0, #0
 800a842:	bd70      	pop	{r4, r5, r6, pc}
 800a844:	6802      	ldr	r2, [r0, #0]
 800a846:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a84a:	2300      	movs	r3, #0
 800a84c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a850:	e7f7      	b.n	800a842 <_Balloc+0x66>
 800a852:	bf00      	nop
 800a854:	0800c909 	.word	0x0800c909
 800a858:	0800c989 	.word	0x0800c989

0800a85c <_Bfree>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	69c6      	ldr	r6, [r0, #28]
 800a860:	4605      	mov	r5, r0
 800a862:	460c      	mov	r4, r1
 800a864:	b976      	cbnz	r6, 800a884 <_Bfree+0x28>
 800a866:	2010      	movs	r0, #16
 800a868:	f7ff ff04 	bl	800a674 <malloc>
 800a86c:	4602      	mov	r2, r0
 800a86e:	61e8      	str	r0, [r5, #28]
 800a870:	b920      	cbnz	r0, 800a87c <_Bfree+0x20>
 800a872:	4b09      	ldr	r3, [pc, #36]	; (800a898 <_Bfree+0x3c>)
 800a874:	4809      	ldr	r0, [pc, #36]	; (800a89c <_Bfree+0x40>)
 800a876:	218f      	movs	r1, #143	; 0x8f
 800a878:	f000 fd6a 	bl	800b350 <__assert_func>
 800a87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a880:	6006      	str	r6, [r0, #0]
 800a882:	60c6      	str	r6, [r0, #12]
 800a884:	b13c      	cbz	r4, 800a896 <_Bfree+0x3a>
 800a886:	69eb      	ldr	r3, [r5, #28]
 800a888:	6862      	ldr	r2, [r4, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a890:	6021      	str	r1, [r4, #0]
 800a892:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	0800c909 	.word	0x0800c909
 800a89c:	0800c989 	.word	0x0800c989

0800a8a0 <__multadd>:
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	690d      	ldr	r5, [r1, #16]
 800a8a6:	4607      	mov	r7, r0
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	461e      	mov	r6, r3
 800a8ac:	f101 0c14 	add.w	ip, r1, #20
 800a8b0:	2000      	movs	r0, #0
 800a8b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8b6:	b299      	uxth	r1, r3
 800a8b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8bc:	0c1e      	lsrs	r6, r3, #16
 800a8be:	0c0b      	lsrs	r3, r1, #16
 800a8c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a8c4:	b289      	uxth	r1, r1
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8cc:	4285      	cmp	r5, r0
 800a8ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a8d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8d6:	dcec      	bgt.n	800a8b2 <__multadd+0x12>
 800a8d8:	b30e      	cbz	r6, 800a91e <__multadd+0x7e>
 800a8da:	68a3      	ldr	r3, [r4, #8]
 800a8dc:	42ab      	cmp	r3, r5
 800a8de:	dc19      	bgt.n	800a914 <__multadd+0x74>
 800a8e0:	6861      	ldr	r1, [r4, #4]
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	3101      	adds	r1, #1
 800a8e6:	f7ff ff79 	bl	800a7dc <_Balloc>
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	b928      	cbnz	r0, 800a8fa <__multadd+0x5a>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	4b0c      	ldr	r3, [pc, #48]	; (800a924 <__multadd+0x84>)
 800a8f2:	480d      	ldr	r0, [pc, #52]	; (800a928 <__multadd+0x88>)
 800a8f4:	21ba      	movs	r1, #186	; 0xba
 800a8f6:	f000 fd2b 	bl	800b350 <__assert_func>
 800a8fa:	6922      	ldr	r2, [r4, #16]
 800a8fc:	3202      	adds	r2, #2
 800a8fe:	f104 010c 	add.w	r1, r4, #12
 800a902:	0092      	lsls	r2, r2, #2
 800a904:	300c      	adds	r0, #12
 800a906:	f000 fd15 	bl	800b334 <memcpy>
 800a90a:	4621      	mov	r1, r4
 800a90c:	4638      	mov	r0, r7
 800a90e:	f7ff ffa5 	bl	800a85c <_Bfree>
 800a912:	4644      	mov	r4, r8
 800a914:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a918:	3501      	adds	r5, #1
 800a91a:	615e      	str	r6, [r3, #20]
 800a91c:	6125      	str	r5, [r4, #16]
 800a91e:	4620      	mov	r0, r4
 800a920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a924:	0800c978 	.word	0x0800c978
 800a928:	0800c989 	.word	0x0800c989

0800a92c <__hi0bits>:
 800a92c:	0c03      	lsrs	r3, r0, #16
 800a92e:	041b      	lsls	r3, r3, #16
 800a930:	b9d3      	cbnz	r3, 800a968 <__hi0bits+0x3c>
 800a932:	0400      	lsls	r0, r0, #16
 800a934:	2310      	movs	r3, #16
 800a936:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a93a:	bf04      	itt	eq
 800a93c:	0200      	lsleq	r0, r0, #8
 800a93e:	3308      	addeq	r3, #8
 800a940:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a944:	bf04      	itt	eq
 800a946:	0100      	lsleq	r0, r0, #4
 800a948:	3304      	addeq	r3, #4
 800a94a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a94e:	bf04      	itt	eq
 800a950:	0080      	lsleq	r0, r0, #2
 800a952:	3302      	addeq	r3, #2
 800a954:	2800      	cmp	r0, #0
 800a956:	db05      	blt.n	800a964 <__hi0bits+0x38>
 800a958:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a95c:	f103 0301 	add.w	r3, r3, #1
 800a960:	bf08      	it	eq
 800a962:	2320      	moveq	r3, #32
 800a964:	4618      	mov	r0, r3
 800a966:	4770      	bx	lr
 800a968:	2300      	movs	r3, #0
 800a96a:	e7e4      	b.n	800a936 <__hi0bits+0xa>

0800a96c <__lo0bits>:
 800a96c:	6803      	ldr	r3, [r0, #0]
 800a96e:	f013 0207 	ands.w	r2, r3, #7
 800a972:	d00c      	beq.n	800a98e <__lo0bits+0x22>
 800a974:	07d9      	lsls	r1, r3, #31
 800a976:	d422      	bmi.n	800a9be <__lo0bits+0x52>
 800a978:	079a      	lsls	r2, r3, #30
 800a97a:	bf49      	itett	mi
 800a97c:	085b      	lsrmi	r3, r3, #1
 800a97e:	089b      	lsrpl	r3, r3, #2
 800a980:	6003      	strmi	r3, [r0, #0]
 800a982:	2201      	movmi	r2, #1
 800a984:	bf5c      	itt	pl
 800a986:	6003      	strpl	r3, [r0, #0]
 800a988:	2202      	movpl	r2, #2
 800a98a:	4610      	mov	r0, r2
 800a98c:	4770      	bx	lr
 800a98e:	b299      	uxth	r1, r3
 800a990:	b909      	cbnz	r1, 800a996 <__lo0bits+0x2a>
 800a992:	0c1b      	lsrs	r3, r3, #16
 800a994:	2210      	movs	r2, #16
 800a996:	b2d9      	uxtb	r1, r3
 800a998:	b909      	cbnz	r1, 800a99e <__lo0bits+0x32>
 800a99a:	3208      	adds	r2, #8
 800a99c:	0a1b      	lsrs	r3, r3, #8
 800a99e:	0719      	lsls	r1, r3, #28
 800a9a0:	bf04      	itt	eq
 800a9a2:	091b      	lsreq	r3, r3, #4
 800a9a4:	3204      	addeq	r2, #4
 800a9a6:	0799      	lsls	r1, r3, #30
 800a9a8:	bf04      	itt	eq
 800a9aa:	089b      	lsreq	r3, r3, #2
 800a9ac:	3202      	addeq	r2, #2
 800a9ae:	07d9      	lsls	r1, r3, #31
 800a9b0:	d403      	bmi.n	800a9ba <__lo0bits+0x4e>
 800a9b2:	085b      	lsrs	r3, r3, #1
 800a9b4:	f102 0201 	add.w	r2, r2, #1
 800a9b8:	d003      	beq.n	800a9c2 <__lo0bits+0x56>
 800a9ba:	6003      	str	r3, [r0, #0]
 800a9bc:	e7e5      	b.n	800a98a <__lo0bits+0x1e>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	e7e3      	b.n	800a98a <__lo0bits+0x1e>
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	e7e1      	b.n	800a98a <__lo0bits+0x1e>
	...

0800a9c8 <__i2b>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	f7ff ff05 	bl	800a7dc <_Balloc>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	b928      	cbnz	r0, 800a9e2 <__i2b+0x1a>
 800a9d6:	4b05      	ldr	r3, [pc, #20]	; (800a9ec <__i2b+0x24>)
 800a9d8:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <__i2b+0x28>)
 800a9da:	f240 1145 	movw	r1, #325	; 0x145
 800a9de:	f000 fcb7 	bl	800b350 <__assert_func>
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	6144      	str	r4, [r0, #20]
 800a9e6:	6103      	str	r3, [r0, #16]
 800a9e8:	bd10      	pop	{r4, pc}
 800a9ea:	bf00      	nop
 800a9ec:	0800c978 	.word	0x0800c978
 800a9f0:	0800c989 	.word	0x0800c989

0800a9f4 <__multiply>:
 800a9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f8:	4691      	mov	r9, r2
 800a9fa:	690a      	ldr	r2, [r1, #16]
 800a9fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	bfb8      	it	lt
 800aa04:	460b      	movlt	r3, r1
 800aa06:	460c      	mov	r4, r1
 800aa08:	bfbc      	itt	lt
 800aa0a:	464c      	movlt	r4, r9
 800aa0c:	4699      	movlt	r9, r3
 800aa0e:	6927      	ldr	r7, [r4, #16]
 800aa10:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa14:	68a3      	ldr	r3, [r4, #8]
 800aa16:	6861      	ldr	r1, [r4, #4]
 800aa18:	eb07 060a 	add.w	r6, r7, sl
 800aa1c:	42b3      	cmp	r3, r6
 800aa1e:	b085      	sub	sp, #20
 800aa20:	bfb8      	it	lt
 800aa22:	3101      	addlt	r1, #1
 800aa24:	f7ff feda 	bl	800a7dc <_Balloc>
 800aa28:	b930      	cbnz	r0, 800aa38 <__multiply+0x44>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b44      	ldr	r3, [pc, #272]	; (800ab40 <__multiply+0x14c>)
 800aa2e:	4845      	ldr	r0, [pc, #276]	; (800ab44 <__multiply+0x150>)
 800aa30:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aa34:	f000 fc8c 	bl	800b350 <__assert_func>
 800aa38:	f100 0514 	add.w	r5, r0, #20
 800aa3c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa40:	462b      	mov	r3, r5
 800aa42:	2200      	movs	r2, #0
 800aa44:	4543      	cmp	r3, r8
 800aa46:	d321      	bcc.n	800aa8c <__multiply+0x98>
 800aa48:	f104 0314 	add.w	r3, r4, #20
 800aa4c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa50:	f109 0314 	add.w	r3, r9, #20
 800aa54:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa58:	9202      	str	r2, [sp, #8]
 800aa5a:	1b3a      	subs	r2, r7, r4
 800aa5c:	3a15      	subs	r2, #21
 800aa5e:	f022 0203 	bic.w	r2, r2, #3
 800aa62:	3204      	adds	r2, #4
 800aa64:	f104 0115 	add.w	r1, r4, #21
 800aa68:	428f      	cmp	r7, r1
 800aa6a:	bf38      	it	cc
 800aa6c:	2204      	movcc	r2, #4
 800aa6e:	9201      	str	r2, [sp, #4]
 800aa70:	9a02      	ldr	r2, [sp, #8]
 800aa72:	9303      	str	r3, [sp, #12]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d80c      	bhi.n	800aa92 <__multiply+0x9e>
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	dd03      	ble.n	800aa84 <__multiply+0x90>
 800aa7c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d05b      	beq.n	800ab3c <__multiply+0x148>
 800aa84:	6106      	str	r6, [r0, #16]
 800aa86:	b005      	add	sp, #20
 800aa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa8c:	f843 2b04 	str.w	r2, [r3], #4
 800aa90:	e7d8      	b.n	800aa44 <__multiply+0x50>
 800aa92:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa96:	f1ba 0f00 	cmp.w	sl, #0
 800aa9a:	d024      	beq.n	800aae6 <__multiply+0xf2>
 800aa9c:	f104 0e14 	add.w	lr, r4, #20
 800aaa0:	46a9      	mov	r9, r5
 800aaa2:	f04f 0c00 	mov.w	ip, #0
 800aaa6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aaaa:	f8d9 1000 	ldr.w	r1, [r9]
 800aaae:	fa1f fb82 	uxth.w	fp, r2
 800aab2:	b289      	uxth	r1, r1
 800aab4:	fb0a 110b 	mla	r1, sl, fp, r1
 800aab8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aabc:	f8d9 2000 	ldr.w	r2, [r9]
 800aac0:	4461      	add	r1, ip
 800aac2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aac6:	fb0a c20b 	mla	r2, sl, fp, ip
 800aaca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aace:	b289      	uxth	r1, r1
 800aad0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aad4:	4577      	cmp	r7, lr
 800aad6:	f849 1b04 	str.w	r1, [r9], #4
 800aada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aade:	d8e2      	bhi.n	800aaa6 <__multiply+0xb2>
 800aae0:	9a01      	ldr	r2, [sp, #4]
 800aae2:	f845 c002 	str.w	ip, [r5, r2]
 800aae6:	9a03      	ldr	r2, [sp, #12]
 800aae8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aaec:	3304      	adds	r3, #4
 800aaee:	f1b9 0f00 	cmp.w	r9, #0
 800aaf2:	d021      	beq.n	800ab38 <__multiply+0x144>
 800aaf4:	6829      	ldr	r1, [r5, #0]
 800aaf6:	f104 0c14 	add.w	ip, r4, #20
 800aafa:	46ae      	mov	lr, r5
 800aafc:	f04f 0a00 	mov.w	sl, #0
 800ab00:	f8bc b000 	ldrh.w	fp, [ip]
 800ab04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab08:	fb09 220b 	mla	r2, r9, fp, r2
 800ab0c:	4452      	add	r2, sl
 800ab0e:	b289      	uxth	r1, r1
 800ab10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab14:	f84e 1b04 	str.w	r1, [lr], #4
 800ab18:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ab1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab20:	f8be 1000 	ldrh.w	r1, [lr]
 800ab24:	fb09 110a 	mla	r1, r9, sl, r1
 800ab28:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ab2c:	4567      	cmp	r7, ip
 800ab2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab32:	d8e5      	bhi.n	800ab00 <__multiply+0x10c>
 800ab34:	9a01      	ldr	r2, [sp, #4]
 800ab36:	50a9      	str	r1, [r5, r2]
 800ab38:	3504      	adds	r5, #4
 800ab3a:	e799      	b.n	800aa70 <__multiply+0x7c>
 800ab3c:	3e01      	subs	r6, #1
 800ab3e:	e79b      	b.n	800aa78 <__multiply+0x84>
 800ab40:	0800c978 	.word	0x0800c978
 800ab44:	0800c989 	.word	0x0800c989

0800ab48 <__pow5mult>:
 800ab48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab4c:	4615      	mov	r5, r2
 800ab4e:	f012 0203 	ands.w	r2, r2, #3
 800ab52:	4606      	mov	r6, r0
 800ab54:	460f      	mov	r7, r1
 800ab56:	d007      	beq.n	800ab68 <__pow5mult+0x20>
 800ab58:	4c25      	ldr	r4, [pc, #148]	; (800abf0 <__pow5mult+0xa8>)
 800ab5a:	3a01      	subs	r2, #1
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab62:	f7ff fe9d 	bl	800a8a0 <__multadd>
 800ab66:	4607      	mov	r7, r0
 800ab68:	10ad      	asrs	r5, r5, #2
 800ab6a:	d03d      	beq.n	800abe8 <__pow5mult+0xa0>
 800ab6c:	69f4      	ldr	r4, [r6, #28]
 800ab6e:	b97c      	cbnz	r4, 800ab90 <__pow5mult+0x48>
 800ab70:	2010      	movs	r0, #16
 800ab72:	f7ff fd7f 	bl	800a674 <malloc>
 800ab76:	4602      	mov	r2, r0
 800ab78:	61f0      	str	r0, [r6, #28]
 800ab7a:	b928      	cbnz	r0, 800ab88 <__pow5mult+0x40>
 800ab7c:	4b1d      	ldr	r3, [pc, #116]	; (800abf4 <__pow5mult+0xac>)
 800ab7e:	481e      	ldr	r0, [pc, #120]	; (800abf8 <__pow5mult+0xb0>)
 800ab80:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ab84:	f000 fbe4 	bl	800b350 <__assert_func>
 800ab88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab8c:	6004      	str	r4, [r0, #0]
 800ab8e:	60c4      	str	r4, [r0, #12]
 800ab90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ab94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab98:	b94c      	cbnz	r4, 800abae <__pow5mult+0x66>
 800ab9a:	f240 2171 	movw	r1, #625	; 0x271
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ff12 	bl	800a9c8 <__i2b>
 800aba4:	2300      	movs	r3, #0
 800aba6:	f8c8 0008 	str.w	r0, [r8, #8]
 800abaa:	4604      	mov	r4, r0
 800abac:	6003      	str	r3, [r0, #0]
 800abae:	f04f 0900 	mov.w	r9, #0
 800abb2:	07eb      	lsls	r3, r5, #31
 800abb4:	d50a      	bpl.n	800abcc <__pow5mult+0x84>
 800abb6:	4639      	mov	r1, r7
 800abb8:	4622      	mov	r2, r4
 800abba:	4630      	mov	r0, r6
 800abbc:	f7ff ff1a 	bl	800a9f4 <__multiply>
 800abc0:	4639      	mov	r1, r7
 800abc2:	4680      	mov	r8, r0
 800abc4:	4630      	mov	r0, r6
 800abc6:	f7ff fe49 	bl	800a85c <_Bfree>
 800abca:	4647      	mov	r7, r8
 800abcc:	106d      	asrs	r5, r5, #1
 800abce:	d00b      	beq.n	800abe8 <__pow5mult+0xa0>
 800abd0:	6820      	ldr	r0, [r4, #0]
 800abd2:	b938      	cbnz	r0, 800abe4 <__pow5mult+0x9c>
 800abd4:	4622      	mov	r2, r4
 800abd6:	4621      	mov	r1, r4
 800abd8:	4630      	mov	r0, r6
 800abda:	f7ff ff0b 	bl	800a9f4 <__multiply>
 800abde:	6020      	str	r0, [r4, #0]
 800abe0:	f8c0 9000 	str.w	r9, [r0]
 800abe4:	4604      	mov	r4, r0
 800abe6:	e7e4      	b.n	800abb2 <__pow5mult+0x6a>
 800abe8:	4638      	mov	r0, r7
 800abea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abee:	bf00      	nop
 800abf0:	0800cad8 	.word	0x0800cad8
 800abf4:	0800c909 	.word	0x0800c909
 800abf8:	0800c989 	.word	0x0800c989

0800abfc <__lshift>:
 800abfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac00:	460c      	mov	r4, r1
 800ac02:	6849      	ldr	r1, [r1, #4]
 800ac04:	6923      	ldr	r3, [r4, #16]
 800ac06:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac0a:	68a3      	ldr	r3, [r4, #8]
 800ac0c:	4607      	mov	r7, r0
 800ac0e:	4691      	mov	r9, r2
 800ac10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac14:	f108 0601 	add.w	r6, r8, #1
 800ac18:	42b3      	cmp	r3, r6
 800ac1a:	db0b      	blt.n	800ac34 <__lshift+0x38>
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f7ff fddd 	bl	800a7dc <_Balloc>
 800ac22:	4605      	mov	r5, r0
 800ac24:	b948      	cbnz	r0, 800ac3a <__lshift+0x3e>
 800ac26:	4602      	mov	r2, r0
 800ac28:	4b28      	ldr	r3, [pc, #160]	; (800accc <__lshift+0xd0>)
 800ac2a:	4829      	ldr	r0, [pc, #164]	; (800acd0 <__lshift+0xd4>)
 800ac2c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ac30:	f000 fb8e 	bl	800b350 <__assert_func>
 800ac34:	3101      	adds	r1, #1
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	e7ee      	b.n	800ac18 <__lshift+0x1c>
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	f100 0114 	add.w	r1, r0, #20
 800ac40:	f100 0210 	add.w	r2, r0, #16
 800ac44:	4618      	mov	r0, r3
 800ac46:	4553      	cmp	r3, sl
 800ac48:	db33      	blt.n	800acb2 <__lshift+0xb6>
 800ac4a:	6920      	ldr	r0, [r4, #16]
 800ac4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac50:	f104 0314 	add.w	r3, r4, #20
 800ac54:	f019 091f 	ands.w	r9, r9, #31
 800ac58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac60:	d02b      	beq.n	800acba <__lshift+0xbe>
 800ac62:	f1c9 0e20 	rsb	lr, r9, #32
 800ac66:	468a      	mov	sl, r1
 800ac68:	2200      	movs	r2, #0
 800ac6a:	6818      	ldr	r0, [r3, #0]
 800ac6c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac70:	4310      	orrs	r0, r2
 800ac72:	f84a 0b04 	str.w	r0, [sl], #4
 800ac76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac7a:	459c      	cmp	ip, r3
 800ac7c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac80:	d8f3      	bhi.n	800ac6a <__lshift+0x6e>
 800ac82:	ebac 0304 	sub.w	r3, ip, r4
 800ac86:	3b15      	subs	r3, #21
 800ac88:	f023 0303 	bic.w	r3, r3, #3
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	f104 0015 	add.w	r0, r4, #21
 800ac92:	4584      	cmp	ip, r0
 800ac94:	bf38      	it	cc
 800ac96:	2304      	movcc	r3, #4
 800ac98:	50ca      	str	r2, [r1, r3]
 800ac9a:	b10a      	cbz	r2, 800aca0 <__lshift+0xa4>
 800ac9c:	f108 0602 	add.w	r6, r8, #2
 800aca0:	3e01      	subs	r6, #1
 800aca2:	4638      	mov	r0, r7
 800aca4:	612e      	str	r6, [r5, #16]
 800aca6:	4621      	mov	r1, r4
 800aca8:	f7ff fdd8 	bl	800a85c <_Bfree>
 800acac:	4628      	mov	r0, r5
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acb6:	3301      	adds	r3, #1
 800acb8:	e7c5      	b.n	800ac46 <__lshift+0x4a>
 800acba:	3904      	subs	r1, #4
 800acbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800acc4:	459c      	cmp	ip, r3
 800acc6:	d8f9      	bhi.n	800acbc <__lshift+0xc0>
 800acc8:	e7ea      	b.n	800aca0 <__lshift+0xa4>
 800acca:	bf00      	nop
 800accc:	0800c978 	.word	0x0800c978
 800acd0:	0800c989 	.word	0x0800c989

0800acd4 <__mcmp>:
 800acd4:	b530      	push	{r4, r5, lr}
 800acd6:	6902      	ldr	r2, [r0, #16]
 800acd8:	690c      	ldr	r4, [r1, #16]
 800acda:	1b12      	subs	r2, r2, r4
 800acdc:	d10e      	bne.n	800acfc <__mcmp+0x28>
 800acde:	f100 0314 	add.w	r3, r0, #20
 800ace2:	3114      	adds	r1, #20
 800ace4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ace8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acf0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acf4:	42a5      	cmp	r5, r4
 800acf6:	d003      	beq.n	800ad00 <__mcmp+0x2c>
 800acf8:	d305      	bcc.n	800ad06 <__mcmp+0x32>
 800acfa:	2201      	movs	r2, #1
 800acfc:	4610      	mov	r0, r2
 800acfe:	bd30      	pop	{r4, r5, pc}
 800ad00:	4283      	cmp	r3, r0
 800ad02:	d3f3      	bcc.n	800acec <__mcmp+0x18>
 800ad04:	e7fa      	b.n	800acfc <__mcmp+0x28>
 800ad06:	f04f 32ff 	mov.w	r2, #4294967295
 800ad0a:	e7f7      	b.n	800acfc <__mcmp+0x28>

0800ad0c <__mdiff>:
 800ad0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad10:	460c      	mov	r4, r1
 800ad12:	4606      	mov	r6, r0
 800ad14:	4611      	mov	r1, r2
 800ad16:	4620      	mov	r0, r4
 800ad18:	4690      	mov	r8, r2
 800ad1a:	f7ff ffdb 	bl	800acd4 <__mcmp>
 800ad1e:	1e05      	subs	r5, r0, #0
 800ad20:	d110      	bne.n	800ad44 <__mdiff+0x38>
 800ad22:	4629      	mov	r1, r5
 800ad24:	4630      	mov	r0, r6
 800ad26:	f7ff fd59 	bl	800a7dc <_Balloc>
 800ad2a:	b930      	cbnz	r0, 800ad3a <__mdiff+0x2e>
 800ad2c:	4b3a      	ldr	r3, [pc, #232]	; (800ae18 <__mdiff+0x10c>)
 800ad2e:	4602      	mov	r2, r0
 800ad30:	f240 2137 	movw	r1, #567	; 0x237
 800ad34:	4839      	ldr	r0, [pc, #228]	; (800ae1c <__mdiff+0x110>)
 800ad36:	f000 fb0b 	bl	800b350 <__assert_func>
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	bfa4      	itt	ge
 800ad46:	4643      	movge	r3, r8
 800ad48:	46a0      	movge	r8, r4
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad50:	bfa6      	itte	ge
 800ad52:	461c      	movge	r4, r3
 800ad54:	2500      	movge	r5, #0
 800ad56:	2501      	movlt	r5, #1
 800ad58:	f7ff fd40 	bl	800a7dc <_Balloc>
 800ad5c:	b920      	cbnz	r0, 800ad68 <__mdiff+0x5c>
 800ad5e:	4b2e      	ldr	r3, [pc, #184]	; (800ae18 <__mdiff+0x10c>)
 800ad60:	4602      	mov	r2, r0
 800ad62:	f240 2145 	movw	r1, #581	; 0x245
 800ad66:	e7e5      	b.n	800ad34 <__mdiff+0x28>
 800ad68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad6c:	6926      	ldr	r6, [r4, #16]
 800ad6e:	60c5      	str	r5, [r0, #12]
 800ad70:	f104 0914 	add.w	r9, r4, #20
 800ad74:	f108 0514 	add.w	r5, r8, #20
 800ad78:	f100 0e14 	add.w	lr, r0, #20
 800ad7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ad80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ad84:	f108 0210 	add.w	r2, r8, #16
 800ad88:	46f2      	mov	sl, lr
 800ad8a:	2100      	movs	r1, #0
 800ad8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad94:	fa11 f88b 	uxtah	r8, r1, fp
 800ad98:	b299      	uxth	r1, r3
 800ad9a:	0c1b      	lsrs	r3, r3, #16
 800ad9c:	eba8 0801 	sub.w	r8, r8, r1
 800ada0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ada4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ada8:	fa1f f888 	uxth.w	r8, r8
 800adac:	1419      	asrs	r1, r3, #16
 800adae:	454e      	cmp	r6, r9
 800adb0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800adb4:	f84a 3b04 	str.w	r3, [sl], #4
 800adb8:	d8e8      	bhi.n	800ad8c <__mdiff+0x80>
 800adba:	1b33      	subs	r3, r6, r4
 800adbc:	3b15      	subs	r3, #21
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	3304      	adds	r3, #4
 800adc4:	3415      	adds	r4, #21
 800adc6:	42a6      	cmp	r6, r4
 800adc8:	bf38      	it	cc
 800adca:	2304      	movcc	r3, #4
 800adcc:	441d      	add	r5, r3
 800adce:	4473      	add	r3, lr
 800add0:	469e      	mov	lr, r3
 800add2:	462e      	mov	r6, r5
 800add4:	4566      	cmp	r6, ip
 800add6:	d30e      	bcc.n	800adf6 <__mdiff+0xea>
 800add8:	f10c 0203 	add.w	r2, ip, #3
 800addc:	1b52      	subs	r2, r2, r5
 800adde:	f022 0203 	bic.w	r2, r2, #3
 800ade2:	3d03      	subs	r5, #3
 800ade4:	45ac      	cmp	ip, r5
 800ade6:	bf38      	it	cc
 800ade8:	2200      	movcc	r2, #0
 800adea:	4413      	add	r3, r2
 800adec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800adf0:	b17a      	cbz	r2, 800ae12 <__mdiff+0x106>
 800adf2:	6107      	str	r7, [r0, #16]
 800adf4:	e7a4      	b.n	800ad40 <__mdiff+0x34>
 800adf6:	f856 8b04 	ldr.w	r8, [r6], #4
 800adfa:	fa11 f288 	uxtah	r2, r1, r8
 800adfe:	1414      	asrs	r4, r2, #16
 800ae00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae04:	b292      	uxth	r2, r2
 800ae06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae0a:	f84e 2b04 	str.w	r2, [lr], #4
 800ae0e:	1421      	asrs	r1, r4, #16
 800ae10:	e7e0      	b.n	800add4 <__mdiff+0xc8>
 800ae12:	3f01      	subs	r7, #1
 800ae14:	e7ea      	b.n	800adec <__mdiff+0xe0>
 800ae16:	bf00      	nop
 800ae18:	0800c978 	.word	0x0800c978
 800ae1c:	0800c989 	.word	0x0800c989

0800ae20 <__d2b>:
 800ae20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae24:	460f      	mov	r7, r1
 800ae26:	2101      	movs	r1, #1
 800ae28:	ec59 8b10 	vmov	r8, r9, d0
 800ae2c:	4616      	mov	r6, r2
 800ae2e:	f7ff fcd5 	bl	800a7dc <_Balloc>
 800ae32:	4604      	mov	r4, r0
 800ae34:	b930      	cbnz	r0, 800ae44 <__d2b+0x24>
 800ae36:	4602      	mov	r2, r0
 800ae38:	4b24      	ldr	r3, [pc, #144]	; (800aecc <__d2b+0xac>)
 800ae3a:	4825      	ldr	r0, [pc, #148]	; (800aed0 <__d2b+0xb0>)
 800ae3c:	f240 310f 	movw	r1, #783	; 0x30f
 800ae40:	f000 fa86 	bl	800b350 <__assert_func>
 800ae44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ae48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ae4c:	bb2d      	cbnz	r5, 800ae9a <__d2b+0x7a>
 800ae4e:	9301      	str	r3, [sp, #4]
 800ae50:	f1b8 0300 	subs.w	r3, r8, #0
 800ae54:	d026      	beq.n	800aea4 <__d2b+0x84>
 800ae56:	4668      	mov	r0, sp
 800ae58:	9300      	str	r3, [sp, #0]
 800ae5a:	f7ff fd87 	bl	800a96c <__lo0bits>
 800ae5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ae62:	b1e8      	cbz	r0, 800aea0 <__d2b+0x80>
 800ae64:	f1c0 0320 	rsb	r3, r0, #32
 800ae68:	fa02 f303 	lsl.w	r3, r2, r3
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	40c2      	lsrs	r2, r0
 800ae70:	6163      	str	r3, [r4, #20]
 800ae72:	9201      	str	r2, [sp, #4]
 800ae74:	9b01      	ldr	r3, [sp, #4]
 800ae76:	61a3      	str	r3, [r4, #24]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	bf14      	ite	ne
 800ae7c:	2202      	movne	r2, #2
 800ae7e:	2201      	moveq	r2, #1
 800ae80:	6122      	str	r2, [r4, #16]
 800ae82:	b1bd      	cbz	r5, 800aeb4 <__d2b+0x94>
 800ae84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae88:	4405      	add	r5, r0
 800ae8a:	603d      	str	r5, [r7, #0]
 800ae8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae90:	6030      	str	r0, [r6, #0]
 800ae92:	4620      	mov	r0, r4
 800ae94:	b003      	add	sp, #12
 800ae96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae9e:	e7d6      	b.n	800ae4e <__d2b+0x2e>
 800aea0:	6161      	str	r1, [r4, #20]
 800aea2:	e7e7      	b.n	800ae74 <__d2b+0x54>
 800aea4:	a801      	add	r0, sp, #4
 800aea6:	f7ff fd61 	bl	800a96c <__lo0bits>
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	6163      	str	r3, [r4, #20]
 800aeae:	3020      	adds	r0, #32
 800aeb0:	2201      	movs	r2, #1
 800aeb2:	e7e5      	b.n	800ae80 <__d2b+0x60>
 800aeb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aeb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aebc:	6038      	str	r0, [r7, #0]
 800aebe:	6918      	ldr	r0, [r3, #16]
 800aec0:	f7ff fd34 	bl	800a92c <__hi0bits>
 800aec4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aec8:	e7e2      	b.n	800ae90 <__d2b+0x70>
 800aeca:	bf00      	nop
 800aecc:	0800c978 	.word	0x0800c978
 800aed0:	0800c989 	.word	0x0800c989

0800aed4 <__ssputs_r>:
 800aed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aed8:	688e      	ldr	r6, [r1, #8]
 800aeda:	461f      	mov	r7, r3
 800aedc:	42be      	cmp	r6, r7
 800aede:	680b      	ldr	r3, [r1, #0]
 800aee0:	4682      	mov	sl, r0
 800aee2:	460c      	mov	r4, r1
 800aee4:	4690      	mov	r8, r2
 800aee6:	d82c      	bhi.n	800af42 <__ssputs_r+0x6e>
 800aee8:	898a      	ldrh	r2, [r1, #12]
 800aeea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aeee:	d026      	beq.n	800af3e <__ssputs_r+0x6a>
 800aef0:	6965      	ldr	r5, [r4, #20]
 800aef2:	6909      	ldr	r1, [r1, #16]
 800aef4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aef8:	eba3 0901 	sub.w	r9, r3, r1
 800aefc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af00:	1c7b      	adds	r3, r7, #1
 800af02:	444b      	add	r3, r9
 800af04:	106d      	asrs	r5, r5, #1
 800af06:	429d      	cmp	r5, r3
 800af08:	bf38      	it	cc
 800af0a:	461d      	movcc	r5, r3
 800af0c:	0553      	lsls	r3, r2, #21
 800af0e:	d527      	bpl.n	800af60 <__ssputs_r+0x8c>
 800af10:	4629      	mov	r1, r5
 800af12:	f7ff fbd7 	bl	800a6c4 <_malloc_r>
 800af16:	4606      	mov	r6, r0
 800af18:	b360      	cbz	r0, 800af74 <__ssputs_r+0xa0>
 800af1a:	6921      	ldr	r1, [r4, #16]
 800af1c:	464a      	mov	r2, r9
 800af1e:	f000 fa09 	bl	800b334 <memcpy>
 800af22:	89a3      	ldrh	r3, [r4, #12]
 800af24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800af28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	6126      	str	r6, [r4, #16]
 800af30:	6165      	str	r5, [r4, #20]
 800af32:	444e      	add	r6, r9
 800af34:	eba5 0509 	sub.w	r5, r5, r9
 800af38:	6026      	str	r6, [r4, #0]
 800af3a:	60a5      	str	r5, [r4, #8]
 800af3c:	463e      	mov	r6, r7
 800af3e:	42be      	cmp	r6, r7
 800af40:	d900      	bls.n	800af44 <__ssputs_r+0x70>
 800af42:	463e      	mov	r6, r7
 800af44:	6820      	ldr	r0, [r4, #0]
 800af46:	4632      	mov	r2, r6
 800af48:	4641      	mov	r1, r8
 800af4a:	f000 f9c9 	bl	800b2e0 <memmove>
 800af4e:	68a3      	ldr	r3, [r4, #8]
 800af50:	1b9b      	subs	r3, r3, r6
 800af52:	60a3      	str	r3, [r4, #8]
 800af54:	6823      	ldr	r3, [r4, #0]
 800af56:	4433      	add	r3, r6
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	2000      	movs	r0, #0
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	462a      	mov	r2, r5
 800af62:	f000 fa3b 	bl	800b3dc <_realloc_r>
 800af66:	4606      	mov	r6, r0
 800af68:	2800      	cmp	r0, #0
 800af6a:	d1e0      	bne.n	800af2e <__ssputs_r+0x5a>
 800af6c:	6921      	ldr	r1, [r4, #16]
 800af6e:	4650      	mov	r0, sl
 800af70:	f7ff fb34 	bl	800a5dc <_free_r>
 800af74:	230c      	movs	r3, #12
 800af76:	f8ca 3000 	str.w	r3, [sl]
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	f04f 30ff 	mov.w	r0, #4294967295
 800af86:	e7e9      	b.n	800af5c <__ssputs_r+0x88>

0800af88 <_svfiprintf_r>:
 800af88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8c:	4698      	mov	r8, r3
 800af8e:	898b      	ldrh	r3, [r1, #12]
 800af90:	061b      	lsls	r3, r3, #24
 800af92:	b09d      	sub	sp, #116	; 0x74
 800af94:	4607      	mov	r7, r0
 800af96:	460d      	mov	r5, r1
 800af98:	4614      	mov	r4, r2
 800af9a:	d50e      	bpl.n	800afba <_svfiprintf_r+0x32>
 800af9c:	690b      	ldr	r3, [r1, #16]
 800af9e:	b963      	cbnz	r3, 800afba <_svfiprintf_r+0x32>
 800afa0:	2140      	movs	r1, #64	; 0x40
 800afa2:	f7ff fb8f 	bl	800a6c4 <_malloc_r>
 800afa6:	6028      	str	r0, [r5, #0]
 800afa8:	6128      	str	r0, [r5, #16]
 800afaa:	b920      	cbnz	r0, 800afb6 <_svfiprintf_r+0x2e>
 800afac:	230c      	movs	r3, #12
 800afae:	603b      	str	r3, [r7, #0]
 800afb0:	f04f 30ff 	mov.w	r0, #4294967295
 800afb4:	e0d0      	b.n	800b158 <_svfiprintf_r+0x1d0>
 800afb6:	2340      	movs	r3, #64	; 0x40
 800afb8:	616b      	str	r3, [r5, #20]
 800afba:	2300      	movs	r3, #0
 800afbc:	9309      	str	r3, [sp, #36]	; 0x24
 800afbe:	2320      	movs	r3, #32
 800afc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800afc8:	2330      	movs	r3, #48	; 0x30
 800afca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b170 <_svfiprintf_r+0x1e8>
 800afce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afd2:	f04f 0901 	mov.w	r9, #1
 800afd6:	4623      	mov	r3, r4
 800afd8:	469a      	mov	sl, r3
 800afda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800afde:	b10a      	cbz	r2, 800afe4 <_svfiprintf_r+0x5c>
 800afe0:	2a25      	cmp	r2, #37	; 0x25
 800afe2:	d1f9      	bne.n	800afd8 <_svfiprintf_r+0x50>
 800afe4:	ebba 0b04 	subs.w	fp, sl, r4
 800afe8:	d00b      	beq.n	800b002 <_svfiprintf_r+0x7a>
 800afea:	465b      	mov	r3, fp
 800afec:	4622      	mov	r2, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	4638      	mov	r0, r7
 800aff2:	f7ff ff6f 	bl	800aed4 <__ssputs_r>
 800aff6:	3001      	adds	r0, #1
 800aff8:	f000 80a9 	beq.w	800b14e <_svfiprintf_r+0x1c6>
 800affc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800affe:	445a      	add	r2, fp
 800b000:	9209      	str	r2, [sp, #36]	; 0x24
 800b002:	f89a 3000 	ldrb.w	r3, [sl]
 800b006:	2b00      	cmp	r3, #0
 800b008:	f000 80a1 	beq.w	800b14e <_svfiprintf_r+0x1c6>
 800b00c:	2300      	movs	r3, #0
 800b00e:	f04f 32ff 	mov.w	r2, #4294967295
 800b012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b016:	f10a 0a01 	add.w	sl, sl, #1
 800b01a:	9304      	str	r3, [sp, #16]
 800b01c:	9307      	str	r3, [sp, #28]
 800b01e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b022:	931a      	str	r3, [sp, #104]	; 0x68
 800b024:	4654      	mov	r4, sl
 800b026:	2205      	movs	r2, #5
 800b028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02c:	4850      	ldr	r0, [pc, #320]	; (800b170 <_svfiprintf_r+0x1e8>)
 800b02e:	f7f5 f8d7 	bl	80001e0 <memchr>
 800b032:	9a04      	ldr	r2, [sp, #16]
 800b034:	b9d8      	cbnz	r0, 800b06e <_svfiprintf_r+0xe6>
 800b036:	06d0      	lsls	r0, r2, #27
 800b038:	bf44      	itt	mi
 800b03a:	2320      	movmi	r3, #32
 800b03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b040:	0711      	lsls	r1, r2, #28
 800b042:	bf44      	itt	mi
 800b044:	232b      	movmi	r3, #43	; 0x2b
 800b046:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b04a:	f89a 3000 	ldrb.w	r3, [sl]
 800b04e:	2b2a      	cmp	r3, #42	; 0x2a
 800b050:	d015      	beq.n	800b07e <_svfiprintf_r+0xf6>
 800b052:	9a07      	ldr	r2, [sp, #28]
 800b054:	4654      	mov	r4, sl
 800b056:	2000      	movs	r0, #0
 800b058:	f04f 0c0a 	mov.w	ip, #10
 800b05c:	4621      	mov	r1, r4
 800b05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b062:	3b30      	subs	r3, #48	; 0x30
 800b064:	2b09      	cmp	r3, #9
 800b066:	d94d      	bls.n	800b104 <_svfiprintf_r+0x17c>
 800b068:	b1b0      	cbz	r0, 800b098 <_svfiprintf_r+0x110>
 800b06a:	9207      	str	r2, [sp, #28]
 800b06c:	e014      	b.n	800b098 <_svfiprintf_r+0x110>
 800b06e:	eba0 0308 	sub.w	r3, r0, r8
 800b072:	fa09 f303 	lsl.w	r3, r9, r3
 800b076:	4313      	orrs	r3, r2
 800b078:	9304      	str	r3, [sp, #16]
 800b07a:	46a2      	mov	sl, r4
 800b07c:	e7d2      	b.n	800b024 <_svfiprintf_r+0x9c>
 800b07e:	9b03      	ldr	r3, [sp, #12]
 800b080:	1d19      	adds	r1, r3, #4
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	9103      	str	r1, [sp, #12]
 800b086:	2b00      	cmp	r3, #0
 800b088:	bfbb      	ittet	lt
 800b08a:	425b      	neglt	r3, r3
 800b08c:	f042 0202 	orrlt.w	r2, r2, #2
 800b090:	9307      	strge	r3, [sp, #28]
 800b092:	9307      	strlt	r3, [sp, #28]
 800b094:	bfb8      	it	lt
 800b096:	9204      	strlt	r2, [sp, #16]
 800b098:	7823      	ldrb	r3, [r4, #0]
 800b09a:	2b2e      	cmp	r3, #46	; 0x2e
 800b09c:	d10c      	bne.n	800b0b8 <_svfiprintf_r+0x130>
 800b09e:	7863      	ldrb	r3, [r4, #1]
 800b0a0:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a2:	d134      	bne.n	800b10e <_svfiprintf_r+0x186>
 800b0a4:	9b03      	ldr	r3, [sp, #12]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	9203      	str	r2, [sp, #12]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	bfb8      	it	lt
 800b0b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0b4:	3402      	adds	r4, #2
 800b0b6:	9305      	str	r3, [sp, #20]
 800b0b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b180 <_svfiprintf_r+0x1f8>
 800b0bc:	7821      	ldrb	r1, [r4, #0]
 800b0be:	2203      	movs	r2, #3
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	f7f5 f88d 	bl	80001e0 <memchr>
 800b0c6:	b138      	cbz	r0, 800b0d8 <_svfiprintf_r+0x150>
 800b0c8:	9b04      	ldr	r3, [sp, #16]
 800b0ca:	eba0 000a 	sub.w	r0, r0, sl
 800b0ce:	2240      	movs	r2, #64	; 0x40
 800b0d0:	4082      	lsls	r2, r0
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	3401      	adds	r4, #1
 800b0d6:	9304      	str	r3, [sp, #16]
 800b0d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0dc:	4825      	ldr	r0, [pc, #148]	; (800b174 <_svfiprintf_r+0x1ec>)
 800b0de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0e2:	2206      	movs	r2, #6
 800b0e4:	f7f5 f87c 	bl	80001e0 <memchr>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d038      	beq.n	800b15e <_svfiprintf_r+0x1d6>
 800b0ec:	4b22      	ldr	r3, [pc, #136]	; (800b178 <_svfiprintf_r+0x1f0>)
 800b0ee:	bb1b      	cbnz	r3, 800b138 <_svfiprintf_r+0x1b0>
 800b0f0:	9b03      	ldr	r3, [sp, #12]
 800b0f2:	3307      	adds	r3, #7
 800b0f4:	f023 0307 	bic.w	r3, r3, #7
 800b0f8:	3308      	adds	r3, #8
 800b0fa:	9303      	str	r3, [sp, #12]
 800b0fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0fe:	4433      	add	r3, r6
 800b100:	9309      	str	r3, [sp, #36]	; 0x24
 800b102:	e768      	b.n	800afd6 <_svfiprintf_r+0x4e>
 800b104:	fb0c 3202 	mla	r2, ip, r2, r3
 800b108:	460c      	mov	r4, r1
 800b10a:	2001      	movs	r0, #1
 800b10c:	e7a6      	b.n	800b05c <_svfiprintf_r+0xd4>
 800b10e:	2300      	movs	r3, #0
 800b110:	3401      	adds	r4, #1
 800b112:	9305      	str	r3, [sp, #20]
 800b114:	4619      	mov	r1, r3
 800b116:	f04f 0c0a 	mov.w	ip, #10
 800b11a:	4620      	mov	r0, r4
 800b11c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b120:	3a30      	subs	r2, #48	; 0x30
 800b122:	2a09      	cmp	r2, #9
 800b124:	d903      	bls.n	800b12e <_svfiprintf_r+0x1a6>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d0c6      	beq.n	800b0b8 <_svfiprintf_r+0x130>
 800b12a:	9105      	str	r1, [sp, #20]
 800b12c:	e7c4      	b.n	800b0b8 <_svfiprintf_r+0x130>
 800b12e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b132:	4604      	mov	r4, r0
 800b134:	2301      	movs	r3, #1
 800b136:	e7f0      	b.n	800b11a <_svfiprintf_r+0x192>
 800b138:	ab03      	add	r3, sp, #12
 800b13a:	9300      	str	r3, [sp, #0]
 800b13c:	462a      	mov	r2, r5
 800b13e:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <_svfiprintf_r+0x1f4>)
 800b140:	a904      	add	r1, sp, #16
 800b142:	4638      	mov	r0, r7
 800b144:	f7fd fe62 	bl	8008e0c <_printf_float>
 800b148:	1c42      	adds	r2, r0, #1
 800b14a:	4606      	mov	r6, r0
 800b14c:	d1d6      	bne.n	800b0fc <_svfiprintf_r+0x174>
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	065b      	lsls	r3, r3, #25
 800b152:	f53f af2d 	bmi.w	800afb0 <_svfiprintf_r+0x28>
 800b156:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b158:	b01d      	add	sp, #116	; 0x74
 800b15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b15e:	ab03      	add	r3, sp, #12
 800b160:	9300      	str	r3, [sp, #0]
 800b162:	462a      	mov	r2, r5
 800b164:	4b05      	ldr	r3, [pc, #20]	; (800b17c <_svfiprintf_r+0x1f4>)
 800b166:	a904      	add	r1, sp, #16
 800b168:	4638      	mov	r0, r7
 800b16a:	f7fe f8f3 	bl	8009354 <_printf_i>
 800b16e:	e7eb      	b.n	800b148 <_svfiprintf_r+0x1c0>
 800b170:	0800cae4 	.word	0x0800cae4
 800b174:	0800caee 	.word	0x0800caee
 800b178:	08008e0d 	.word	0x08008e0d
 800b17c:	0800aed5 	.word	0x0800aed5
 800b180:	0800caea 	.word	0x0800caea

0800b184 <__sflush_r>:
 800b184:	898a      	ldrh	r2, [r1, #12]
 800b186:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b18a:	4605      	mov	r5, r0
 800b18c:	0710      	lsls	r0, r2, #28
 800b18e:	460c      	mov	r4, r1
 800b190:	d458      	bmi.n	800b244 <__sflush_r+0xc0>
 800b192:	684b      	ldr	r3, [r1, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	dc05      	bgt.n	800b1a4 <__sflush_r+0x20>
 800b198:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	dc02      	bgt.n	800b1a4 <__sflush_r+0x20>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1a6:	2e00      	cmp	r6, #0
 800b1a8:	d0f9      	beq.n	800b19e <__sflush_r+0x1a>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b1b0:	682f      	ldr	r7, [r5, #0]
 800b1b2:	6a21      	ldr	r1, [r4, #32]
 800b1b4:	602b      	str	r3, [r5, #0]
 800b1b6:	d032      	beq.n	800b21e <__sflush_r+0x9a>
 800b1b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b1ba:	89a3      	ldrh	r3, [r4, #12]
 800b1bc:	075a      	lsls	r2, r3, #29
 800b1be:	d505      	bpl.n	800b1cc <__sflush_r+0x48>
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	1ac0      	subs	r0, r0, r3
 800b1c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b1c6:	b10b      	cbz	r3, 800b1cc <__sflush_r+0x48>
 800b1c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b1ca:	1ac0      	subs	r0, r0, r3
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1d2:	6a21      	ldr	r1, [r4, #32]
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b0      	blx	r6
 800b1d8:	1c43      	adds	r3, r0, #1
 800b1da:	89a3      	ldrh	r3, [r4, #12]
 800b1dc:	d106      	bne.n	800b1ec <__sflush_r+0x68>
 800b1de:	6829      	ldr	r1, [r5, #0]
 800b1e0:	291d      	cmp	r1, #29
 800b1e2:	d82b      	bhi.n	800b23c <__sflush_r+0xb8>
 800b1e4:	4a29      	ldr	r2, [pc, #164]	; (800b28c <__sflush_r+0x108>)
 800b1e6:	410a      	asrs	r2, r1
 800b1e8:	07d6      	lsls	r6, r2, #31
 800b1ea:	d427      	bmi.n	800b23c <__sflush_r+0xb8>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	6062      	str	r2, [r4, #4]
 800b1f0:	04d9      	lsls	r1, r3, #19
 800b1f2:	6922      	ldr	r2, [r4, #16]
 800b1f4:	6022      	str	r2, [r4, #0]
 800b1f6:	d504      	bpl.n	800b202 <__sflush_r+0x7e>
 800b1f8:	1c42      	adds	r2, r0, #1
 800b1fa:	d101      	bne.n	800b200 <__sflush_r+0x7c>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b903      	cbnz	r3, 800b202 <__sflush_r+0x7e>
 800b200:	6560      	str	r0, [r4, #84]	; 0x54
 800b202:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b204:	602f      	str	r7, [r5, #0]
 800b206:	2900      	cmp	r1, #0
 800b208:	d0c9      	beq.n	800b19e <__sflush_r+0x1a>
 800b20a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b20e:	4299      	cmp	r1, r3
 800b210:	d002      	beq.n	800b218 <__sflush_r+0x94>
 800b212:	4628      	mov	r0, r5
 800b214:	f7ff f9e2 	bl	800a5dc <_free_r>
 800b218:	2000      	movs	r0, #0
 800b21a:	6360      	str	r0, [r4, #52]	; 0x34
 800b21c:	e7c0      	b.n	800b1a0 <__sflush_r+0x1c>
 800b21e:	2301      	movs	r3, #1
 800b220:	4628      	mov	r0, r5
 800b222:	47b0      	blx	r6
 800b224:	1c41      	adds	r1, r0, #1
 800b226:	d1c8      	bne.n	800b1ba <__sflush_r+0x36>
 800b228:	682b      	ldr	r3, [r5, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0c5      	beq.n	800b1ba <__sflush_r+0x36>
 800b22e:	2b1d      	cmp	r3, #29
 800b230:	d001      	beq.n	800b236 <__sflush_r+0xb2>
 800b232:	2b16      	cmp	r3, #22
 800b234:	d101      	bne.n	800b23a <__sflush_r+0xb6>
 800b236:	602f      	str	r7, [r5, #0]
 800b238:	e7b1      	b.n	800b19e <__sflush_r+0x1a>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b240:	81a3      	strh	r3, [r4, #12]
 800b242:	e7ad      	b.n	800b1a0 <__sflush_r+0x1c>
 800b244:	690f      	ldr	r7, [r1, #16]
 800b246:	2f00      	cmp	r7, #0
 800b248:	d0a9      	beq.n	800b19e <__sflush_r+0x1a>
 800b24a:	0793      	lsls	r3, r2, #30
 800b24c:	680e      	ldr	r6, [r1, #0]
 800b24e:	bf08      	it	eq
 800b250:	694b      	ldreq	r3, [r1, #20]
 800b252:	600f      	str	r7, [r1, #0]
 800b254:	bf18      	it	ne
 800b256:	2300      	movne	r3, #0
 800b258:	eba6 0807 	sub.w	r8, r6, r7
 800b25c:	608b      	str	r3, [r1, #8]
 800b25e:	f1b8 0f00 	cmp.w	r8, #0
 800b262:	dd9c      	ble.n	800b19e <__sflush_r+0x1a>
 800b264:	6a21      	ldr	r1, [r4, #32]
 800b266:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b268:	4643      	mov	r3, r8
 800b26a:	463a      	mov	r2, r7
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b0      	blx	r6
 800b270:	2800      	cmp	r0, #0
 800b272:	dc06      	bgt.n	800b282 <__sflush_r+0xfe>
 800b274:	89a3      	ldrh	r3, [r4, #12]
 800b276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b27a:	81a3      	strh	r3, [r4, #12]
 800b27c:	f04f 30ff 	mov.w	r0, #4294967295
 800b280:	e78e      	b.n	800b1a0 <__sflush_r+0x1c>
 800b282:	4407      	add	r7, r0
 800b284:	eba8 0800 	sub.w	r8, r8, r0
 800b288:	e7e9      	b.n	800b25e <__sflush_r+0xda>
 800b28a:	bf00      	nop
 800b28c:	dfbffffe 	.word	0xdfbffffe

0800b290 <_fflush_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	690b      	ldr	r3, [r1, #16]
 800b294:	4605      	mov	r5, r0
 800b296:	460c      	mov	r4, r1
 800b298:	b913      	cbnz	r3, 800b2a0 <_fflush_r+0x10>
 800b29a:	2500      	movs	r5, #0
 800b29c:	4628      	mov	r0, r5
 800b29e:	bd38      	pop	{r3, r4, r5, pc}
 800b2a0:	b118      	cbz	r0, 800b2aa <_fflush_r+0x1a>
 800b2a2:	6a03      	ldr	r3, [r0, #32]
 800b2a4:	b90b      	cbnz	r3, 800b2aa <_fflush_r+0x1a>
 800b2a6:	f7fe fa03 	bl	80096b0 <__sinit>
 800b2aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0f3      	beq.n	800b29a <_fflush_r+0xa>
 800b2b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b2b4:	07d0      	lsls	r0, r2, #31
 800b2b6:	d404      	bmi.n	800b2c2 <_fflush_r+0x32>
 800b2b8:	0599      	lsls	r1, r3, #22
 800b2ba:	d402      	bmi.n	800b2c2 <_fflush_r+0x32>
 800b2bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2be:	f7fe fb0e 	bl	80098de <__retarget_lock_acquire_recursive>
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	f7ff ff5d 	bl	800b184 <__sflush_r>
 800b2ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2cc:	07da      	lsls	r2, r3, #31
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	d4e4      	bmi.n	800b29c <_fflush_r+0xc>
 800b2d2:	89a3      	ldrh	r3, [r4, #12]
 800b2d4:	059b      	lsls	r3, r3, #22
 800b2d6:	d4e1      	bmi.n	800b29c <_fflush_r+0xc>
 800b2d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2da:	f7fe fb01 	bl	80098e0 <__retarget_lock_release_recursive>
 800b2de:	e7dd      	b.n	800b29c <_fflush_r+0xc>

0800b2e0 <memmove>:
 800b2e0:	4288      	cmp	r0, r1
 800b2e2:	b510      	push	{r4, lr}
 800b2e4:	eb01 0402 	add.w	r4, r1, r2
 800b2e8:	d902      	bls.n	800b2f0 <memmove+0x10>
 800b2ea:	4284      	cmp	r4, r0
 800b2ec:	4623      	mov	r3, r4
 800b2ee:	d807      	bhi.n	800b300 <memmove+0x20>
 800b2f0:	1e43      	subs	r3, r0, #1
 800b2f2:	42a1      	cmp	r1, r4
 800b2f4:	d008      	beq.n	800b308 <memmove+0x28>
 800b2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2fe:	e7f8      	b.n	800b2f2 <memmove+0x12>
 800b300:	4402      	add	r2, r0
 800b302:	4601      	mov	r1, r0
 800b304:	428a      	cmp	r2, r1
 800b306:	d100      	bne.n	800b30a <memmove+0x2a>
 800b308:	bd10      	pop	{r4, pc}
 800b30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b30e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b312:	e7f7      	b.n	800b304 <memmove+0x24>

0800b314 <_sbrk_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d06      	ldr	r5, [pc, #24]	; (800b330 <_sbrk_r+0x1c>)
 800b318:	2300      	movs	r3, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	f7f6 f9d6 	bl	80016d0 <_sbrk>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_sbrk_r+0x1a>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_sbrk_r+0x1a>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	20002100 	.word	0x20002100

0800b334 <memcpy>:
 800b334:	440a      	add	r2, r1
 800b336:	4291      	cmp	r1, r2
 800b338:	f100 33ff 	add.w	r3, r0, #4294967295
 800b33c:	d100      	bne.n	800b340 <memcpy+0xc>
 800b33e:	4770      	bx	lr
 800b340:	b510      	push	{r4, lr}
 800b342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b34a:	4291      	cmp	r1, r2
 800b34c:	d1f9      	bne.n	800b342 <memcpy+0xe>
 800b34e:	bd10      	pop	{r4, pc}

0800b350 <__assert_func>:
 800b350:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b352:	4614      	mov	r4, r2
 800b354:	461a      	mov	r2, r3
 800b356:	4b09      	ldr	r3, [pc, #36]	; (800b37c <__assert_func+0x2c>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4605      	mov	r5, r0
 800b35c:	68d8      	ldr	r0, [r3, #12]
 800b35e:	b14c      	cbz	r4, 800b374 <__assert_func+0x24>
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <__assert_func+0x30>)
 800b362:	9100      	str	r1, [sp, #0]
 800b364:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b368:	4906      	ldr	r1, [pc, #24]	; (800b384 <__assert_func+0x34>)
 800b36a:	462b      	mov	r3, r5
 800b36c:	f000 f872 	bl	800b454 <fiprintf>
 800b370:	f000 f882 	bl	800b478 <abort>
 800b374:	4b04      	ldr	r3, [pc, #16]	; (800b388 <__assert_func+0x38>)
 800b376:	461c      	mov	r4, r3
 800b378:	e7f3      	b.n	800b362 <__assert_func+0x12>
 800b37a:	bf00      	nop
 800b37c:	20000154 	.word	0x20000154
 800b380:	0800caff 	.word	0x0800caff
 800b384:	0800cb0c 	.word	0x0800cb0c
 800b388:	0800cb3a 	.word	0x0800cb3a

0800b38c <_calloc_r>:
 800b38c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b38e:	fba1 2402 	umull	r2, r4, r1, r2
 800b392:	b94c      	cbnz	r4, 800b3a8 <_calloc_r+0x1c>
 800b394:	4611      	mov	r1, r2
 800b396:	9201      	str	r2, [sp, #4]
 800b398:	f7ff f994 	bl	800a6c4 <_malloc_r>
 800b39c:	9a01      	ldr	r2, [sp, #4]
 800b39e:	4605      	mov	r5, r0
 800b3a0:	b930      	cbnz	r0, 800b3b0 <_calloc_r+0x24>
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	b003      	add	sp, #12
 800b3a6:	bd30      	pop	{r4, r5, pc}
 800b3a8:	220c      	movs	r2, #12
 800b3aa:	6002      	str	r2, [r0, #0]
 800b3ac:	2500      	movs	r5, #0
 800b3ae:	e7f8      	b.n	800b3a2 <_calloc_r+0x16>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	f7fe fa16 	bl	80097e2 <memset>
 800b3b6:	e7f4      	b.n	800b3a2 <_calloc_r+0x16>

0800b3b8 <__ascii_mbtowc>:
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	b901      	cbnz	r1, 800b3be <__ascii_mbtowc+0x6>
 800b3bc:	a901      	add	r1, sp, #4
 800b3be:	b142      	cbz	r2, 800b3d2 <__ascii_mbtowc+0x1a>
 800b3c0:	b14b      	cbz	r3, 800b3d6 <__ascii_mbtowc+0x1e>
 800b3c2:	7813      	ldrb	r3, [r2, #0]
 800b3c4:	600b      	str	r3, [r1, #0]
 800b3c6:	7812      	ldrb	r2, [r2, #0]
 800b3c8:	1e10      	subs	r0, r2, #0
 800b3ca:	bf18      	it	ne
 800b3cc:	2001      	movne	r0, #1
 800b3ce:	b002      	add	sp, #8
 800b3d0:	4770      	bx	lr
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	e7fb      	b.n	800b3ce <__ascii_mbtowc+0x16>
 800b3d6:	f06f 0001 	mvn.w	r0, #1
 800b3da:	e7f8      	b.n	800b3ce <__ascii_mbtowc+0x16>

0800b3dc <_realloc_r>:
 800b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e0:	4680      	mov	r8, r0
 800b3e2:	4614      	mov	r4, r2
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	b921      	cbnz	r1, 800b3f2 <_realloc_r+0x16>
 800b3e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ec:	4611      	mov	r1, r2
 800b3ee:	f7ff b969 	b.w	800a6c4 <_malloc_r>
 800b3f2:	b92a      	cbnz	r2, 800b400 <_realloc_r+0x24>
 800b3f4:	f7ff f8f2 	bl	800a5dc <_free_r>
 800b3f8:	4625      	mov	r5, r4
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b400:	f000 f841 	bl	800b486 <_malloc_usable_size_r>
 800b404:	4284      	cmp	r4, r0
 800b406:	4607      	mov	r7, r0
 800b408:	d802      	bhi.n	800b410 <_realloc_r+0x34>
 800b40a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b40e:	d812      	bhi.n	800b436 <_realloc_r+0x5a>
 800b410:	4621      	mov	r1, r4
 800b412:	4640      	mov	r0, r8
 800b414:	f7ff f956 	bl	800a6c4 <_malloc_r>
 800b418:	4605      	mov	r5, r0
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d0ed      	beq.n	800b3fa <_realloc_r+0x1e>
 800b41e:	42bc      	cmp	r4, r7
 800b420:	4622      	mov	r2, r4
 800b422:	4631      	mov	r1, r6
 800b424:	bf28      	it	cs
 800b426:	463a      	movcs	r2, r7
 800b428:	f7ff ff84 	bl	800b334 <memcpy>
 800b42c:	4631      	mov	r1, r6
 800b42e:	4640      	mov	r0, r8
 800b430:	f7ff f8d4 	bl	800a5dc <_free_r>
 800b434:	e7e1      	b.n	800b3fa <_realloc_r+0x1e>
 800b436:	4635      	mov	r5, r6
 800b438:	e7df      	b.n	800b3fa <_realloc_r+0x1e>

0800b43a <__ascii_wctomb>:
 800b43a:	b149      	cbz	r1, 800b450 <__ascii_wctomb+0x16>
 800b43c:	2aff      	cmp	r2, #255	; 0xff
 800b43e:	bf85      	ittet	hi
 800b440:	238a      	movhi	r3, #138	; 0x8a
 800b442:	6003      	strhi	r3, [r0, #0]
 800b444:	700a      	strbls	r2, [r1, #0]
 800b446:	f04f 30ff 	movhi.w	r0, #4294967295
 800b44a:	bf98      	it	ls
 800b44c:	2001      	movls	r0, #1
 800b44e:	4770      	bx	lr
 800b450:	4608      	mov	r0, r1
 800b452:	4770      	bx	lr

0800b454 <fiprintf>:
 800b454:	b40e      	push	{r1, r2, r3}
 800b456:	b503      	push	{r0, r1, lr}
 800b458:	4601      	mov	r1, r0
 800b45a:	ab03      	add	r3, sp, #12
 800b45c:	4805      	ldr	r0, [pc, #20]	; (800b474 <fiprintf+0x20>)
 800b45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b462:	6800      	ldr	r0, [r0, #0]
 800b464:	9301      	str	r3, [sp, #4]
 800b466:	f000 f83f 	bl	800b4e8 <_vfiprintf_r>
 800b46a:	b002      	add	sp, #8
 800b46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b470:	b003      	add	sp, #12
 800b472:	4770      	bx	lr
 800b474:	20000154 	.word	0x20000154

0800b478 <abort>:
 800b478:	b508      	push	{r3, lr}
 800b47a:	2006      	movs	r0, #6
 800b47c:	f000 fa0c 	bl	800b898 <raise>
 800b480:	2001      	movs	r0, #1
 800b482:	f7f6 f8ad 	bl	80015e0 <_exit>

0800b486 <_malloc_usable_size_r>:
 800b486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b48a:	1f18      	subs	r0, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfbc      	itt	lt
 800b490:	580b      	ldrlt	r3, [r1, r0]
 800b492:	18c0      	addlt	r0, r0, r3
 800b494:	4770      	bx	lr

0800b496 <__sfputc_r>:
 800b496:	6893      	ldr	r3, [r2, #8]
 800b498:	3b01      	subs	r3, #1
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	b410      	push	{r4}
 800b49e:	6093      	str	r3, [r2, #8]
 800b4a0:	da08      	bge.n	800b4b4 <__sfputc_r+0x1e>
 800b4a2:	6994      	ldr	r4, [r2, #24]
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	db01      	blt.n	800b4ac <__sfputc_r+0x16>
 800b4a8:	290a      	cmp	r1, #10
 800b4aa:	d103      	bne.n	800b4b4 <__sfputc_r+0x1e>
 800b4ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4b0:	f000 b934 	b.w	800b71c <__swbuf_r>
 800b4b4:	6813      	ldr	r3, [r2, #0]
 800b4b6:	1c58      	adds	r0, r3, #1
 800b4b8:	6010      	str	r0, [r2, #0]
 800b4ba:	7019      	strb	r1, [r3, #0]
 800b4bc:	4608      	mov	r0, r1
 800b4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <__sfputs_r>:
 800b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c6:	4606      	mov	r6, r0
 800b4c8:	460f      	mov	r7, r1
 800b4ca:	4614      	mov	r4, r2
 800b4cc:	18d5      	adds	r5, r2, r3
 800b4ce:	42ac      	cmp	r4, r5
 800b4d0:	d101      	bne.n	800b4d6 <__sfputs_r+0x12>
 800b4d2:	2000      	movs	r0, #0
 800b4d4:	e007      	b.n	800b4e6 <__sfputs_r+0x22>
 800b4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4da:	463a      	mov	r2, r7
 800b4dc:	4630      	mov	r0, r6
 800b4de:	f7ff ffda 	bl	800b496 <__sfputc_r>
 800b4e2:	1c43      	adds	r3, r0, #1
 800b4e4:	d1f3      	bne.n	800b4ce <__sfputs_r+0xa>
 800b4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4e8 <_vfiprintf_r>:
 800b4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ec:	460d      	mov	r5, r1
 800b4ee:	b09d      	sub	sp, #116	; 0x74
 800b4f0:	4614      	mov	r4, r2
 800b4f2:	4698      	mov	r8, r3
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	b118      	cbz	r0, 800b500 <_vfiprintf_r+0x18>
 800b4f8:	6a03      	ldr	r3, [r0, #32]
 800b4fa:	b90b      	cbnz	r3, 800b500 <_vfiprintf_r+0x18>
 800b4fc:	f7fe f8d8 	bl	80096b0 <__sinit>
 800b500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b502:	07d9      	lsls	r1, r3, #31
 800b504:	d405      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b506:	89ab      	ldrh	r3, [r5, #12]
 800b508:	059a      	lsls	r2, r3, #22
 800b50a:	d402      	bmi.n	800b512 <_vfiprintf_r+0x2a>
 800b50c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b50e:	f7fe f9e6 	bl	80098de <__retarget_lock_acquire_recursive>
 800b512:	89ab      	ldrh	r3, [r5, #12]
 800b514:	071b      	lsls	r3, r3, #28
 800b516:	d501      	bpl.n	800b51c <_vfiprintf_r+0x34>
 800b518:	692b      	ldr	r3, [r5, #16]
 800b51a:	b99b      	cbnz	r3, 800b544 <_vfiprintf_r+0x5c>
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f000 f93a 	bl	800b798 <__swsetup_r>
 800b524:	b170      	cbz	r0, 800b544 <_vfiprintf_r+0x5c>
 800b526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b528:	07dc      	lsls	r4, r3, #31
 800b52a:	d504      	bpl.n	800b536 <_vfiprintf_r+0x4e>
 800b52c:	f04f 30ff 	mov.w	r0, #4294967295
 800b530:	b01d      	add	sp, #116	; 0x74
 800b532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	0598      	lsls	r0, r3, #22
 800b53a:	d4f7      	bmi.n	800b52c <_vfiprintf_r+0x44>
 800b53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b53e:	f7fe f9cf 	bl	80098e0 <__retarget_lock_release_recursive>
 800b542:	e7f3      	b.n	800b52c <_vfiprintf_r+0x44>
 800b544:	2300      	movs	r3, #0
 800b546:	9309      	str	r3, [sp, #36]	; 0x24
 800b548:	2320      	movs	r3, #32
 800b54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b552:	2330      	movs	r3, #48	; 0x30
 800b554:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b708 <_vfiprintf_r+0x220>
 800b558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b55c:	f04f 0901 	mov.w	r9, #1
 800b560:	4623      	mov	r3, r4
 800b562:	469a      	mov	sl, r3
 800b564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b568:	b10a      	cbz	r2, 800b56e <_vfiprintf_r+0x86>
 800b56a:	2a25      	cmp	r2, #37	; 0x25
 800b56c:	d1f9      	bne.n	800b562 <_vfiprintf_r+0x7a>
 800b56e:	ebba 0b04 	subs.w	fp, sl, r4
 800b572:	d00b      	beq.n	800b58c <_vfiprintf_r+0xa4>
 800b574:	465b      	mov	r3, fp
 800b576:	4622      	mov	r2, r4
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ffa2 	bl	800b4c4 <__sfputs_r>
 800b580:	3001      	adds	r0, #1
 800b582:	f000 80a9 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b588:	445a      	add	r2, fp
 800b58a:	9209      	str	r2, [sp, #36]	; 0x24
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80a1 	beq.w	800b6d8 <_vfiprintf_r+0x1f0>
 800b596:	2300      	movs	r3, #0
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a0:	f10a 0a01 	add.w	sl, sl, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	9307      	str	r3, [sp, #28]
 800b5a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ae:	4654      	mov	r4, sl
 800b5b0:	2205      	movs	r2, #5
 800b5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b6:	4854      	ldr	r0, [pc, #336]	; (800b708 <_vfiprintf_r+0x220>)
 800b5b8:	f7f4 fe12 	bl	80001e0 <memchr>
 800b5bc:	9a04      	ldr	r2, [sp, #16]
 800b5be:	b9d8      	cbnz	r0, 800b5f8 <_vfiprintf_r+0x110>
 800b5c0:	06d1      	lsls	r1, r2, #27
 800b5c2:	bf44      	itt	mi
 800b5c4:	2320      	movmi	r3, #32
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ca:	0713      	lsls	r3, r2, #28
 800b5cc:	bf44      	itt	mi
 800b5ce:	232b      	movmi	r3, #43	; 0x2b
 800b5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5da:	d015      	beq.n	800b608 <_vfiprintf_r+0x120>
 800b5dc:	9a07      	ldr	r2, [sp, #28]
 800b5de:	4654      	mov	r4, sl
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f04f 0c0a 	mov.w	ip, #10
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ec:	3b30      	subs	r3, #48	; 0x30
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d94d      	bls.n	800b68e <_vfiprintf_r+0x1a6>
 800b5f2:	b1b0      	cbz	r0, 800b622 <_vfiprintf_r+0x13a>
 800b5f4:	9207      	str	r2, [sp, #28]
 800b5f6:	e014      	b.n	800b622 <_vfiprintf_r+0x13a>
 800b5f8:	eba0 0308 	sub.w	r3, r0, r8
 800b5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	46a2      	mov	sl, r4
 800b606:	e7d2      	b.n	800b5ae <_vfiprintf_r+0xc6>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	1d19      	adds	r1, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	bfbb      	ittet	lt
 800b614:	425b      	neglt	r3, r3
 800b616:	f042 0202 	orrlt.w	r2, r2, #2
 800b61a:	9307      	strge	r3, [sp, #28]
 800b61c:	9307      	strlt	r3, [sp, #28]
 800b61e:	bfb8      	it	lt
 800b620:	9204      	strlt	r2, [sp, #16]
 800b622:	7823      	ldrb	r3, [r4, #0]
 800b624:	2b2e      	cmp	r3, #46	; 0x2e
 800b626:	d10c      	bne.n	800b642 <_vfiprintf_r+0x15a>
 800b628:	7863      	ldrb	r3, [r4, #1]
 800b62a:	2b2a      	cmp	r3, #42	; 0x2a
 800b62c:	d134      	bne.n	800b698 <_vfiprintf_r+0x1b0>
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	9203      	str	r2, [sp, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfb8      	it	lt
 800b63a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b63e:	3402      	adds	r4, #2
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b718 <_vfiprintf_r+0x230>
 800b646:	7821      	ldrb	r1, [r4, #0]
 800b648:	2203      	movs	r2, #3
 800b64a:	4650      	mov	r0, sl
 800b64c:	f7f4 fdc8 	bl	80001e0 <memchr>
 800b650:	b138      	cbz	r0, 800b662 <_vfiprintf_r+0x17a>
 800b652:	9b04      	ldr	r3, [sp, #16]
 800b654:	eba0 000a 	sub.w	r0, r0, sl
 800b658:	2240      	movs	r2, #64	; 0x40
 800b65a:	4082      	lsls	r2, r0
 800b65c:	4313      	orrs	r3, r2
 800b65e:	3401      	adds	r4, #1
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b666:	4829      	ldr	r0, [pc, #164]	; (800b70c <_vfiprintf_r+0x224>)
 800b668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b66c:	2206      	movs	r2, #6
 800b66e:	f7f4 fdb7 	bl	80001e0 <memchr>
 800b672:	2800      	cmp	r0, #0
 800b674:	d03f      	beq.n	800b6f6 <_vfiprintf_r+0x20e>
 800b676:	4b26      	ldr	r3, [pc, #152]	; (800b710 <_vfiprintf_r+0x228>)
 800b678:	bb1b      	cbnz	r3, 800b6c2 <_vfiprintf_r+0x1da>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	3307      	adds	r3, #7
 800b67e:	f023 0307 	bic.w	r3, r3, #7
 800b682:	3308      	adds	r3, #8
 800b684:	9303      	str	r3, [sp, #12]
 800b686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b688:	443b      	add	r3, r7
 800b68a:	9309      	str	r3, [sp, #36]	; 0x24
 800b68c:	e768      	b.n	800b560 <_vfiprintf_r+0x78>
 800b68e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b692:	460c      	mov	r4, r1
 800b694:	2001      	movs	r0, #1
 800b696:	e7a6      	b.n	800b5e6 <_vfiprintf_r+0xfe>
 800b698:	2300      	movs	r3, #0
 800b69a:	3401      	adds	r4, #1
 800b69c:	9305      	str	r3, [sp, #20]
 800b69e:	4619      	mov	r1, r3
 800b6a0:	f04f 0c0a 	mov.w	ip, #10
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6aa:	3a30      	subs	r2, #48	; 0x30
 800b6ac:	2a09      	cmp	r2, #9
 800b6ae:	d903      	bls.n	800b6b8 <_vfiprintf_r+0x1d0>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0c6      	beq.n	800b642 <_vfiprintf_r+0x15a>
 800b6b4:	9105      	str	r1, [sp, #20]
 800b6b6:	e7c4      	b.n	800b642 <_vfiprintf_r+0x15a>
 800b6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6bc:	4604      	mov	r4, r0
 800b6be:	2301      	movs	r3, #1
 800b6c0:	e7f0      	b.n	800b6a4 <_vfiprintf_r+0x1bc>
 800b6c2:	ab03      	add	r3, sp, #12
 800b6c4:	9300      	str	r3, [sp, #0]
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4b12      	ldr	r3, [pc, #72]	; (800b714 <_vfiprintf_r+0x22c>)
 800b6ca:	a904      	add	r1, sp, #16
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f7fd fb9d 	bl	8008e0c <_printf_float>
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	1c78      	adds	r0, r7, #1
 800b6d6:	d1d6      	bne.n	800b686 <_vfiprintf_r+0x19e>
 800b6d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6da:	07d9      	lsls	r1, r3, #31
 800b6dc:	d405      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6de:	89ab      	ldrh	r3, [r5, #12]
 800b6e0:	059a      	lsls	r2, r3, #22
 800b6e2:	d402      	bmi.n	800b6ea <_vfiprintf_r+0x202>
 800b6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e6:	f7fe f8fb 	bl	80098e0 <__retarget_lock_release_recursive>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	065b      	lsls	r3, r3, #25
 800b6ee:	f53f af1d 	bmi.w	800b52c <_vfiprintf_r+0x44>
 800b6f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f4:	e71c      	b.n	800b530 <_vfiprintf_r+0x48>
 800b6f6:	ab03      	add	r3, sp, #12
 800b6f8:	9300      	str	r3, [sp, #0]
 800b6fa:	462a      	mov	r2, r5
 800b6fc:	4b05      	ldr	r3, [pc, #20]	; (800b714 <_vfiprintf_r+0x22c>)
 800b6fe:	a904      	add	r1, sp, #16
 800b700:	4630      	mov	r0, r6
 800b702:	f7fd fe27 	bl	8009354 <_printf_i>
 800b706:	e7e4      	b.n	800b6d2 <_vfiprintf_r+0x1ea>
 800b708:	0800cae4 	.word	0x0800cae4
 800b70c:	0800caee 	.word	0x0800caee
 800b710:	08008e0d 	.word	0x08008e0d
 800b714:	0800b4c5 	.word	0x0800b4c5
 800b718:	0800caea 	.word	0x0800caea

0800b71c <__swbuf_r>:
 800b71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71e:	460e      	mov	r6, r1
 800b720:	4614      	mov	r4, r2
 800b722:	4605      	mov	r5, r0
 800b724:	b118      	cbz	r0, 800b72e <__swbuf_r+0x12>
 800b726:	6a03      	ldr	r3, [r0, #32]
 800b728:	b90b      	cbnz	r3, 800b72e <__swbuf_r+0x12>
 800b72a:	f7fd ffc1 	bl	80096b0 <__sinit>
 800b72e:	69a3      	ldr	r3, [r4, #24]
 800b730:	60a3      	str	r3, [r4, #8]
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	071a      	lsls	r2, r3, #28
 800b736:	d525      	bpl.n	800b784 <__swbuf_r+0x68>
 800b738:	6923      	ldr	r3, [r4, #16]
 800b73a:	b31b      	cbz	r3, 800b784 <__swbuf_r+0x68>
 800b73c:	6823      	ldr	r3, [r4, #0]
 800b73e:	6922      	ldr	r2, [r4, #16]
 800b740:	1a98      	subs	r0, r3, r2
 800b742:	6963      	ldr	r3, [r4, #20]
 800b744:	b2f6      	uxtb	r6, r6
 800b746:	4283      	cmp	r3, r0
 800b748:	4637      	mov	r7, r6
 800b74a:	dc04      	bgt.n	800b756 <__swbuf_r+0x3a>
 800b74c:	4621      	mov	r1, r4
 800b74e:	4628      	mov	r0, r5
 800b750:	f7ff fd9e 	bl	800b290 <_fflush_r>
 800b754:	b9e0      	cbnz	r0, 800b790 <__swbuf_r+0x74>
 800b756:	68a3      	ldr	r3, [r4, #8]
 800b758:	3b01      	subs	r3, #1
 800b75a:	60a3      	str	r3, [r4, #8]
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	6022      	str	r2, [r4, #0]
 800b762:	701e      	strb	r6, [r3, #0]
 800b764:	6962      	ldr	r2, [r4, #20]
 800b766:	1c43      	adds	r3, r0, #1
 800b768:	429a      	cmp	r2, r3
 800b76a:	d004      	beq.n	800b776 <__swbuf_r+0x5a>
 800b76c:	89a3      	ldrh	r3, [r4, #12]
 800b76e:	07db      	lsls	r3, r3, #31
 800b770:	d506      	bpl.n	800b780 <__swbuf_r+0x64>
 800b772:	2e0a      	cmp	r6, #10
 800b774:	d104      	bne.n	800b780 <__swbuf_r+0x64>
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f7ff fd89 	bl	800b290 <_fflush_r>
 800b77e:	b938      	cbnz	r0, 800b790 <__swbuf_r+0x74>
 800b780:	4638      	mov	r0, r7
 800b782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b784:	4621      	mov	r1, r4
 800b786:	4628      	mov	r0, r5
 800b788:	f000 f806 	bl	800b798 <__swsetup_r>
 800b78c:	2800      	cmp	r0, #0
 800b78e:	d0d5      	beq.n	800b73c <__swbuf_r+0x20>
 800b790:	f04f 37ff 	mov.w	r7, #4294967295
 800b794:	e7f4      	b.n	800b780 <__swbuf_r+0x64>
	...

0800b798 <__swsetup_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	4b2a      	ldr	r3, [pc, #168]	; (800b844 <__swsetup_r+0xac>)
 800b79c:	4605      	mov	r5, r0
 800b79e:	6818      	ldr	r0, [r3, #0]
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	b118      	cbz	r0, 800b7ac <__swsetup_r+0x14>
 800b7a4:	6a03      	ldr	r3, [r0, #32]
 800b7a6:	b90b      	cbnz	r3, 800b7ac <__swsetup_r+0x14>
 800b7a8:	f7fd ff82 	bl	80096b0 <__sinit>
 800b7ac:	89a3      	ldrh	r3, [r4, #12]
 800b7ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7b2:	0718      	lsls	r0, r3, #28
 800b7b4:	d422      	bmi.n	800b7fc <__swsetup_r+0x64>
 800b7b6:	06d9      	lsls	r1, r3, #27
 800b7b8:	d407      	bmi.n	800b7ca <__swsetup_r+0x32>
 800b7ba:	2309      	movs	r3, #9
 800b7bc:	602b      	str	r3, [r5, #0]
 800b7be:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7c2:	81a3      	strh	r3, [r4, #12]
 800b7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c8:	e034      	b.n	800b834 <__swsetup_r+0x9c>
 800b7ca:	0758      	lsls	r0, r3, #29
 800b7cc:	d512      	bpl.n	800b7f4 <__swsetup_r+0x5c>
 800b7ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7d0:	b141      	cbz	r1, 800b7e4 <__swsetup_r+0x4c>
 800b7d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7d6:	4299      	cmp	r1, r3
 800b7d8:	d002      	beq.n	800b7e0 <__swsetup_r+0x48>
 800b7da:	4628      	mov	r0, r5
 800b7dc:	f7fe fefe 	bl	800a5dc <_free_r>
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	6363      	str	r3, [r4, #52]	; 0x34
 800b7e4:	89a3      	ldrh	r3, [r4, #12]
 800b7e6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	6063      	str	r3, [r4, #4]
 800b7f0:	6923      	ldr	r3, [r4, #16]
 800b7f2:	6023      	str	r3, [r4, #0]
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f043 0308 	orr.w	r3, r3, #8
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	6923      	ldr	r3, [r4, #16]
 800b7fe:	b94b      	cbnz	r3, 800b814 <__swsetup_r+0x7c>
 800b800:	89a3      	ldrh	r3, [r4, #12]
 800b802:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b806:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b80a:	d003      	beq.n	800b814 <__swsetup_r+0x7c>
 800b80c:	4621      	mov	r1, r4
 800b80e:	4628      	mov	r0, r5
 800b810:	f000 f884 	bl	800b91c <__smakebuf_r>
 800b814:	89a0      	ldrh	r0, [r4, #12]
 800b816:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b81a:	f010 0301 	ands.w	r3, r0, #1
 800b81e:	d00a      	beq.n	800b836 <__swsetup_r+0x9e>
 800b820:	2300      	movs	r3, #0
 800b822:	60a3      	str	r3, [r4, #8]
 800b824:	6963      	ldr	r3, [r4, #20]
 800b826:	425b      	negs	r3, r3
 800b828:	61a3      	str	r3, [r4, #24]
 800b82a:	6923      	ldr	r3, [r4, #16]
 800b82c:	b943      	cbnz	r3, 800b840 <__swsetup_r+0xa8>
 800b82e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b832:	d1c4      	bne.n	800b7be <__swsetup_r+0x26>
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	0781      	lsls	r1, r0, #30
 800b838:	bf58      	it	pl
 800b83a:	6963      	ldrpl	r3, [r4, #20]
 800b83c:	60a3      	str	r3, [r4, #8]
 800b83e:	e7f4      	b.n	800b82a <__swsetup_r+0x92>
 800b840:	2000      	movs	r0, #0
 800b842:	e7f7      	b.n	800b834 <__swsetup_r+0x9c>
 800b844:	20000154 	.word	0x20000154

0800b848 <_raise_r>:
 800b848:	291f      	cmp	r1, #31
 800b84a:	b538      	push	{r3, r4, r5, lr}
 800b84c:	4604      	mov	r4, r0
 800b84e:	460d      	mov	r5, r1
 800b850:	d904      	bls.n	800b85c <_raise_r+0x14>
 800b852:	2316      	movs	r3, #22
 800b854:	6003      	str	r3, [r0, #0]
 800b856:	f04f 30ff 	mov.w	r0, #4294967295
 800b85a:	bd38      	pop	{r3, r4, r5, pc}
 800b85c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b85e:	b112      	cbz	r2, 800b866 <_raise_r+0x1e>
 800b860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b864:	b94b      	cbnz	r3, 800b87a <_raise_r+0x32>
 800b866:	4620      	mov	r0, r4
 800b868:	f000 f830 	bl	800b8cc <_getpid_r>
 800b86c:	462a      	mov	r2, r5
 800b86e:	4601      	mov	r1, r0
 800b870:	4620      	mov	r0, r4
 800b872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b876:	f000 b817 	b.w	800b8a8 <_kill_r>
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d00a      	beq.n	800b894 <_raise_r+0x4c>
 800b87e:	1c59      	adds	r1, r3, #1
 800b880:	d103      	bne.n	800b88a <_raise_r+0x42>
 800b882:	2316      	movs	r3, #22
 800b884:	6003      	str	r3, [r0, #0]
 800b886:	2001      	movs	r0, #1
 800b888:	e7e7      	b.n	800b85a <_raise_r+0x12>
 800b88a:	2400      	movs	r4, #0
 800b88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b890:	4628      	mov	r0, r5
 800b892:	4798      	blx	r3
 800b894:	2000      	movs	r0, #0
 800b896:	e7e0      	b.n	800b85a <_raise_r+0x12>

0800b898 <raise>:
 800b898:	4b02      	ldr	r3, [pc, #8]	; (800b8a4 <raise+0xc>)
 800b89a:	4601      	mov	r1, r0
 800b89c:	6818      	ldr	r0, [r3, #0]
 800b89e:	f7ff bfd3 	b.w	800b848 <_raise_r>
 800b8a2:	bf00      	nop
 800b8a4:	20000154 	.word	0x20000154

0800b8a8 <_kill_r>:
 800b8a8:	b538      	push	{r3, r4, r5, lr}
 800b8aa:	4d07      	ldr	r5, [pc, #28]	; (800b8c8 <_kill_r+0x20>)
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	4608      	mov	r0, r1
 800b8b2:	4611      	mov	r1, r2
 800b8b4:	602b      	str	r3, [r5, #0]
 800b8b6:	f7f5 fe83 	bl	80015c0 <_kill>
 800b8ba:	1c43      	adds	r3, r0, #1
 800b8bc:	d102      	bne.n	800b8c4 <_kill_r+0x1c>
 800b8be:	682b      	ldr	r3, [r5, #0]
 800b8c0:	b103      	cbz	r3, 800b8c4 <_kill_r+0x1c>
 800b8c2:	6023      	str	r3, [r4, #0]
 800b8c4:	bd38      	pop	{r3, r4, r5, pc}
 800b8c6:	bf00      	nop
 800b8c8:	20002100 	.word	0x20002100

0800b8cc <_getpid_r>:
 800b8cc:	f7f5 be70 	b.w	80015b0 <_getpid>

0800b8d0 <__swhatbuf_r>:
 800b8d0:	b570      	push	{r4, r5, r6, lr}
 800b8d2:	460c      	mov	r4, r1
 800b8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8d8:	2900      	cmp	r1, #0
 800b8da:	b096      	sub	sp, #88	; 0x58
 800b8dc:	4615      	mov	r5, r2
 800b8de:	461e      	mov	r6, r3
 800b8e0:	da0d      	bge.n	800b8fe <__swhatbuf_r+0x2e>
 800b8e2:	89a3      	ldrh	r3, [r4, #12]
 800b8e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8e8:	f04f 0100 	mov.w	r1, #0
 800b8ec:	bf0c      	ite	eq
 800b8ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8f2:	2340      	movne	r3, #64	; 0x40
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	6031      	str	r1, [r6, #0]
 800b8f8:	602b      	str	r3, [r5, #0]
 800b8fa:	b016      	add	sp, #88	; 0x58
 800b8fc:	bd70      	pop	{r4, r5, r6, pc}
 800b8fe:	466a      	mov	r2, sp
 800b900:	f000 f848 	bl	800b994 <_fstat_r>
 800b904:	2800      	cmp	r0, #0
 800b906:	dbec      	blt.n	800b8e2 <__swhatbuf_r+0x12>
 800b908:	9901      	ldr	r1, [sp, #4]
 800b90a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b90e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b912:	4259      	negs	r1, r3
 800b914:	4159      	adcs	r1, r3
 800b916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b91a:	e7eb      	b.n	800b8f4 <__swhatbuf_r+0x24>

0800b91c <__smakebuf_r>:
 800b91c:	898b      	ldrh	r3, [r1, #12]
 800b91e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b920:	079d      	lsls	r5, r3, #30
 800b922:	4606      	mov	r6, r0
 800b924:	460c      	mov	r4, r1
 800b926:	d507      	bpl.n	800b938 <__smakebuf_r+0x1c>
 800b928:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b92c:	6023      	str	r3, [r4, #0]
 800b92e:	6123      	str	r3, [r4, #16]
 800b930:	2301      	movs	r3, #1
 800b932:	6163      	str	r3, [r4, #20]
 800b934:	b002      	add	sp, #8
 800b936:	bd70      	pop	{r4, r5, r6, pc}
 800b938:	ab01      	add	r3, sp, #4
 800b93a:	466a      	mov	r2, sp
 800b93c:	f7ff ffc8 	bl	800b8d0 <__swhatbuf_r>
 800b940:	9900      	ldr	r1, [sp, #0]
 800b942:	4605      	mov	r5, r0
 800b944:	4630      	mov	r0, r6
 800b946:	f7fe febd 	bl	800a6c4 <_malloc_r>
 800b94a:	b948      	cbnz	r0, 800b960 <__smakebuf_r+0x44>
 800b94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b950:	059a      	lsls	r2, r3, #22
 800b952:	d4ef      	bmi.n	800b934 <__smakebuf_r+0x18>
 800b954:	f023 0303 	bic.w	r3, r3, #3
 800b958:	f043 0302 	orr.w	r3, r3, #2
 800b95c:	81a3      	strh	r3, [r4, #12]
 800b95e:	e7e3      	b.n	800b928 <__smakebuf_r+0xc>
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	6020      	str	r0, [r4, #0]
 800b964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	9b00      	ldr	r3, [sp, #0]
 800b96c:	6163      	str	r3, [r4, #20]
 800b96e:	9b01      	ldr	r3, [sp, #4]
 800b970:	6120      	str	r0, [r4, #16]
 800b972:	b15b      	cbz	r3, 800b98c <__smakebuf_r+0x70>
 800b974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b978:	4630      	mov	r0, r6
 800b97a:	f000 f81d 	bl	800b9b8 <_isatty_r>
 800b97e:	b128      	cbz	r0, 800b98c <__smakebuf_r+0x70>
 800b980:	89a3      	ldrh	r3, [r4, #12]
 800b982:	f023 0303 	bic.w	r3, r3, #3
 800b986:	f043 0301 	orr.w	r3, r3, #1
 800b98a:	81a3      	strh	r3, [r4, #12]
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	431d      	orrs	r5, r3
 800b990:	81a5      	strh	r5, [r4, #12]
 800b992:	e7cf      	b.n	800b934 <__smakebuf_r+0x18>

0800b994 <_fstat_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	4d07      	ldr	r5, [pc, #28]	; (800b9b4 <_fstat_r+0x20>)
 800b998:	2300      	movs	r3, #0
 800b99a:	4604      	mov	r4, r0
 800b99c:	4608      	mov	r0, r1
 800b99e:	4611      	mov	r1, r2
 800b9a0:	602b      	str	r3, [r5, #0]
 800b9a2:	f7f5 fe6c 	bl	800167e <_fstat>
 800b9a6:	1c43      	adds	r3, r0, #1
 800b9a8:	d102      	bne.n	800b9b0 <_fstat_r+0x1c>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b103      	cbz	r3, 800b9b0 <_fstat_r+0x1c>
 800b9ae:	6023      	str	r3, [r4, #0]
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20002100 	.word	0x20002100

0800b9b8 <_isatty_r>:
 800b9b8:	b538      	push	{r3, r4, r5, lr}
 800b9ba:	4d06      	ldr	r5, [pc, #24]	; (800b9d4 <_isatty_r+0x1c>)
 800b9bc:	2300      	movs	r3, #0
 800b9be:	4604      	mov	r4, r0
 800b9c0:	4608      	mov	r0, r1
 800b9c2:	602b      	str	r3, [r5, #0]
 800b9c4:	f7f5 fe6b 	bl	800169e <_isatty>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_isatty_r+0x1a>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_isatty_r+0x1a>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	20002100 	.word	0x20002100

0800b9d8 <pow>:
 800b9d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9da:	ed2d 8b02 	vpush	{d8}
 800b9de:	eeb0 8a40 	vmov.f32	s16, s0
 800b9e2:	eef0 8a60 	vmov.f32	s17, s1
 800b9e6:	ec55 4b11 	vmov	r4, r5, d1
 800b9ea:	f000 f871 	bl	800bad0 <__ieee754_pow>
 800b9ee:	4622      	mov	r2, r4
 800b9f0:	462b      	mov	r3, r5
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	ec57 6b10 	vmov	r6, r7, d0
 800b9fa:	f7f5 f89f 	bl	8000b3c <__aeabi_dcmpun>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d13b      	bne.n	800ba7a <pow+0xa2>
 800ba02:	ec51 0b18 	vmov	r0, r1, d8
 800ba06:	2200      	movs	r2, #0
 800ba08:	2300      	movs	r3, #0
 800ba0a:	f7f5 f865 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba0e:	b1b8      	cbz	r0, 800ba40 <pow+0x68>
 800ba10:	2200      	movs	r2, #0
 800ba12:	2300      	movs	r3, #0
 800ba14:	4620      	mov	r0, r4
 800ba16:	4629      	mov	r1, r5
 800ba18:	f7f5 f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d146      	bne.n	800baae <pow+0xd6>
 800ba20:	ec45 4b10 	vmov	d0, r4, r5
 800ba24:	f000 f848 	bl	800bab8 <finite>
 800ba28:	b338      	cbz	r0, 800ba7a <pow+0xa2>
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f5 f85b 	bl	8000aec <__aeabi_dcmplt>
 800ba36:	b300      	cbz	r0, 800ba7a <pow+0xa2>
 800ba38:	f7fd ff26 	bl	8009888 <__errno>
 800ba3c:	2322      	movs	r3, #34	; 0x22
 800ba3e:	e01b      	b.n	800ba78 <pow+0xa0>
 800ba40:	ec47 6b10 	vmov	d0, r6, r7
 800ba44:	f000 f838 	bl	800bab8 <finite>
 800ba48:	b9e0      	cbnz	r0, 800ba84 <pow+0xac>
 800ba4a:	eeb0 0a48 	vmov.f32	s0, s16
 800ba4e:	eef0 0a68 	vmov.f32	s1, s17
 800ba52:	f000 f831 	bl	800bab8 <finite>
 800ba56:	b1a8      	cbz	r0, 800ba84 <pow+0xac>
 800ba58:	ec45 4b10 	vmov	d0, r4, r5
 800ba5c:	f000 f82c 	bl	800bab8 <finite>
 800ba60:	b180      	cbz	r0, 800ba84 <pow+0xac>
 800ba62:	4632      	mov	r2, r6
 800ba64:	463b      	mov	r3, r7
 800ba66:	4630      	mov	r0, r6
 800ba68:	4639      	mov	r1, r7
 800ba6a:	f7f5 f867 	bl	8000b3c <__aeabi_dcmpun>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d0e2      	beq.n	800ba38 <pow+0x60>
 800ba72:	f7fd ff09 	bl	8009888 <__errno>
 800ba76:	2321      	movs	r3, #33	; 0x21
 800ba78:	6003      	str	r3, [r0, #0]
 800ba7a:	ecbd 8b02 	vpop	{d8}
 800ba7e:	ec47 6b10 	vmov	d0, r6, r7
 800ba82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba84:	2200      	movs	r2, #0
 800ba86:	2300      	movs	r3, #0
 800ba88:	4630      	mov	r0, r6
 800ba8a:	4639      	mov	r1, r7
 800ba8c:	f7f5 f824 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	d0f2      	beq.n	800ba7a <pow+0xa2>
 800ba94:	eeb0 0a48 	vmov.f32	s0, s16
 800ba98:	eef0 0a68 	vmov.f32	s1, s17
 800ba9c:	f000 f80c 	bl	800bab8 <finite>
 800baa0:	2800      	cmp	r0, #0
 800baa2:	d0ea      	beq.n	800ba7a <pow+0xa2>
 800baa4:	ec45 4b10 	vmov	d0, r4, r5
 800baa8:	f000 f806 	bl	800bab8 <finite>
 800baac:	e7c3      	b.n	800ba36 <pow+0x5e>
 800baae:	4f01      	ldr	r7, [pc, #4]	; (800bab4 <pow+0xdc>)
 800bab0:	2600      	movs	r6, #0
 800bab2:	e7e2      	b.n	800ba7a <pow+0xa2>
 800bab4:	3ff00000 	.word	0x3ff00000

0800bab8 <finite>:
 800bab8:	b082      	sub	sp, #8
 800baba:	ed8d 0b00 	vstr	d0, [sp]
 800babe:	9801      	ldr	r0, [sp, #4]
 800bac0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bac4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bac8:	0fc0      	lsrs	r0, r0, #31
 800baca:	b002      	add	sp, #8
 800bacc:	4770      	bx	lr
	...

0800bad0 <__ieee754_pow>:
 800bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bad4:	ed2d 8b06 	vpush	{d8-d10}
 800bad8:	b089      	sub	sp, #36	; 0x24
 800bada:	ed8d 1b00 	vstr	d1, [sp]
 800bade:	e9dd 2900 	ldrd	r2, r9, [sp]
 800bae2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800bae6:	ea58 0102 	orrs.w	r1, r8, r2
 800baea:	ec57 6b10 	vmov	r6, r7, d0
 800baee:	d115      	bne.n	800bb1c <__ieee754_pow+0x4c>
 800baf0:	19b3      	adds	r3, r6, r6
 800baf2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800baf6:	4152      	adcs	r2, r2
 800baf8:	4299      	cmp	r1, r3
 800bafa:	4b89      	ldr	r3, [pc, #548]	; (800bd20 <__ieee754_pow+0x250>)
 800bafc:	4193      	sbcs	r3, r2
 800bafe:	f080 84d1 	bcs.w	800c4a4 <__ieee754_pow+0x9d4>
 800bb02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb06:	4630      	mov	r0, r6
 800bb08:	4639      	mov	r1, r7
 800bb0a:	f7f4 fbc7 	bl	800029c <__adddf3>
 800bb0e:	ec41 0b10 	vmov	d0, r0, r1
 800bb12:	b009      	add	sp, #36	; 0x24
 800bb14:	ecbd 8b06 	vpop	{d8-d10}
 800bb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1c:	4b81      	ldr	r3, [pc, #516]	; (800bd24 <__ieee754_pow+0x254>)
 800bb1e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800bb22:	429c      	cmp	r4, r3
 800bb24:	ee10 aa10 	vmov	sl, s0
 800bb28:	463d      	mov	r5, r7
 800bb2a:	dc06      	bgt.n	800bb3a <__ieee754_pow+0x6a>
 800bb2c:	d101      	bne.n	800bb32 <__ieee754_pow+0x62>
 800bb2e:	2e00      	cmp	r6, #0
 800bb30:	d1e7      	bne.n	800bb02 <__ieee754_pow+0x32>
 800bb32:	4598      	cmp	r8, r3
 800bb34:	dc01      	bgt.n	800bb3a <__ieee754_pow+0x6a>
 800bb36:	d10f      	bne.n	800bb58 <__ieee754_pow+0x88>
 800bb38:	b172      	cbz	r2, 800bb58 <__ieee754_pow+0x88>
 800bb3a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800bb3e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800bb42:	ea55 050a 	orrs.w	r5, r5, sl
 800bb46:	d1dc      	bne.n	800bb02 <__ieee754_pow+0x32>
 800bb48:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb4c:	18db      	adds	r3, r3, r3
 800bb4e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800bb52:	4152      	adcs	r2, r2
 800bb54:	429d      	cmp	r5, r3
 800bb56:	e7d0      	b.n	800bafa <__ieee754_pow+0x2a>
 800bb58:	2d00      	cmp	r5, #0
 800bb5a:	da3b      	bge.n	800bbd4 <__ieee754_pow+0x104>
 800bb5c:	4b72      	ldr	r3, [pc, #456]	; (800bd28 <__ieee754_pow+0x258>)
 800bb5e:	4598      	cmp	r8, r3
 800bb60:	dc51      	bgt.n	800bc06 <__ieee754_pow+0x136>
 800bb62:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bb66:	4598      	cmp	r8, r3
 800bb68:	f340 84ab 	ble.w	800c4c2 <__ieee754_pow+0x9f2>
 800bb6c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb74:	2b14      	cmp	r3, #20
 800bb76:	dd0f      	ble.n	800bb98 <__ieee754_pow+0xc8>
 800bb78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bb7c:	fa22 f103 	lsr.w	r1, r2, r3
 800bb80:	fa01 f303 	lsl.w	r3, r1, r3
 800bb84:	4293      	cmp	r3, r2
 800bb86:	f040 849c 	bne.w	800c4c2 <__ieee754_pow+0x9f2>
 800bb8a:	f001 0101 	and.w	r1, r1, #1
 800bb8e:	f1c1 0302 	rsb	r3, r1, #2
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	b182      	cbz	r2, 800bbb8 <__ieee754_pow+0xe8>
 800bb96:	e05f      	b.n	800bc58 <__ieee754_pow+0x188>
 800bb98:	2a00      	cmp	r2, #0
 800bb9a:	d15b      	bne.n	800bc54 <__ieee754_pow+0x184>
 800bb9c:	f1c3 0314 	rsb	r3, r3, #20
 800bba0:	fa48 f103 	asr.w	r1, r8, r3
 800bba4:	fa01 f303 	lsl.w	r3, r1, r3
 800bba8:	4543      	cmp	r3, r8
 800bbaa:	f040 8487 	bne.w	800c4bc <__ieee754_pow+0x9ec>
 800bbae:	f001 0101 	and.w	r1, r1, #1
 800bbb2:	f1c1 0302 	rsb	r3, r1, #2
 800bbb6:	9304      	str	r3, [sp, #16]
 800bbb8:	4b5c      	ldr	r3, [pc, #368]	; (800bd2c <__ieee754_pow+0x25c>)
 800bbba:	4598      	cmp	r8, r3
 800bbbc:	d132      	bne.n	800bc24 <__ieee754_pow+0x154>
 800bbbe:	f1b9 0f00 	cmp.w	r9, #0
 800bbc2:	f280 8477 	bge.w	800c4b4 <__ieee754_pow+0x9e4>
 800bbc6:	4959      	ldr	r1, [pc, #356]	; (800bd2c <__ieee754_pow+0x25c>)
 800bbc8:	4632      	mov	r2, r6
 800bbca:	463b      	mov	r3, r7
 800bbcc:	2000      	movs	r0, #0
 800bbce:	f7f4 fe45 	bl	800085c <__aeabi_ddiv>
 800bbd2:	e79c      	b.n	800bb0e <__ieee754_pow+0x3e>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	2a00      	cmp	r2, #0
 800bbda:	d13d      	bne.n	800bc58 <__ieee754_pow+0x188>
 800bbdc:	4b51      	ldr	r3, [pc, #324]	; (800bd24 <__ieee754_pow+0x254>)
 800bbde:	4598      	cmp	r8, r3
 800bbe0:	d1ea      	bne.n	800bbb8 <__ieee754_pow+0xe8>
 800bbe2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bbe6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bbea:	ea53 030a 	orrs.w	r3, r3, sl
 800bbee:	f000 8459 	beq.w	800c4a4 <__ieee754_pow+0x9d4>
 800bbf2:	4b4f      	ldr	r3, [pc, #316]	; (800bd30 <__ieee754_pow+0x260>)
 800bbf4:	429c      	cmp	r4, r3
 800bbf6:	dd08      	ble.n	800bc0a <__ieee754_pow+0x13a>
 800bbf8:	f1b9 0f00 	cmp.w	r9, #0
 800bbfc:	f2c0 8456 	blt.w	800c4ac <__ieee754_pow+0x9dc>
 800bc00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc04:	e783      	b.n	800bb0e <__ieee754_pow+0x3e>
 800bc06:	2302      	movs	r3, #2
 800bc08:	e7e5      	b.n	800bbd6 <__ieee754_pow+0x106>
 800bc0a:	f1b9 0f00 	cmp.w	r9, #0
 800bc0e:	f04f 0000 	mov.w	r0, #0
 800bc12:	f04f 0100 	mov.w	r1, #0
 800bc16:	f6bf af7a 	bge.w	800bb0e <__ieee754_pow+0x3e>
 800bc1a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bc1e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc22:	e774      	b.n	800bb0e <__ieee754_pow+0x3e>
 800bc24:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800bc28:	d106      	bne.n	800bc38 <__ieee754_pow+0x168>
 800bc2a:	4632      	mov	r2, r6
 800bc2c:	463b      	mov	r3, r7
 800bc2e:	4630      	mov	r0, r6
 800bc30:	4639      	mov	r1, r7
 800bc32:	f7f4 fce9 	bl	8000608 <__aeabi_dmul>
 800bc36:	e76a      	b.n	800bb0e <__ieee754_pow+0x3e>
 800bc38:	4b3e      	ldr	r3, [pc, #248]	; (800bd34 <__ieee754_pow+0x264>)
 800bc3a:	4599      	cmp	r9, r3
 800bc3c:	d10c      	bne.n	800bc58 <__ieee754_pow+0x188>
 800bc3e:	2d00      	cmp	r5, #0
 800bc40:	db0a      	blt.n	800bc58 <__ieee754_pow+0x188>
 800bc42:	ec47 6b10 	vmov	d0, r6, r7
 800bc46:	b009      	add	sp, #36	; 0x24
 800bc48:	ecbd 8b06 	vpop	{d8-d10}
 800bc4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc50:	f000 bd20 	b.w	800c694 <__ieee754_sqrt>
 800bc54:	2300      	movs	r3, #0
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	ec47 6b10 	vmov	d0, r6, r7
 800bc5c:	f000 fc62 	bl	800c524 <fabs>
 800bc60:	ec51 0b10 	vmov	r0, r1, d0
 800bc64:	f1ba 0f00 	cmp.w	sl, #0
 800bc68:	d129      	bne.n	800bcbe <__ieee754_pow+0x1ee>
 800bc6a:	b124      	cbz	r4, 800bc76 <__ieee754_pow+0x1a6>
 800bc6c:	4b2f      	ldr	r3, [pc, #188]	; (800bd2c <__ieee754_pow+0x25c>)
 800bc6e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d123      	bne.n	800bcbe <__ieee754_pow+0x1ee>
 800bc76:	f1b9 0f00 	cmp.w	r9, #0
 800bc7a:	da05      	bge.n	800bc88 <__ieee754_pow+0x1b8>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	2000      	movs	r0, #0
 800bc82:	492a      	ldr	r1, [pc, #168]	; (800bd2c <__ieee754_pow+0x25c>)
 800bc84:	f7f4 fdea 	bl	800085c <__aeabi_ddiv>
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	f6bf af40 	bge.w	800bb0e <__ieee754_pow+0x3e>
 800bc8e:	9b04      	ldr	r3, [sp, #16]
 800bc90:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bc94:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc98:	431c      	orrs	r4, r3
 800bc9a:	d108      	bne.n	800bcae <__ieee754_pow+0x1de>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4610      	mov	r0, r2
 800bca2:	4619      	mov	r1, r3
 800bca4:	f7f4 faf8 	bl	8000298 <__aeabi_dsub>
 800bca8:	4602      	mov	r2, r0
 800bcaa:	460b      	mov	r3, r1
 800bcac:	e78f      	b.n	800bbce <__ieee754_pow+0xfe>
 800bcae:	9b04      	ldr	r3, [sp, #16]
 800bcb0:	2b01      	cmp	r3, #1
 800bcb2:	f47f af2c 	bne.w	800bb0e <__ieee754_pow+0x3e>
 800bcb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bcba:	4619      	mov	r1, r3
 800bcbc:	e727      	b.n	800bb0e <__ieee754_pow+0x3e>
 800bcbe:	0feb      	lsrs	r3, r5, #31
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	9306      	str	r3, [sp, #24]
 800bcc4:	9a06      	ldr	r2, [sp, #24]
 800bcc6:	9b04      	ldr	r3, [sp, #16]
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	d102      	bne.n	800bcd2 <__ieee754_pow+0x202>
 800bccc:	4632      	mov	r2, r6
 800bcce:	463b      	mov	r3, r7
 800bcd0:	e7e6      	b.n	800bca0 <__ieee754_pow+0x1d0>
 800bcd2:	4b19      	ldr	r3, [pc, #100]	; (800bd38 <__ieee754_pow+0x268>)
 800bcd4:	4598      	cmp	r8, r3
 800bcd6:	f340 80fb 	ble.w	800bed0 <__ieee754_pow+0x400>
 800bcda:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bcde:	4598      	cmp	r8, r3
 800bce0:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <__ieee754_pow+0x260>)
 800bce2:	dd0c      	ble.n	800bcfe <__ieee754_pow+0x22e>
 800bce4:	429c      	cmp	r4, r3
 800bce6:	dc0f      	bgt.n	800bd08 <__ieee754_pow+0x238>
 800bce8:	f1b9 0f00 	cmp.w	r9, #0
 800bcec:	da0f      	bge.n	800bd0e <__ieee754_pow+0x23e>
 800bcee:	2000      	movs	r0, #0
 800bcf0:	b009      	add	sp, #36	; 0x24
 800bcf2:	ecbd 8b06 	vpop	{d8-d10}
 800bcf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcfa:	f000 bcc2 	b.w	800c682 <__math_oflow>
 800bcfe:	429c      	cmp	r4, r3
 800bd00:	dbf2      	blt.n	800bce8 <__ieee754_pow+0x218>
 800bd02:	4b0a      	ldr	r3, [pc, #40]	; (800bd2c <__ieee754_pow+0x25c>)
 800bd04:	429c      	cmp	r4, r3
 800bd06:	dd19      	ble.n	800bd3c <__ieee754_pow+0x26c>
 800bd08:	f1b9 0f00 	cmp.w	r9, #0
 800bd0c:	dcef      	bgt.n	800bcee <__ieee754_pow+0x21e>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	b009      	add	sp, #36	; 0x24
 800bd12:	ecbd 8b06 	vpop	{d8-d10}
 800bd16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1a:	f000 bca9 	b.w	800c670 <__math_uflow>
 800bd1e:	bf00      	nop
 800bd20:	fff00000 	.word	0xfff00000
 800bd24:	7ff00000 	.word	0x7ff00000
 800bd28:	433fffff 	.word	0x433fffff
 800bd2c:	3ff00000 	.word	0x3ff00000
 800bd30:	3fefffff 	.word	0x3fefffff
 800bd34:	3fe00000 	.word	0x3fe00000
 800bd38:	41e00000 	.word	0x41e00000
 800bd3c:	4b60      	ldr	r3, [pc, #384]	; (800bec0 <__ieee754_pow+0x3f0>)
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f7f4 faaa 	bl	8000298 <__aeabi_dsub>
 800bd44:	a354      	add	r3, pc, #336	; (adr r3, 800be98 <__ieee754_pow+0x3c8>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	4604      	mov	r4, r0
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	f7f4 fc5b 	bl	8000608 <__aeabi_dmul>
 800bd52:	a353      	add	r3, pc, #332	; (adr r3, 800bea0 <__ieee754_pow+0x3d0>)
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	4606      	mov	r6, r0
 800bd5a:	460f      	mov	r7, r1
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	4629      	mov	r1, r5
 800bd60:	f7f4 fc52 	bl	8000608 <__aeabi_dmul>
 800bd64:	4b57      	ldr	r3, [pc, #348]	; (800bec4 <__ieee754_pow+0x3f4>)
 800bd66:	4682      	mov	sl, r0
 800bd68:	468b      	mov	fp, r1
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	4629      	mov	r1, r5
 800bd70:	f7f4 fc4a 	bl	8000608 <__aeabi_dmul>
 800bd74:	4602      	mov	r2, r0
 800bd76:	460b      	mov	r3, r1
 800bd78:	a14b      	add	r1, pc, #300	; (adr r1, 800bea8 <__ieee754_pow+0x3d8>)
 800bd7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd7e:	f7f4 fa8b 	bl	8000298 <__aeabi_dsub>
 800bd82:	4622      	mov	r2, r4
 800bd84:	462b      	mov	r3, r5
 800bd86:	f7f4 fc3f 	bl	8000608 <__aeabi_dmul>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	2000      	movs	r0, #0
 800bd90:	494d      	ldr	r1, [pc, #308]	; (800bec8 <__ieee754_pow+0x3f8>)
 800bd92:	f7f4 fa81 	bl	8000298 <__aeabi_dsub>
 800bd96:	4622      	mov	r2, r4
 800bd98:	4680      	mov	r8, r0
 800bd9a:	4689      	mov	r9, r1
 800bd9c:	462b      	mov	r3, r5
 800bd9e:	4620      	mov	r0, r4
 800bda0:	4629      	mov	r1, r5
 800bda2:	f7f4 fc31 	bl	8000608 <__aeabi_dmul>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fc2b 	bl	8000608 <__aeabi_dmul>
 800bdb2:	a33f      	add	r3, pc, #252	; (adr r3, 800beb0 <__ieee754_pow+0x3e0>)
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f7f4 fc26 	bl	8000608 <__aeabi_dmul>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4650      	mov	r0, sl
 800bdc2:	4659      	mov	r1, fp
 800bdc4:	f7f4 fa68 	bl	8000298 <__aeabi_dsub>
 800bdc8:	4602      	mov	r2, r0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4680      	mov	r8, r0
 800bdce:	4689      	mov	r9, r1
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7f4 fa62 	bl	800029c <__adddf3>
 800bdd8:	2000      	movs	r0, #0
 800bdda:	4632      	mov	r2, r6
 800bddc:	463b      	mov	r3, r7
 800bdde:	4604      	mov	r4, r0
 800bde0:	460d      	mov	r5, r1
 800bde2:	f7f4 fa59 	bl	8000298 <__aeabi_dsub>
 800bde6:	4602      	mov	r2, r0
 800bde8:	460b      	mov	r3, r1
 800bdea:	4640      	mov	r0, r8
 800bdec:	4649      	mov	r1, r9
 800bdee:	f7f4 fa53 	bl	8000298 <__aeabi_dsub>
 800bdf2:	9b04      	ldr	r3, [sp, #16]
 800bdf4:	9a06      	ldr	r2, [sp, #24]
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	4682      	mov	sl, r0
 800bdfc:	468b      	mov	fp, r1
 800bdfe:	f040 81e7 	bne.w	800c1d0 <__ieee754_pow+0x700>
 800be02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800beb8 <__ieee754_pow+0x3e8>
 800be06:	eeb0 8a47 	vmov.f32	s16, s14
 800be0a:	eef0 8a67 	vmov.f32	s17, s15
 800be0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be12:	2600      	movs	r6, #0
 800be14:	4632      	mov	r2, r6
 800be16:	463b      	mov	r3, r7
 800be18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be1c:	f7f4 fa3c 	bl	8000298 <__aeabi_dsub>
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	f7f4 fbf0 	bl	8000608 <__aeabi_dmul>
 800be28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be2c:	4680      	mov	r8, r0
 800be2e:	4689      	mov	r9, r1
 800be30:	4650      	mov	r0, sl
 800be32:	4659      	mov	r1, fp
 800be34:	f7f4 fbe8 	bl	8000608 <__aeabi_dmul>
 800be38:	4602      	mov	r2, r0
 800be3a:	460b      	mov	r3, r1
 800be3c:	4640      	mov	r0, r8
 800be3e:	4649      	mov	r1, r9
 800be40:	f7f4 fa2c 	bl	800029c <__adddf3>
 800be44:	4632      	mov	r2, r6
 800be46:	463b      	mov	r3, r7
 800be48:	4680      	mov	r8, r0
 800be4a:	4689      	mov	r9, r1
 800be4c:	4620      	mov	r0, r4
 800be4e:	4629      	mov	r1, r5
 800be50:	f7f4 fbda 	bl	8000608 <__aeabi_dmul>
 800be54:	460b      	mov	r3, r1
 800be56:	4604      	mov	r4, r0
 800be58:	460d      	mov	r5, r1
 800be5a:	4602      	mov	r2, r0
 800be5c:	4649      	mov	r1, r9
 800be5e:	4640      	mov	r0, r8
 800be60:	f7f4 fa1c 	bl	800029c <__adddf3>
 800be64:	4b19      	ldr	r3, [pc, #100]	; (800becc <__ieee754_pow+0x3fc>)
 800be66:	4299      	cmp	r1, r3
 800be68:	ec45 4b19 	vmov	d9, r4, r5
 800be6c:	4606      	mov	r6, r0
 800be6e:	460f      	mov	r7, r1
 800be70:	468b      	mov	fp, r1
 800be72:	f340 82f0 	ble.w	800c456 <__ieee754_pow+0x986>
 800be76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800be7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800be7e:	4303      	orrs	r3, r0
 800be80:	f000 81e4 	beq.w	800c24c <__ieee754_pow+0x77c>
 800be84:	ec51 0b18 	vmov	r0, r1, d8
 800be88:	2200      	movs	r2, #0
 800be8a:	2300      	movs	r3, #0
 800be8c:	f7f4 fe2e 	bl	8000aec <__aeabi_dcmplt>
 800be90:	3800      	subs	r0, #0
 800be92:	bf18      	it	ne
 800be94:	2001      	movne	r0, #1
 800be96:	e72b      	b.n	800bcf0 <__ieee754_pow+0x220>
 800be98:	60000000 	.word	0x60000000
 800be9c:	3ff71547 	.word	0x3ff71547
 800bea0:	f85ddf44 	.word	0xf85ddf44
 800bea4:	3e54ae0b 	.word	0x3e54ae0b
 800bea8:	55555555 	.word	0x55555555
 800beac:	3fd55555 	.word	0x3fd55555
 800beb0:	652b82fe 	.word	0x652b82fe
 800beb4:	3ff71547 	.word	0x3ff71547
 800beb8:	00000000 	.word	0x00000000
 800bebc:	bff00000 	.word	0xbff00000
 800bec0:	3ff00000 	.word	0x3ff00000
 800bec4:	3fd00000 	.word	0x3fd00000
 800bec8:	3fe00000 	.word	0x3fe00000
 800becc:	408fffff 	.word	0x408fffff
 800bed0:	4bd5      	ldr	r3, [pc, #852]	; (800c228 <__ieee754_pow+0x758>)
 800bed2:	402b      	ands	r3, r5
 800bed4:	2200      	movs	r2, #0
 800bed6:	b92b      	cbnz	r3, 800bee4 <__ieee754_pow+0x414>
 800bed8:	4bd4      	ldr	r3, [pc, #848]	; (800c22c <__ieee754_pow+0x75c>)
 800beda:	f7f4 fb95 	bl	8000608 <__aeabi_dmul>
 800bede:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bee2:	460c      	mov	r4, r1
 800bee4:	1523      	asrs	r3, r4, #20
 800bee6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800beea:	4413      	add	r3, r2
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	4bd0      	ldr	r3, [pc, #832]	; (800c230 <__ieee754_pow+0x760>)
 800bef0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bef4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bef8:	429c      	cmp	r4, r3
 800befa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800befe:	dd08      	ble.n	800bf12 <__ieee754_pow+0x442>
 800bf00:	4bcc      	ldr	r3, [pc, #816]	; (800c234 <__ieee754_pow+0x764>)
 800bf02:	429c      	cmp	r4, r3
 800bf04:	f340 8162 	ble.w	800c1cc <__ieee754_pow+0x6fc>
 800bf08:	9b05      	ldr	r3, [sp, #20]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	9305      	str	r3, [sp, #20]
 800bf0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bf12:	2400      	movs	r4, #0
 800bf14:	00e3      	lsls	r3, r4, #3
 800bf16:	9307      	str	r3, [sp, #28]
 800bf18:	4bc7      	ldr	r3, [pc, #796]	; (800c238 <__ieee754_pow+0x768>)
 800bf1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bf1e:	ed93 7b00 	vldr	d7, [r3]
 800bf22:	4629      	mov	r1, r5
 800bf24:	ec53 2b17 	vmov	r2, r3, d7
 800bf28:	eeb0 9a47 	vmov.f32	s18, s14
 800bf2c:	eef0 9a67 	vmov.f32	s19, s15
 800bf30:	4682      	mov	sl, r0
 800bf32:	f7f4 f9b1 	bl	8000298 <__aeabi_dsub>
 800bf36:	4652      	mov	r2, sl
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460f      	mov	r7, r1
 800bf3c:	462b      	mov	r3, r5
 800bf3e:	ec51 0b19 	vmov	r0, r1, d9
 800bf42:	f7f4 f9ab 	bl	800029c <__adddf3>
 800bf46:	4602      	mov	r2, r0
 800bf48:	460b      	mov	r3, r1
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	49bb      	ldr	r1, [pc, #748]	; (800c23c <__ieee754_pow+0x76c>)
 800bf4e:	f7f4 fc85 	bl	800085c <__aeabi_ddiv>
 800bf52:	ec41 0b1a 	vmov	d10, r0, r1
 800bf56:	4602      	mov	r2, r0
 800bf58:	460b      	mov	r3, r1
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	f7f4 fb53 	bl	8000608 <__aeabi_dmul>
 800bf62:	2300      	movs	r3, #0
 800bf64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bf6e:	46ab      	mov	fp, r5
 800bf70:	106d      	asrs	r5, r5, #1
 800bf72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bf76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bf7a:	ec41 0b18 	vmov	d8, r0, r1
 800bf7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bf82:	2200      	movs	r2, #0
 800bf84:	4640      	mov	r0, r8
 800bf86:	4649      	mov	r1, r9
 800bf88:	4614      	mov	r4, r2
 800bf8a:	461d      	mov	r5, r3
 800bf8c:	f7f4 fb3c 	bl	8000608 <__aeabi_dmul>
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	4630      	mov	r0, r6
 800bf96:	4639      	mov	r1, r7
 800bf98:	f7f4 f97e 	bl	8000298 <__aeabi_dsub>
 800bf9c:	ec53 2b19 	vmov	r2, r3, d9
 800bfa0:	4606      	mov	r6, r0
 800bfa2:	460f      	mov	r7, r1
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f7f4 f976 	bl	8000298 <__aeabi_dsub>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4650      	mov	r0, sl
 800bfb2:	4659      	mov	r1, fp
 800bfb4:	f7f4 f970 	bl	8000298 <__aeabi_dsub>
 800bfb8:	4642      	mov	r2, r8
 800bfba:	464b      	mov	r3, r9
 800bfbc:	f7f4 fb24 	bl	8000608 <__aeabi_dmul>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	f7f4 f966 	bl	8000298 <__aeabi_dsub>
 800bfcc:	ec53 2b1a 	vmov	r2, r3, d10
 800bfd0:	f7f4 fb1a 	bl	8000608 <__aeabi_dmul>
 800bfd4:	ec53 2b18 	vmov	r2, r3, d8
 800bfd8:	ec41 0b19 	vmov	d9, r0, r1
 800bfdc:	ec51 0b18 	vmov	r0, r1, d8
 800bfe0:	f7f4 fb12 	bl	8000608 <__aeabi_dmul>
 800bfe4:	a37c      	add	r3, pc, #496	; (adr r3, 800c1d8 <__ieee754_pow+0x708>)
 800bfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfea:	4604      	mov	r4, r0
 800bfec:	460d      	mov	r5, r1
 800bfee:	f7f4 fb0b 	bl	8000608 <__aeabi_dmul>
 800bff2:	a37b      	add	r3, pc, #492	; (adr r3, 800c1e0 <__ieee754_pow+0x710>)
 800bff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff8:	f7f4 f950 	bl	800029c <__adddf3>
 800bffc:	4622      	mov	r2, r4
 800bffe:	462b      	mov	r3, r5
 800c000:	f7f4 fb02 	bl	8000608 <__aeabi_dmul>
 800c004:	a378      	add	r3, pc, #480	; (adr r3, 800c1e8 <__ieee754_pow+0x718>)
 800c006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00a:	f7f4 f947 	bl	800029c <__adddf3>
 800c00e:	4622      	mov	r2, r4
 800c010:	462b      	mov	r3, r5
 800c012:	f7f4 faf9 	bl	8000608 <__aeabi_dmul>
 800c016:	a376      	add	r3, pc, #472	; (adr r3, 800c1f0 <__ieee754_pow+0x720>)
 800c018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01c:	f7f4 f93e 	bl	800029c <__adddf3>
 800c020:	4622      	mov	r2, r4
 800c022:	462b      	mov	r3, r5
 800c024:	f7f4 faf0 	bl	8000608 <__aeabi_dmul>
 800c028:	a373      	add	r3, pc, #460	; (adr r3, 800c1f8 <__ieee754_pow+0x728>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	f7f4 f935 	bl	800029c <__adddf3>
 800c032:	4622      	mov	r2, r4
 800c034:	462b      	mov	r3, r5
 800c036:	f7f4 fae7 	bl	8000608 <__aeabi_dmul>
 800c03a:	a371      	add	r3, pc, #452	; (adr r3, 800c200 <__ieee754_pow+0x730>)
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	f7f4 f92c 	bl	800029c <__adddf3>
 800c044:	4622      	mov	r2, r4
 800c046:	4606      	mov	r6, r0
 800c048:	460f      	mov	r7, r1
 800c04a:	462b      	mov	r3, r5
 800c04c:	4620      	mov	r0, r4
 800c04e:	4629      	mov	r1, r5
 800c050:	f7f4 fada 	bl	8000608 <__aeabi_dmul>
 800c054:	4602      	mov	r2, r0
 800c056:	460b      	mov	r3, r1
 800c058:	4630      	mov	r0, r6
 800c05a:	4639      	mov	r1, r7
 800c05c:	f7f4 fad4 	bl	8000608 <__aeabi_dmul>
 800c060:	4642      	mov	r2, r8
 800c062:	4604      	mov	r4, r0
 800c064:	460d      	mov	r5, r1
 800c066:	464b      	mov	r3, r9
 800c068:	ec51 0b18 	vmov	r0, r1, d8
 800c06c:	f7f4 f916 	bl	800029c <__adddf3>
 800c070:	ec53 2b19 	vmov	r2, r3, d9
 800c074:	f7f4 fac8 	bl	8000608 <__aeabi_dmul>
 800c078:	4622      	mov	r2, r4
 800c07a:	462b      	mov	r3, r5
 800c07c:	f7f4 f90e 	bl	800029c <__adddf3>
 800c080:	4642      	mov	r2, r8
 800c082:	4682      	mov	sl, r0
 800c084:	468b      	mov	fp, r1
 800c086:	464b      	mov	r3, r9
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	f7f4 fabc 	bl	8000608 <__aeabi_dmul>
 800c090:	4b6b      	ldr	r3, [pc, #428]	; (800c240 <__ieee754_pow+0x770>)
 800c092:	2200      	movs	r2, #0
 800c094:	4606      	mov	r6, r0
 800c096:	460f      	mov	r7, r1
 800c098:	f7f4 f900 	bl	800029c <__adddf3>
 800c09c:	4652      	mov	r2, sl
 800c09e:	465b      	mov	r3, fp
 800c0a0:	f7f4 f8fc 	bl	800029c <__adddf3>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	f7f4 faa9 	bl	8000608 <__aeabi_dmul>
 800c0b6:	4b62      	ldr	r3, [pc, #392]	; (800c240 <__ieee754_pow+0x770>)
 800c0b8:	4680      	mov	r8, r0
 800c0ba:	4689      	mov	r9, r1
 800c0bc:	2200      	movs	r2, #0
 800c0be:	4620      	mov	r0, r4
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f7f4 f8e9 	bl	8000298 <__aeabi_dsub>
 800c0c6:	4632      	mov	r2, r6
 800c0c8:	463b      	mov	r3, r7
 800c0ca:	f7f4 f8e5 	bl	8000298 <__aeabi_dsub>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	4650      	mov	r0, sl
 800c0d4:	4659      	mov	r1, fp
 800c0d6:	f7f4 f8df 	bl	8000298 <__aeabi_dsub>
 800c0da:	ec53 2b18 	vmov	r2, r3, d8
 800c0de:	f7f4 fa93 	bl	8000608 <__aeabi_dmul>
 800c0e2:	4622      	mov	r2, r4
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	460f      	mov	r7, r1
 800c0e8:	462b      	mov	r3, r5
 800c0ea:	ec51 0b19 	vmov	r0, r1, d9
 800c0ee:	f7f4 fa8b 	bl	8000608 <__aeabi_dmul>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	4639      	mov	r1, r7
 800c0fa:	f7f4 f8cf 	bl	800029c <__adddf3>
 800c0fe:	4606      	mov	r6, r0
 800c100:	460f      	mov	r7, r1
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4640      	mov	r0, r8
 800c108:	4649      	mov	r1, r9
 800c10a:	f7f4 f8c7 	bl	800029c <__adddf3>
 800c10e:	a33e      	add	r3, pc, #248	; (adr r3, 800c208 <__ieee754_pow+0x738>)
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	2000      	movs	r0, #0
 800c116:	4604      	mov	r4, r0
 800c118:	460d      	mov	r5, r1
 800c11a:	f7f4 fa75 	bl	8000608 <__aeabi_dmul>
 800c11e:	4642      	mov	r2, r8
 800c120:	ec41 0b18 	vmov	d8, r0, r1
 800c124:	464b      	mov	r3, r9
 800c126:	4620      	mov	r0, r4
 800c128:	4629      	mov	r1, r5
 800c12a:	f7f4 f8b5 	bl	8000298 <__aeabi_dsub>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	4630      	mov	r0, r6
 800c134:	4639      	mov	r1, r7
 800c136:	f7f4 f8af 	bl	8000298 <__aeabi_dsub>
 800c13a:	a335      	add	r3, pc, #212	; (adr r3, 800c210 <__ieee754_pow+0x740>)
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f7f4 fa62 	bl	8000608 <__aeabi_dmul>
 800c144:	a334      	add	r3, pc, #208	; (adr r3, 800c218 <__ieee754_pow+0x748>)
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	4620      	mov	r0, r4
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 fa59 	bl	8000608 <__aeabi_dmul>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4630      	mov	r0, r6
 800c15c:	4639      	mov	r1, r7
 800c15e:	f7f4 f89d 	bl	800029c <__adddf3>
 800c162:	9a07      	ldr	r2, [sp, #28]
 800c164:	4b37      	ldr	r3, [pc, #220]	; (800c244 <__ieee754_pow+0x774>)
 800c166:	4413      	add	r3, r2
 800c168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c16c:	f7f4 f896 	bl	800029c <__adddf3>
 800c170:	4682      	mov	sl, r0
 800c172:	9805      	ldr	r0, [sp, #20]
 800c174:	468b      	mov	fp, r1
 800c176:	f7f4 f9dd 	bl	8000534 <__aeabi_i2d>
 800c17a:	9a07      	ldr	r2, [sp, #28]
 800c17c:	4b32      	ldr	r3, [pc, #200]	; (800c248 <__ieee754_pow+0x778>)
 800c17e:	4413      	add	r3, r2
 800c180:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c184:	4606      	mov	r6, r0
 800c186:	460f      	mov	r7, r1
 800c188:	4652      	mov	r2, sl
 800c18a:	465b      	mov	r3, fp
 800c18c:	ec51 0b18 	vmov	r0, r1, d8
 800c190:	f7f4 f884 	bl	800029c <__adddf3>
 800c194:	4642      	mov	r2, r8
 800c196:	464b      	mov	r3, r9
 800c198:	f7f4 f880 	bl	800029c <__adddf3>
 800c19c:	4632      	mov	r2, r6
 800c19e:	463b      	mov	r3, r7
 800c1a0:	f7f4 f87c 	bl	800029c <__adddf3>
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	4632      	mov	r2, r6
 800c1a8:	463b      	mov	r3, r7
 800c1aa:	4604      	mov	r4, r0
 800c1ac:	460d      	mov	r5, r1
 800c1ae:	f7f4 f873 	bl	8000298 <__aeabi_dsub>
 800c1b2:	4642      	mov	r2, r8
 800c1b4:	464b      	mov	r3, r9
 800c1b6:	f7f4 f86f 	bl	8000298 <__aeabi_dsub>
 800c1ba:	ec53 2b18 	vmov	r2, r3, d8
 800c1be:	f7f4 f86b 	bl	8000298 <__aeabi_dsub>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	460b      	mov	r3, r1
 800c1c6:	4650      	mov	r0, sl
 800c1c8:	4659      	mov	r1, fp
 800c1ca:	e610      	b.n	800bdee <__ieee754_pow+0x31e>
 800c1cc:	2401      	movs	r4, #1
 800c1ce:	e6a1      	b.n	800bf14 <__ieee754_pow+0x444>
 800c1d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c220 <__ieee754_pow+0x750>
 800c1d4:	e617      	b.n	800be06 <__ieee754_pow+0x336>
 800c1d6:	bf00      	nop
 800c1d8:	4a454eef 	.word	0x4a454eef
 800c1dc:	3fca7e28 	.word	0x3fca7e28
 800c1e0:	93c9db65 	.word	0x93c9db65
 800c1e4:	3fcd864a 	.word	0x3fcd864a
 800c1e8:	a91d4101 	.word	0xa91d4101
 800c1ec:	3fd17460 	.word	0x3fd17460
 800c1f0:	518f264d 	.word	0x518f264d
 800c1f4:	3fd55555 	.word	0x3fd55555
 800c1f8:	db6fabff 	.word	0xdb6fabff
 800c1fc:	3fdb6db6 	.word	0x3fdb6db6
 800c200:	33333303 	.word	0x33333303
 800c204:	3fe33333 	.word	0x3fe33333
 800c208:	e0000000 	.word	0xe0000000
 800c20c:	3feec709 	.word	0x3feec709
 800c210:	dc3a03fd 	.word	0xdc3a03fd
 800c214:	3feec709 	.word	0x3feec709
 800c218:	145b01f5 	.word	0x145b01f5
 800c21c:	be3e2fe0 	.word	0xbe3e2fe0
 800c220:	00000000 	.word	0x00000000
 800c224:	3ff00000 	.word	0x3ff00000
 800c228:	7ff00000 	.word	0x7ff00000
 800c22c:	43400000 	.word	0x43400000
 800c230:	0003988e 	.word	0x0003988e
 800c234:	000bb679 	.word	0x000bb679
 800c238:	0800cc40 	.word	0x0800cc40
 800c23c:	3ff00000 	.word	0x3ff00000
 800c240:	40080000 	.word	0x40080000
 800c244:	0800cc60 	.word	0x0800cc60
 800c248:	0800cc50 	.word	0x0800cc50
 800c24c:	a3b3      	add	r3, pc, #716	; (adr r3, 800c51c <__ieee754_pow+0xa4c>)
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	4640      	mov	r0, r8
 800c254:	4649      	mov	r1, r9
 800c256:	f7f4 f821 	bl	800029c <__adddf3>
 800c25a:	4622      	mov	r2, r4
 800c25c:	ec41 0b1a 	vmov	d10, r0, r1
 800c260:	462b      	mov	r3, r5
 800c262:	4630      	mov	r0, r6
 800c264:	4639      	mov	r1, r7
 800c266:	f7f4 f817 	bl	8000298 <__aeabi_dsub>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	ec51 0b1a 	vmov	r0, r1, d10
 800c272:	f7f4 fc59 	bl	8000b28 <__aeabi_dcmpgt>
 800c276:	2800      	cmp	r0, #0
 800c278:	f47f ae04 	bne.w	800be84 <__ieee754_pow+0x3b4>
 800c27c:	4aa2      	ldr	r2, [pc, #648]	; (800c508 <__ieee754_pow+0xa38>)
 800c27e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c282:	4293      	cmp	r3, r2
 800c284:	f340 8107 	ble.w	800c496 <__ieee754_pow+0x9c6>
 800c288:	151b      	asrs	r3, r3, #20
 800c28a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c28e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c292:	fa4a fa03 	asr.w	sl, sl, r3
 800c296:	44da      	add	sl, fp
 800c298:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c29c:	489b      	ldr	r0, [pc, #620]	; (800c50c <__ieee754_pow+0xa3c>)
 800c29e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800c2a2:	4108      	asrs	r0, r1
 800c2a4:	ea00 030a 	and.w	r3, r0, sl
 800c2a8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c2ac:	f1c1 0114 	rsb	r1, r1, #20
 800c2b0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c2b4:	fa4a fa01 	asr.w	sl, sl, r1
 800c2b8:	f1bb 0f00 	cmp.w	fp, #0
 800c2bc:	f04f 0200 	mov.w	r2, #0
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	bfb8      	it	lt
 800c2c6:	f1ca 0a00 	rsblt	sl, sl, #0
 800c2ca:	f7f3 ffe5 	bl	8000298 <__aeabi_dsub>
 800c2ce:	ec41 0b19 	vmov	d9, r0, r1
 800c2d2:	4642      	mov	r2, r8
 800c2d4:	464b      	mov	r3, r9
 800c2d6:	ec51 0b19 	vmov	r0, r1, d9
 800c2da:	f7f3 ffdf 	bl	800029c <__adddf3>
 800c2de:	a37a      	add	r3, pc, #488	; (adr r3, 800c4c8 <__ieee754_pow+0x9f8>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	460d      	mov	r5, r1
 800c2ea:	f7f4 f98d 	bl	8000608 <__aeabi_dmul>
 800c2ee:	ec53 2b19 	vmov	r2, r3, d9
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	460f      	mov	r7, r1
 800c2f6:	4620      	mov	r0, r4
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	f7f3 ffcd 	bl	8000298 <__aeabi_dsub>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4640      	mov	r0, r8
 800c304:	4649      	mov	r1, r9
 800c306:	f7f3 ffc7 	bl	8000298 <__aeabi_dsub>
 800c30a:	a371      	add	r3, pc, #452	; (adr r3, 800c4d0 <__ieee754_pow+0xa00>)
 800c30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c310:	f7f4 f97a 	bl	8000608 <__aeabi_dmul>
 800c314:	a370      	add	r3, pc, #448	; (adr r3, 800c4d8 <__ieee754_pow+0xa08>)
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	4680      	mov	r8, r0
 800c31c:	4689      	mov	r9, r1
 800c31e:	4620      	mov	r0, r4
 800c320:	4629      	mov	r1, r5
 800c322:	f7f4 f971 	bl	8000608 <__aeabi_dmul>
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	4640      	mov	r0, r8
 800c32c:	4649      	mov	r1, r9
 800c32e:	f7f3 ffb5 	bl	800029c <__adddf3>
 800c332:	4604      	mov	r4, r0
 800c334:	460d      	mov	r5, r1
 800c336:	4602      	mov	r2, r0
 800c338:	460b      	mov	r3, r1
 800c33a:	4630      	mov	r0, r6
 800c33c:	4639      	mov	r1, r7
 800c33e:	f7f3 ffad 	bl	800029c <__adddf3>
 800c342:	4632      	mov	r2, r6
 800c344:	463b      	mov	r3, r7
 800c346:	4680      	mov	r8, r0
 800c348:	4689      	mov	r9, r1
 800c34a:	f7f3 ffa5 	bl	8000298 <__aeabi_dsub>
 800c34e:	4602      	mov	r2, r0
 800c350:	460b      	mov	r3, r1
 800c352:	4620      	mov	r0, r4
 800c354:	4629      	mov	r1, r5
 800c356:	f7f3 ff9f 	bl	8000298 <__aeabi_dsub>
 800c35a:	4642      	mov	r2, r8
 800c35c:	4606      	mov	r6, r0
 800c35e:	460f      	mov	r7, r1
 800c360:	464b      	mov	r3, r9
 800c362:	4640      	mov	r0, r8
 800c364:	4649      	mov	r1, r9
 800c366:	f7f4 f94f 	bl	8000608 <__aeabi_dmul>
 800c36a:	a35d      	add	r3, pc, #372	; (adr r3, 800c4e0 <__ieee754_pow+0xa10>)
 800c36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c370:	4604      	mov	r4, r0
 800c372:	460d      	mov	r5, r1
 800c374:	f7f4 f948 	bl	8000608 <__aeabi_dmul>
 800c378:	a35b      	add	r3, pc, #364	; (adr r3, 800c4e8 <__ieee754_pow+0xa18>)
 800c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c37e:	f7f3 ff8b 	bl	8000298 <__aeabi_dsub>
 800c382:	4622      	mov	r2, r4
 800c384:	462b      	mov	r3, r5
 800c386:	f7f4 f93f 	bl	8000608 <__aeabi_dmul>
 800c38a:	a359      	add	r3, pc, #356	; (adr r3, 800c4f0 <__ieee754_pow+0xa20>)
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f7f3 ff84 	bl	800029c <__adddf3>
 800c394:	4622      	mov	r2, r4
 800c396:	462b      	mov	r3, r5
 800c398:	f7f4 f936 	bl	8000608 <__aeabi_dmul>
 800c39c:	a356      	add	r3, pc, #344	; (adr r3, 800c4f8 <__ieee754_pow+0xa28>)
 800c39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3a2:	f7f3 ff79 	bl	8000298 <__aeabi_dsub>
 800c3a6:	4622      	mov	r2, r4
 800c3a8:	462b      	mov	r3, r5
 800c3aa:	f7f4 f92d 	bl	8000608 <__aeabi_dmul>
 800c3ae:	a354      	add	r3, pc, #336	; (adr r3, 800c500 <__ieee754_pow+0xa30>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	f7f3 ff72 	bl	800029c <__adddf3>
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	462b      	mov	r3, r5
 800c3bc:	f7f4 f924 	bl	8000608 <__aeabi_dmul>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	4640      	mov	r0, r8
 800c3c6:	4649      	mov	r1, r9
 800c3c8:	f7f3 ff66 	bl	8000298 <__aeabi_dsub>
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	460d      	mov	r5, r1
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	460b      	mov	r3, r1
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	f7f4 f916 	bl	8000608 <__aeabi_dmul>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	ec41 0b19 	vmov	d9, r0, r1
 800c3e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3e6:	4620      	mov	r0, r4
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	f7f3 ff55 	bl	8000298 <__aeabi_dsub>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	ec51 0b19 	vmov	r0, r1, d9
 800c3f6:	f7f4 fa31 	bl	800085c <__aeabi_ddiv>
 800c3fa:	4632      	mov	r2, r6
 800c3fc:	4604      	mov	r4, r0
 800c3fe:	460d      	mov	r5, r1
 800c400:	463b      	mov	r3, r7
 800c402:	4640      	mov	r0, r8
 800c404:	4649      	mov	r1, r9
 800c406:	f7f4 f8ff 	bl	8000608 <__aeabi_dmul>
 800c40a:	4632      	mov	r2, r6
 800c40c:	463b      	mov	r3, r7
 800c40e:	f7f3 ff45 	bl	800029c <__adddf3>
 800c412:	4602      	mov	r2, r0
 800c414:	460b      	mov	r3, r1
 800c416:	4620      	mov	r0, r4
 800c418:	4629      	mov	r1, r5
 800c41a:	f7f3 ff3d 	bl	8000298 <__aeabi_dsub>
 800c41e:	4642      	mov	r2, r8
 800c420:	464b      	mov	r3, r9
 800c422:	f7f3 ff39 	bl	8000298 <__aeabi_dsub>
 800c426:	460b      	mov	r3, r1
 800c428:	4602      	mov	r2, r0
 800c42a:	4939      	ldr	r1, [pc, #228]	; (800c510 <__ieee754_pow+0xa40>)
 800c42c:	2000      	movs	r0, #0
 800c42e:	f7f3 ff33 	bl	8000298 <__aeabi_dsub>
 800c432:	ec41 0b10 	vmov	d0, r0, r1
 800c436:	ee10 3a90 	vmov	r3, s1
 800c43a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c43e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c442:	da2b      	bge.n	800c49c <__ieee754_pow+0x9cc>
 800c444:	4650      	mov	r0, sl
 800c446:	f000 f877 	bl	800c538 <scalbn>
 800c44a:	ec51 0b10 	vmov	r0, r1, d0
 800c44e:	ec53 2b18 	vmov	r2, r3, d8
 800c452:	f7ff bbee 	b.w	800bc32 <__ieee754_pow+0x162>
 800c456:	4b2f      	ldr	r3, [pc, #188]	; (800c514 <__ieee754_pow+0xa44>)
 800c458:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c45c:	429e      	cmp	r6, r3
 800c45e:	f77f af0d 	ble.w	800c27c <__ieee754_pow+0x7ac>
 800c462:	4b2d      	ldr	r3, [pc, #180]	; (800c518 <__ieee754_pow+0xa48>)
 800c464:	440b      	add	r3, r1
 800c466:	4303      	orrs	r3, r0
 800c468:	d009      	beq.n	800c47e <__ieee754_pow+0x9ae>
 800c46a:	ec51 0b18 	vmov	r0, r1, d8
 800c46e:	2200      	movs	r2, #0
 800c470:	2300      	movs	r3, #0
 800c472:	f7f4 fb3b 	bl	8000aec <__aeabi_dcmplt>
 800c476:	3800      	subs	r0, #0
 800c478:	bf18      	it	ne
 800c47a:	2001      	movne	r0, #1
 800c47c:	e448      	b.n	800bd10 <__ieee754_pow+0x240>
 800c47e:	4622      	mov	r2, r4
 800c480:	462b      	mov	r3, r5
 800c482:	f7f3 ff09 	bl	8000298 <__aeabi_dsub>
 800c486:	4642      	mov	r2, r8
 800c488:	464b      	mov	r3, r9
 800c48a:	f7f4 fb43 	bl	8000b14 <__aeabi_dcmpge>
 800c48e:	2800      	cmp	r0, #0
 800c490:	f43f aef4 	beq.w	800c27c <__ieee754_pow+0x7ac>
 800c494:	e7e9      	b.n	800c46a <__ieee754_pow+0x99a>
 800c496:	f04f 0a00 	mov.w	sl, #0
 800c49a:	e71a      	b.n	800c2d2 <__ieee754_pow+0x802>
 800c49c:	ec51 0b10 	vmov	r0, r1, d0
 800c4a0:	4619      	mov	r1, r3
 800c4a2:	e7d4      	b.n	800c44e <__ieee754_pow+0x97e>
 800c4a4:	491a      	ldr	r1, [pc, #104]	; (800c510 <__ieee754_pow+0xa40>)
 800c4a6:	2000      	movs	r0, #0
 800c4a8:	f7ff bb31 	b.w	800bb0e <__ieee754_pow+0x3e>
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	f7ff bb2d 	b.w	800bb0e <__ieee754_pow+0x3e>
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	f7ff bb29 	b.w	800bb0e <__ieee754_pow+0x3e>
 800c4bc:	9204      	str	r2, [sp, #16]
 800c4be:	f7ff bb7b 	b.w	800bbb8 <__ieee754_pow+0xe8>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f7ff bb65 	b.w	800bb92 <__ieee754_pow+0xc2>
 800c4c8:	00000000 	.word	0x00000000
 800c4cc:	3fe62e43 	.word	0x3fe62e43
 800c4d0:	fefa39ef 	.word	0xfefa39ef
 800c4d4:	3fe62e42 	.word	0x3fe62e42
 800c4d8:	0ca86c39 	.word	0x0ca86c39
 800c4dc:	be205c61 	.word	0xbe205c61
 800c4e0:	72bea4d0 	.word	0x72bea4d0
 800c4e4:	3e663769 	.word	0x3e663769
 800c4e8:	c5d26bf1 	.word	0xc5d26bf1
 800c4ec:	3ebbbd41 	.word	0x3ebbbd41
 800c4f0:	af25de2c 	.word	0xaf25de2c
 800c4f4:	3f11566a 	.word	0x3f11566a
 800c4f8:	16bebd93 	.word	0x16bebd93
 800c4fc:	3f66c16c 	.word	0x3f66c16c
 800c500:	5555553e 	.word	0x5555553e
 800c504:	3fc55555 	.word	0x3fc55555
 800c508:	3fe00000 	.word	0x3fe00000
 800c50c:	fff00000 	.word	0xfff00000
 800c510:	3ff00000 	.word	0x3ff00000
 800c514:	4090cbff 	.word	0x4090cbff
 800c518:	3f6f3400 	.word	0x3f6f3400
 800c51c:	652b82fe 	.word	0x652b82fe
 800c520:	3c971547 	.word	0x3c971547

0800c524 <fabs>:
 800c524:	ec51 0b10 	vmov	r0, r1, d0
 800c528:	ee10 2a10 	vmov	r2, s0
 800c52c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c530:	ec43 2b10 	vmov	d0, r2, r3
 800c534:	4770      	bx	lr
	...

0800c538 <scalbn>:
 800c538:	b570      	push	{r4, r5, r6, lr}
 800c53a:	ec55 4b10 	vmov	r4, r5, d0
 800c53e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c542:	4606      	mov	r6, r0
 800c544:	462b      	mov	r3, r5
 800c546:	b999      	cbnz	r1, 800c570 <scalbn+0x38>
 800c548:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c54c:	4323      	orrs	r3, r4
 800c54e:	d03f      	beq.n	800c5d0 <scalbn+0x98>
 800c550:	4b35      	ldr	r3, [pc, #212]	; (800c628 <scalbn+0xf0>)
 800c552:	4629      	mov	r1, r5
 800c554:	ee10 0a10 	vmov	r0, s0
 800c558:	2200      	movs	r2, #0
 800c55a:	f7f4 f855 	bl	8000608 <__aeabi_dmul>
 800c55e:	4b33      	ldr	r3, [pc, #204]	; (800c62c <scalbn+0xf4>)
 800c560:	429e      	cmp	r6, r3
 800c562:	4604      	mov	r4, r0
 800c564:	460d      	mov	r5, r1
 800c566:	da10      	bge.n	800c58a <scalbn+0x52>
 800c568:	a327      	add	r3, pc, #156	; (adr r3, 800c608 <scalbn+0xd0>)
 800c56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56e:	e01f      	b.n	800c5b0 <scalbn+0x78>
 800c570:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c574:	4291      	cmp	r1, r2
 800c576:	d10c      	bne.n	800c592 <scalbn+0x5a>
 800c578:	ee10 2a10 	vmov	r2, s0
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f3 fe8c 	bl	800029c <__adddf3>
 800c584:	4604      	mov	r4, r0
 800c586:	460d      	mov	r5, r1
 800c588:	e022      	b.n	800c5d0 <scalbn+0x98>
 800c58a:	460b      	mov	r3, r1
 800c58c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c590:	3936      	subs	r1, #54	; 0x36
 800c592:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c596:	4296      	cmp	r6, r2
 800c598:	dd0d      	ble.n	800c5b6 <scalbn+0x7e>
 800c59a:	2d00      	cmp	r5, #0
 800c59c:	a11c      	add	r1, pc, #112	; (adr r1, 800c610 <scalbn+0xd8>)
 800c59e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5a2:	da02      	bge.n	800c5aa <scalbn+0x72>
 800c5a4:	a11c      	add	r1, pc, #112	; (adr r1, 800c618 <scalbn+0xe0>)
 800c5a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5aa:	a319      	add	r3, pc, #100	; (adr r3, 800c610 <scalbn+0xd8>)
 800c5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b0:	f7f4 f82a 	bl	8000608 <__aeabi_dmul>
 800c5b4:	e7e6      	b.n	800c584 <scalbn+0x4c>
 800c5b6:	1872      	adds	r2, r6, r1
 800c5b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c5bc:	428a      	cmp	r2, r1
 800c5be:	dcec      	bgt.n	800c59a <scalbn+0x62>
 800c5c0:	2a00      	cmp	r2, #0
 800c5c2:	dd08      	ble.n	800c5d6 <scalbn+0x9e>
 800c5c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5d0:	ec45 4b10 	vmov	d0, r4, r5
 800c5d4:	bd70      	pop	{r4, r5, r6, pc}
 800c5d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5da:	da08      	bge.n	800c5ee <scalbn+0xb6>
 800c5dc:	2d00      	cmp	r5, #0
 800c5de:	a10a      	add	r1, pc, #40	; (adr r1, 800c608 <scalbn+0xd0>)
 800c5e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e4:	dac0      	bge.n	800c568 <scalbn+0x30>
 800c5e6:	a10e      	add	r1, pc, #56	; (adr r1, 800c620 <scalbn+0xe8>)
 800c5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5ec:	e7bc      	b.n	800c568 <scalbn+0x30>
 800c5ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5f2:	3236      	adds	r2, #54	; 0x36
 800c5f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c5fc:	4620      	mov	r0, r4
 800c5fe:	4b0c      	ldr	r3, [pc, #48]	; (800c630 <scalbn+0xf8>)
 800c600:	2200      	movs	r2, #0
 800c602:	e7d5      	b.n	800c5b0 <scalbn+0x78>
 800c604:	f3af 8000 	nop.w
 800c608:	c2f8f359 	.word	0xc2f8f359
 800c60c:	01a56e1f 	.word	0x01a56e1f
 800c610:	8800759c 	.word	0x8800759c
 800c614:	7e37e43c 	.word	0x7e37e43c
 800c618:	8800759c 	.word	0x8800759c
 800c61c:	fe37e43c 	.word	0xfe37e43c
 800c620:	c2f8f359 	.word	0xc2f8f359
 800c624:	81a56e1f 	.word	0x81a56e1f
 800c628:	43500000 	.word	0x43500000
 800c62c:	ffff3cb0 	.word	0xffff3cb0
 800c630:	3c900000 	.word	0x3c900000

0800c634 <with_errno>:
 800c634:	b570      	push	{r4, r5, r6, lr}
 800c636:	4604      	mov	r4, r0
 800c638:	460d      	mov	r5, r1
 800c63a:	4616      	mov	r6, r2
 800c63c:	f7fd f924 	bl	8009888 <__errno>
 800c640:	4629      	mov	r1, r5
 800c642:	6006      	str	r6, [r0, #0]
 800c644:	4620      	mov	r0, r4
 800c646:	bd70      	pop	{r4, r5, r6, pc}

0800c648 <xflow>:
 800c648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c64a:	4614      	mov	r4, r2
 800c64c:	461d      	mov	r5, r3
 800c64e:	b108      	cbz	r0, 800c654 <xflow+0xc>
 800c650:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c654:	e9cd 2300 	strd	r2, r3, [sp]
 800c658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c65c:	4620      	mov	r0, r4
 800c65e:	4629      	mov	r1, r5
 800c660:	f7f3 ffd2 	bl	8000608 <__aeabi_dmul>
 800c664:	2222      	movs	r2, #34	; 0x22
 800c666:	b003      	add	sp, #12
 800c668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c66c:	f7ff bfe2 	b.w	800c634 <with_errno>

0800c670 <__math_uflow>:
 800c670:	b508      	push	{r3, lr}
 800c672:	2200      	movs	r2, #0
 800c674:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c678:	f7ff ffe6 	bl	800c648 <xflow>
 800c67c:	ec41 0b10 	vmov	d0, r0, r1
 800c680:	bd08      	pop	{r3, pc}

0800c682 <__math_oflow>:
 800c682:	b508      	push	{r3, lr}
 800c684:	2200      	movs	r2, #0
 800c686:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c68a:	f7ff ffdd 	bl	800c648 <xflow>
 800c68e:	ec41 0b10 	vmov	d0, r0, r1
 800c692:	bd08      	pop	{r3, pc}

0800c694 <__ieee754_sqrt>:
 800c694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c698:	ec55 4b10 	vmov	r4, r5, d0
 800c69c:	4e67      	ldr	r6, [pc, #412]	; (800c83c <__ieee754_sqrt+0x1a8>)
 800c69e:	43ae      	bics	r6, r5
 800c6a0:	ee10 0a10 	vmov	r0, s0
 800c6a4:	ee10 2a10 	vmov	r2, s0
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	462b      	mov	r3, r5
 800c6ac:	d10d      	bne.n	800c6ca <__ieee754_sqrt+0x36>
 800c6ae:	f7f3 ffab 	bl	8000608 <__aeabi_dmul>
 800c6b2:	4602      	mov	r2, r0
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f7f3 fdef 	bl	800029c <__adddf3>
 800c6be:	4604      	mov	r4, r0
 800c6c0:	460d      	mov	r5, r1
 800c6c2:	ec45 4b10 	vmov	d0, r4, r5
 800c6c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ca:	2d00      	cmp	r5, #0
 800c6cc:	dc0b      	bgt.n	800c6e6 <__ieee754_sqrt+0x52>
 800c6ce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c6d2:	4326      	orrs	r6, r4
 800c6d4:	d0f5      	beq.n	800c6c2 <__ieee754_sqrt+0x2e>
 800c6d6:	b135      	cbz	r5, 800c6e6 <__ieee754_sqrt+0x52>
 800c6d8:	f7f3 fdde 	bl	8000298 <__aeabi_dsub>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	f7f4 f8bc 	bl	800085c <__aeabi_ddiv>
 800c6e4:	e7eb      	b.n	800c6be <__ieee754_sqrt+0x2a>
 800c6e6:	1509      	asrs	r1, r1, #20
 800c6e8:	f000 808d 	beq.w	800c806 <__ieee754_sqrt+0x172>
 800c6ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6f0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c6f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6f8:	07c9      	lsls	r1, r1, #31
 800c6fa:	bf5c      	itt	pl
 800c6fc:	005b      	lslpl	r3, r3, #1
 800c6fe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c702:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c706:	bf58      	it	pl
 800c708:	0052      	lslpl	r2, r2, #1
 800c70a:	2500      	movs	r5, #0
 800c70c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c710:	1076      	asrs	r6, r6, #1
 800c712:	0052      	lsls	r2, r2, #1
 800c714:	f04f 0e16 	mov.w	lr, #22
 800c718:	46ac      	mov	ip, r5
 800c71a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c71e:	eb0c 0001 	add.w	r0, ip, r1
 800c722:	4298      	cmp	r0, r3
 800c724:	bfde      	ittt	le
 800c726:	1a1b      	suble	r3, r3, r0
 800c728:	eb00 0c01 	addle.w	ip, r0, r1
 800c72c:	186d      	addle	r5, r5, r1
 800c72e:	005b      	lsls	r3, r3, #1
 800c730:	f1be 0e01 	subs.w	lr, lr, #1
 800c734:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c738:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c73c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c740:	d1ed      	bne.n	800c71e <__ieee754_sqrt+0x8a>
 800c742:	4674      	mov	r4, lr
 800c744:	2720      	movs	r7, #32
 800c746:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c74a:	4563      	cmp	r3, ip
 800c74c:	eb01 000e 	add.w	r0, r1, lr
 800c750:	dc02      	bgt.n	800c758 <__ieee754_sqrt+0xc4>
 800c752:	d113      	bne.n	800c77c <__ieee754_sqrt+0xe8>
 800c754:	4290      	cmp	r0, r2
 800c756:	d811      	bhi.n	800c77c <__ieee754_sqrt+0xe8>
 800c758:	2800      	cmp	r0, #0
 800c75a:	eb00 0e01 	add.w	lr, r0, r1
 800c75e:	da57      	bge.n	800c810 <__ieee754_sqrt+0x17c>
 800c760:	f1be 0f00 	cmp.w	lr, #0
 800c764:	db54      	blt.n	800c810 <__ieee754_sqrt+0x17c>
 800c766:	f10c 0801 	add.w	r8, ip, #1
 800c76a:	eba3 030c 	sub.w	r3, r3, ip
 800c76e:	4290      	cmp	r0, r2
 800c770:	bf88      	it	hi
 800c772:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c776:	1a12      	subs	r2, r2, r0
 800c778:	440c      	add	r4, r1
 800c77a:	46c4      	mov	ip, r8
 800c77c:	005b      	lsls	r3, r3, #1
 800c77e:	3f01      	subs	r7, #1
 800c780:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c784:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c788:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c78c:	d1dd      	bne.n	800c74a <__ieee754_sqrt+0xb6>
 800c78e:	4313      	orrs	r3, r2
 800c790:	d01b      	beq.n	800c7ca <__ieee754_sqrt+0x136>
 800c792:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c840 <__ieee754_sqrt+0x1ac>
 800c796:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c844 <__ieee754_sqrt+0x1b0>
 800c79a:	e9da 0100 	ldrd	r0, r1, [sl]
 800c79e:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7a2:	f7f3 fd79 	bl	8000298 <__aeabi_dsub>
 800c7a6:	e9da 8900 	ldrd	r8, r9, [sl]
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	4640      	mov	r0, r8
 800c7b0:	4649      	mov	r1, r9
 800c7b2:	f7f4 f9a5 	bl	8000b00 <__aeabi_dcmple>
 800c7b6:	b140      	cbz	r0, 800c7ca <__ieee754_sqrt+0x136>
 800c7b8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c7bc:	e9da 0100 	ldrd	r0, r1, [sl]
 800c7c0:	e9db 2300 	ldrd	r2, r3, [fp]
 800c7c4:	d126      	bne.n	800c814 <__ieee754_sqrt+0x180>
 800c7c6:	3501      	adds	r5, #1
 800c7c8:	463c      	mov	r4, r7
 800c7ca:	106a      	asrs	r2, r5, #1
 800c7cc:	0863      	lsrs	r3, r4, #1
 800c7ce:	07e9      	lsls	r1, r5, #31
 800c7d0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c7d4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c7d8:	bf48      	it	mi
 800c7da:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c7de:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c7e2:	461c      	mov	r4, r3
 800c7e4:	e76d      	b.n	800c6c2 <__ieee754_sqrt+0x2e>
 800c7e6:	0ad3      	lsrs	r3, r2, #11
 800c7e8:	3815      	subs	r0, #21
 800c7ea:	0552      	lsls	r2, r2, #21
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d0fa      	beq.n	800c7e6 <__ieee754_sqrt+0x152>
 800c7f0:	02dc      	lsls	r4, r3, #11
 800c7f2:	d50a      	bpl.n	800c80a <__ieee754_sqrt+0x176>
 800c7f4:	f1c1 0420 	rsb	r4, r1, #32
 800c7f8:	fa22 f404 	lsr.w	r4, r2, r4
 800c7fc:	1e4d      	subs	r5, r1, #1
 800c7fe:	408a      	lsls	r2, r1
 800c800:	4323      	orrs	r3, r4
 800c802:	1b41      	subs	r1, r0, r5
 800c804:	e772      	b.n	800c6ec <__ieee754_sqrt+0x58>
 800c806:	4608      	mov	r0, r1
 800c808:	e7f0      	b.n	800c7ec <__ieee754_sqrt+0x158>
 800c80a:	005b      	lsls	r3, r3, #1
 800c80c:	3101      	adds	r1, #1
 800c80e:	e7ef      	b.n	800c7f0 <__ieee754_sqrt+0x15c>
 800c810:	46e0      	mov	r8, ip
 800c812:	e7aa      	b.n	800c76a <__ieee754_sqrt+0xd6>
 800c814:	f7f3 fd42 	bl	800029c <__adddf3>
 800c818:	e9da 8900 	ldrd	r8, r9, [sl]
 800c81c:	4602      	mov	r2, r0
 800c81e:	460b      	mov	r3, r1
 800c820:	4640      	mov	r0, r8
 800c822:	4649      	mov	r1, r9
 800c824:	f7f4 f962 	bl	8000aec <__aeabi_dcmplt>
 800c828:	b120      	cbz	r0, 800c834 <__ieee754_sqrt+0x1a0>
 800c82a:	1ca0      	adds	r0, r4, #2
 800c82c:	bf08      	it	eq
 800c82e:	3501      	addeq	r5, #1
 800c830:	3402      	adds	r4, #2
 800c832:	e7ca      	b.n	800c7ca <__ieee754_sqrt+0x136>
 800c834:	3401      	adds	r4, #1
 800c836:	f024 0401 	bic.w	r4, r4, #1
 800c83a:	e7c6      	b.n	800c7ca <__ieee754_sqrt+0x136>
 800c83c:	7ff00000 	.word	0x7ff00000
 800c840:	200002c8 	.word	0x200002c8
 800c844:	200002d0 	.word	0x200002d0

0800c848 <_init>:
 800c848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c84a:	bf00      	nop
 800c84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c84e:	bc08      	pop	{r3}
 800c850:	469e      	mov	lr, r3
 800c852:	4770      	bx	lr

0800c854 <_fini>:
 800c854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c856:	bf00      	nop
 800c858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c85a:	bc08      	pop	{r3}
 800c85c:	469e      	mov	lr, r3
 800c85e:	4770      	bx	lr
