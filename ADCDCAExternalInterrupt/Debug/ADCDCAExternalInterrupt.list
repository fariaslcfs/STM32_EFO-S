
ADCDCAExternalInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800e778  0800e778  0000f778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebd0  0800ebd0  000107c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebd0  0800ebd0  0000fbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebd8  0800ebd8  000107c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ebd8  0800ebd8  0000fbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebe0  0800ebe0  0000fbe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007c0  20000000  0800ebe4  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ff0  200007c0  0800f3a4  000107c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200027b0  0800f3a4  000117b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133c9  00000000  00000000  000107f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000359a  00000000  00000000  00023bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00027158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7e  00000000  00000000  000281e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab5d  00000000  00000000  00028e5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016747  00000000  00000000  000439bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097b37  00000000  00000000  0005a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1c39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005938  00000000  00000000  000f1c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000f75b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200007c0 	.word	0x200007c0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e75c 	.word	0x0800e75c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200007c4 	.word	0x200007c4
 80001dc:	0800e75c 	.word	0x0800e75c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <count2volt>:

#define Vref 3.3 // Reference voltage (in volts)

int max_count;

double count2volt(int res, int count){
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]

	    max_count = pow(2, res) - 1;
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fb3e 	bl	8000534 <__aeabi_i2d>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	ec43 2b11 	vmov	d1, r2, r3
 8000ec0:	ed9f 0b1b 	vldr	d0, [pc, #108]	@ 8000f30 <count2volt+0x88>
 8000ec4:	f00c fcea 	bl	800d89c <pow>
 8000ec8:	ec51 0b10 	vmov	r0, r1, d0
 8000ecc:	f04f 0200 	mov.w	r2, #0
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <count2volt+0x98>)
 8000ed2:	f7ff f9e1 	bl	8000298 <__aeabi_dsub>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4610      	mov	r0, r2
 8000edc:	4619      	mov	r1, r3
 8000ede:	f7ff fe43 	bl	8000b68 <__aeabi_d2iz>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a17      	ldr	r2, [pc, #92]	@ (8000f44 <count2volt+0x9c>)
 8000ee6:	6013      	str	r3, [r2, #0]

	    return(Vref / max_count * count);
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <count2volt+0x9c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb21 	bl	8000534 <__aeabi_i2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	a110      	add	r1, pc, #64	@ (adr r1, 8000f38 <count2volt+0x90>)
 8000ef8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000efc:	f7ff fcae 	bl	800085c <__aeabi_ddiv>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	4614      	mov	r4, r2
 8000f06:	461d      	mov	r5, r3
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f7ff fb13 	bl	8000534 <__aeabi_i2d>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4620      	mov	r0, r4
 8000f14:	4629      	mov	r1, r5
 8000f16:	f7ff fb77 	bl	8000608 <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f22:	eeb0 0a47 	vmov.f32	s0, s14
 8000f26:	eef0 0a67 	vmov.f32	s1, s15
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f30:	00000000 	.word	0x00000000
 8000f34:	40000000 	.word	0x40000000
 8000f38:	66666666 	.word	0x66666666
 8000f3c:	400a6666 	.word	0x400a6666
 8000f40:	3ff00000 	.word	0x3ff00000
 8000f44:	200007dc 	.word	0x200007dc

08000f48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f4e:	f000 fc11 	bl	8001774 <HAL_Init>
	HAL_StatusTypeDef RET;

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f52:	f000 f889 	bl	8001068 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f56:	f000 f973 	bl	8001240 <MX_GPIO_Init>
	MX_ADC1_Init();
 8000f5a:	f000 f8f1 	bl	8001140 <MX_ADC1_Init>
	MX_USB_DEVICE_Init();
 8000f5e:	f007 fa63 	bl	8008428 <MX_USB_DEVICE_Init>
	MX_I2C2_Init();
 8000f62:	f000 f93f 	bl	80011e4 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADC_Start_IT(&hadc1);
 8000f66:	4833      	ldr	r0, [pc, #204]	@ (8001034 <main+0xec>)
 8000f68:	f000 fcde 	bl	8001928 <HAL_ADC_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (RET == HAL_OK) {
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d108      	bne.n	8000f84 <main+0x3c>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f76:	4830      	ldr	r0, [pc, #192]	@ (8001038 <main+0xf0>)
 8000f78:	f001 fc01 	bl	800277e <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 8000f7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f80:	f000 fc6a 	bl	8001858 <HAL_Delay>
		}

		pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000f84:	2101      	movs	r1, #1
 8000f86:	482d      	ldr	r0, [pc, #180]	@ (800103c <main+0xf4>)
 8000f88:	f001 fbc8 	bl	800271c <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4b2b      	ldr	r3, [pc, #172]	@ (8001040 <main+0xf8>)
 8000f92:	701a      	strb	r2, [r3, #0]

		if (!pinState) {
 8000f94:	4b2a      	ldr	r3, [pc, #168]	@ (8001040 <main+0xf8>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d104      	bne.n	8000fa6 <main+0x5e>
			countsDAC = MIDSCALE;
 8000f9c:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <main+0xfc>)
 8000f9e:	f240 7245 	movw	r2, #1861	@ 0x745
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	e003      	b.n	8000fae <main+0x66>
		} else {
			countsDAC = FULLSCALE;
 8000fa6:	4b27      	ldr	r3, [pc, #156]	@ (8001044 <main+0xfc>)
 8000fa8:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8000fac:	601a      	str	r2, [r3, #0]
		}
		buf[0] = countsDAC >> 8;
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <main+0xfc>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	121b      	asrs	r3, r3, #8
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b24      	ldr	r3, [pc, #144]	@ (8001048 <main+0x100>)
 8000fb8:	701a      	strb	r2, [r3, #0]
		buf[1] = countsDAC;
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <main+0xfc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b21      	ldr	r3, [pc, #132]	@ (8001048 <main+0x100>)
 8000fc2:	705a      	strb	r2, [r3, #1]

		volts = count2volt(ADCRES, adcValue);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <main+0x104>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	200c      	movs	r0, #12
 8000fcc:	f7ff ff6c 	bl	8000ea8 <count2volt>
 8000fd0:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd4:	eef0 7a60 	vmov.f32	s15, s1
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <main+0x108>)
 8000fda:	ed83 7b00 	vstr	d7, [r3]

		RET = HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), buf, 2, timeOut);
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <main+0x10c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	4a18      	ldr	r2, [pc, #96]	@ (8001048 <main+0x100>)
 8000fe8:	21c0      	movs	r1, #192	@ 0xc0
 8000fea:	481b      	ldr	r0, [pc, #108]	@ (8001058 <main+0x110>)
 8000fec:	f001 fd26 	bl	8002a3c <HAL_I2C_Master_Transmit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
		if (RET == HAL_OK) {
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d10c      	bne.n	8001014 <main+0xcc>
			sprintf(buffer, "Counts: %d --- Volts: %.2f\r\n", adcValue, volts);
 8000ffa:	4b14      	ldr	r3, [pc, #80]	@ (800104c <main+0x104>)
 8000ffc:	6819      	ldr	r1, [r3, #0]
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <main+0x108>)
 8001000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001004:	e9cd 2300 	strd	r2, r3, [sp]
 8001008:	460a      	mov	r2, r1
 800100a:	4914      	ldr	r1, [pc, #80]	@ (800105c <main+0x114>)
 800100c:	4814      	ldr	r0, [pc, #80]	@ (8001060 <main+0x118>)
 800100e:	f007 ffdd 	bl	8008fcc <sprintf>
 8001012:	e003      	b.n	800101c <main+0xd4>
		} else {
			sprintf(buffer, "HAL_Error in I2C transmission\r\n");
 8001014:	4913      	ldr	r1, [pc, #76]	@ (8001064 <main+0x11c>)
 8001016:	4812      	ldr	r0, [pc, #72]	@ (8001060 <main+0x118>)
 8001018:	f007 ffd8 	bl	8008fcc <sprintf>
		}
		CDC_Transmit_FS(buffer, sizeof(buffer));
 800101c:	2120      	movs	r1, #32
 800101e:	4810      	ldr	r0, [pc, #64]	@ (8001060 <main+0x118>)
 8001020:	f007 fac0 	bl	80085a4 <CDC_Transmit_FS>

		HAL_ADC_Start_IT(&hadc1);
 8001024:	4803      	ldr	r0, [pc, #12]	@ (8001034 <main+0xec>)
 8001026:	f000 fc7f 	bl	8001928 <HAL_ADC_Start_IT>
		HAL_Delay(500);
 800102a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800102e:	f000 fc13 	bl	8001858 <HAL_Delay>
		if (RET == HAL_OK) {
 8001032:	e79b      	b.n	8000f6c <main+0x24>
 8001034:	200007e0 	.word	0x200007e0
 8001038:	40020800 	.word	0x40020800
 800103c:	40020000 	.word	0x40020000
 8001040:	200008b4 	.word	0x200008b4
 8001044:	2000087c 	.word	0x2000087c
 8001048:	20000890 	.word	0x20000890
 800104c:	20000880 	.word	0x20000880
 8001050:	20000888 	.word	0x20000888
 8001054:	20000000 	.word	0x20000000
 8001058:	20000828 	.word	0x20000828
 800105c:	0800e778 	.word	0x0800e778
 8001060:	20000894 	.word	0x20000894
 8001064:	0800e798 	.word	0x0800e798

08001068 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	@ 0x50
 800106c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	@ 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f008 f80b 	bl	8009092 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b29      	ldr	r3, [pc, #164]	@ (8001138 <SystemClock_Config+0xd0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	4a28      	ldr	r2, [pc, #160]	@ (8001138 <SystemClock_Config+0xd0>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
 800109c:	4b26      	ldr	r3, [pc, #152]	@ (8001138 <SystemClock_Config+0xd0>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b23      	ldr	r3, [pc, #140]	@ (800113c <SystemClock_Config+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a22      	ldr	r2, [pc, #136]	@ (800113c <SystemClock_Config+0xd4>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b20      	ldr	r3, [pc, #128]	@ (800113c <SystemClock_Config+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d2:	2310      	movs	r3, #16
 80010d4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d6:	2302      	movs	r3, #2
 80010d8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010de:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 15;
 80010e0:	230f      	movs	r3, #15
 80010e2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 144;
 80010e4:	2390      	movs	r3, #144	@ 0x90
 80010e6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80010ec:	2305      	movs	r3, #5
 80010ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010f0:	f107 0320 	add.w	r3, r7, #32
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fa4b 	bl	8004590 <HAL_RCC_OscConfig>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x9c>
		Error_Handler();
 8001100:	f000 f920 	bl	8001344 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001104:	230f      	movs	r3, #15
 8001106:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f003 fcae 	bl	8004a80 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xc6>
		Error_Handler();
 800112a:	f000 f90b 	bl	8001344 <Error_Handler>
	}
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	@ 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001152:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001154:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <MX_ADC1_Init+0x9c>)
 8001156:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001158:	4b1f      	ldr	r3, [pc, #124]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800115a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800115e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001160:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001166:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800116c:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800116e:	2200      	movs	r2, #0
 8001170:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001172:	4b19      	ldr	r3, [pc, #100]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117a:	4b17      	ldr	r3, [pc, #92]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800117c:	2200      	movs	r2, #0
 800117e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001180:	4b15      	ldr	r3, [pc, #84]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001182:	4a17      	ldr	r2, [pc, #92]	@ (80011e0 <MX_ADC1_Init+0xa0>)
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001186:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001188:	2200      	movs	r2, #0
 800118a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800118c:	4b12      	ldr	r3, [pc, #72]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800118e:	2201      	movs	r2, #1
 8001190:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8001192:	4b11      	ldr	r3, [pc, #68]	@ (80011d8 <MX_ADC1_Init+0x98>)
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119a:	4b0f      	ldr	r3, [pc, #60]	@ (80011d8 <MX_ADC1_Init+0x98>)
 800119c:	2201      	movs	r2, #1
 800119e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011a0:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <MX_ADC1_Init+0x98>)
 80011a2:	f000 fb7d 	bl	80018a0 <HAL_ADC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x70>
		Error_Handler();
 80011ac:	f000 f8ca 	bl	8001344 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80011b4:	2301      	movs	r3, #1
 80011b6:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80011bc:	463b      	mov	r3, r7
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <MX_ADC1_Init+0x98>)
 80011c2:	f000 fddd 	bl	8001d80 <HAL_ADC_ConfigChannel>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_ADC1_Init+0x90>
		Error_Handler();
 80011cc:	f000 f8ba 	bl	8001344 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80011d0:	bf00      	nop
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	200007e0 	.word	0x200007e0
 80011dc:	40012000 	.word	0x40012000
 80011e0:	0f000001 	.word	0x0f000001

080011e4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	@ (8001238 <MX_I2C2_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	@ (800123c <MX_I2C2_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001206:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <MX_I2C2_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_I2C2_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001220:	4804      	ldr	r0, [pc, #16]	@ (8001234 <MX_I2C2_Init+0x50>)
 8001222:	f001 fac7 	bl	80027b4 <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C2_Init+0x4c>
		Error_Handler();
 800122c:	f000 f88a 	bl	8001344 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000828 	.word	0x20000828
 8001238:	40005800 	.word	0x40005800
 800123c:	000186a0 	.word	0x000186a0

08001240 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	@ 0x28
 8001244:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
 800125a:	4b2d      	ldr	r3, [pc, #180]	@ (8001310 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a2c      	ldr	r2, [pc, #176]	@ (8001310 <MX_GPIO_Init+0xd0>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b2a      	ldr	r3, [pc, #168]	@ (8001310 <MX_GPIO_Init+0xd0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	613b      	str	r3, [r7, #16]
 8001270:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	4b26      	ldr	r3, [pc, #152]	@ (8001310 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a25      	ldr	r2, [pc, #148]	@ (8001310 <MX_GPIO_Init+0xd0>)
 800127c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <MX_GPIO_Init+0xd0>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a1e      	ldr	r2, [pc, #120]	@ (8001310 <MX_GPIO_Init+0xd0>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_GPIO_Init+0xd0>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	607b      	str	r3, [r7, #4]
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	4a17      	ldr	r2, [pc, #92]	@ (8001310 <MX_GPIO_Init+0xd0>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ba:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MX_GPIO_Init+0xd0>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012cc:	4811      	ldr	r0, [pc, #68]	@ (8001314 <MX_GPIO_Init+0xd4>)
 80012ce:	f001 fa3d 	bl	800274c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <MX_GPIO_Init+0xd4>)
 80012ec:	f001 f892 	bl	8002414 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_GPIO_Init+0xd8>)
 8001304:	f001 f886 	bl	8002414 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40020800 	.word	0x40020800
 8001318:	40020000 	.word	0x40020000

0800131c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	adcValue = HAL_ADC_GetValue(hadc1);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 fd0a 	bl	8001d3e <HAL_ADC_GetValue>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <HAL_ADC_ConvCpltCallback+0x24>)
 8001330:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_IT(hadc1);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 fbb6 	bl	8001aa4 <HAL_ADC_Stop_IT>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000880 	.word	0x20000880

08001344 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
}
 800134a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800134c:	bf00      	nop
 800134e:	e7fd      	b.n	800134c <Error_Handler+0x8>

08001350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	4a0f      	ldr	r2, [pc, #60]	@ (800139c <HAL_MspInit+0x4c>)
 8001360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001364:	6453      	str	r3, [r2, #68]	@ 0x44
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <HAL_MspInit+0x4c>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	@ (800139c <HAL_MspInit+0x4c>)
 800137c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001380:	6413      	str	r3, [r2, #64]	@ 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <HAL_MspInit+0x4c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800

080013a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1b      	ldr	r2, [pc, #108]	@ (800142c <HAL_ADC_MspInit+0x8c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12f      	bne.n	8001422 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <HAL_ADC_MspInit+0x90>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	4a19      	ldr	r2, [pc, #100]	@ (8001430 <HAL_ADC_MspInit+0x90>)
 80013cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <HAL_ADC_MspInit+0x90>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <HAL_ADC_MspInit+0x90>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a12      	ldr	r2, [pc, #72]	@ (8001430 <HAL_ADC_MspInit+0x90>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <HAL_ADC_MspInit+0x90>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80013fa:	2302      	movs	r3, #2
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fe:	2303      	movs	r3, #3
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	4619      	mov	r1, r3
 800140c:	4809      	ldr	r0, [pc, #36]	@ (8001434 <HAL_ADC_MspInit+0x94>)
 800140e:	f001 f801 	bl	8002414 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2100      	movs	r1, #0
 8001416:	2012      	movs	r0, #18
 8001418:	f000 ffc5 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800141c:	2012      	movs	r0, #18
 800141e:	f000 ffde 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001422:	bf00      	nop
 8001424:	3728      	adds	r7, #40	@ 0x28
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40012000 	.word	0x40012000
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <HAL_I2C_MspInit+0xa4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d13c      	bne.n	80014d4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b20      	ldr	r3, [pc, #128]	@ (80014e0 <HAL_I2C_MspInit+0xa8>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a1f      	ldr	r2, [pc, #124]	@ (80014e0 <HAL_I2C_MspInit+0xa8>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b1d      	ldr	r3, [pc, #116]	@ (80014e0 <HAL_I2C_MspInit+0xa8>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001476:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800147a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800147c:	2312      	movs	r3, #18
 800147e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001488:	2304      	movs	r3, #4
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	4619      	mov	r1, r3
 8001492:	4814      	ldr	r0, [pc, #80]	@ (80014e4 <HAL_I2C_MspInit+0xac>)
 8001494:	f000 ffbe 	bl	8002414 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001498:	2308      	movs	r3, #8
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800149c:	2312      	movs	r3, #18
 800149e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80014a8:	2309      	movs	r3, #9
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	480c      	ldr	r0, [pc, #48]	@ (80014e4 <HAL_I2C_MspInit+0xac>)
 80014b4:	f000 ffae 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <HAL_I2C_MspInit+0xa8>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	4a07      	ldr	r2, [pc, #28]	@ (80014e0 <HAL_I2C_MspInit+0xa8>)
 80014c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <HAL_I2C_MspInit+0xa8>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	@ 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40005800 	.word	0x40005800
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020400 	.word	0x40020400

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <MemManage_Handler+0x4>

08001500 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <UsageFault_Handler+0x4>

08001510 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153e:	f000 f96b 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <ADC_IRQHandler+0x10>)
 800154e:	f000 fae6 	bl	8001b1e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200007e0 	.word	0x200007e0

0800155c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <OTG_FS_IRQHandler+0x10>)
 8001562:	f001 ff08 	bl	8003376 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20001da0 	.word	0x20001da0

08001570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_kill>:

int _kill(int pid, int sig)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158a:	f007 fdd1 	bl	8009130 <__errno>
 800158e:	4603      	mov	r3, r0
 8001590:	2216      	movs	r2, #22
 8001592:	601a      	str	r2, [r3, #0]
  return -1;
 8001594:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_exit>:

void _exit (int status)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ffe7 	bl	8001580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b2:	bf00      	nop
 80015b4:	e7fd      	b.n	80015b2 <_exit+0x12>

080015b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
 80015c6:	e00a      	b.n	80015de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c8:	f3af 8000 	nop.w
 80015cc:	4601      	mov	r1, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60ba      	str	r2, [r7, #8]
 80015d4:	b2ca      	uxtb	r2, r1
 80015d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	dbf0      	blt.n	80015c8 <_read+0x12>
  }

  return len;
 80015e6:	687b      	ldr	r3, [r7, #4]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fc:	2300      	movs	r3, #0
 80015fe:	617b      	str	r3, [r7, #20]
 8001600:	e009      	b.n	8001616 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	3301      	adds	r3, #1
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	429a      	cmp	r2, r3
 800161c:	dbf1      	blt.n	8001602 <_write+0x12>
  }
  return len;
 800161e:	687b      	ldr	r3, [r7, #4]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_close>:

int _close(int file)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001650:	605a      	str	r2, [r3, #4]
  return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_isatty>:

int _isatty(int file)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001676:	b480      	push	{r7}
 8001678:	b085      	sub	sp, #20
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001698:	4a14      	ldr	r2, [pc, #80]	@ (80016ec <_sbrk+0x5c>)
 800169a:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <_sbrk+0x60>)
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a4:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <_sbrk+0x64>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ac:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <_sbrk+0x64>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	@ (80016f8 <_sbrk+0x68>)
 80016b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b2:	4b10      	ldr	r3, [pc, #64]	@ (80016f4 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c0:	f007 fd36 	bl	8009130 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b08      	ldr	r3, [pc, #32]	@ (80016f4 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a05      	ldr	r2, [pc, #20]	@ (80016f4 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20020000 	.word	0x20020000
 80016f0:	00000400 	.word	0x00000400
 80016f4:	200008b8 	.word	0x200008b8
 80016f8:	200027b0 	.word	0x200027b0

080016fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <SystemInit+0x20>)
 8001702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <SystemInit+0x20>)
 8001708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800170c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001724:	f7ff ffea 	bl	80016fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f007 fcf5 	bl	800913c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7ff fbf9 	bl	8000f48 <main>
  bx  lr    
 8001756:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001758:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	200007c0 	.word	0x200007c0
  ldr r2, =_sidata
 8001764:	0800ebe4 	.word	0x0800ebe4
  ldr r2, =_sbss
 8001768:	200007c0 	.word	0x200007c0
  ldr r4, =_ebss
 800176c:	200027b0 	.word	0x200027b0

08001770 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <DMA1_Stream0_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <HAL_Init+0x40>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_Init+0x40>)
 800178a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800178e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_Init+0x40>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 fdf7 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff fdd2 	bl	8001350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 fe0f 	bl	80023fa <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 fdd7 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000004 	.word	0x20000004
 8001810:	2000000c 	.word	0x2000000c
 8001814:	20000008 	.word	0x20000008

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	2000000c 	.word	0x2000000c
 800183c:	200008bc 	.word	0x200008bc

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200008bc 	.word	0x200008bc

08001858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001860:	f7ff ffee 	bl	8001840 <HAL_GetTick>
 8001864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001870:	d005      	beq.n	800187e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <HAL_Delay+0x44>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	461a      	mov	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4413      	add	r3, r2
 800187c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187e:	bf00      	nop
 8001880:	f7ff ffde 	bl	8001840 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d8f7      	bhi.n	8001880 <HAL_Delay+0x28>
  {
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c

080018a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e033      	b.n	800191e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff fd6e 	bl	80013a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d118      	bne.n	8001910 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018e6:	f023 0302 	bic.w	r3, r3, #2
 80018ea:	f043 0202 	orr.w	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fb76 	bl	8001fe4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f023 0303 	bic.w	r3, r3, #3
 8001906:	f043 0201 	orr.w	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	641a      	str	r2, [r3, #64]	@ 0x40
 800190e:	e001      	b.n	8001914 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800191c:	7bfb      	ldrb	r3, [r7, #15]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_ADC_Start_IT+0x1a>
 800193e:	2302      	movs	r3, #2
 8001940:	e0a1      	b.n	8001a86 <HAL_ADC_Start_IT+0x15e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b01      	cmp	r3, #1
 8001956:	d018      	beq.n	800198a <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001968:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <HAL_ADC_Start_IT+0x16c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a98 <HAL_ADC_Start_IT+0x170>)
 800196e:	fba2 2303 	umull	r2, r3, r2, r3
 8001972:	0c9a      	lsrs	r2, r3, #18
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800197c:	e002      	b.n	8001984 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	3b01      	subs	r3, #1
 8001982:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f9      	bne.n	800197e <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 0301 	and.w	r3, r3, #1
 8001994:	2b01      	cmp	r3, #1
 8001996:	d169      	bne.n	8001a6c <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80019a0:	f023 0301 	bic.w	r3, r3, #1
 80019a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80019c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019d6:	d106      	bne.n	80019e6 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019dc:	f023 0206 	bic.w	r2, r3, #6
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80019e4:	e002      	b.n	80019ec <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f4:	4b29      	ldr	r3, [pc, #164]	@ (8001a9c <HAL_ADC_Start_IT+0x174>)
 80019f6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a00:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a10:	f043 0320 	orr.w	r3, r3, #32
 8001a14:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f003 031f 	and.w	r3, r3, #31
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d129      	bne.n	8001a84 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	e020      	b.n	8001a84 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a16      	ldr	r2, [pc, #88]	@ (8001aa0 <HAL_ADC_Start_IT+0x178>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d11b      	bne.n	8001a84 <HAL_ADC_Start_IT+0x15c>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d114      	bne.n	8001a84 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	e00b      	b.n	8001a84 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a70:	f043 0210 	orr.w	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7c:	f043 0201 	orr.w	r2, r3, #1
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000004 	.word	0x20000004
 8001a98:	431bde83 	.word	0x431bde83
 8001a9c:	40012300 	.word	0x40012300
 8001aa0:	40012000 	.word	0x40012000

08001aa4 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d101      	bne.n	8001aba <HAL_ADC_Stop_IT+0x16>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e02b      	b.n	8001b12 <HAL_ADC_Stop_IT+0x6e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0301 	and.w	r3, r3, #1
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d113      	bne.n	8001b08 <HAL_ADC_Stop_IT+0x64>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001aee:	f023 0320 	bic.w	r3, r3, #32
 8001af2:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001afc:	f023 0301 	bic.w	r3, r3, #1
 8001b00:	f043 0201 	orr.w	r2, r3, #1
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b086      	sub	sp, #24
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d049      	beq.n	8001be8 <HAL_ADC_IRQHandler+0xca>
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d046      	beq.n	8001be8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12b      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d127      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d006      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d119      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0220 	bic.w	r2, r2, #32
 8001bb2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d105      	bne.n	8001bd8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff fb9f 	bl	800131c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f06f 0212 	mvn.w	r2, #18
 8001be6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bf6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d057      	beq.n	8001cae <HAL_ADC_IRQHandler+0x190>
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d054      	beq.n	8001cae <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d105      	bne.n	8001c1c <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d139      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c30:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d006      	beq.n	8001c46 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d12b      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d124      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11d      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d119      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	685a      	ldr	r2, [r3, #4]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c78:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fa9c 	bl	80021dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f06f 020c 	mvn.w	r2, #12
 8001cac:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cbc:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d017      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0x1d6>
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d014      	beq.n	8001cf4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10d      	bne.n	8001cf4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f837 	bl	8001d58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f06f 0201 	mvn.w	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d02:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d015      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x218>
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d012      	beq.n	8001d36 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d14:	f043 0202 	orr.w	r2, r3, #2
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0220 	mvn.w	r2, #32
 8001d24:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f820 	bl	8001d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f06f 0220 	mvn.w	r2, #32
 8001d34:	601a      	str	r2, [r3, #0]
  }
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b085      	sub	sp, #20
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x1c>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e113      	b.n	8001fc4 <HAL_ADC_ConfigChannel+0x244>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2b09      	cmp	r3, #9
 8001daa:	d925      	bls.n	8001df8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68d9      	ldr	r1, [r3, #12]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	461a      	mov	r2, r3
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b1e      	subs	r3, #30
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	43da      	mvns	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	400a      	ands	r2, r1
 8001dd0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68d9      	ldr	r1, [r3, #12]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	4603      	mov	r3, r0
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4403      	add	r3, r0
 8001dea:	3b1e      	subs	r3, #30
 8001dec:	409a      	lsls	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	e022      	b.n	8001e3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6919      	ldr	r1, [r3, #16]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	461a      	mov	r2, r3
 8001e06:	4613      	mov	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4413      	add	r3, r2
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6919      	ldr	r1, [r3, #16]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	4603      	mov	r3, r0
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	4403      	add	r3, r0
 8001e34:	409a      	lsls	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d824      	bhi.n	8001e90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b05      	subs	r3, #5
 8001e58:	221f      	movs	r2, #31
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	400a      	ands	r2, r1
 8001e66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b05      	subs	r3, #5
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e8e:	e04c      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b0c      	cmp	r3, #12
 8001e96:	d824      	bhi.n	8001ee2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3b23      	subs	r3, #35	@ 0x23
 8001eaa:	221f      	movs	r2, #31
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	43da      	mvns	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	400a      	ands	r2, r1
 8001eb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3b23      	subs	r3, #35	@ 0x23
 8001ed4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	430a      	orrs	r2, r1
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ee0:	e023      	b.n	8001f2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3b41      	subs	r3, #65	@ 0x41
 8001ef4:	221f      	movs	r2, #31
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	400a      	ands	r2, r1
 8001f02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	4618      	mov	r0, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3b41      	subs	r3, #65	@ 0x41
 8001f1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	430a      	orrs	r2, r1
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2a:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x250>)
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a28      	ldr	r2, [pc, #160]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x254>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d10f      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d8>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b12      	cmp	r3, #18
 8001f3e:	d10b      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x254>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x23a>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x258>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d003      	beq.n	8001f74 <HAL_ADC_ConfigChannel+0x1f4>
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b11      	cmp	r3, #17
 8001f72:	d122      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a11      	ldr	r2, [pc, #68]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x258>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d111      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_ADC_ConfigChannel+0x25c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a11      	ldr	r2, [pc, #68]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x260>)
 8001f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa0:	0c9a      	lsrs	r2, r3, #18
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fac:	e002      	b.n	8001fb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f9      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	40012000 	.word	0x40012000
 8001fd8:	10000012 	.word	0x10000012
 8001fdc:	20000004 	.word	0x20000004
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fec:	4b79      	ldr	r3, [pc, #484]	@ (80021d4 <ADC_Init+0x1f0>)
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685a      	ldr	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	431a      	orrs	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6859      	ldr	r1, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	021a      	lsls	r2, r3, #8
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800203c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6859      	ldr	r1, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800205e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002076:	4a58      	ldr	r2, [pc, #352]	@ (80021d8 <ADC_Init+0x1f4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d022      	beq.n	80020c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800208a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6899      	ldr	r1, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6899      	ldr	r1, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e00f      	b.n	80020e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80020d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80020e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0202 	bic.w	r2, r2, #2
 80020f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6899      	ldr	r1, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	7e1b      	ldrb	r3, [r3, #24]
 80020fc:	005a      	lsls	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d01b      	beq.n	8002148 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800211e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800212e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6859      	ldr	r1, [r3, #4]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213a:	3b01      	subs	r3, #1
 800213c:	035a      	lsls	r2, r3, #13
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	e007      	b.n	8002158 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002156:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002166:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	3b01      	subs	r3, #1
 8002174:	051a      	lsls	r2, r3, #20
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800218c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	6899      	ldr	r1, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800219a:	025a      	lsls	r2, r3, #9
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6899      	ldr	r1, [r3, #8]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	029a      	lsls	r2, r3, #10
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
}
 80021c8:	bf00      	nop
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40012300 	.word	0x40012300
 80021d8:	0f000001 	.word	0x0f000001

080021dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	@ (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	@ (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b8:	f7ff ff3e 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	6978      	ldr	r0, [r7, #20]
 80023c4:	f7ff ff8e 	bl	80022e4 <NVIC_EncodePriority>
 80023c8:	4602      	mov	r2, r0
 80023ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff ff5d 	bl	8002290 <__NVIC_SetPriority>
}
 80023d6:	bf00      	nop
 80023d8:	3718      	adds	r7, #24
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff31 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7ff ffa2 	bl	800234c <SysTick_Config>
 8002408:	4603      	mov	r3, r0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002414:	b480      	push	{r7}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
 800242e:	e159      	b.n	80026e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002430:	2201      	movs	r2, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	f040 8148 	bne.w	80026de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	2b01      	cmp	r3, #1
 8002458:	d005      	beq.n	8002466 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002462:	2b02      	cmp	r3, #2
 8002464:	d130      	bne.n	80024c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	2203      	movs	r2, #3
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	4313      	orrs	r3, r2
 800248e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800249c:	2201      	movs	r2, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	091b      	lsrs	r3, r3, #4
 80024b2:	f003 0201 	and.w	r2, r3, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d017      	beq.n	8002504 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	08da      	lsrs	r2, r3, #3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3208      	adds	r2, #8
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	220f      	movs	r2, #15
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	691a      	ldr	r2, [r3, #16]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	08da      	lsrs	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3208      	adds	r2, #8
 8002552:	69b9      	ldr	r1, [r7, #24]
 8002554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 0203 	and.w	r2, r3, #3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 80a2 	beq.w	80026de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b57      	ldr	r3, [pc, #348]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025a2:	4a56      	ldr	r2, [pc, #344]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025aa:	4b54      	ldr	r3, [pc, #336]	@ (80026fc <HAL_GPIO_Init+0x2e8>)
 80025ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b6:	4a52      	ldr	r2, [pc, #328]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	089b      	lsrs	r3, r3, #2
 80025bc:	3302      	adds	r3, #2
 80025be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	220f      	movs	r2, #15
 80025ce:	fa02 f303 	lsl.w	r3, r2, r3
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a49      	ldr	r2, [pc, #292]	@ (8002704 <HAL_GPIO_Init+0x2f0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x202>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a48      	ldr	r2, [pc, #288]	@ (8002708 <HAL_GPIO_Init+0x2f4>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x1fe>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a47      	ldr	r2, [pc, #284]	@ (800270c <HAL_GPIO_Init+0x2f8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x1fa>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a46      	ldr	r2, [pc, #280]	@ (8002710 <HAL_GPIO_Init+0x2fc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x1f6>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a45      	ldr	r2, [pc, #276]	@ (8002714 <HAL_GPIO_Init+0x300>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x1f2>
 8002602:	2304      	movs	r3, #4
 8002604:	e008      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002606:	2307      	movs	r3, #7
 8002608:	e006      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260a:	2303      	movs	r3, #3
 800260c:	e004      	b.n	8002618 <HAL_GPIO_Init+0x204>
 800260e:	2302      	movs	r3, #2
 8002610:	e002      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <HAL_GPIO_Init+0x204>
 8002616:	2300      	movs	r3, #0
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	f002 0203 	and.w	r2, r2, #3
 800261e:	0092      	lsls	r2, r2, #2
 8002620:	4093      	lsls	r3, r2
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	4313      	orrs	r3, r2
 8002626:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002628:	4935      	ldr	r1, [pc, #212]	@ (8002700 <HAL_GPIO_Init+0x2ec>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	089b      	lsrs	r3, r3, #2
 800262e:	3302      	adds	r3, #2
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002636:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	43db      	mvns	r3, r3
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	4013      	ands	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800265a:	4a2f      	ldr	r2, [pc, #188]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002660:	4b2d      	ldr	r3, [pc, #180]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002684:	4a24      	ldr	r2, [pc, #144]	@ (8002718 <HAL_GPIO_Init+0x304>)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <HAL_GPIO_Init+0x304>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	43db      	mvns	r3, r3
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	4013      	ands	r3, r2
 8002698:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	43db      	mvns	r3, r3
 80026be:	69ba      	ldr	r2, [r7, #24]
 80026c0:	4013      	ands	r3, r2
 80026c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002718 <HAL_GPIO_Init+0x304>)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	3301      	adds	r3, #1
 80026e2:	61fb      	str	r3, [r7, #28]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	2b0f      	cmp	r3, #15
 80026e8:	f67f aea2 	bls.w	8002430 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3724      	adds	r7, #36	@ 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e001      	b.n	800273e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	041a      	lsls	r2, r3, #16
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43d9      	mvns	r1, r3
 800279c:	887b      	ldrh	r3, [r7, #2]
 800279e:	400b      	ands	r3, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	619a      	str	r2, [r3, #24]
}
 80027a6:	bf00      	nop
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e12b      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d106      	bne.n	80027e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f7fe fe2c 	bl	8001438 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2224      	movs	r2, #36	@ 0x24
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0201 	bic.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002818:	f002 faea 	bl	8004df0 <HAL_RCC_GetPCLK1Freq>
 800281c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a81      	ldr	r2, [pc, #516]	@ (8002a28 <HAL_I2C_Init+0x274>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d807      	bhi.n	8002838 <HAL_I2C_Init+0x84>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	4a80      	ldr	r2, [pc, #512]	@ (8002a2c <HAL_I2C_Init+0x278>)
 800282c:	4293      	cmp	r3, r2
 800282e:	bf94      	ite	ls
 8002830:	2301      	movls	r3, #1
 8002832:	2300      	movhi	r3, #0
 8002834:	b2db      	uxtb	r3, r3
 8002836:	e006      	b.n	8002846 <HAL_I2C_Init+0x92>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a30 <HAL_I2C_Init+0x27c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	bf94      	ite	ls
 8002840:	2301      	movls	r3, #1
 8002842:	2300      	movhi	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e0e7      	b.n	8002a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a78      	ldr	r2, [pc, #480]	@ (8002a34 <HAL_I2C_Init+0x280>)
 8002852:	fba2 2303 	umull	r2, r3, r2, r3
 8002856:	0c9b      	lsrs	r3, r3, #18
 8002858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	430a      	orrs	r2, r1
 800286c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	4a6a      	ldr	r2, [pc, #424]	@ (8002a28 <HAL_I2C_Init+0x274>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d802      	bhi.n	8002888 <HAL_I2C_Init+0xd4>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	3301      	adds	r3, #1
 8002886:	e009      	b.n	800289c <HAL_I2C_Init+0xe8>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4a69      	ldr	r2, [pc, #420]	@ (8002a38 <HAL_I2C_Init+0x284>)
 8002894:	fba2 2303 	umull	r2, r3, r2, r3
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	3301      	adds	r3, #1
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	430b      	orrs	r3, r1
 80028a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	495c      	ldr	r1, [pc, #368]	@ (8002a28 <HAL_I2C_Init+0x274>)
 80028b8:	428b      	cmp	r3, r1
 80028ba:	d819      	bhi.n	80028f0 <HAL_I2C_Init+0x13c>
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1e59      	subs	r1, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ca:	1c59      	adds	r1, r3, #1
 80028cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028d0:	400b      	ands	r3, r1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_I2C_Init+0x138>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1e59      	subs	r1, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e4:	3301      	adds	r3, #1
 80028e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ea:	e051      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028ec:	2304      	movs	r3, #4
 80028ee:	e04f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d111      	bne.n	800291c <HAL_I2C_Init+0x168>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1e58      	subs	r0, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6859      	ldr	r1, [r3, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	440b      	add	r3, r1
 8002906:	fbb0 f3f3 	udiv	r3, r0, r3
 800290a:	3301      	adds	r3, #1
 800290c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002910:	2b00      	cmp	r3, #0
 8002912:	bf0c      	ite	eq
 8002914:	2301      	moveq	r3, #1
 8002916:	2300      	movne	r3, #0
 8002918:	b2db      	uxtb	r3, r3
 800291a:	e012      	b.n	8002942 <HAL_I2C_Init+0x18e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e58      	subs	r0, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	0099      	lsls	r1, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002932:	3301      	adds	r3, #1
 8002934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002938:	2b00      	cmp	r3, #0
 800293a:	bf0c      	ite	eq
 800293c:	2301      	moveq	r3, #1
 800293e:	2300      	movne	r3, #0
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <HAL_I2C_Init+0x196>
 8002946:	2301      	movs	r3, #1
 8002948:	e022      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10e      	bne.n	8002970 <HAL_I2C_Init+0x1bc>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1e58      	subs	r0, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	440b      	add	r3, r1
 8002960:	fbb0 f3f3 	udiv	r3, r0, r3
 8002964:	3301      	adds	r3, #1
 8002966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800296a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800296e:	e00f      	b.n	8002990 <HAL_I2C_Init+0x1dc>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1e58      	subs	r0, r3, #1
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6859      	ldr	r1, [r3, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	440b      	add	r3, r1
 800297e:	0099      	lsls	r1, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	fbb0 f3f3 	udiv	r3, r0, r3
 8002986:	3301      	adds	r3, #1
 8002988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	6809      	ldr	r1, [r1, #0]
 8002994:	4313      	orrs	r3, r2
 8002996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69da      	ldr	r2, [r3, #28]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6911      	ldr	r1, [r2, #16]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f042 0201 	orr.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2220      	movs	r2, #32
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	000186a0 	.word	0x000186a0
 8002a2c:	001e847f 	.word	0x001e847f
 8002a30:	003d08ff 	.word	0x003d08ff
 8002a34:	431bde83 	.word	0x431bde83
 8002a38:	10624dd3 	.word	0x10624dd3

08002a3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	461a      	mov	r2, r3
 8002a48:	460b      	mov	r3, r1
 8002a4a:	817b      	strh	r3, [r7, #10]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7fe fef6 	bl	8001840 <HAL_GetTick>
 8002a54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	f040 80e0 	bne.w	8002c24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2319      	movs	r3, #25
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	4970      	ldr	r1, [pc, #448]	@ (8002c30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f964 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e0d3      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_I2C_Master_Transmit+0x50>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e0cc      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d007      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ac0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2221      	movs	r2, #33	@ 0x21
 8002ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2210      	movs	r2, #16
 8002ace:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	893a      	ldrh	r2, [r7, #8]
 8002ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a50      	ldr	r2, [pc, #320]	@ (8002c34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002af2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002af4:	8979      	ldrh	r1, [r7, #10]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	6a3a      	ldr	r2, [r7, #32]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 f89c 	bl	8002c38 <I2C_MasterRequestWrite>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08d      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	613b      	str	r3, [r7, #16]
 8002b1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002b20:	e066      	b.n	8002bf0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	6a39      	ldr	r1, [r7, #32]
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 fa22 	bl	8002f70 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d107      	bne.n	8002b4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e06b      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	781a      	ldrb	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d11b      	bne.n	8002bc4 <HAL_I2C_Master_Transmit+0x188>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d017      	beq.n	8002bc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	781a      	ldrb	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	6a39      	ldr	r1, [r7, #32]
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 fa19 	bl	8003000 <I2C_WaitOnBTFFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d107      	bne.n	8002bec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e01a      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d194      	bne.n	8002b22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e000      	b.n	8002c26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002c24:	2302      	movs	r3, #2
  }
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	00100002 	.word	0x00100002
 8002c34:	ffff0000 	.word	0xffff0000

08002c38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af02      	add	r7, sp, #8
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	607a      	str	r2, [r7, #4]
 8002c42:	603b      	str	r3, [r7, #0]
 8002c44:	460b      	mov	r3, r1
 8002c46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d006      	beq.n	8002c62 <I2C_MasterRequestWrite+0x2a>
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d003      	beq.n	8002c62 <I2C_MasterRequestWrite+0x2a>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c60:	d108      	bne.n	8002c74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e00b      	b.n	8002c8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c78:	2b12      	cmp	r3, #18
 8002c7a:	d107      	bne.n	8002c8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f84f 	bl	8002d3c <I2C_WaitOnFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb2:	d103      	bne.n	8002cbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e035      	b.n	8002d2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cc8:	d108      	bne.n	8002cdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cca:	897b      	ldrh	r3, [r7, #10]
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cd8:	611a      	str	r2, [r3, #16]
 8002cda:	e01b      	b.n	8002d14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cdc:	897b      	ldrh	r3, [r7, #10]
 8002cde:	11db      	asrs	r3, r3, #7
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	f003 0306 	and.w	r3, r3, #6
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f063 030f 	orn	r3, r3, #15
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	490e      	ldr	r1, [pc, #56]	@ (8002d34 <I2C_MasterRequestWrite+0xfc>)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f898 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e010      	b.n	8002d2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4907      	ldr	r1, [pc, #28]	@ (8002d38 <I2C_MasterRequestWrite+0x100>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f888 	bl	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e000      	b.n	8002d2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	00010008 	.word	0x00010008
 8002d38:	00010002 	.word	0x00010002

08002d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	603b      	str	r3, [r7, #0]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d4c:	e048      	b.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d044      	beq.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d56:	f7fe fd73 	bl	8001840 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d139      	bne.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d10d      	bne.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	43da      	mvns	r2, r3
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	4013      	ands	r3, r2
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bf0c      	ite	eq
 8002d88:	2301      	moveq	r3, #1
 8002d8a:	2300      	movne	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	e00c      	b.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	43da      	mvns	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d116      	bne.n	8002de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	f043 0220 	orr.w	r2, r3, #32
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e023      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	0c1b      	lsrs	r3, r3, #16
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d10d      	bne.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	43da      	mvns	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4013      	ands	r3, r2
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf0c      	ite	eq
 8002dfc:	2301      	moveq	r3, #1
 8002dfe:	2300      	movne	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	e00c      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	43da      	mvns	r2, r3
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	4013      	ands	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	461a      	mov	r2, r3
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d093      	beq.n	8002d4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
 8002e3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e3e:	e071      	b.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4e:	d123      	bne.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0204 	orr.w	r2, r3, #4
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e067      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d041      	beq.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7fe fcce 	bl	8001840 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d136      	bne.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10c      	bne.n	8002eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695b      	ldr	r3, [r3, #20]
 8002ec6:	43da      	mvns	r2, r3
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	e00b      	b.n	8002ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e021      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	0c1b      	lsrs	r3, r3, #16
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d10c      	bne.n	8002f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	e00b      	b.n	8002f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	43da      	mvns	r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f47f af6d 	bne.w	8002e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f7c:	e034      	b.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f886 	bl	8003090 <I2C_IsAcknowledgeFailed>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e034      	b.n	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d028      	beq.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f96:	f7fe fc53 	bl	8001840 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d302      	bcc.n	8002fac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d11d      	bne.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fb6:	2b80      	cmp	r3, #128	@ 0x80
 8002fb8:	d016      	beq.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	f043 0220 	orr.w	r2, r3, #32
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff2:	2b80      	cmp	r3, #128	@ 0x80
 8002ff4:	d1c3      	bne.n	8002f7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800300c:	e034      	b.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f000 f83e 	bl	8003090 <I2C_IsAcknowledgeFailed>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e034      	b.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003024:	d028      	beq.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7fe fc0b 	bl	8001840 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d11d      	bne.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d016      	beq.n	8003078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0220 	orr.w	r2, r3, #32
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0304 	and.w	r3, r3, #4
 8003082:	2b04      	cmp	r3, #4
 8003084:	d1c3      	bne.n	800300e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a6:	d11b      	bne.n	80030e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030cc:	f043 0204 	orr.w	r2, r3, #4
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e000      	b.n	80030e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af02      	add	r7, sp, #8
 80030f4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e101      	b.n	8003304 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f005 fb8a 	bl	8008834 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2203      	movs	r2, #3
 8003124:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800312e:	d102      	bne.n	8003136 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f001 ff83 	bl	8005046 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7c1a      	ldrb	r2, [r3, #16]
 8003148:	f88d 2000 	strb.w	r2, [sp]
 800314c:	3304      	adds	r3, #4
 800314e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003150:	f001 fe62 	bl	8004e18 <USB_CoreInit>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e0ce      	b.n	8003304 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f001 ff7b 	bl	8005068 <USB_SetCurrentMode>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2202      	movs	r2, #2
 800317c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0bf      	b.n	8003304 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
 8003188:	e04a      	b.n	8003220 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800318a:	7bfa      	ldrb	r2, [r7, #15]
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	3315      	adds	r3, #21
 800319a:	2201      	movs	r2, #1
 800319c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800319e:	7bfa      	ldrb	r2, [r7, #15]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4413      	add	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	3314      	adds	r3, #20
 80031ae:	7bfa      	ldrb	r2, [r7, #15]
 80031b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80031b2:	7bfa      	ldrb	r2, [r7, #15]
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	b298      	uxth	r0, r3
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	332e      	adds	r3, #46	@ 0x2e
 80031c6:	4602      	mov	r2, r0
 80031c8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80031ca:	7bfa      	ldrb	r2, [r7, #15]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3318      	adds	r3, #24
 80031da:	2200      	movs	r2, #0
 80031dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80031de:	7bfa      	ldrb	r2, [r7, #15]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	331c      	adds	r3, #28
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80031f2:	7bfa      	ldrb	r2, [r7, #15]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3320      	adds	r3, #32
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003206:	7bfa      	ldrb	r2, [r7, #15]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	4413      	add	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3324      	adds	r3, #36	@ 0x24
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	3301      	adds	r3, #1
 800321e:	73fb      	strb	r3, [r7, #15]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	791b      	ldrb	r3, [r3, #4]
 8003224:	7bfa      	ldrb	r2, [r7, #15]
 8003226:	429a      	cmp	r2, r3
 8003228:	d3af      	bcc.n	800318a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	e044      	b.n	80032ba <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003230:	7bfa      	ldrb	r2, [r7, #15]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003242:	2200      	movs	r2, #0
 8003244:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003258:	7bfa      	ldrb	r2, [r7, #15]
 800325a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800325c:	7bfa      	ldrb	r2, [r7, #15]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003288:	7bfa      	ldrb	r2, [r7, #15]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	4413      	add	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	3301      	adds	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	791b      	ldrb	r3, [r3, #4]
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3b5      	bcc.n	8003230 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	7c1a      	ldrb	r2, [r3, #16]
 80032cc:	f88d 2000 	strb.w	r2, [sp]
 80032d0:	3304      	adds	r3, #4
 80032d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d4:	f001 ff14 	bl	8005100 <USB_DevInit>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2202      	movs	r2, #2
 80032e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00c      	b.n	8003304 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f002 ff58 	bl	80061b2 <USB_DevDisconnect>

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_PCD_Start+0x1c>
 8003324:	2302      	movs	r3, #2
 8003326:	e022      	b.n	800336e <HAL_PCD_Start+0x62>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003340:	2b01      	cmp	r3, #1
 8003342:	d105      	bne.n	8003350 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003348:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f001 fe65 	bl	8005024 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4618      	mov	r0, r3
 8003360:	f002 ff06 	bl	8006170 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003376:	b590      	push	{r4, r7, lr}
 8003378:	b08d      	sub	sp, #52	@ 0x34
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	6a3b      	ldr	r3, [r7, #32]
 8003386:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f002 ffc4 	bl	800631a <USB_GetMode>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	f040 848c 	bne.w	8003cb2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f002 ff28 	bl	80061f4 <USB_ReadInterrupts>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 8482 	beq.w	8003cb0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	0a1b      	lsrs	r3, r3, #8
 80033b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 ff15 	bl	80061f4 <USB_ReadInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d107      	bne.n	80033e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695a      	ldr	r2, [r3, #20]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f002 0202 	and.w	r2, r2, #2
 80033e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f002 ff03 	bl	80061f4 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d161      	bne.n	80034bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	699a      	ldr	r2, [r3, #24]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0210 	bic.w	r2, r2, #16
 8003406:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	3304      	adds	r3, #4
 8003426:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	0c5b      	lsrs	r3, r3, #17
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	2b02      	cmp	r3, #2
 8003432:	d124      	bne.n	800347e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d035      	beq.n	80034ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	091b      	lsrs	r3, r3, #4
 8003448:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800344a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800344e:	b29b      	uxth	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	6a38      	ldr	r0, [r7, #32]
 8003454:	f002 fd3a 	bl	8005ecc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003464:	441a      	add	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	695a      	ldr	r2, [r3, #20]
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003476:	441a      	add	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	615a      	str	r2, [r3, #20]
 800347c:	e016      	b.n	80034ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	0c5b      	lsrs	r3, r3, #17
 8003482:	f003 030f 	and.w	r3, r3, #15
 8003486:	2b06      	cmp	r3, #6
 8003488:	d110      	bne.n	80034ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003490:	2208      	movs	r2, #8
 8003492:	4619      	mov	r1, r3
 8003494:	6a38      	ldr	r0, [r7, #32]
 8003496:	f002 fd19 	bl	8005ecc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	695a      	ldr	r2, [r3, #20]
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034a6:	441a      	add	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0210 	orr.w	r2, r2, #16
 80034ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f002 fe97 	bl	80061f4 <USB_ReadInterrupts>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80034d0:	f040 80a7 	bne.w	8003622 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fe9c 	bl	800621a <USB_ReadDevAllOutEpInterrupt>
 80034e2:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80034e4:	e099      	b.n	800361a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80034e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 808e 	beq.w	800360e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034f8:	b2d2      	uxtb	r2, r2
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f002 fec0 	bl	8006282 <USB_ReadDevOutEPInterrupt>
 8003502:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00c      	beq.n	8003528 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800350e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800351a:	461a      	mov	r2, r3
 800351c:	2301      	movs	r3, #1
 800351e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003520:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 fea2 	bl	800426c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00c      	beq.n	800354c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	015a      	lsls	r2, r3, #5
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800353e:	461a      	mov	r2, r3
 8003540:	2308      	movs	r3, #8
 8003542:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003544:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 ff78 	bl	800443c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	2310      	movs	r3, #16
 8003566:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d030      	beq.n	80035d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357a:	2b80      	cmp	r3, #128	@ 0x80
 800357c:	d109      	bne.n	8003592 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	69fa      	ldr	r2, [r7, #28]
 8003588:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800358c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003590:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	4413      	add	r3, r2
 80035a4:	3304      	adds	r3, #4
 80035a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	78db      	ldrb	r3, [r3, #3]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d108      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	2200      	movs	r2, #0
 80035b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f005 fa35 	bl	8008a2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ce:	461a      	mov	r2, r3
 80035d0:	2302      	movs	r3, #2
 80035d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d008      	beq.n	80035f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	015a      	lsls	r2, r3, #5
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	4413      	add	r3, r2
 80035e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ea:	461a      	mov	r2, r3
 80035ec:	2320      	movs	r3, #32
 80035ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d009      	beq.n	800360e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fc:	015a      	lsls	r2, r3, #5
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	4413      	add	r3, r2
 8003602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003606:	461a      	mov	r2, r3
 8003608:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800360c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	3301      	adds	r3, #1
 8003612:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800361a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800361c:	2b00      	cmp	r3, #0
 800361e:	f47f af62 	bne.w	80034e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4618      	mov	r0, r3
 8003628:	f002 fde4 	bl	80061f4 <USB_ReadInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003632:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003636:	f040 80db 	bne.w	80037f0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f002 fe05 	bl	800624e <USB_ReadDevAllInEpInterrupt>
 8003644:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800364a:	e0cd      	b.n	80037e8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 80c2 	beq.w	80037dc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	4611      	mov	r1, r2
 8003662:	4618      	mov	r0, r3
 8003664:	f002 fe2b 	bl	80062be <USB_ReadDevInEPInterrupt>
 8003668:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d057      	beq.n	8003724 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	2201      	movs	r2, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	43db      	mvns	r3, r3
 800368e:	69f9      	ldr	r1, [r7, #28]
 8003690:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003694:	4013      	ands	r3, r2
 8003696:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	015a      	lsls	r2, r3, #5
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	4413      	add	r3, r2
 80036a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036a4:	461a      	mov	r2, r3
 80036a6:	2301      	movs	r3, #1
 80036a8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	799b      	ldrb	r3, [r3, #6]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d132      	bne.n	8003718 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036b2:	6879      	ldr	r1, [r7, #4]
 80036b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b6:	4613      	mov	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3320      	adds	r3, #32
 80036c2:	6819      	ldr	r1, [r3, #0]
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c8:	4613      	mov	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4413      	add	r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4403      	add	r3, r0
 80036d2:	331c      	adds	r3, #28
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4419      	add	r1, r3
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4403      	add	r3, r0
 80036e6:	3320      	adds	r3, #32
 80036e8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d113      	bne.n	8003718 <HAL_PCD_IRQHandler+0x3a2>
 80036f0:	6879      	ldr	r1, [r7, #4]
 80036f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f4:	4613      	mov	r3, r2
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3324      	adds	r3, #36	@ 0x24
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d108      	bne.n	8003718 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003710:	461a      	mov	r2, r3
 8003712:	2101      	movs	r1, #1
 8003714:	f002 fe32 	bl	800637c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	b2db      	uxtb	r3, r3
 800371c:	4619      	mov	r1, r3
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f005 f909 	bl	8008936 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800372e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	4413      	add	r3, r2
 8003736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800373a:	461a      	mov	r2, r3
 800373c:	2308      	movs	r3, #8
 800373e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d008      	beq.n	800375c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	015a      	lsls	r2, r3, #5
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003756:	461a      	mov	r2, r3
 8003758:	2310      	movs	r3, #16
 800375a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d008      	beq.n	8003778 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	4413      	add	r3, r2
 800376e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003772:	461a      	mov	r2, r3
 8003774:	2340      	movs	r3, #64	@ 0x40
 8003776:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d023      	beq.n	80037ca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003782:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003784:	6a38      	ldr	r0, [r7, #32]
 8003786:	f001 fe1f 	bl	80053c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800378a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800378c:	4613      	mov	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4413      	add	r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	3310      	adds	r3, #16
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	78db      	ldrb	r3, [r3, #3]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d108      	bne.n	80037b8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f005 f94c 	bl	8008a50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037c4:	461a      	mov	r2, r3
 80037c6:	2302      	movs	r3, #2
 80037c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d003      	beq.n	80037dc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80037d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fcbb 	bl	8004152 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	3301      	adds	r3, #1
 80037e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80037e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80037e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f47f af2e 	bne.w	800364c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f002 fcfd 	bl	80061f4 <USB_ReadInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003800:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003804:	d122      	bne.n	800384c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003814:	f023 0301 	bic.w	r3, r3, #1
 8003818:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003820:	2b01      	cmp	r3, #1
 8003822:	d108      	bne.n	8003836 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800382c:	2100      	movs	r1, #0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fea2 	bl	8004578 <HAL_PCDEx_LPM_Callback>
 8003834:	e002      	b.n	800383c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f005 f8ea 	bl	8008a10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800384a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fccf 	bl	80061f4 <USB_ReadInterrupts>
 8003856:	4603      	mov	r3, r0
 8003858:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800385c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003860:	d112      	bne.n	8003888 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b01      	cmp	r3, #1
 8003870:	d102      	bne.n	8003878 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f005 f8a6 	bl	80089c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695a      	ldr	r2, [r3, #20]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003886:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f002 fcb1 	bl	80061f4 <USB_ReadInterrupts>
 8003892:	4603      	mov	r3, r0
 8003894:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003898:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800389c:	f040 80b7 	bne.w	8003a0e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038ae:	f023 0301 	bic.w	r3, r3, #1
 80038b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2110      	movs	r1, #16
 80038ba:	4618      	mov	r0, r3
 80038bc:	f001 fd84 	bl	80053c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038c0:	2300      	movs	r3, #0
 80038c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038c4:	e046      	b.n	8003954 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80038c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038d2:	461a      	mov	r2, r3
 80038d4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80038d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038ea:	0151      	lsls	r1, r2, #5
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	440a      	add	r2, r1
 80038f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80038f4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80038f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003906:	461a      	mov	r2, r3
 8003908:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800390c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800390e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003910:	015a      	lsls	r2, r3, #5
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	4413      	add	r3, r2
 8003916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800391e:	0151      	lsls	r1, r2, #5
 8003920:	69fa      	ldr	r2, [r7, #28]
 8003922:	440a      	add	r2, r1
 8003924:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003928:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800392c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800392e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800393e:	0151      	lsls	r1, r2, #5
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	440a      	add	r2, r1
 8003944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003948:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800394c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800394e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003950:	3301      	adds	r3, #1
 8003952:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	791b      	ldrb	r3, [r3, #4]
 8003958:	461a      	mov	r2, r3
 800395a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395c:	4293      	cmp	r3, r2
 800395e:	d3b2      	bcc.n	80038c6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800396e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003972:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	7bdb      	ldrb	r3, [r3, #15]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d016      	beq.n	80039aa <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800398c:	f043 030b 	orr.w	r3, r3, #11
 8003990:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800399a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039a2:	f043 030b 	orr.w	r3, r3, #11
 80039a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80039a8:	e015      	b.n	80039d6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	69fa      	ldr	r2, [r7, #28]
 80039b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039b8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039bc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80039c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	69fa      	ldr	r2, [r7, #28]
 80039cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039d0:	f043 030b 	orr.w	r3, r3, #11
 80039d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80039e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80039e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6818      	ldr	r0, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80039f8:	461a      	mov	r2, r3
 80039fa:	f002 fcbf 	bl	800637c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	695a      	ldr	r2, [r3, #20]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f002 fbee 	bl	80061f4 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a22:	d123      	bne.n	8003a6c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f002 fc84 	bl	8006336 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fd41 	bl	80054ba <USB_GetDevSpeed>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681c      	ldr	r4, [r3, #0]
 8003a44:	f001 f9c8 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8003a48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003a4e:	461a      	mov	r2, r3
 8003a50:	4620      	mov	r0, r4
 8003a52:	f001 fa45 	bl	8004ee0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f004 ff95 	bl	8008986 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003a6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fbbf 	bl	80061f4 <USB_ReadInterrupts>
 8003a76:	4603      	mov	r3, r0
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d10a      	bne.n	8003a96 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f004 ff72 	bl	800896a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695a      	ldr	r2, [r3, #20]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f002 0208 	and.w	r2, r2, #8
 8003a94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 fbaa 	bl	80061f4 <USB_ReadInterrupts>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa6:	2b80      	cmp	r3, #128	@ 0x80
 8003aa8:	d123      	bne.n	8003af2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aba:	e014      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d105      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	4619      	mov	r1, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f000 fb08 	bl	80040f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	791b      	ldrb	r3, [r3, #4]
 8003aea:	461a      	mov	r2, r3
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d3e4      	bcc.n	8003abc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 fb7c 	bl	80061f4 <USB_ReadInterrupts>
 8003afc:	4603      	mov	r3, r0
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b06:	d13c      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b08:	2301      	movs	r3, #1
 8003b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0c:	e02b      	b.n	8003b66 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b22:	4613      	mov	r3, r2
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4413      	add	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3318      	adds	r3, #24
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d115      	bne.n	8003b60 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003b34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	da12      	bge.n	8003b60 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	3317      	adds	r3, #23
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fac8 	bl	80040f0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	3301      	adds	r3, #1
 8003b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	791b      	ldrb	r3, [r3, #4]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d3cd      	bcc.n	8003b0e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f002 fb34 	bl	80061f4 <USB_ReadInterrupts>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b96:	d156      	bne.n	8003c46 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003b98:	2301      	movs	r3, #1
 8003b9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b9c:	e045      	b.n	8003c2a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	015a      	lsls	r2, r3, #5
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d12e      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bc6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	da2b      	bge.n	8003c24 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003bd8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d121      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003be4:	4613      	mov	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c1c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c20:	6053      	str	r3, [r2, #4]
            break;
 8003c22:	e008      	b.n	8003c36 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c26:	3301      	adds	r3, #1
 8003c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	791b      	ldrb	r3, [r3, #4]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d3b3      	bcc.n	8003b9e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695a      	ldr	r2, [r3, #20]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003c44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f002 fad2 	bl	80061f4 <USB_ReadInterrupts>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5a:	d10a      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f004 ff09 	bl	8008a74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f002 fabc 	bl	80061f4 <USB_ReadInterrupts>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d115      	bne.n	8003cb2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d002      	beq.n	8003c9e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f004 fef9 	bl	8008a90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6859      	ldr	r1, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	430a      	orrs	r2, r1
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	e000      	b.n	8003cb2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003cb0:	bf00      	nop
    }
  }
}
 8003cb2:	3734      	adds	r7, #52	@ 0x34
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd90      	pop	{r4, r7, pc}

08003cb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_PCD_SetAddress+0x1a>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e012      	b.n	8003cf8 <HAL_PCD_SetAddress+0x40>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f002 fa1b 	bl	8006124 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	4608      	mov	r0, r1
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4603      	mov	r3, r0
 8003d10:	70fb      	strb	r3, [r7, #3]
 8003d12:	460b      	mov	r3, r1
 8003d14:	803b      	strh	r3, [r7, #0]
 8003d16:	4613      	mov	r3, r2
 8003d18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	da0f      	bge.n	8003d46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d26:	78fb      	ldrb	r3, [r7, #3]
 8003d28:	f003 020f 	and.w	r2, r3, #15
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3310      	adds	r3, #16
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	3304      	adds	r3, #4
 8003d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	705a      	strb	r2, [r3, #1]
 8003d44:	e00f      	b.n	8003d66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 020f 	and.w	r2, r3, #15
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d66:	78fb      	ldrb	r3, [r7, #3]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d72:	883a      	ldrh	r2, [r7, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	78ba      	ldrb	r2, [r7, #2]
 8003d7c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d004      	beq.n	8003d90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003d90:	78bb      	ldrb	r3, [r7, #2]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d102      	bne.n	8003d9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d101      	bne.n	8003daa <HAL_PCD_EP_Open+0xaa>
 8003da6:	2302      	movs	r3, #2
 8003da8:	e00e      	b.n	8003dc8 <HAL_PCD_EP_Open+0xc8>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68f9      	ldr	r1, [r7, #12]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 fba3 	bl	8005504 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da0f      	bge.n	8003e04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	f003 020f 	and.w	r2, r3, #15
 8003dea:	4613      	mov	r3, r2
 8003dec:	00db      	lsls	r3, r3, #3
 8003dee:	4413      	add	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	3310      	adds	r3, #16
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	4413      	add	r3, r2
 8003df8:	3304      	adds	r3, #4
 8003dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	705a      	strb	r2, [r3, #1]
 8003e02:	e00f      	b.n	8003e24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	00db      	lsls	r3, r3, #3
 8003e0e:	4413      	add	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4413      	add	r3, r2
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_EP_Close+0x6e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e00e      	b.n	8003e5c <HAL_PCD_EP_Close+0x8c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 fbe1 	bl	8005614 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	460b      	mov	r3, r1
 8003e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	7afb      	ldrb	r3, [r7, #11]
 8003e76:	f003 020f 	and.w	r2, r3, #15
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	4413      	add	r3, r2
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea6:	7afb      	ldrb	r3, [r7, #11]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	799b      	ldrb	r3, [r3, #6]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d102      	bne.n	8003ec0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6818      	ldr	r0, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	799b      	ldrb	r3, [r3, #6]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	f001 fc7e 	bl	80057cc <USB_EPStartXfer>

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b083      	sub	sp, #12
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ee6:	78fb      	ldrb	r3, [r7, #3]
 8003ee8:	f003 020f 	and.w	r2, r3, #15
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003efc:	681b      	ldr	r3, [r3, #0]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b086      	sub	sp, #24
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	460b      	mov	r3, r1
 8003f18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f1a:	7afb      	ldrb	r3, [r7, #11]
 8003f1c:	f003 020f 	and.w	r2, r3, #15
 8003f20:	4613      	mov	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	4413      	add	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	3310      	adds	r3, #16
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3304      	adds	r3, #4
 8003f30:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2201      	movs	r2, #1
 8003f48:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f4a:	7afb      	ldrb	r3, [r7, #11]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	799b      	ldrb	r3, [r3, #6]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6818      	ldr	r0, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	799b      	ldrb	r3, [r3, #6]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6979      	ldr	r1, [r7, #20]
 8003f70:	f001 fc2c 	bl	80057cc <USB_EPStartXfer>

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f8a:	78fb      	ldrb	r3, [r7, #3]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	7912      	ldrb	r2, [r2, #4]
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d901      	bls.n	8003f9c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e04f      	b.n	800403c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	da0f      	bge.n	8003fc4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	f003 020f 	and.w	r2, r3, #15
 8003faa:	4613      	mov	r3, r2
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	4413      	add	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	3310      	adds	r3, #16
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	705a      	strb	r2, [r3, #1]
 8003fc2:	e00d      	b.n	8003fe0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_PCD_EP_SetStall+0x82>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e01d      	b.n	800403c <HAL_PCD_EP_SetStall+0xbe>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68f9      	ldr	r1, [r7, #12]
 800400e:	4618      	mov	r0, r3
 8004010:	f001 ffb4 	bl	8005f7c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	7999      	ldrb	r1, [r3, #6]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800402c:	461a      	mov	r2, r3
 800402e:	f002 f9a5 	bl	800637c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	7912      	ldrb	r2, [r2, #4]
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e042      	b.n	80040e8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004062:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004066:	2b00      	cmp	r3, #0
 8004068:	da0f      	bge.n	800408a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406a:	78fb      	ldrb	r3, [r7, #3]
 800406c:	f003 020f 	and.w	r2, r3, #15
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	3310      	adds	r3, #16
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	3304      	adds	r3, #4
 8004080:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2201      	movs	r2, #1
 8004086:	705a      	strb	r2, [r3, #1]
 8004088:	e00f      	b.n	80040aa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	f003 020f 	and.w	r2, r3, #15
 8004090:	4613      	mov	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4413      	add	r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b0:	78fb      	ldrb	r3, [r7, #3]
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_PCD_EP_ClrStall+0x86>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e00e      	b.n	80040e8 <HAL_PCD_EP_ClrStall+0xa4>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 ffbd 	bl	8006058 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80040fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004100:	2b00      	cmp	r3, #0
 8004102:	da0c      	bge.n	800411e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 020f 	and.w	r2, r3, #15
 800410a:	4613      	mov	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	3310      	adds	r3, #16
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	4413      	add	r3, r2
 8004118:	3304      	adds	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e00c      	b.n	8004138 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	4413      	add	r3, r2
 8004134:	3304      	adds	r3, #4
 8004136:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68f9      	ldr	r1, [r7, #12]
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fddc 	bl	8005cfc <USB_EPStopXfer>
 8004144:	4603      	mov	r3, r0
 8004146:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004148:	7afb      	ldrb	r3, [r7, #11]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b08a      	sub	sp, #40	@ 0x28
 8004156:	af02      	add	r7, sp, #8
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	3310      	adds	r3, #16
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	429a      	cmp	r2, r3
 8004184:	d901      	bls.n	800418a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e06b      	b.n	8004262 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	69fa      	ldr	r2, [r7, #28]
 800419c:	429a      	cmp	r2, r3
 800419e:	d902      	bls.n	80041a6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3303      	adds	r3, #3
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80041ae:	e02a      	b.n	8004206 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d902      	bls.n	80041cc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	3303      	adds	r3, #3
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68d9      	ldr	r1, [r3, #12]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	4603      	mov	r3, r0
 80041e8:	6978      	ldr	r0, [r7, #20]
 80041ea:	f001 fe31 	bl	8005e50 <USB_WritePacket>

    ep->xfer_buff  += len;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	441a      	add	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4413      	add	r3, r2
 800420e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d809      	bhi.n	8004230 <PCD_WriteEmptyTxFifo+0xde>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004224:	429a      	cmp	r2, r3
 8004226:	d203      	bcs.n	8004230 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	691b      	ldr	r3, [r3, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1bf      	bne.n	80041b0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d811      	bhi.n	8004260 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	2201      	movs	r2, #1
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	43db      	mvns	r3, r3
 8004256:	6939      	ldr	r1, [r7, #16]
 8004258:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800425c:	4013      	ands	r3, r2
 800425e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3720      	adds	r7, #32
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	333c      	adds	r3, #60	@ 0x3c
 8004284:	3304      	adds	r3, #4
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	799b      	ldrb	r3, [r3, #6]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d17b      	bne.n	800439a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f003 0308 	and.w	r3, r3, #8
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4a61      	ldr	r2, [pc, #388]	@ (8004434 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	f240 80b9 	bls.w	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 80b3 	beq.w	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	015a      	lsls	r2, r3, #5
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ce:	461a      	mov	r2, r3
 80042d0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042d4:	6093      	str	r3, [r2, #8]
 80042d6:	e0a7      	b.n	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f003 0320 	and.w	r3, r3, #32
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d009      	beq.n	80042f6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042ee:	461a      	mov	r2, r3
 80042f0:	2320      	movs	r3, #32
 80042f2:	6093      	str	r3, [r2, #8]
 80042f4:	e098      	b.n	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f040 8093 	bne.w	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	4a4b      	ldr	r2, [pc, #300]	@ (8004434 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d90f      	bls.n	800432a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004320:	461a      	mov	r2, r3
 8004322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004326:	6093      	str	r3, [r2, #8]
 8004328:	e07e      	b.n	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	4413      	add	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	4413      	add	r3, r2
 800433c:	3304      	adds	r3, #4
 800433e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a1a      	ldr	r2, [r3, #32]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	0159      	lsls	r1, r3, #5
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	440b      	add	r3, r1
 800434c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004356:	1ad2      	subs	r2, r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d114      	bne.n	800438c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d109      	bne.n	800437e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004374:	461a      	mov	r2, r3
 8004376:	2101      	movs	r1, #1
 8004378:	f002 f800 	bl	800637c <USB_EP0_OutStart>
 800437c:	e006      	b.n	800438c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	68da      	ldr	r2, [r3, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	441a      	add	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	b2db      	uxtb	r3, r3
 8004390:	4619      	mov	r1, r3
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f004 fab4 	bl	8008900 <HAL_PCD_DataOutStageCallback>
 8004398:	e046      	b.n	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	4a26      	ldr	r2, [pc, #152]	@ (8004438 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d124      	bne.n	80043ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	015a      	lsls	r2, r3, #5
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	4413      	add	r3, r2
 80043b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b8:	461a      	mov	r2, r3
 80043ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043be:	6093      	str	r3, [r2, #8]
 80043c0:	e032      	b.n	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	2320      	movs	r3, #32
 80043dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	4619      	mov	r1, r3
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f004 fa8b 	bl	8008900 <HAL_PCD_DataOutStageCallback>
 80043ea:	e01d      	b.n	8004428 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d114      	bne.n	800441c <PCD_EP_OutXfrComplete_int+0x1b0>
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	683a      	ldr	r2, [r7, #0]
 80043f6:	4613      	mov	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4413      	add	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	440b      	add	r3, r1
 8004400:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d108      	bne.n	800441c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004414:	461a      	mov	r2, r3
 8004416:	2100      	movs	r1, #0
 8004418:	f001 ffb0 	bl	800637c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	4619      	mov	r1, r3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f004 fa6c 	bl	8008900 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	4f54300a 	.word	0x4f54300a
 8004438:	4f54310a 	.word	0x4f54310a

0800443c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	333c      	adds	r3, #60	@ 0x3c
 8004454:	3304      	adds	r3, #4
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	4a15      	ldr	r2, [pc, #84]	@ (80044c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d90e      	bls.n	8004490 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004478:	2b00      	cmp	r3, #0
 800447a:	d009      	beq.n	8004490 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	015a      	lsls	r2, r3, #5
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4413      	add	r3, r2
 8004484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004488:	461a      	mov	r2, r3
 800448a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f004 fa23 	bl	80088dc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d90c      	bls.n	80044b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	799b      	ldrb	r3, [r3, #6]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d108      	bne.n	80044b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044b0:	461a      	mov	r2, r3
 80044b2:	2101      	movs	r1, #1
 80044b4:	f001 ff62 	bl	800637c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3718      	adds	r7, #24
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	4f54300a 	.word	0x4f54300a

080044c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	460b      	mov	r3, r1
 80044d2:	70fb      	strb	r3, [r7, #3]
 80044d4:	4613      	mov	r3, r2
 80044d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044e0:	78fb      	ldrb	r3, [r7, #3]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044e6:	883b      	ldrh	r3, [r7, #0]
 80044e8:	0419      	lsls	r1, r3, #16
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80044f4:	e028      	b.n	8004548 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fc:	0c1b      	lsrs	r3, r3, #16
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4413      	add	r3, r2
 8004502:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]
 8004508:	e00d      	b.n	8004526 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	7bfb      	ldrb	r3, [r7, #15]
 8004510:	3340      	adds	r3, #64	@ 0x40
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	0c1b      	lsrs	r3, r3, #16
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4413      	add	r3, r2
 800451e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004520:	7bfb      	ldrb	r3, [r7, #15]
 8004522:	3301      	adds	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
 8004526:	7bfa      	ldrb	r2, [r7, #15]
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	3b01      	subs	r3, #1
 800452c:	429a      	cmp	r2, r3
 800452e:	d3ec      	bcc.n	800450a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004530:	883b      	ldrh	r3, [r7, #0]
 8004532:	0418      	lsls	r0, r3, #16
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6819      	ldr	r1, [r3, #0]
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	3b01      	subs	r3, #1
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	4302      	orrs	r2, r0
 8004540:	3340      	adds	r3, #64	@ 0x40
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	440b      	add	r3, r1
 8004546:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3714      	adds	r7, #20
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	460b      	mov	r3, r1
 8004560:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	887a      	ldrh	r2, [r7, #2]
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e267      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d075      	beq.n	800469a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045ae:	4b88      	ldr	r3, [pc, #544]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d00c      	beq.n	80045d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045ba:	4b85      	ldr	r3, [pc, #532]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	d112      	bne.n	80045ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80045c6:	4b82      	ldr	r3, [pc, #520]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80045d2:	d10b      	bne.n	80045ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d4:	4b7e      	ldr	r3, [pc, #504]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d05b      	beq.n	8004698 <HAL_RCC_OscConfig+0x108>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d157      	bne.n	8004698 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e242      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045f4:	d106      	bne.n	8004604 <HAL_RCC_OscConfig+0x74>
 80045f6:	4b76      	ldr	r3, [pc, #472]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a75      	ldr	r2, [pc, #468]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80045fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004600:	6013      	str	r3, [r2, #0]
 8004602:	e01d      	b.n	8004640 <HAL_RCC_OscConfig+0xb0>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0x98>
 800460e:	4b70      	ldr	r3, [pc, #448]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a6f      	ldr	r2, [pc, #444]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004614:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	4b6d      	ldr	r3, [pc, #436]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a6c      	ldr	r2, [pc, #432]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004624:	6013      	str	r3, [r2, #0]
 8004626:	e00b      	b.n	8004640 <HAL_RCC_OscConfig+0xb0>
 8004628:	4b69      	ldr	r3, [pc, #420]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a68      	ldr	r2, [pc, #416]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 800462e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	4b66      	ldr	r3, [pc, #408]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a65      	ldr	r2, [pc, #404]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 800463a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800463e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d013      	beq.n	8004670 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004648:	f7fd f8fa 	bl	8001840 <HAL_GetTick>
 800464c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800464e:	e008      	b.n	8004662 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004650:	f7fd f8f6 	bl	8001840 <HAL_GetTick>
 8004654:	4602      	mov	r2, r0
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	2b64      	cmp	r3, #100	@ 0x64
 800465c:	d901      	bls.n	8004662 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e207      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004662:	4b5b      	ldr	r3, [pc, #364]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0f0      	beq.n	8004650 <HAL_RCC_OscConfig+0xc0>
 800466e:	e014      	b.n	800469a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004670:	f7fd f8e6 	bl	8001840 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004678:	f7fd f8e2 	bl	8001840 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b64      	cmp	r3, #100	@ 0x64
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1f3      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800468a:	4b51      	ldr	r3, [pc, #324]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <HAL_RCC_OscConfig+0xe8>
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004698:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d063      	beq.n	800476e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046a6:	4b4a      	ldr	r3, [pc, #296]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00b      	beq.n	80046ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046b2:	4b47      	ldr	r3, [pc, #284]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d11c      	bne.n	80046f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046be:	4b44      	ldr	r3, [pc, #272]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d116      	bne.n	80046f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ca:	4b41      	ldr	r3, [pc, #260]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_RCC_OscConfig+0x152>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d001      	beq.n	80046e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e1c7      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e2:	4b3b      	ldr	r3, [pc, #236]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	4937      	ldr	r1, [pc, #220]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046f6:	e03a      	b.n	800476e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d020      	beq.n	8004742 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004700:	4b34      	ldr	r3, [pc, #208]	@ (80047d4 <HAL_RCC_OscConfig+0x244>)
 8004702:	2201      	movs	r2, #1
 8004704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004706:	f7fd f89b 	bl	8001840 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470e:	f7fd f897 	bl	8001840 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e1a8      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004720:	4b2b      	ldr	r3, [pc, #172]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f0      	beq.n	800470e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472c:	4b28      	ldr	r3, [pc, #160]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	4925      	ldr	r1, [pc, #148]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 800473c:	4313      	orrs	r3, r2
 800473e:	600b      	str	r3, [r1, #0]
 8004740:	e015      	b.n	800476e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004742:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <HAL_RCC_OscConfig+0x244>)
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004748:	f7fd f87a 	bl	8001840 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004750:	f7fd f876 	bl	8001840 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e187      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004762:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1f0      	bne.n	8004750 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d036      	beq.n	80047e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d016      	beq.n	80047b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004782:	4b15      	ldr	r3, [pc, #84]	@ (80047d8 <HAL_RCC_OscConfig+0x248>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fd f85a 	bl	8001840 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004790:	f7fd f856 	bl	8001840 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e167      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047a2:	4b0b      	ldr	r3, [pc, #44]	@ (80047d0 <HAL_RCC_OscConfig+0x240>)
 80047a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0f0      	beq.n	8004790 <HAL_RCC_OscConfig+0x200>
 80047ae:	e01b      	b.n	80047e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047b0:	4b09      	ldr	r3, [pc, #36]	@ (80047d8 <HAL_RCC_OscConfig+0x248>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b6:	f7fd f843 	bl	8001840 <HAL_GetTick>
 80047ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047bc:	e00e      	b.n	80047dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047be:	f7fd f83f 	bl	8001840 <HAL_GetTick>
 80047c2:	4602      	mov	r2, r0
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d907      	bls.n	80047dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e150      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
 80047d0:	40023800 	.word	0x40023800
 80047d4:	42470000 	.word	0x42470000
 80047d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047dc:	4b88      	ldr	r3, [pc, #544]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80047de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1ea      	bne.n	80047be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8097 	beq.w	8004924 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047fa:	4b81      	ldr	r3, [pc, #516]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10f      	bne.n	8004826 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
 800480a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004814:	6413      	str	r3, [r2, #64]	@ 0x40
 8004816:	4b7a      	ldr	r3, [pc, #488]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800481e:	60bb      	str	r3, [r7, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004822:	2301      	movs	r3, #1
 8004824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004826:	4b77      	ldr	r3, [pc, #476]	@ (8004a04 <HAL_RCC_OscConfig+0x474>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800482e:	2b00      	cmp	r3, #0
 8004830:	d118      	bne.n	8004864 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004832:	4b74      	ldr	r3, [pc, #464]	@ (8004a04 <HAL_RCC_OscConfig+0x474>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a73      	ldr	r2, [pc, #460]	@ (8004a04 <HAL_RCC_OscConfig+0x474>)
 8004838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800483c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800483e:	f7fc ffff 	bl	8001840 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004846:	f7fc fffb 	bl	8001840 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b02      	cmp	r3, #2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e10c      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	4b6a      	ldr	r3, [pc, #424]	@ (8004a04 <HAL_RCC_OscConfig+0x474>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d106      	bne.n	800487a <HAL_RCC_OscConfig+0x2ea>
 800486c:	4b64      	ldr	r3, [pc, #400]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004870:	4a63      	ldr	r2, [pc, #396]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	6713      	str	r3, [r2, #112]	@ 0x70
 8004878:	e01c      	b.n	80048b4 <HAL_RCC_OscConfig+0x324>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b05      	cmp	r3, #5
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x30c>
 8004882:	4b5f      	ldr	r3, [pc, #380]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004886:	4a5e      	ldr	r2, [pc, #376]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004888:	f043 0304 	orr.w	r3, r3, #4
 800488c:	6713      	str	r3, [r2, #112]	@ 0x70
 800488e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	4a5b      	ldr	r2, [pc, #364]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6713      	str	r3, [r2, #112]	@ 0x70
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0x324>
 800489c:	4b58      	ldr	r3, [pc, #352]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a0:	4a57      	ldr	r2, [pc, #348]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a8:	4b55      	ldr	r3, [pc, #340]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ac:	4a54      	ldr	r2, [pc, #336]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048ae:	f023 0304 	bic.w	r3, r3, #4
 80048b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d015      	beq.n	80048e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048bc:	f7fc ffc0 	bl	8001840 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048c2:	e00a      	b.n	80048da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048c4:	f7fc ffbc 	bl	8001840 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0cb      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048da:	4b49      	ldr	r3, [pc, #292]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80048dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d0ee      	beq.n	80048c4 <HAL_RCC_OscConfig+0x334>
 80048e6:	e014      	b.n	8004912 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048e8:	f7fc ffaa 	bl	8001840 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048f0:	f7fc ffa6 	bl	8001840 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e0b5      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004906:	4b3e      	ldr	r3, [pc, #248]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1ee      	bne.n	80048f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004912:	7dfb      	ldrb	r3, [r7, #23]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d105      	bne.n	8004924 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004918:	4b39      	ldr	r3, [pc, #228]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	4a38      	ldr	r2, [pc, #224]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 800491e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f000 80a1 	beq.w	8004a70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800492e:	4b34      	ldr	r3, [pc, #208]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b08      	cmp	r3, #8
 8004938:	d05c      	beq.n	80049f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	2b02      	cmp	r3, #2
 8004940:	d141      	bne.n	80049c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b31      	ldr	r3, [pc, #196]	@ (8004a08 <HAL_RCC_OscConfig+0x478>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fc ff7a 	bl	8001840 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004950:	f7fc ff76 	bl	8001840 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e087      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004962:	4b27      	ldr	r3, [pc, #156]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69da      	ldr	r2, [r3, #28]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	431a      	orrs	r2, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	019b      	lsls	r3, r3, #6
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	3b01      	subs	r3, #1
 8004988:	041b      	lsls	r3, r3, #16
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	061b      	lsls	r3, r3, #24
 8004992:	491b      	ldr	r1, [pc, #108]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004998:	4b1b      	ldr	r3, [pc, #108]	@ (8004a08 <HAL_RCC_OscConfig+0x478>)
 800499a:	2201      	movs	r2, #1
 800499c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499e:	f7fc ff4f 	bl	8001840 <HAL_GetTick>
 80049a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049a4:	e008      	b.n	80049b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049a6:	f7fc ff4b 	bl	8001840 <HAL_GetTick>
 80049aa:	4602      	mov	r2, r0
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e05c      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049b8:	4b11      	ldr	r3, [pc, #68]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d0f0      	beq.n	80049a6 <HAL_RCC_OscConfig+0x416>
 80049c4:	e054      	b.n	8004a70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <HAL_RCC_OscConfig+0x478>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049cc:	f7fc ff38 	bl	8001840 <HAL_GetTick>
 80049d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049d4:	f7fc ff34 	bl	8001840 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e045      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049e6:	4b06      	ldr	r3, [pc, #24]	@ (8004a00 <HAL_RCC_OscConfig+0x470>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0x444>
 80049f2:	e03d      	b.n	8004a70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e038      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40007000 	.word	0x40007000
 8004a08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004a7c <HAL_RCC_OscConfig+0x4ec>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d028      	beq.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d121      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d11a      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d111      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	3b01      	subs	r3, #1
 8004a56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d107      	bne.n	8004a6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d001      	beq.n	8004a70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3718      	adds	r7, #24
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800

08004a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0cc      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a94:	4b68      	ldr	r3, [pc, #416]	@ (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d90c      	bls.n	8004abc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b65      	ldr	r3, [pc, #404]	@ (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aaa:	4b63      	ldr	r3, [pc, #396]	@ (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d001      	beq.n	8004abc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0b8      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0302 	and.w	r3, r3, #2
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d020      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ad4:	4b59      	ldr	r3, [pc, #356]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	4a58      	ldr	r2, [pc, #352]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ade:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0308 	and.w	r3, r3, #8
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d005      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aec:	4b53      	ldr	r3, [pc, #332]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	4a52      	ldr	r2, [pc, #328]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004af6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af8:	4b50      	ldr	r3, [pc, #320]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	494d      	ldr	r1, [pc, #308]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d044      	beq.n	8004ba0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1e:	4b47      	ldr	r3, [pc, #284]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d119      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e07f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d003      	beq.n	8004b3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d107      	bne.n	8004b4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d109      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e06f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e067      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b5e:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f023 0203 	bic.w	r2, r3, #3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	4934      	ldr	r1, [pc, #208]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b70:	f7fc fe66 	bl	8001840 <HAL_GetTick>
 8004b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fc fe62 	bl	8001840 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e04f      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 020c 	and.w	r2, r3, #12
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d1eb      	bne.n	8004b78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba0:	4b25      	ldr	r3, [pc, #148]	@ (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d20c      	bcs.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bae:	4b22      	ldr	r3, [pc, #136]	@ (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb6:	4b20      	ldr	r3, [pc, #128]	@ (8004c38 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e032      	b.n	8004c2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d008      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bd4:	4b19      	ldr	r3, [pc, #100]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	4916      	ldr	r1, [pc, #88]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bf2:	4b12      	ldr	r3, [pc, #72]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	490e      	ldr	r1, [pc, #56]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c06:	f000 f821 	bl	8004c4c <HAL_RCC_GetSysClockFreq>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004c3c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	490a      	ldr	r1, [pc, #40]	@ (8004c40 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	5ccb      	ldrb	r3, [r1, r3]
 8004c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1e:	4a09      	ldr	r2, [pc, #36]	@ (8004c44 <HAL_RCC_ClockConfig+0x1c4>)
 8004c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c22:	4b09      	ldr	r3, [pc, #36]	@ (8004c48 <HAL_RCC_ClockConfig+0x1c8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fc fdc6 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40023c00 	.word	0x40023c00
 8004c3c:	40023800 	.word	0x40023800
 8004c40:	0800e800 	.word	0x0800e800
 8004c44:	20000004 	.word	0x20000004
 8004c48:	20000008 	.word	0x20000008

08004c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c50:	b090      	sub	sp, #64	@ 0x40
 8004c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c58:	2300      	movs	r3, #0
 8004c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c64:	4b59      	ldr	r3, [pc, #356]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d00d      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x40>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	f200 80a1 	bhi.w	8004db8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d002      	beq.n	8004c80 <HAL_RCC_GetSysClockFreq+0x34>
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	d003      	beq.n	8004c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c7e:	e09b      	b.n	8004db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c80:	4b53      	ldr	r3, [pc, #332]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c82:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004c84:	e09b      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c86:	4b53      	ldr	r3, [pc, #332]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c8a:	e098      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c96:	4b4d      	ldr	r3, [pc, #308]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d028      	beq.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	2200      	movs	r2, #0
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	627a      	str	r2, [r7, #36]	@ 0x24
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004cb4:	2100      	movs	r1, #0
 8004cb6:	4b47      	ldr	r3, [pc, #284]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cb8:	fb03 f201 	mul.w	r2, r3, r1
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	fb00 f303 	mul.w	r3, r0, r3
 8004cc2:	4413      	add	r3, r2
 8004cc4:	4a43      	ldr	r2, [pc, #268]	@ (8004dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8004cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ccc:	460a      	mov	r2, r1
 8004cce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cd2:	4413      	add	r3, r2
 8004cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd8:	2200      	movs	r2, #0
 8004cda:	61bb      	str	r3, [r7, #24]
 8004cdc:	61fa      	str	r2, [r7, #28]
 8004cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ce6:	f7fb ff67 	bl	8000bb8 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4613      	mov	r3, r2
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf2:	e053      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf4:	4b35      	ldr	r3, [pc, #212]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	099b      	lsrs	r3, r3, #6
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	617a      	str	r2, [r7, #20]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004d06:	f04f 0b00 	mov.w	fp, #0
 8004d0a:	4652      	mov	r2, sl
 8004d0c:	465b      	mov	r3, fp
 8004d0e:	f04f 0000 	mov.w	r0, #0
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	0159      	lsls	r1, r3, #5
 8004d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d1c:	0150      	lsls	r0, r2, #5
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	ebb2 080a 	subs.w	r8, r2, sl
 8004d26:	eb63 090b 	sbc.w	r9, r3, fp
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f04f 0300 	mov.w	r3, #0
 8004d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d3e:	ebb2 0408 	subs.w	r4, r2, r8
 8004d42:	eb63 0509 	sbc.w	r5, r3, r9
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	00eb      	lsls	r3, r5, #3
 8004d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d54:	00e2      	lsls	r2, r4, #3
 8004d56:	4614      	mov	r4, r2
 8004d58:	461d      	mov	r5, r3
 8004d5a:	eb14 030a 	adds.w	r3, r4, sl
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	eb45 030b 	adc.w	r3, r5, fp
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	f04f 0300 	mov.w	r3, #0
 8004d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d72:	4629      	mov	r1, r5
 8004d74:	028b      	lsls	r3, r1, #10
 8004d76:	4621      	mov	r1, r4
 8004d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	028a      	lsls	r2, r1, #10
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	2200      	movs	r2, #0
 8004d88:	60bb      	str	r3, [r7, #8]
 8004d8a:	60fa      	str	r2, [r7, #12]
 8004d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d90:	f7fb ff12 	bl	8000bb8 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	0c1b      	lsrs	r3, r3, #16
 8004da2:	f003 0303 	and.w	r3, r3, #3
 8004da6:	3301      	adds	r3, #1
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004db6:	e002      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004db8:	4b05      	ldr	r3, [pc, #20]	@ (8004dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3740      	adds	r7, #64	@ 0x40
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	00f42400 	.word	0x00f42400
 8004dd4:	017d7840 	.word	0x017d7840

08004dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ddc:	4b03      	ldr	r3, [pc, #12]	@ (8004dec <HAL_RCC_GetHCLKFreq+0x14>)
 8004dde:	681b      	ldr	r3, [r3, #0]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	20000004 	.word	0x20000004

08004df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004df4:	f7ff fff0 	bl	8004dd8 <HAL_RCC_GetHCLKFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0a9b      	lsrs	r3, r3, #10
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4903      	ldr	r1, [pc, #12]	@ (8004e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	0800e810 	.word	0x0800e810

08004e18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e18:	b084      	sub	sp, #16
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	f107 001c 	add.w	r0, r7, #28
 8004e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d123      	bne.n	8004e7a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d105      	bne.n	8004e6e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f001 fae2 	bl	8006438 <USB_CoreReset>
 8004e74:	4603      	mov	r3, r0
 8004e76:	73fb      	strb	r3, [r7, #15]
 8004e78:	e01b      	b.n	8004eb2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f001 fad6 	bl	8006438 <USB_CoreReset>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e90:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	639a      	str	r2, [r3, #56]	@ 0x38
 8004ea4:	e005      	b.n	8004eb2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004eb2:	7fbb      	ldrb	r3, [r7, #30]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d10b      	bne.n	8004ed0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f043 0206 	orr.w	r2, r3, #6
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004edc:	b004      	add	sp, #16
 8004ede:	4770      	bx	lr

08004ee0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004eee:	79fb      	ldrb	r3, [r7, #7]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d165      	bne.n	8004fc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4a41      	ldr	r2, [pc, #260]	@ (8004ffc <USB_SetTurnaroundTime+0x11c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d906      	bls.n	8004f0a <USB_SetTurnaroundTime+0x2a>
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4a40      	ldr	r2, [pc, #256]	@ (8005000 <USB_SetTurnaroundTime+0x120>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d202      	bcs.n	8004f0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f04:	230f      	movs	r3, #15
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e062      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4a3c      	ldr	r2, [pc, #240]	@ (8005000 <USB_SetTurnaroundTime+0x120>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d306      	bcc.n	8004f20 <USB_SetTurnaroundTime+0x40>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4a3b      	ldr	r2, [pc, #236]	@ (8005004 <USB_SetTurnaroundTime+0x124>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d202      	bcs.n	8004f20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f1a:	230e      	movs	r3, #14
 8004f1c:	617b      	str	r3, [r7, #20]
 8004f1e:	e057      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a38      	ldr	r2, [pc, #224]	@ (8005004 <USB_SetTurnaroundTime+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d306      	bcc.n	8004f36 <USB_SetTurnaroundTime+0x56>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a37      	ldr	r2, [pc, #220]	@ (8005008 <USB_SetTurnaroundTime+0x128>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d202      	bcs.n	8004f36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f30:	230d      	movs	r3, #13
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e04c      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4a33      	ldr	r2, [pc, #204]	@ (8005008 <USB_SetTurnaroundTime+0x128>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d306      	bcc.n	8004f4c <USB_SetTurnaroundTime+0x6c>
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	4a32      	ldr	r2, [pc, #200]	@ (800500c <USB_SetTurnaroundTime+0x12c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d802      	bhi.n	8004f4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f46:	230c      	movs	r3, #12
 8004f48:	617b      	str	r3, [r7, #20]
 8004f4a:	e041      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800500c <USB_SetTurnaroundTime+0x12c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d906      	bls.n	8004f62 <USB_SetTurnaroundTime+0x82>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a2e      	ldr	r2, [pc, #184]	@ (8005010 <USB_SetTurnaroundTime+0x130>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d802      	bhi.n	8004f62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f5c:	230b      	movs	r3, #11
 8004f5e:	617b      	str	r3, [r7, #20]
 8004f60:	e036      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a2a      	ldr	r2, [pc, #168]	@ (8005010 <USB_SetTurnaroundTime+0x130>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d906      	bls.n	8004f78 <USB_SetTurnaroundTime+0x98>
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a29      	ldr	r2, [pc, #164]	@ (8005014 <USB_SetTurnaroundTime+0x134>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d802      	bhi.n	8004f78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f72:	230a      	movs	r3, #10
 8004f74:	617b      	str	r3, [r7, #20]
 8004f76:	e02b      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4a26      	ldr	r2, [pc, #152]	@ (8005014 <USB_SetTurnaroundTime+0x134>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d906      	bls.n	8004f8e <USB_SetTurnaroundTime+0xae>
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	4a25      	ldr	r2, [pc, #148]	@ (8005018 <USB_SetTurnaroundTime+0x138>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d202      	bcs.n	8004f8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f88:	2309      	movs	r3, #9
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e020      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	4a21      	ldr	r2, [pc, #132]	@ (8005018 <USB_SetTurnaroundTime+0x138>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d306      	bcc.n	8004fa4 <USB_SetTurnaroundTime+0xc4>
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a20      	ldr	r2, [pc, #128]	@ (800501c <USB_SetTurnaroundTime+0x13c>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d802      	bhi.n	8004fa4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	e015      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800501c <USB_SetTurnaroundTime+0x13c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d906      	bls.n	8004fba <USB_SetTurnaroundTime+0xda>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a1c      	ldr	r2, [pc, #112]	@ (8005020 <USB_SetTurnaroundTime+0x140>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d202      	bcs.n	8004fba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fb4:	2307      	movs	r3, #7
 8004fb6:	617b      	str	r3, [r7, #20]
 8004fb8:	e00a      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004fba:	2306      	movs	r3, #6
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	e007      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004fc6:	2309      	movs	r3, #9
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e001      	b.n	8004fd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004fcc:	2309      	movs	r3, #9
 8004fce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	029b      	lsls	r3, r3, #10
 8004fe4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	371c      	adds	r7, #28
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr
 8004ffc:	00d8acbf 	.word	0x00d8acbf
 8005000:	00e4e1c0 	.word	0x00e4e1c0
 8005004:	00f42400 	.word	0x00f42400
 8005008:	01067380 	.word	0x01067380
 800500c:	011a499f 	.word	0x011a499f
 8005010:	01312cff 	.word	0x01312cff
 8005014:	014ca43f 	.word	0x014ca43f
 8005018:	016e3600 	.word	0x016e3600
 800501c:	01a6ab1f 	.word	0x01a6ab1f
 8005020:	01e84800 	.word	0x01e84800

08005024 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005046:	b480      	push	{r7}
 8005048:	b083      	sub	sp, #12
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f023 0201 	bic.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d115      	bne.n	80050b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005096:	200a      	movs	r0, #10
 8005098:	f7fc fbde 	bl	8001858 <HAL_Delay>
      ms += 10U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	330a      	adds	r3, #10
 80050a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f001 f939 	bl	800631a <USB_GetMode>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d01e      	beq.n	80050ec <USB_SetCurrentMode+0x84>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80050b2:	d9f0      	bls.n	8005096 <USB_SetCurrentMode+0x2e>
 80050b4:	e01a      	b.n	80050ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d115      	bne.n	80050e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80050c8:	200a      	movs	r0, #10
 80050ca:	f7fc fbc5 	bl	8001858 <HAL_Delay>
      ms += 10U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	330a      	adds	r3, #10
 80050d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f001 f920 	bl	800631a <USB_GetMode>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d005      	beq.n	80050ec <USB_SetCurrentMode+0x84>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80050e4:	d9f0      	bls.n	80050c8 <USB_SetCurrentMode+0x60>
 80050e6:	e001      	b.n	80050ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e005      	b.n	80050f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80050f0:	d101      	bne.n	80050f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e000      	b.n	80050f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005100:	b084      	sub	sp, #16
 8005102:	b580      	push	{r7, lr}
 8005104:	b086      	sub	sp, #24
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
 800510a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800510e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
 800511e:	e009      	b.n	8005134 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	3340      	adds	r3, #64	@ 0x40
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	2200      	movs	r2, #0
 800512c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	3301      	adds	r3, #1
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	2b0e      	cmp	r3, #14
 8005138:	d9f2      	bls.n	8005120 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800513a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800513e:	2b00      	cmp	r3, #0
 8005140:	d11c      	bne.n	800517c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005150:	f043 0302 	orr.w	r3, r3, #2
 8005154:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800515a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005166:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005172:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	639a      	str	r2, [r3, #56]	@ 0x38
 800517a:	e00b      	b.n	8005194 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800518c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800519a:	461a      	mov	r2, r3
 800519c:	2300      	movs	r3, #0
 800519e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d10d      	bne.n	80051c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d104      	bne.n	80051ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051b0:	2100      	movs	r1, #0
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f968 	bl	8005488 <USB_SetDevSpeed>
 80051b8:	e008      	b.n	80051cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051ba:	2101      	movs	r1, #1
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f000 f963 	bl	8005488 <USB_SetDevSpeed>
 80051c2:	e003      	b.n	80051cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80051c4:	2103      	movs	r1, #3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f95e 	bl	8005488 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80051cc:	2110      	movs	r1, #16
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f8fa 	bl	80053c8 <USB_FlushTxFifo>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f924 	bl	800542c <USB_FlushRxFifo>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051f4:	461a      	mov	r2, r3
 80051f6:	2300      	movs	r3, #0
 80051f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800520c:	461a      	mov	r2, r3
 800520e:	2300      	movs	r3, #0
 8005210:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005212:	2300      	movs	r3, #0
 8005214:	613b      	str	r3, [r7, #16]
 8005216:	e043      	b.n	80052a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	015a      	lsls	r2, r3, #5
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	4413      	add	r3, r2
 8005220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800522a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800522e:	d118      	bne.n	8005262 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10a      	bne.n	800524c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005242:	461a      	mov	r2, r3
 8005244:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005248:	6013      	str	r3, [r2, #0]
 800524a:	e013      	b.n	8005274 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005258:	461a      	mov	r2, r3
 800525a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	e008      	b.n	8005274 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526e:	461a      	mov	r2, r3
 8005270:	2300      	movs	r3, #0
 8005272:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	2300      	movs	r3, #0
 8005284:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005292:	461a      	mov	r2, r3
 8005294:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005298:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	3301      	adds	r3, #1
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80052a4:	461a      	mov	r2, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d3b5      	bcc.n	8005218 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e043      	b.n	800533a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80052c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052c8:	d118      	bne.n	80052fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052dc:	461a      	mov	r2, r3
 80052de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e013      	b.n	800530e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f2:	461a      	mov	r2, r3
 80052f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e008      	b.n	800530e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005308:	461a      	mov	r2, r3
 800530a:	2300      	movs	r3, #0
 800530c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800531a:	461a      	mov	r2, r3
 800531c:	2300      	movs	r3, #0
 800531e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005332:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	3301      	adds	r3, #1
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800533e:	461a      	mov	r2, r3
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	4293      	cmp	r3, r2
 8005344:	d3b5      	bcc.n	80052b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005358:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005366:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005368:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800536c:	2b00      	cmp	r3, #0
 800536e:	d105      	bne.n	800537c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f043 0210 	orr.w	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	4b10      	ldr	r3, [pc, #64]	@ (80053c4 <USB_DevInit+0x2c4>)
 8005382:	4313      	orrs	r3, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005388:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	699b      	ldr	r3, [r3, #24]
 8005394:	f043 0208 	orr.w	r2, r3, #8
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800539c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d107      	bne.n	80053b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053ac:	f043 0304 	orr.w	r3, r3, #4
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053c0:	b004      	add	sp, #16
 80053c2:	4770      	bx	lr
 80053c4:	803c3800 	.word	0x803c3800

080053c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	3301      	adds	r3, #1
 80053da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053e2:	d901      	bls.n	80053e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e01b      	b.n	8005420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	daf2      	bge.n	80053d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	019b      	lsls	r3, r3, #6
 80053f8:	f043 0220 	orr.w	r2, r3, #32
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800540c:	d901      	bls.n	8005412 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e006      	b.n	8005420 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	d0f0      	beq.n	8005400 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3714      	adds	r7, #20
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005444:	d901      	bls.n	800544a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e018      	b.n	800547c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	daf2      	bge.n	8005438 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2210      	movs	r2, #16
 800545a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3301      	adds	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005468:	d901      	bls.n	800546e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e006      	b.n	800547c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b10      	cmp	r3, #16
 8005478:	d0f0      	beq.n	800545c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054a8:	4313      	orrs	r3, r2
 80054aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 0306 	and.w	r3, r3, #6
 80054d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d102      	bne.n	80054e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
 80054de:	e00a      	b.n	80054f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d002      	beq.n	80054ec <USB_GetDevSpeed+0x32>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b06      	cmp	r3, #6
 80054ea:	d102      	bne.n	80054f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80054ec:	2302      	movs	r3, #2
 80054ee:	75fb      	strb	r3, [r7, #23]
 80054f0:	e001      	b.n	80054f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80054f2:	230f      	movs	r3, #15
 80054f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	785b      	ldrb	r3, [r3, #1]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d13a      	bne.n	8005596 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	2101      	movs	r1, #1
 8005532:	fa01 f303 	lsl.w	r3, r1, r3
 8005536:	b29b      	uxth	r3, r3
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800553e:	4313      	orrs	r3, r2
 8005540:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d155      	bne.n	8005604 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	791b      	ldrb	r3, [r3, #4]
 8005572:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005574:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	059b      	lsls	r3, r3, #22
 800557a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800557c:	4313      	orrs	r3, r2
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	440a      	add	r2, r1
 8005586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800558a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800558e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	e036      	b.n	8005604 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800559c:	69da      	ldr	r2, [r3, #28]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	f003 030f 	and.w	r3, r3, #15
 80055a6:	2101      	movs	r1, #1
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	041b      	lsls	r3, r3, #16
 80055ae:	68f9      	ldr	r1, [r7, #12]
 80055b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055b4:	4313      	orrs	r3, r2
 80055b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d11a      	bne.n	8005604 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	015a      	lsls	r2, r3, #5
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	4413      	add	r3, r2
 80055d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	791b      	ldrb	r3, [r3, #4]
 80055e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80055ea:	430b      	orrs	r3, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005602:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d161      	bne.n	80056f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005642:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005646:	d11f      	bne.n	8005688 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005662:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005666:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005682:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800568e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	2101      	movs	r1, #1
 800569a:	fa01 f303 	lsl.w	r3, r1, r3
 800569e:	b29b      	uxth	r3, r3
 80056a0:	43db      	mvns	r3, r3
 80056a2:	68f9      	ldr	r1, [r7, #12]
 80056a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056a8:	4013      	ands	r3, r2
 80056aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	2101      	movs	r1, #1
 80056be:	fa01 f303 	lsl.w	r3, r1, r3
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	43db      	mvns	r3, r3
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056cc:	4013      	ands	r3, r2
 80056ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	0159      	lsls	r1, r3, #5
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	440b      	add	r3, r1
 80056e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ea:	4619      	mov	r1, r3
 80056ec:	4b35      	ldr	r3, [pc, #212]	@ (80057c4 <USB_DeactivateEndpoint+0x1b0>)
 80056ee:	4013      	ands	r3, r2
 80056f0:	600b      	str	r3, [r1, #0]
 80056f2:	e060      	b.n	80057b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	015a      	lsls	r2, r3, #5
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005706:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800570a:	d11f      	bne.n	800574c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	015a      	lsls	r2, r3, #5
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4413      	add	r3, r2
 8005714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68ba      	ldr	r2, [r7, #8]
 800571c:	0151      	lsls	r1, r2, #5
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	440a      	add	r2, r1
 8005722:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005726:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800572a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	0151      	lsls	r1, r2, #5
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	440a      	add	r2, r1
 8005742:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005746:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800574a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005752:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	f003 030f 	and.w	r3, r3, #15
 800575c:	2101      	movs	r1, #1
 800575e:	fa01 f303 	lsl.w	r3, r1, r3
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	43db      	mvns	r3, r3
 8005766:	68f9      	ldr	r1, [r7, #12]
 8005768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800576c:	4013      	ands	r3, r2
 800576e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005776:	69da      	ldr	r2, [r3, #28]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	f003 030f 	and.w	r3, r3, #15
 8005780:	2101      	movs	r1, #1
 8005782:	fa01 f303 	lsl.w	r3, r1, r3
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	43db      	mvns	r3, r3
 800578a:	68f9      	ldr	r1, [r7, #12]
 800578c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005790:	4013      	ands	r3, r2
 8005792:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	0159      	lsls	r1, r3, #5
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	440b      	add	r3, r1
 80057aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ae:	4619      	mov	r1, r3
 80057b0:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <USB_DeactivateEndpoint+0x1b4>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3714      	adds	r7, #20
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	ec337800 	.word	0xec337800
 80057c8:	eff37800 	.word	0xeff37800

080057cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	@ 0x28
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	4613      	mov	r3, r2
 80057d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 817a 	bne.w	8005ae2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d132      	bne.n	800585c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	69ba      	ldr	r2, [r7, #24]
 8005806:	0151      	lsls	r1, r2, #5
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	440a      	add	r2, r1
 800580c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005810:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005814:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005818:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005834:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005838:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	4413      	add	r3, r2
 8005842:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	0151      	lsls	r1, r2, #5
 800584c:	69fa      	ldr	r2, [r7, #28]
 800584e:	440a      	add	r2, r1
 8005850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005854:	0cdb      	lsrs	r3, r3, #19
 8005856:	04db      	lsls	r3, r3, #19
 8005858:	6113      	str	r3, [r2, #16]
 800585a:	e092      	b.n	8005982 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005876:	0cdb      	lsrs	r3, r3, #19
 8005878:	04db      	lsls	r3, r3, #19
 800587a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	4413      	add	r3, r2
 8005884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	0151      	lsls	r1, r2, #5
 800588e:	69fa      	ldr	r2, [r7, #28]
 8005890:	440a      	add	r2, r1
 8005892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005896:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800589a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800589e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11a      	bne.n	80058dc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d903      	bls.n	80058ba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80058d8:	6113      	str	r3, [r2, #16]
 80058da:	e01b      	b.n	8005914 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058e8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6919      	ldr	r1, [r3, #16]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	440b      	add	r3, r1
 80058f4:	1e59      	subs	r1, r3, #1
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80058fe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005900:	4ba2      	ldr	r3, [pc, #648]	@ (8005b8c <USB_EPStartXfer+0x3c0>)
 8005902:	400b      	ands	r3, r1
 8005904:	69b9      	ldr	r1, [r7, #24]
 8005906:	0148      	lsls	r0, r1, #5
 8005908:	69f9      	ldr	r1, [r7, #28]
 800590a:	4401      	add	r1, r0
 800590c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005910:	4313      	orrs	r3, r2
 8005912:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	015a      	lsls	r2, r3, #5
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	4413      	add	r3, r2
 800591c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592a:	69b9      	ldr	r1, [r7, #24]
 800592c:	0148      	lsls	r0, r1, #5
 800592e:	69f9      	ldr	r1, [r7, #28]
 8005930:	4401      	add	r1, r0
 8005932:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005936:	4313      	orrs	r3, r2
 8005938:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d11f      	bne.n	8005982 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	0151      	lsls	r1, r2, #5
 8005954:	69fa      	ldr	r2, [r7, #28]
 8005956:	440a      	add	r2, r1
 8005958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800595c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005960:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800597c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005980:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d14b      	bne.n	8005a20 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800599c:	461a      	mov	r2, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	791b      	ldrb	r3, [r3, #4]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d128      	bne.n	80059fe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d110      	bne.n	80059de <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	0151      	lsls	r1, r2, #5
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	440a      	add	r2, r1
 80059d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	e00f      	b.n	80059fe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	0151      	lsls	r1, r2, #5
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	440a      	add	r2, r1
 80059f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	69ba      	ldr	r2, [r7, #24]
 8005a0e:	0151      	lsls	r1, r2, #5
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	440a      	add	r2, r1
 8005a14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a18:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e165      	b.n	8005cec <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	69fa      	ldr	r2, [r7, #28]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a3a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a3e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	791b      	ldrb	r3, [r3, #4]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d015      	beq.n	8005a74 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	691b      	ldr	r3, [r3, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 814d 	beq.w	8005cec <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	2101      	movs	r1, #1
 8005a64:	fa01 f303 	lsl.w	r3, r1, r3
 8005a68:	69f9      	ldr	r1, [r7, #28]
 8005a6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	634b      	str	r3, [r1, #52]	@ 0x34
 8005a72:	e13b      	b.n	8005cec <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d110      	bne.n	8005aa6 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69ba      	ldr	r2, [r7, #24]
 8005a94:	0151      	lsls	r1, r2, #5
 8005a96:	69fa      	ldr	r2, [r7, #28]
 8005a98:	440a      	add	r2, r1
 8005a9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a9e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e00f      	b.n	8005ac6 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	0151      	lsls	r1, r2, #5
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	440a      	add	r2, r1
 8005abc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	68d9      	ldr	r1, [r3, #12]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	781a      	ldrb	r2, [r3, #0]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	b298      	uxth	r0, r3
 8005ad4:	79fb      	ldrb	r3, [r7, #7]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	4603      	mov	r3, r0
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f9b8 	bl	8005e50 <USB_WritePacket>
 8005ae0:	e104      	b.n	8005cec <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	0151      	lsls	r1, r2, #5
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	440a      	add	r2, r1
 8005af8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005afc:	0cdb      	lsrs	r3, r3, #19
 8005afe:	04db      	lsls	r3, r3, #19
 8005b00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	015a      	lsls	r2, r3, #5
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	4413      	add	r3, r2
 8005b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	69ba      	ldr	r2, [r7, #24]
 8005b12:	0151      	lsls	r1, r2, #5
 8005b14:	69fa      	ldr	r2, [r7, #28]
 8005b16:	440a      	add	r2, r1
 8005b18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b24:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d131      	bne.n	8005b90 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5a:	69b9      	ldr	r1, [r7, #24]
 8005b5c:	0148      	lsls	r0, r1, #5
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	4401      	add	r1, r0
 8005b62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b66:	4313      	orrs	r3, r2
 8005b68:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b88:	6113      	str	r3, [r2, #16]
 8005b8a:	e061      	b.n	8005c50 <USB_EPStartXfer+0x484>
 8005b8c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d123      	bne.n	8005be0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bae:	69b9      	ldr	r1, [r7, #24]
 8005bb0:	0148      	lsls	r0, r1, #5
 8005bb2:	69f9      	ldr	r1, [r7, #28]
 8005bb4:	4401      	add	r1, r0
 8005bb6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	0151      	lsls	r1, r2, #5
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	440a      	add	r2, r1
 8005bd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bdc:	6113      	str	r3, [r2, #16]
 8005bde:	e037      	b.n	8005c50 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	1e5a      	subs	r2, r3, #1
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	8afa      	ldrh	r2, [r7, #22]
 8005bfc:	fb03 f202 	mul.w	r2, r3, r2
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	8afb      	ldrh	r3, [r7, #22]
 8005c14:	04d9      	lsls	r1, r3, #19
 8005c16:	4b38      	ldr	r3, [pc, #224]	@ (8005cf8 <USB_EPStartXfer+0x52c>)
 8005c18:	400b      	ands	r3, r1
 8005c1a:	69b9      	ldr	r1, [r7, #24]
 8005c1c:	0148      	lsls	r0, r1, #5
 8005c1e:	69f9      	ldr	r1, [r7, #28]
 8005c20:	4401      	add	r1, r0
 8005c22:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c26:	4313      	orrs	r3, r2
 8005c28:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c36:	691a      	ldr	r2, [r3, #16]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c40:	69b9      	ldr	r1, [r7, #24]
 8005c42:	0148      	lsls	r0, r1, #5
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	4401      	add	r1, r0
 8005c48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d10d      	bne.n	8005c72 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d009      	beq.n	8005c72 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	68d9      	ldr	r1, [r3, #12]
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c6e:	460a      	mov	r2, r1
 8005c70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	791b      	ldrb	r3, [r3, #4]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d128      	bne.n	8005ccc <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d110      	bne.n	8005cac <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	0151      	lsls	r1, r2, #5
 8005c9c:	69fa      	ldr	r2, [r7, #28]
 8005c9e:	440a      	add	r2, r1
 8005ca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ca4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e00f      	b.n	8005ccc <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	015a      	lsls	r2, r3, #5
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69ba      	ldr	r2, [r7, #24]
 8005cbc:	0151      	lsls	r1, r2, #5
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	440a      	add	r2, r1
 8005cc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005cc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ce6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005cea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3720      	adds	r7, #32
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	1ff80000 	.word	0x1ff80000

08005cfc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	785b      	ldrb	r3, [r3, #1]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d14a      	bne.n	8005db0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d32:	f040 8086 	bne.w	8005e42 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	7812      	ldrb	r2, [r2, #0]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	693a      	ldr	r2, [r7, #16]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d58:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	7812      	ldrb	r2, [r2, #0]
 8005d6e:	0151      	lsls	r1, r2, #5
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	440a      	add	r2, r1
 8005d74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d7c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3301      	adds	r3, #1
 8005d82:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d902      	bls.n	8005d94 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	75fb      	strb	r3, [r7, #23]
          break;
 8005d92:	e056      	b.n	8005e42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dac:	d0e7      	beq.n	8005d7e <USB_EPStopXfer+0x82>
 8005dae:	e048      	b.n	8005e42 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dc8:	d13b      	bne.n	8005e42 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	7812      	ldrb	r2, [r2, #0]
 8005dde:	0151      	lsls	r1, r2, #5
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	440a      	add	r2, r1
 8005de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005de8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005dec:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	781b      	ldrb	r3, [r3, #0]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	7812      	ldrb	r2, [r2, #0]
 8005e02:	0151      	lsls	r1, r2, #5
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	440a      	add	r2, r1
 8005e08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3301      	adds	r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d902      	bls.n	8005e28 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	75fb      	strb	r3, [r7, #23]
          break;
 8005e26:	e00c      	b.n	8005e42 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e40:	d0e7      	beq.n	8005e12 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b089      	sub	sp, #36	@ 0x24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	460b      	mov	r3, r1
 8005e60:	71fb      	strb	r3, [r7, #7]
 8005e62:	4613      	mov	r3, r2
 8005e64:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d123      	bne.n	8005ebe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e76:	88bb      	ldrh	r3, [r7, #4]
 8005e78:	3303      	adds	r3, #3
 8005e7a:	089b      	lsrs	r3, r3, #2
 8005e7c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e7e:	2300      	movs	r3, #0
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e018      	b.n	8005eb6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	031a      	lsls	r2, r3, #12
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e90:	461a      	mov	r2, r3
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	3301      	adds	r3, #1
 8005eae:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	69ba      	ldr	r2, [r7, #24]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d3e2      	bcc.n	8005e84 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3724      	adds	r7, #36	@ 0x24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b08b      	sub	sp, #44	@ 0x2c
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	089b      	lsrs	r3, r3, #2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005eea:	88fb      	ldrh	r3, [r7, #6]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	623b      	str	r3, [r7, #32]
 8005ef6:	e014      	b.n	8005f22 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	601a      	str	r2, [r3, #0]
    pDest++;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	3301      	adds	r3, #1
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f12:	3301      	adds	r3, #1
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	3301      	adds	r3, #1
 8005f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	623b      	str	r3, [r7, #32]
 8005f22:	6a3a      	ldr	r2, [r7, #32]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d3e6      	bcc.n	8005ef8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005f2a:	8bfb      	ldrh	r3, [r7, #30]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01e      	beq.n	8005f6e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005f44:	693a      	ldr	r2, [r7, #16]
 8005f46:	6a3b      	ldr	r3, [r7, #32]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f50:	b2da      	uxtb	r2, r3
 8005f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f54:	701a      	strb	r2, [r3, #0]
      i++;
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5e:	3301      	adds	r3, #1
 8005f60:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005f62:	8bfb      	ldrh	r3, [r7, #30]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f68:	8bfb      	ldrh	r3, [r7, #30]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1ea      	bne.n	8005f44 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	372c      	adds	r7, #44	@ 0x2c
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b085      	sub	sp, #20
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d12c      	bne.n	8005ff2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	db12      	blt.n	8005fd0 <USB_EPSetStall+0x54>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00f      	beq.n	8005fd0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	0151      	lsls	r1, r2, #5
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	440a      	add	r2, r1
 8005fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fce:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	0151      	lsls	r1, r2, #5
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	440a      	add	r2, r1
 8005fe6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	e02b      	b.n	800604a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	015a      	lsls	r2, r3, #5
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	db12      	blt.n	800602a <USB_EPSetStall+0xae>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00f      	beq.n	800602a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006024:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006028:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	015a      	lsls	r2, r3, #5
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4413      	add	r3, r2
 8006032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006044:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006048:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	785b      	ldrb	r3, [r3, #1]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d128      	bne.n	80060c6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	0151      	lsls	r1, r2, #5
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	440a      	add	r2, r1
 800608a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800608e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006092:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	791b      	ldrb	r3, [r3, #4]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d003      	beq.n	80060a4 <USB_EPClearStall+0x4c>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	791b      	ldrb	r3, [r3, #4]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d138      	bne.n	8006116 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	e027      	b.n	8006116 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68ba      	ldr	r2, [r7, #8]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060e0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80060e4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	791b      	ldrb	r3, [r3, #4]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d003      	beq.n	80060f6 <USB_EPClearStall+0x9e>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	791b      	ldrb	r3, [r3, #4]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d10f      	bne.n	8006116 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	0151      	lsls	r1, r2, #5
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	440a      	add	r2, r1
 800610c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006110:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006114:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3714      	adds	r7, #20
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006142:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006146:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006158:	68f9      	ldr	r1, [r7, #12]
 800615a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800618a:	f023 0303 	bic.w	r3, r3, #3
 800618e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800619e:	f023 0302 	bic.w	r3, r3, #2
 80061a2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b085      	sub	sp, #20
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80061cc:	f023 0303 	bic.w	r3, r3, #3
 80061d0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061e0:	f043 0302 	orr.w	r3, r3, #2
 80061e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	4013      	ands	r3, r2
 800620a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800620c:	68fb      	ldr	r3, [r7, #12]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006236:	69db      	ldr	r3, [r3, #28]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	4013      	ands	r3, r2
 800623c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	0c1b      	lsrs	r3, r3, #16
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	4013      	ands	r3, r2
 8006270:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	b29b      	uxth	r3, r3
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006282:	b480      	push	{r7}
 8006284:	b085      	sub	sp, #20
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	460b      	mov	r3, r1
 800628c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	015a      	lsls	r2, r3, #5
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	4413      	add	r3, r2
 800629a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	4013      	ands	r3, r2
 80062ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062b0:	68bb      	ldr	r3, [r7, #8]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80062be:	b480      	push	{r7}
 80062c0:	b087      	sub	sp, #28
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062d4:	691b      	ldr	r3, [r3, #16]
 80062d6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062e0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80062e2:	78fb      	ldrb	r3, [r7, #3]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	fa22 f303 	lsr.w	r3, r2, r3
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	693a      	ldr	r2, [r7, #16]
 8006308:	4013      	ands	r3, r2
 800630a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800630c:	68bb      	ldr	r3, [r7, #8]
}
 800630e:	4618      	mov	r0, r3
 8006310:	371c      	adds	r7, #28
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800631a:	b480      	push	{r7}
 800631c:	b083      	sub	sp, #12
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 0301 	and.w	r3, r3, #1
}
 800632a:	4618      	mov	r0, r3
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b085      	sub	sp, #20
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006350:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006354:	f023 0307 	bic.w	r3, r3, #7
 8006358:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800636c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3714      	adds	r7, #20
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800637c:	b480      	push	{r7}
 800637e:	b087      	sub	sp, #28
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	460b      	mov	r3, r1
 8006386:	607a      	str	r2, [r7, #4]
 8006388:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	333c      	adds	r3, #60	@ 0x3c
 8006392:	3304      	adds	r3, #4
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	4a26      	ldr	r2, [pc, #152]	@ (8006434 <USB_EP0_OutStart+0xb8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d90a      	bls.n	80063b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063b0:	d101      	bne.n	80063b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e037      	b.n	8006426 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063bc:	461a      	mov	r2, r3
 80063be:	2300      	movs	r3, #0
 80063c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063e4:	f043 0318 	orr.w	r3, r3, #24
 80063e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80063fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063fe:	7afb      	ldrb	r3, [r7, #11]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d10f      	bne.n	8006424 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800640a:	461a      	mov	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800641e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	4f54300a 	.word	0x4f54300a

08006438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	3301      	adds	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006450:	d901      	bls.n	8006456 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e01b      	b.n	800648e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	2b00      	cmp	r3, #0
 800645c:	daf2      	bge.n	8006444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	f043 0201 	orr.w	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	3301      	adds	r3, #1
 8006472:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800647a:	d901      	bls.n	8006480 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e006      	b.n	800648e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b01      	cmp	r3, #1
 800648a:	d0f0      	beq.n	800646e <USB_CoreReset+0x36>

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr
	...

0800649c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80064ac:	f002 fc88 	bl	8008dc0 <USBD_static_malloc>
 80064b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	32b0      	adds	r2, #176	@ 0xb0
 80064c2:	2100      	movs	r1, #0
 80064c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80064c8:	2302      	movs	r3, #2
 80064ca:	e0d4      	b.n	8006676 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80064cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80064d0:	2100      	movs	r1, #0
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f002 fddd 	bl	8009092 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	32b0      	adds	r2, #176	@ 0xb0
 80064e2:	68f9      	ldr	r1, [r7, #12]
 80064e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	32b0      	adds	r2, #176	@ 0xb0
 80064f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	7c1b      	ldrb	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d138      	bne.n	8006576 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006504:	4b5e      	ldr	r3, [pc, #376]	@ (8006680 <USBD_CDC_Init+0x1e4>)
 8006506:	7819      	ldrb	r1, [r3, #0]
 8006508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800650c:	2202      	movs	r2, #2
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f002 fb33 	bl	8008b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006514:	4b5a      	ldr	r3, [pc, #360]	@ (8006680 <USBD_CDC_Init+0x1e4>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	440b      	add	r3, r1
 8006528:	3324      	adds	r3, #36	@ 0x24
 800652a:	2201      	movs	r2, #1
 800652c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800652e:	4b55      	ldr	r3, [pc, #340]	@ (8006684 <USBD_CDC_Init+0x1e8>)
 8006530:	7819      	ldrb	r1, [r3, #0]
 8006532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006536:	2202      	movs	r2, #2
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f002 fb1e 	bl	8008b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800653e:	4b51      	ldr	r3, [pc, #324]	@ (8006684 <USBD_CDC_Init+0x1e8>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f003 020f 	and.w	r2, r3, #15
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006556:	2201      	movs	r2, #1
 8006558:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800655a:	4b4b      	ldr	r3, [pc, #300]	@ (8006688 <USBD_CDC_Init+0x1ec>)
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	f003 020f 	and.w	r2, r3, #15
 8006562:	6879      	ldr	r1, [r7, #4]
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	440b      	add	r3, r1
 800656e:	3326      	adds	r3, #38	@ 0x26
 8006570:	2210      	movs	r2, #16
 8006572:	801a      	strh	r2, [r3, #0]
 8006574:	e035      	b.n	80065e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006576:	4b42      	ldr	r3, [pc, #264]	@ (8006680 <USBD_CDC_Init+0x1e4>)
 8006578:	7819      	ldrb	r1, [r3, #0]
 800657a:	2340      	movs	r3, #64	@ 0x40
 800657c:	2202      	movs	r2, #2
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f002 fafb 	bl	8008b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006584:	4b3e      	ldr	r3, [pc, #248]	@ (8006680 <USBD_CDC_Init+0x1e4>)
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	f003 020f 	and.w	r2, r3, #15
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	4613      	mov	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4413      	add	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	440b      	add	r3, r1
 8006598:	3324      	adds	r3, #36	@ 0x24
 800659a:	2201      	movs	r2, #1
 800659c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800659e:	4b39      	ldr	r3, [pc, #228]	@ (8006684 <USBD_CDC_Init+0x1e8>)
 80065a0:	7819      	ldrb	r1, [r3, #0]
 80065a2:	2340      	movs	r3, #64	@ 0x40
 80065a4:	2202      	movs	r2, #2
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f002 fae7 	bl	8008b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80065ac:	4b35      	ldr	r3, [pc, #212]	@ (8006684 <USBD_CDC_Init+0x1e8>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80065c4:	2201      	movs	r2, #1
 80065c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80065c8:	4b2f      	ldr	r3, [pc, #188]	@ (8006688 <USBD_CDC_Init+0x1ec>)
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f003 020f 	and.w	r2, r3, #15
 80065d0:	6879      	ldr	r1, [r7, #4]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	440b      	add	r3, r1
 80065dc:	3326      	adds	r3, #38	@ 0x26
 80065de:	2210      	movs	r2, #16
 80065e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065e2:	4b29      	ldr	r3, [pc, #164]	@ (8006688 <USBD_CDC_Init+0x1ec>)
 80065e4:	7819      	ldrb	r1, [r3, #0]
 80065e6:	2308      	movs	r3, #8
 80065e8:	2203      	movs	r2, #3
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f002 fac5 	bl	8008b7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80065f0:	4b25      	ldr	r3, [pc, #148]	@ (8006688 <USBD_CDC_Init+0x1ec>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	f003 020f 	and.w	r2, r3, #15
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	3324      	adds	r3, #36	@ 0x24
 8006606:	2201      	movs	r2, #1
 8006608:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	33b0      	adds	r3, #176	@ 0xb0
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006640:	2302      	movs	r3, #2
 8006642:	e018      	b.n	8006676 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7c1b      	ldrb	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10a      	bne.n	8006662 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800664c:	4b0d      	ldr	r3, [pc, #52]	@ (8006684 <USBD_CDC_Init+0x1e8>)
 800664e:	7819      	ldrb	r1, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006656:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f002 fb7c 	bl	8008d58 <USBD_LL_PrepareReceive>
 8006660:	e008      	b.n	8006674 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006662:	4b08      	ldr	r3, [pc, #32]	@ (8006684 <USBD_CDC_Init+0x1e8>)
 8006664:	7819      	ldrb	r1, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800666c:	2340      	movs	r3, #64	@ 0x40
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f002 fb72 	bl	8008d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000097 	.word	0x20000097
 8006684:	20000098 	.word	0x20000098
 8006688:	20000099 	.word	0x20000099

0800668c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	460b      	mov	r3, r1
 8006696:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006698:	4b3a      	ldr	r3, [pc, #232]	@ (8006784 <USBD_CDC_DeInit+0xf8>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	4619      	mov	r1, r3
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f002 fa91 	bl	8008bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80066a4:	4b37      	ldr	r3, [pc, #220]	@ (8006784 <USBD_CDC_DeInit+0xf8>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	f003 020f 	and.w	r2, r3, #15
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	3324      	adds	r3, #36	@ 0x24
 80066ba:	2200      	movs	r2, #0
 80066bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80066be:	4b32      	ldr	r3, [pc, #200]	@ (8006788 <USBD_CDC_DeInit+0xfc>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	4619      	mov	r1, r3
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f002 fa7e 	bl	8008bc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80066ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006788 <USBD_CDC_DeInit+0xfc>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	f003 020f 	and.w	r2, r3, #15
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80066e2:	2200      	movs	r2, #0
 80066e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80066e6:	4b29      	ldr	r3, [pc, #164]	@ (800678c <USBD_CDC_DeInit+0x100>)
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	4619      	mov	r1, r3
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f002 fa6a 	bl	8008bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80066f2:	4b26      	ldr	r3, [pc, #152]	@ (800678c <USBD_CDC_DeInit+0x100>)
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	f003 020f 	and.w	r2, r3, #15
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	440b      	add	r3, r1
 8006706:	3324      	adds	r3, #36	@ 0x24
 8006708:	2200      	movs	r2, #0
 800670a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800670c:	4b1f      	ldr	r3, [pc, #124]	@ (800678c <USBD_CDC_DeInit+0x100>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	f003 020f 	and.w	r2, r3, #15
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3326      	adds	r3, #38	@ 0x26
 8006722:	2200      	movs	r2, #0
 8006724:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	32b0      	adds	r2, #176	@ 0xb0
 8006730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01f      	beq.n	8006778 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	33b0      	adds	r3, #176	@ 0xb0
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	32b0      	adds	r2, #176	@ 0xb0
 8006756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800675a:	4618      	mov	r0, r3
 800675c:	f002 fb3e 	bl	8008ddc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	32b0      	adds	r2, #176	@ 0xb0
 800676a:	2100      	movs	r1, #0
 800676c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000097 	.word	0x20000097
 8006788:	20000098 	.word	0x20000098
 800678c:	20000099 	.word	0x20000099

08006790 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b086      	sub	sp, #24
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	32b0      	adds	r2, #176	@ 0xb0
 80067a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d101      	bne.n	80067c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80067bc:	2303      	movs	r3, #3
 80067be:	e0bf      	b.n	8006940 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d050      	beq.n	800686e <USBD_CDC_Setup+0xde>
 80067cc:	2b20      	cmp	r3, #32
 80067ce:	f040 80af 	bne.w	8006930 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	88db      	ldrh	r3, [r3, #6]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d03a      	beq.n	8006850 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	b25b      	sxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	da1b      	bge.n	800681c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	33b0      	adds	r3, #176	@ 0xb0
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	88d2      	ldrh	r2, [r2, #6]
 8006800:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	88db      	ldrh	r3, [r3, #6]
 8006806:	2b07      	cmp	r3, #7
 8006808:	bf28      	it	cs
 800680a:	2307      	movcs	r3, #7
 800680c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	89fa      	ldrh	r2, [r7, #14]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f001 fd87 	bl	8008328 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800681a:	e090      	b.n	800693e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	785a      	ldrb	r2, [r3, #1]
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	88db      	ldrh	r3, [r3, #6]
 800682a:	2b3f      	cmp	r3, #63	@ 0x3f
 800682c:	d803      	bhi.n	8006836 <USBD_CDC_Setup+0xa6>
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	88db      	ldrh	r3, [r3, #6]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	e000      	b.n	8006838 <USBD_CDC_Setup+0xa8>
 8006836:	2240      	movs	r2, #64	@ 0x40
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800683e:	6939      	ldr	r1, [r7, #16]
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006846:	461a      	mov	r2, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fd99 	bl	8008380 <USBD_CtlPrepareRx>
      break;
 800684e:	e076      	b.n	800693e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	33b0      	adds	r3, #176	@ 0xb0
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	683a      	ldr	r2, [r7, #0]
 8006864:	7850      	ldrb	r0, [r2, #1]
 8006866:	2200      	movs	r2, #0
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	4798      	blx	r3
      break;
 800686c:	e067      	b.n	800693e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	785b      	ldrb	r3, [r3, #1]
 8006872:	2b0b      	cmp	r3, #11
 8006874:	d851      	bhi.n	800691a <USBD_CDC_Setup+0x18a>
 8006876:	a201      	add	r2, pc, #4	@ (adr r2, 800687c <USBD_CDC_Setup+0xec>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	080068ad 	.word	0x080068ad
 8006880:	08006929 	.word	0x08006929
 8006884:	0800691b 	.word	0x0800691b
 8006888:	0800691b 	.word	0x0800691b
 800688c:	0800691b 	.word	0x0800691b
 8006890:	0800691b 	.word	0x0800691b
 8006894:	0800691b 	.word	0x0800691b
 8006898:	0800691b 	.word	0x0800691b
 800689c:	0800691b 	.word	0x0800691b
 80068a0:	0800691b 	.word	0x0800691b
 80068a4:	080068d7 	.word	0x080068d7
 80068a8:	08006901 	.word	0x08006901
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d107      	bne.n	80068c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80068b8:	f107 030a 	add.w	r3, r7, #10
 80068bc:	2202      	movs	r2, #2
 80068be:	4619      	mov	r1, r3
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fd31 	bl	8008328 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068c6:	e032      	b.n	800692e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068c8:	6839      	ldr	r1, [r7, #0]
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f001 fcbb 	bl	8008246 <USBD_CtlError>
            ret = USBD_FAIL;
 80068d0:	2303      	movs	r3, #3
 80068d2:	75fb      	strb	r3, [r7, #23]
          break;
 80068d4:	e02b      	b.n	800692e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d107      	bne.n	80068f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80068e2:	f107 030d 	add.w	r3, r7, #13
 80068e6:	2201      	movs	r2, #1
 80068e8:	4619      	mov	r1, r3
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f001 fd1c 	bl	8008328 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80068f0:	e01d      	b.n	800692e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fca6 	bl	8008246 <USBD_CtlError>
            ret = USBD_FAIL;
 80068fa:	2303      	movs	r3, #3
 80068fc:	75fb      	strb	r3, [r7, #23]
          break;
 80068fe:	e016      	b.n	800692e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b03      	cmp	r3, #3
 800690a:	d00f      	beq.n	800692c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800690c:	6839      	ldr	r1, [r7, #0]
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f001 fc99 	bl	8008246 <USBD_CtlError>
            ret = USBD_FAIL;
 8006914:	2303      	movs	r3, #3
 8006916:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006918:	e008      	b.n	800692c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800691a:	6839      	ldr	r1, [r7, #0]
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f001 fc92 	bl	8008246 <USBD_CtlError>
          ret = USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	75fb      	strb	r3, [r7, #23]
          break;
 8006926:	e002      	b.n	800692e <USBD_CDC_Setup+0x19e>
          break;
 8006928:	bf00      	nop
 800692a:	e008      	b.n	800693e <USBD_CDC_Setup+0x1ae>
          break;
 800692c:	bf00      	nop
      }
      break;
 800692e:	e006      	b.n	800693e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 fc87 	bl	8008246 <USBD_CtlError>
      ret = USBD_FAIL;
 8006938:	2303      	movs	r3, #3
 800693a:	75fb      	strb	r3, [r7, #23]
      break;
 800693c:	bf00      	nop
  }

  return (uint8_t)ret;
 800693e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800695a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	32b0      	adds	r2, #176	@ 0xb0
 8006966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d101      	bne.n	8006972 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800696e:	2303      	movs	r3, #3
 8006970:	e065      	b.n	8006a3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	32b0      	adds	r2, #176	@ 0xb0
 800697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006980:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	f003 020f 	and.w	r2, r3, #15
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	3318      	adds	r3, #24
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02f      	beq.n	80069fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	f003 020f 	and.w	r2, r3, #15
 80069a2:	6879      	ldr	r1, [r7, #4]
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	3318      	adds	r3, #24
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	f003 010f 	and.w	r1, r3, #15
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	460b      	mov	r3, r1
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	440b      	add	r3, r1
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4403      	add	r3, r0
 80069c4:	331c      	adds	r3, #28
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80069cc:	fb01 f303 	mul.w	r3, r1, r3
 80069d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d112      	bne.n	80069fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	6879      	ldr	r1, [r7, #4]
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	3318      	adds	r3, #24
 80069ea:	2200      	movs	r2, #0
 80069ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80069ee:	78f9      	ldrb	r1, [r7, #3]
 80069f0:	2300      	movs	r3, #0
 80069f2:	2200      	movs	r2, #0
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f002 f98e 	bl	8008d16 <USBD_LL_Transmit>
 80069fa:	e01f      	b.n	8006a3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	33b0      	adds	r3, #176	@ 0xb0
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d010      	beq.n	8006a3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	33b0      	adds	r3, #176	@ 0xb0
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006a32:	68ba      	ldr	r2, [r7, #8]
 8006a34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}

08006a46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	32b0      	adds	r2, #176	@ 0xb0
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	32b0      	adds	r2, #176	@ 0xb0
 8006a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a74:	2303      	movs	r3, #3
 8006a76:	e01a      	b.n	8006aae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f002 f98c 	bl	8008d9a <USBD_LL_GetRxDataSize>
 8006a82:	4602      	mov	r2, r0
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	33b0      	adds	r3, #176	@ 0xb0
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4413      	add	r3, r2
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	32b0      	adds	r2, #176	@ 0xb0
 8006ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006acc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e024      	b.n	8006b22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ade:	687a      	ldr	r2, [r7, #4]
 8006ae0:	33b0      	adds	r3, #176	@ 0xb0
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d019      	beq.n	8006b20 <USBD_CDC_EP0_RxReady+0x6a>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006af2:	2bff      	cmp	r3, #255	@ 0xff
 8006af4:	d014      	beq.n	8006b20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	33b0      	adds	r3, #176	@ 0xb0
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	4413      	add	r3, r2
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006b0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006b16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	22ff      	movs	r2, #255	@ 0xff
 8006b1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3710      	adds	r7, #16
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
	...

08006b2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b34:	2182      	movs	r1, #130	@ 0x82
 8006b36:	4818      	ldr	r0, [pc, #96]	@ (8006b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b38:	f000 fd4f 	bl	80075da <USBD_GetEpDesc>
 8006b3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b3e:	2101      	movs	r1, #1
 8006b40:	4815      	ldr	r0, [pc, #84]	@ (8006b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b42:	f000 fd4a 	bl	80075da <USBD_GetEpDesc>
 8006b46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b48:	2181      	movs	r1, #129	@ 0x81
 8006b4a:	4813      	ldr	r0, [pc, #76]	@ (8006b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006b4c:	f000 fd45 	bl	80075da <USBD_GetEpDesc>
 8006b50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d006      	beq.n	8006b72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b6c:	711a      	strb	r2, [r3, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b80:	711a      	strb	r2, [r3, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2243      	movs	r2, #67	@ 0x43
 8006b8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b8c:	4b02      	ldr	r3, [pc, #8]	@ (8006b98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000054 	.word	0x20000054

08006b9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ba4:	2182      	movs	r1, #130	@ 0x82
 8006ba6:	4818      	ldr	r0, [pc, #96]	@ (8006c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006ba8:	f000 fd17 	bl	80075da <USBD_GetEpDesc>
 8006bac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bae:	2101      	movs	r1, #1
 8006bb0:	4815      	ldr	r0, [pc, #84]	@ (8006c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bb2:	f000 fd12 	bl	80075da <USBD_GetEpDesc>
 8006bb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bb8:	2181      	movs	r1, #129	@ 0x81
 8006bba:	4813      	ldr	r0, [pc, #76]	@ (8006c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006bbc:	f000 fd0d 	bl	80075da <USBD_GetEpDesc>
 8006bc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	2210      	movs	r2, #16
 8006bcc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	711a      	strb	r2, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f042 0202 	orr.w	r2, r2, #2
 8006be0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d006      	beq.n	8006bf6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	711a      	strb	r2, [r3, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f042 0202 	orr.w	r2, r2, #2
 8006bf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2243      	movs	r2, #67	@ 0x43
 8006bfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006bfc:	4b02      	ldr	r3, [pc, #8]	@ (8006c08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000054 	.word	0x20000054

08006c0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006c14:	2182      	movs	r1, #130	@ 0x82
 8006c16:	4818      	ldr	r0, [pc, #96]	@ (8006c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c18:	f000 fcdf 	bl	80075da <USBD_GetEpDesc>
 8006c1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006c1e:	2101      	movs	r1, #1
 8006c20:	4815      	ldr	r0, [pc, #84]	@ (8006c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c22:	f000 fcda 	bl	80075da <USBD_GetEpDesc>
 8006c26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006c28:	2181      	movs	r1, #129	@ 0x81
 8006c2a:	4813      	ldr	r0, [pc, #76]	@ (8006c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006c2c:	f000 fcd5 	bl	80075da <USBD_GetEpDesc>
 8006c30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d002      	beq.n	8006c3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	2210      	movs	r2, #16
 8006c3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d006      	beq.n	8006c52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c4c:	711a      	strb	r2, [r3, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d006      	beq.n	8006c66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c60:	711a      	strb	r2, [r3, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2243      	movs	r2, #67	@ 0x43
 8006c6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c6c:	4b02      	ldr	r3, [pc, #8]	@ (8006c78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000054 	.word	0x20000054

08006c7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	220a      	movs	r2, #10
 8006c88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c8a:	4b03      	ldr	r3, [pc, #12]	@ (8006c98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000010 	.word	0x20000010

08006c9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e009      	b.n	8006cc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	33b0      	adds	r3, #176	@ 0xb0
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b087      	sub	sp, #28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	32b0      	adds	r2, #176	@ 0xb0
 8006ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	e008      	b.n	8006d08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	371c      	adds	r7, #28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	32b0      	adds	r2, #176	@ 0xb0
 8006d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e004      	b.n	8006d42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
	...

08006d50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	32b0      	adds	r2, #176	@ 0xb0
 8006d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e025      	b.n	8006dc2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11f      	bne.n	8006dc0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006d88:	4b10      	ldr	r3, [pc, #64]	@ (8006dcc <USBD_CDC_TransmitPacket+0x7c>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	f003 020f 	and.w	r2, r3, #15
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	4403      	add	r3, r0
 8006da2:	3318      	adds	r3, #24
 8006da4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006da6:	4b09      	ldr	r3, [pc, #36]	@ (8006dcc <USBD_CDC_TransmitPacket+0x7c>)
 8006da8:	7819      	ldrb	r1, [r3, #0]
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f001 ffad 	bl	8008d16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3710      	adds	r7, #16
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000097 	.word	0x20000097

08006dd0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	32b0      	adds	r2, #176	@ 0xb0
 8006de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	32b0      	adds	r2, #176	@ 0xb0
 8006df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e018      	b.n	8006e30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7c1b      	ldrb	r3, [r3, #16]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10a      	bne.n	8006e1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e06:	4b0c      	ldr	r3, [pc, #48]	@ (8006e38 <USBD_CDC_ReceivePacket+0x68>)
 8006e08:	7819      	ldrb	r1, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f001 ff9f 	bl	8008d58 <USBD_LL_PrepareReceive>
 8006e1a:	e008      	b.n	8006e2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e1c:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <USBD_CDC_ReceivePacket+0x68>)
 8006e1e:	7819      	ldrb	r1, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e26:	2340      	movs	r3, #64	@ 0x40
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f001 ff95 	bl	8008d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000098 	.word	0x20000098

08006e3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e01f      	b.n	8006e94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	79fa      	ldrb	r2, [r7, #7]
 8006e86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f001 fe0f 	bl	8008aac <USBD_LL_Init>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	e025      	b.n	8006f00 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	32ae      	adds	r2, #174	@ 0xae
 8006ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00f      	beq.n	8006ef0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	32ae      	adds	r2, #174	@ 0xae
 8006eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee0:	f107 020e 	add.w	r2, r7, #14
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	4602      	mov	r2, r0
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f001 fe17 	bl	8008b44 <USBD_LL_Start>
 8006f16:	4603      	mov	r3, r0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f28:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d009      	beq.n	8006f64 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	78fa      	ldrb	r2, [r7, #3]
 8006f5a:	4611      	mov	r1, r2
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	4798      	blx	r3
 8006f60:	4603      	mov	r3, r0
 8006f62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3710      	adds	r7, #16
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b084      	sub	sp, #16
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	460b      	mov	r3, r1
 8006f78:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	4798      	blx	r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d001      	beq.n	8006f98 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006f94:	2303      	movs	r3, #3
 8006f96:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b084      	sub	sp, #16
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
 8006faa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 f90c 	bl	80081d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006fc8:	461a      	mov	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2b02      	cmp	r3, #2
 8006fdc:	d01a      	beq.n	8007014 <USBD_LL_SetupStage+0x72>
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d822      	bhi.n	8007028 <USBD_LL_SetupStage+0x86>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d002      	beq.n	8006fec <USBD_LL_SetupStage+0x4a>
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d00a      	beq.n	8007000 <USBD_LL_SetupStage+0x5e>
 8006fea:	e01d      	b.n	8007028 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb63 	bl	80076c0 <USBD_StdDevReq>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffe:	e020      	b.n	8007042 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fbcb 	bl	80077a4 <USBD_StdItfReq>
 800700e:	4603      	mov	r3, r0
 8007010:	73fb      	strb	r3, [r7, #15]
      break;
 8007012:	e016      	b.n	8007042 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800701a:	4619      	mov	r1, r3
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fc2d 	bl	800787c <USBD_StdEPReq>
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]
      break;
 8007026:	e00c      	b.n	8007042 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800702e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007032:	b2db      	uxtb	r3, r3
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f001 fde4 	bl	8008c04 <USBD_LL_StallEP>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
      break;
 8007040:	bf00      	nop
  }

  return ret;
 8007042:	7bfb      	ldrb	r3, [r7, #15]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}

0800704c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b086      	sub	sp, #24
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	460b      	mov	r3, r1
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d16e      	bne.n	8007142 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800706a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007072:	2b03      	cmp	r3, #3
 8007074:	f040 8098 	bne.w	80071a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	689a      	ldr	r2, [r3, #8]
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	429a      	cmp	r2, r3
 8007082:	d913      	bls.n	80070ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	689a      	ldr	r2, [r3, #8]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	1ad2      	subs	r2, r2, r3
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	4293      	cmp	r3, r2
 800709c:	bf28      	it	cs
 800709e:	4613      	movcs	r3, r2
 80070a0:	461a      	mov	r2, r3
 80070a2:	6879      	ldr	r1, [r7, #4]
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f001 f988 	bl	80083ba <USBD_CtlContinueRx>
 80070aa:	e07d      	b.n	80071a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80070b2:	f003 031f 	and.w	r3, r3, #31
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d014      	beq.n	80070e4 <USBD_LL_DataOutStage+0x98>
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d81d      	bhi.n	80070fa <USBD_LL_DataOutStage+0xae>
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <USBD_LL_DataOutStage+0x7c>
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d003      	beq.n	80070ce <USBD_LL_DataOutStage+0x82>
 80070c6:	e018      	b.n	80070fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75bb      	strb	r3, [r7, #22]
            break;
 80070cc:	e018      	b.n	8007100 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	4619      	mov	r1, r3
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fa64 	bl	80075a6 <USBD_CoreFindIF>
 80070de:	4603      	mov	r3, r0
 80070e0:	75bb      	strb	r3, [r7, #22]
            break;
 80070e2:	e00d      	b.n	8007100 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	4619      	mov	r1, r3
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fa66 	bl	80075c0 <USBD_CoreFindEP>
 80070f4:	4603      	mov	r3, r0
 80070f6:	75bb      	strb	r3, [r7, #22]
            break;
 80070f8:	e002      	b.n	8007100 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	75bb      	strb	r3, [r7, #22]
            break;
 80070fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007100:	7dbb      	ldrb	r3, [r7, #22]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d119      	bne.n	800713a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b03      	cmp	r3, #3
 8007110:	d113      	bne.n	800713a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007112:	7dba      	ldrb	r2, [r7, #22]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	32ae      	adds	r2, #174	@ 0xae
 8007118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007122:	7dba      	ldrb	r2, [r7, #22]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800712a:	7dba      	ldrb	r2, [r7, #22]
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	32ae      	adds	r2, #174	@ 0xae
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f001 f94e 	bl	80083dc <USBD_CtlSendStatus>
 8007140:	e032      	b.n	80071a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007142:	7afb      	ldrb	r3, [r7, #11]
 8007144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007148:	b2db      	uxtb	r3, r3
 800714a:	4619      	mov	r1, r3
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa37 	bl	80075c0 <USBD_CoreFindEP>
 8007152:	4603      	mov	r3, r0
 8007154:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007156:	7dbb      	ldrb	r3, [r7, #22]
 8007158:	2bff      	cmp	r3, #255	@ 0xff
 800715a:	d025      	beq.n	80071a8 <USBD_LL_DataOutStage+0x15c>
 800715c:	7dbb      	ldrb	r3, [r7, #22]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d122      	bne.n	80071a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b03      	cmp	r3, #3
 800716c:	d117      	bne.n	800719e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800716e:	7dba      	ldrb	r2, [r7, #22]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	32ae      	adds	r2, #174	@ 0xae
 8007174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00f      	beq.n	800719e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800717e:	7dba      	ldrb	r2, [r7, #22]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007186:	7dba      	ldrb	r2, [r7, #22]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	32ae      	adds	r2, #174	@ 0xae
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	7afa      	ldrb	r2, [r7, #11]
 8007194:	4611      	mov	r1, r2
 8007196:	68f8      	ldr	r0, [r7, #12]
 8007198:	4798      	blx	r3
 800719a:	4603      	mov	r3, r0
 800719c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800719e:	7dfb      	ldrb	r3, [r7, #23]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	e000      	b.n	80071aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071a8:	2300      	movs	r3, #0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3718      	adds	r7, #24
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b086      	sub	sp, #24
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	460b      	mov	r3, r1
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d16f      	bne.n	80072a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3314      	adds	r3, #20
 80071ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d15a      	bne.n	800728c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d914      	bls.n	800720c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	1ad2      	subs	r2, r2, r3
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	461a      	mov	r2, r3
 80071f6:	6879      	ldr	r1, [r7, #4]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f001 f8b0 	bl	800835e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80071fe:	2300      	movs	r3, #0
 8007200:	2200      	movs	r2, #0
 8007202:	2100      	movs	r1, #0
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 fda7 	bl	8008d58 <USBD_LL_PrepareReceive>
 800720a:	e03f      	b.n	800728c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	68da      	ldr	r2, [r3, #12]
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	429a      	cmp	r2, r3
 8007216:	d11c      	bne.n	8007252 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007220:	429a      	cmp	r2, r3
 8007222:	d316      	bcc.n	8007252 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800722e:	429a      	cmp	r2, r3
 8007230:	d20f      	bcs.n	8007252 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	68f8      	ldr	r0, [r7, #12]
 8007238:	f001 f891 	bl	800835e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007244:	2300      	movs	r3, #0
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f001 fd84 	bl	8008d58 <USBD_LL_PrepareReceive>
 8007250:	e01c      	b.n	800728c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b03      	cmp	r3, #3
 800725c:	d10f      	bne.n	800727e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d009      	beq.n	800727e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800727e:	2180      	movs	r1, #128	@ 0x80
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f001 fcbf 	bl	8008c04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f001 f8bb 	bl	8008402 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d03a      	beq.n	800730c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fe42 	bl	8006f20 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2200      	movs	r2, #0
 80072a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072a4:	e032      	b.n	800730c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072a6:	7afb      	ldrb	r3, [r7, #11]
 80072a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4619      	mov	r1, r3
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f985 	bl	80075c0 <USBD_CoreFindEP>
 80072b6:	4603      	mov	r3, r0
 80072b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072ba:	7dfb      	ldrb	r3, [r7, #23]
 80072bc:	2bff      	cmp	r3, #255	@ 0xff
 80072be:	d025      	beq.n	800730c <USBD_LL_DataInStage+0x15a>
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d122      	bne.n	800730c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d11c      	bne.n	800730c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80072d2:	7dfa      	ldrb	r2, [r7, #23]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	32ae      	adds	r2, #174	@ 0xae
 80072d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d014      	beq.n	800730c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80072e2:	7dfa      	ldrb	r2, [r7, #23]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80072ea:	7dfa      	ldrb	r2, [r7, #23]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	32ae      	adds	r2, #174	@ 0xae
 80072f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	7afa      	ldrb	r2, [r7, #11]
 80072f8:	4611      	mov	r1, r2
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	4798      	blx	r3
 80072fe:	4603      	mov	r3, r0
 8007300:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007302:	7dbb      	ldrb	r3, [r7, #22]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d001      	beq.n	800730c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007308:	7dbb      	ldrb	r3, [r7, #22]
 800730a:	e000      	b.n	800730e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2200      	movs	r2, #0
 800733c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800734e:	2b00      	cmp	r3, #0
 8007350:	d014      	beq.n	800737c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00e      	beq.n	800737c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	6852      	ldr	r2, [r2, #4]
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	4611      	mov	r1, r2
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800737c:	2340      	movs	r3, #64	@ 0x40
 800737e:	2200      	movs	r2, #0
 8007380:	2100      	movs	r1, #0
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f001 fbf9 	bl	8008b7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2240      	movs	r2, #64	@ 0x40
 8007394:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007398:	2340      	movs	r3, #64	@ 0x40
 800739a:	2200      	movs	r2, #0
 800739c:	2180      	movs	r1, #128	@ 0x80
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f001 fbeb 	bl	8008b7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2201      	movs	r2, #1
 80073a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2240      	movs	r2, #64	@ 0x40
 80073ae:	621a      	str	r2, [r3, #32]

  return ret;
 80073b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	78fa      	ldrb	r2, [r7, #3]
 80073ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	370c      	adds	r7, #12
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80073da:	b480      	push	{r7}
 80073dc:	b083      	sub	sp, #12
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d006      	beq.n	80073fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073f4:	b2da      	uxtb	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2204      	movs	r2, #4
 8007400:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007412:	b480      	push	{r7}
 8007414:	b083      	sub	sp, #12
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b04      	cmp	r3, #4
 8007424:	d106      	bne.n	8007434 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800742c:	b2da      	uxtb	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr

08007442 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007442:	b580      	push	{r7, lr}
 8007444:	b082      	sub	sp, #8
 8007446:	af00      	add	r7, sp, #0
 8007448:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b03      	cmp	r3, #3
 8007454:	d110      	bne.n	8007478 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00b      	beq.n	8007478 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	32ae      	adds	r2, #174	@ 0xae
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e01c      	b.n	80074de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d115      	bne.n	80074dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	32ae      	adds	r2, #174	@ 0xae
 80074ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074be:	6a1b      	ldr	r3, [r3, #32]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	32ae      	adds	r2, #174	@ 0xae
 80074ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	4611      	mov	r1, r2
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b082      	sub	sp, #8
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
 80074ee:	460b      	mov	r3, r1
 80074f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	32ae      	adds	r2, #174	@ 0xae
 80074fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007504:	2303      	movs	r3, #3
 8007506:	e01c      	b.n	8007542 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b03      	cmp	r3, #3
 8007512:	d115      	bne.n	8007540 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	32ae      	adds	r2, #174	@ 0xae
 800751e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	32ae      	adds	r2, #174	@ 0xae
 8007532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007538:	78fa      	ldrb	r2, [r7, #3]
 800753a:	4611      	mov	r1, r2
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800754a:	b480      	push	{r7}
 800754c:	b083      	sub	sp, #12
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007552:	2300      	movs	r3, #0
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800757a:	2b00      	cmp	r3, #0
 800757c:	d00e      	beq.n	800759c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6852      	ldr	r2, [r2, #4]
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	4611      	mov	r1, r2
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	4798      	blx	r3
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007598:	2303      	movs	r3, #3
 800759a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800759c:	7bfb      	ldrb	r3, [r7, #15]
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b083      	sub	sp, #12
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	370c      	adds	r7, #12
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b086      	sub	sp, #24
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	885b      	ldrh	r3, [r3, #2]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	7812      	ldrb	r2, [r2, #0]
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d91f      	bls.n	8007640 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007606:	e013      	b.n	8007630 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007608:	f107 030a 	add.w	r3, r7, #10
 800760c:	4619      	mov	r1, r3
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	f000 f81b 	bl	800764a <USBD_GetNextDesc>
 8007614:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	785b      	ldrb	r3, [r3, #1]
 800761a:	2b05      	cmp	r3, #5
 800761c:	d108      	bne.n	8007630 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	789b      	ldrb	r3, [r3, #2]
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	429a      	cmp	r2, r3
 800762a:	d008      	beq.n	800763e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800762c:	2300      	movs	r3, #0
 800762e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	885b      	ldrh	r3, [r3, #2]
 8007634:	b29a      	uxth	r2, r3
 8007636:	897b      	ldrh	r3, [r7, #10]
 8007638:	429a      	cmp	r2, r3
 800763a:	d8e5      	bhi.n	8007608 <USBD_GetEpDesc+0x2e>
 800763c:	e000      	b.n	8007640 <USBD_GetEpDesc+0x66>
          break;
 800763e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007640:	693b      	ldr	r3, [r7, #16]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	7812      	ldrb	r2, [r2, #0]
 8007660:	4413      	add	r3, r2
 8007662:	b29a      	uxth	r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	461a      	mov	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4413      	add	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007674:	68fb      	ldr	r3, [r7, #12]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007682:	b480      	push	{r7}
 8007684:	b087      	sub	sp, #28
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	3301      	adds	r3, #1
 8007698:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076a0:	8a3b      	ldrh	r3, [r7, #16]
 80076a2:	021b      	lsls	r3, r3, #8
 80076a4:	b21a      	sxth	r2, r3
 80076a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	b21b      	sxth	r3, r3
 80076ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076b0:	89fb      	ldrh	r3, [r7, #14]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
	...

080076c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076d6:	2b40      	cmp	r3, #64	@ 0x40
 80076d8:	d005      	beq.n	80076e6 <USBD_StdDevReq+0x26>
 80076da:	2b40      	cmp	r3, #64	@ 0x40
 80076dc:	d857      	bhi.n	800778e <USBD_StdDevReq+0xce>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00f      	beq.n	8007702 <USBD_StdDevReq+0x42>
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d153      	bne.n	800778e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32ae      	adds	r2, #174	@ 0xae
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	6839      	ldr	r1, [r7, #0]
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	4798      	blx	r3
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]
      break;
 8007700:	e04a      	b.n	8007798 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	785b      	ldrb	r3, [r3, #1]
 8007706:	2b09      	cmp	r3, #9
 8007708:	d83b      	bhi.n	8007782 <USBD_StdDevReq+0xc2>
 800770a:	a201      	add	r2, pc, #4	@ (adr r2, 8007710 <USBD_StdDevReq+0x50>)
 800770c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007710:	08007765 	.word	0x08007765
 8007714:	08007779 	.word	0x08007779
 8007718:	08007783 	.word	0x08007783
 800771c:	0800776f 	.word	0x0800776f
 8007720:	08007783 	.word	0x08007783
 8007724:	08007743 	.word	0x08007743
 8007728:	08007739 	.word	0x08007739
 800772c:	08007783 	.word	0x08007783
 8007730:	0800775b 	.word	0x0800775b
 8007734:	0800774d 	.word	0x0800774d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa3c 	bl	8007bb8 <USBD_GetDescriptor>
          break;
 8007740:	e024      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fba1 	bl	8007e8c <USBD_SetAddress>
          break;
 800774a:	e01f      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fbe0 	bl	8007f14 <USBD_SetConfig>
 8007754:	4603      	mov	r3, r0
 8007756:	73fb      	strb	r3, [r7, #15]
          break;
 8007758:	e018      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fc83 	bl	8008068 <USBD_GetConfig>
          break;
 8007762:	e013      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fcb4 	bl	80080d4 <USBD_GetStatus>
          break;
 800776c:	e00e      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fce3 	bl	800813c <USBD_SetFeature>
          break;
 8007776:	e009      	b.n	800778c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fd07 	bl	800818e <USBD_ClrFeature>
          break;
 8007780:	e004      	b.n	800778c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fd5e 	bl	8008246 <USBD_CtlError>
          break;
 800778a:	bf00      	nop
      }
      break;
 800778c:	e004      	b.n	8007798 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800778e:	6839      	ldr	r1, [r7, #0]
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fd58 	bl	8008246 <USBD_CtlError>
      break;
 8007796:	bf00      	nop
  }

  return ret;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077ba:	2b40      	cmp	r3, #64	@ 0x40
 80077bc:	d005      	beq.n	80077ca <USBD_StdItfReq+0x26>
 80077be:	2b40      	cmp	r3, #64	@ 0x40
 80077c0:	d852      	bhi.n	8007868 <USBD_StdItfReq+0xc4>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <USBD_StdItfReq+0x26>
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d14e      	bne.n	8007868 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	3b01      	subs	r3, #1
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d840      	bhi.n	800785a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	889b      	ldrh	r3, [r3, #4]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d836      	bhi.n	8007850 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	889b      	ldrh	r3, [r3, #4]
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fedb 	bl	80075a6 <USBD_CoreFindIF>
 80077f0:	4603      	mov	r3, r0
 80077f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2bff      	cmp	r3, #255	@ 0xff
 80077f8:	d01d      	beq.n	8007836 <USBD_StdItfReq+0x92>
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d11a      	bne.n	8007836 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007800:	7bba      	ldrb	r2, [r7, #14]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	32ae      	adds	r2, #174	@ 0xae
 8007806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d00f      	beq.n	8007830 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007810:	7bba      	ldrb	r2, [r7, #14]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007818:	7bba      	ldrb	r2, [r7, #14]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	32ae      	adds	r2, #174	@ 0xae
 800781e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800782e:	e004      	b.n	800783a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007830:	2303      	movs	r3, #3
 8007832:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007834:	e001      	b.n	800783a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007836:	2303      	movs	r3, #3
 8007838:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	88db      	ldrh	r3, [r3, #6]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d110      	bne.n	8007864 <USBD_StdItfReq+0xc0>
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10d      	bne.n	8007864 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fdc7 	bl	80083dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800784e:	e009      	b.n	8007864 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fcf7 	bl	8008246 <USBD_CtlError>
          break;
 8007858:	e004      	b.n	8007864 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800785a:	6839      	ldr	r1, [r7, #0]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fcf2 	bl	8008246 <USBD_CtlError>
          break;
 8007862:	e000      	b.n	8007866 <USBD_StdItfReq+0xc2>
          break;
 8007864:	bf00      	nop
      }
      break;
 8007866:	e004      	b.n	8007872 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fceb 	bl	8008246 <USBD_CtlError>
      break;
 8007870:	bf00      	nop
  }

  return ret;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b084      	sub	sp, #16
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	889b      	ldrh	r3, [r3, #4]
 800788e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007898:	2b40      	cmp	r3, #64	@ 0x40
 800789a:	d007      	beq.n	80078ac <USBD_StdEPReq+0x30>
 800789c:	2b40      	cmp	r3, #64	@ 0x40
 800789e:	f200 817f 	bhi.w	8007ba0 <USBD_StdEPReq+0x324>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d02a      	beq.n	80078fc <USBD_StdEPReq+0x80>
 80078a6:	2b20      	cmp	r3, #32
 80078a8:	f040 817a 	bne.w	8007ba0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f7ff fe85 	bl	80075c0 <USBD_CoreFindEP>
 80078b6:	4603      	mov	r3, r0
 80078b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078ba:	7b7b      	ldrb	r3, [r7, #13]
 80078bc:	2bff      	cmp	r3, #255	@ 0xff
 80078be:	f000 8174 	beq.w	8007baa <USBD_StdEPReq+0x32e>
 80078c2:	7b7b      	ldrb	r3, [r7, #13]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f040 8170 	bne.w	8007baa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80078ca:	7b7a      	ldrb	r2, [r7, #13]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80078d2:	7b7a      	ldrb	r2, [r7, #13]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	32ae      	adds	r2, #174	@ 0xae
 80078d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8163 	beq.w	8007baa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80078e4:	7b7a      	ldrb	r2, [r7, #13]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32ae      	adds	r2, #174	@ 0xae
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	4798      	blx	r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80078fa:	e156      	b.n	8007baa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	785b      	ldrb	r3, [r3, #1]
 8007900:	2b03      	cmp	r3, #3
 8007902:	d008      	beq.n	8007916 <USBD_StdEPReq+0x9a>
 8007904:	2b03      	cmp	r3, #3
 8007906:	f300 8145 	bgt.w	8007b94 <USBD_StdEPReq+0x318>
 800790a:	2b00      	cmp	r3, #0
 800790c:	f000 809b 	beq.w	8007a46 <USBD_StdEPReq+0x1ca>
 8007910:	2b01      	cmp	r3, #1
 8007912:	d03c      	beq.n	800798e <USBD_StdEPReq+0x112>
 8007914:	e13e      	b.n	8007b94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800791c:	b2db      	uxtb	r3, r3
 800791e:	2b02      	cmp	r3, #2
 8007920:	d002      	beq.n	8007928 <USBD_StdEPReq+0xac>
 8007922:	2b03      	cmp	r3, #3
 8007924:	d016      	beq.n	8007954 <USBD_StdEPReq+0xd8>
 8007926:	e02c      	b.n	8007982 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00d      	beq.n	800794a <USBD_StdEPReq+0xce>
 800792e:	7bbb      	ldrb	r3, [r7, #14]
 8007930:	2b80      	cmp	r3, #128	@ 0x80
 8007932:	d00a      	beq.n	800794a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007934:	7bbb      	ldrb	r3, [r7, #14]
 8007936:	4619      	mov	r1, r3
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f001 f963 	bl	8008c04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800793e:	2180      	movs	r1, #128	@ 0x80
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 f95f 	bl	8008c04 <USBD_LL_StallEP>
 8007946:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007948:	e020      	b.n	800798c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800794a:	6839      	ldr	r1, [r7, #0]
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f000 fc7a 	bl	8008246 <USBD_CtlError>
              break;
 8007952:	e01b      	b.n	800798c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10e      	bne.n	800797a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800795c:	7bbb      	ldrb	r3, [r7, #14]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00b      	beq.n	800797a <USBD_StdEPReq+0xfe>
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	2b80      	cmp	r3, #128	@ 0x80
 8007966:	d008      	beq.n	800797a <USBD_StdEPReq+0xfe>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d104      	bne.n	800797a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	4619      	mov	r1, r3
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f001 f945 	bl	8008c04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fd2e 	bl	80083dc <USBD_CtlSendStatus>

              break;
 8007980:	e004      	b.n	800798c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fc5e 	bl	8008246 <USBD_CtlError>
              break;
 800798a:	bf00      	nop
          }
          break;
 800798c:	e107      	b.n	8007b9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b02      	cmp	r3, #2
 8007998:	d002      	beq.n	80079a0 <USBD_StdEPReq+0x124>
 800799a:	2b03      	cmp	r3, #3
 800799c:	d016      	beq.n	80079cc <USBD_StdEPReq+0x150>
 800799e:	e04b      	b.n	8007a38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00d      	beq.n	80079c2 <USBD_StdEPReq+0x146>
 80079a6:	7bbb      	ldrb	r3, [r7, #14]
 80079a8:	2b80      	cmp	r3, #128	@ 0x80
 80079aa:	d00a      	beq.n	80079c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 f927 	bl	8008c04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079b6:	2180      	movs	r1, #128	@ 0x80
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f001 f923 	bl	8008c04 <USBD_LL_StallEP>
 80079be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079c0:	e040      	b.n	8007a44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fc3e 	bl	8008246 <USBD_CtlError>
              break;
 80079ca:	e03b      	b.n	8007a44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	885b      	ldrh	r3, [r3, #2]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d136      	bne.n	8007a42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 f92d 	bl	8008c42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fcf7 	bl	80083dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	4619      	mov	r1, r3
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7ff fde4 	bl	80075c0 <USBD_CoreFindEP>
 80079f8:	4603      	mov	r3, r0
 80079fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079fc:	7b7b      	ldrb	r3, [r7, #13]
 80079fe:	2bff      	cmp	r3, #255	@ 0xff
 8007a00:	d01f      	beq.n	8007a42 <USBD_StdEPReq+0x1c6>
 8007a02:	7b7b      	ldrb	r3, [r7, #13]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d11c      	bne.n	8007a42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a08:	7b7a      	ldrb	r2, [r7, #13]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a10:	7b7a      	ldrb	r2, [r7, #13]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	32ae      	adds	r2, #174	@ 0xae
 8007a16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d010      	beq.n	8007a42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a20:	7b7a      	ldrb	r2, [r7, #13]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	32ae      	adds	r2, #174	@ 0xae
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	6839      	ldr	r1, [r7, #0]
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
 8007a32:	4603      	mov	r3, r0
 8007a34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a36:	e004      	b.n	8007a42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a38:	6839      	ldr	r1, [r7, #0]
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fc03 	bl	8008246 <USBD_CtlError>
              break;
 8007a40:	e000      	b.n	8007a44 <USBD_StdEPReq+0x1c8>
              break;
 8007a42:	bf00      	nop
          }
          break;
 8007a44:	e0ab      	b.n	8007b9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d002      	beq.n	8007a58 <USBD_StdEPReq+0x1dc>
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d032      	beq.n	8007abc <USBD_StdEPReq+0x240>
 8007a56:	e097      	b.n	8007b88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <USBD_StdEPReq+0x1f2>
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b80      	cmp	r3, #128	@ 0x80
 8007a62:	d004      	beq.n	8007a6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fbed 	bl	8008246 <USBD_CtlError>
                break;
 8007a6c:	e091      	b.n	8007b92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	da0b      	bge.n	8007a8e <USBD_StdEPReq+0x212>
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	3310      	adds	r3, #16
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	e00b      	b.n	8007aa6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a94:	4613      	mov	r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	4413      	add	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	2202      	movs	r2, #2
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fc37 	bl	8008328 <USBD_CtlSendData>
              break;
 8007aba:	e06a      	b.n	8007b92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007abc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	da11      	bge.n	8007ae8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	f003 020f 	and.w	r2, r3, #15
 8007aca:	6879      	ldr	r1, [r7, #4]
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	440b      	add	r3, r1
 8007ad6:	3324      	adds	r3, #36	@ 0x24
 8007ad8:	881b      	ldrh	r3, [r3, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d117      	bne.n	8007b0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fbb0 	bl	8008246 <USBD_CtlError>
                  break;
 8007ae6:	e054      	b.n	8007b92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ae8:	7bbb      	ldrb	r3, [r7, #14]
 8007aea:	f003 020f 	and.w	r2, r3, #15
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007afe:	881b      	ldrh	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d104      	bne.n	8007b0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fb9d 	bl	8008246 <USBD_CtlError>
                  break;
 8007b0c:	e041      	b.n	8007b92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	da0b      	bge.n	8007b2e <USBD_StdEPReq+0x2b2>
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	3310      	adds	r3, #16
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	e00b      	b.n	8007b46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b2e:	7bbb      	ldrb	r3, [r7, #14]
 8007b30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b34:	4613      	mov	r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	4413      	add	r3, r2
 8007b44:	3304      	adds	r3, #4
 8007b46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d002      	beq.n	8007b54 <USBD_StdEPReq+0x2d8>
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b80      	cmp	r3, #128	@ 0x80
 8007b52:	d103      	bne.n	8007b5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	2200      	movs	r2, #0
 8007b58:	601a      	str	r2, [r3, #0]
 8007b5a:	e00e      	b.n	8007b7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007b5c:	7bbb      	ldrb	r3, [r7, #14]
 8007b5e:	4619      	mov	r1, r3
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f001 f88d 	bl	8008c80 <USBD_LL_IsStallEP>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	e002      	b.n	8007b7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	2200      	movs	r2, #0
 8007b78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fbd1 	bl	8008328 <USBD_CtlSendData>
              break;
 8007b86:	e004      	b.n	8007b92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fb5b 	bl	8008246 <USBD_CtlError>
              break;
 8007b90:	bf00      	nop
          }
          break;
 8007b92:	e004      	b.n	8007b9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007b94:	6839      	ldr	r1, [r7, #0]
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fb55 	bl	8008246 <USBD_CtlError>
          break;
 8007b9c:	bf00      	nop
      }
      break;
 8007b9e:	e005      	b.n	8007bac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007ba0:	6839      	ldr	r1, [r7, #0]
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fb4f 	bl	8008246 <USBD_CtlError>
      break;
 8007ba8:	e000      	b.n	8007bac <USBD_StdEPReq+0x330>
      break;
 8007baa:	bf00      	nop
  }

  return ret;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
	...

08007bb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	885b      	ldrh	r3, [r3, #2]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	3b01      	subs	r3, #1
 8007bd8:	2b06      	cmp	r3, #6
 8007bda:	f200 8128 	bhi.w	8007e2e <USBD_GetDescriptor+0x276>
 8007bde:	a201      	add	r2, pc, #4	@ (adr r2, 8007be4 <USBD_GetDescriptor+0x2c>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c01 	.word	0x08007c01
 8007be8:	08007c19 	.word	0x08007c19
 8007bec:	08007c59 	.word	0x08007c59
 8007bf0:	08007e2f 	.word	0x08007e2f
 8007bf4:	08007e2f 	.word	0x08007e2f
 8007bf8:	08007dcf 	.word	0x08007dcf
 8007bfc:	08007dfb 	.word	0x08007dfb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	7c12      	ldrb	r2, [r2, #16]
 8007c0c:	f107 0108 	add.w	r1, r7, #8
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	60f8      	str	r0, [r7, #12]
      break;
 8007c16:	e112      	b.n	8007e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7c1b      	ldrb	r3, [r3, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10d      	bne.n	8007c3c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c28:	f107 0208 	add.w	r2, r7, #8
 8007c2c:	4610      	mov	r0, r2
 8007c2e:	4798      	blx	r3
 8007c30:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	3301      	adds	r3, #1
 8007c36:	2202      	movs	r2, #2
 8007c38:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c3a:	e100      	b.n	8007e3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	f107 0208 	add.w	r2, r7, #8
 8007c48:	4610      	mov	r0, r2
 8007c4a:	4798      	blx	r3
 8007c4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	3301      	adds	r3, #1
 8007c52:	2202      	movs	r2, #2
 8007c54:	701a      	strb	r2, [r3, #0]
      break;
 8007c56:	e0f2      	b.n	8007e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	885b      	ldrh	r3, [r3, #2]
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b05      	cmp	r3, #5
 8007c60:	f200 80ac 	bhi.w	8007dbc <USBD_GetDescriptor+0x204>
 8007c64:	a201      	add	r2, pc, #4	@ (adr r2, 8007c6c <USBD_GetDescriptor+0xb4>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c85 	.word	0x08007c85
 8007c70:	08007cb9 	.word	0x08007cb9
 8007c74:	08007ced 	.word	0x08007ced
 8007c78:	08007d21 	.word	0x08007d21
 8007c7c:	08007d55 	.word	0x08007d55
 8007c80:	08007d89 	.word	0x08007d89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	7c12      	ldrb	r2, [r2, #16]
 8007c9c:	f107 0108 	add.w	r1, r7, #8
 8007ca0:	4610      	mov	r0, r2
 8007ca2:	4798      	blx	r3
 8007ca4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca6:	e091      	b.n	8007dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca8:	6839      	ldr	r1, [r7, #0]
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 facb 	bl	8008246 <USBD_CtlError>
            err++;
 8007cb0:	7afb      	ldrb	r3, [r7, #11]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb6:	e089      	b.n	8007dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	7c12      	ldrb	r2, [r2, #16]
 8007cd0:	f107 0108 	add.w	r1, r7, #8
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cda:	e077      	b.n	8007dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fab1 	bl	8008246 <USBD_CtlError>
            err++;
 8007ce4:	7afb      	ldrb	r3, [r7, #11]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	72fb      	strb	r3, [r7, #11]
          break;
 8007cea:	e06f      	b.n	8007dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d00b      	beq.n	8007d10 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	7c12      	ldrb	r2, [r2, #16]
 8007d04:	f107 0108 	add.w	r1, r7, #8
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4798      	blx	r3
 8007d0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0e:	e05d      	b.n	8007dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d10:	6839      	ldr	r1, [r7, #0]
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 fa97 	bl	8008246 <USBD_CtlError>
            err++;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1e:	e055      	b.n	8007dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d00b      	beq.n	8007d44 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	7c12      	ldrb	r2, [r2, #16]
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	4798      	blx	r3
 8007d40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d42:	e043      	b.n	8007dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d44:	6839      	ldr	r1, [r7, #0]
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 fa7d 	bl	8008246 <USBD_CtlError>
            err++;
 8007d4c:	7afb      	ldrb	r3, [r7, #11]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	72fb      	strb	r3, [r7, #11]
          break;
 8007d52:	e03b      	b.n	8007dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00b      	beq.n	8007d78 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7c12      	ldrb	r2, [r2, #16]
 8007d6c:	f107 0108 	add.w	r1, r7, #8
 8007d70:	4610      	mov	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d76:	e029      	b.n	8007dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d78:	6839      	ldr	r1, [r7, #0]
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fa63 	bl	8008246 <USBD_CtlError>
            err++;
 8007d80:	7afb      	ldrb	r3, [r7, #11]
 8007d82:	3301      	adds	r3, #1
 8007d84:	72fb      	strb	r3, [r7, #11]
          break;
 8007d86:	e021      	b.n	8007dcc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	7c12      	ldrb	r2, [r2, #16]
 8007da0:	f107 0108 	add.w	r1, r7, #8
 8007da4:	4610      	mov	r0, r2
 8007da6:	4798      	blx	r3
 8007da8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007daa:	e00f      	b.n	8007dcc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dac:	6839      	ldr	r1, [r7, #0]
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 fa49 	bl	8008246 <USBD_CtlError>
            err++;
 8007db4:	7afb      	ldrb	r3, [r7, #11]
 8007db6:	3301      	adds	r3, #1
 8007db8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dba:	e007      	b.n	8007dcc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 fa41 	bl	8008246 <USBD_CtlError>
          err++;
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007dca:	bf00      	nop
      }
      break;
 8007dcc:	e037      	b.n	8007e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	7c1b      	ldrb	r3, [r3, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d109      	bne.n	8007dea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dde:	f107 0208 	add.w	r2, r7, #8
 8007de2:	4610      	mov	r0, r2
 8007de4:	4798      	blx	r3
 8007de6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de8:	e029      	b.n	8007e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fa2a 	bl	8008246 <USBD_CtlError>
        err++;
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	3301      	adds	r3, #1
 8007df6:	72fb      	strb	r3, [r7, #11]
      break;
 8007df8:	e021      	b.n	8007e3e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	7c1b      	ldrb	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d10d      	bne.n	8007e1e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e0a:	f107 0208 	add.w	r2, r7, #8
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4798      	blx	r3
 8007e12:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	2207      	movs	r2, #7
 8007e1a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e1c:	e00f      	b.n	8007e3e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e1e:	6839      	ldr	r1, [r7, #0]
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f000 fa10 	bl	8008246 <USBD_CtlError>
        err++;
 8007e26:	7afb      	ldrb	r3, [r7, #11]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e2c:	e007      	b.n	8007e3e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa08 	bl	8008246 <USBD_CtlError>
      err++;
 8007e36:	7afb      	ldrb	r3, [r7, #11]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	72fb      	strb	r3, [r7, #11]
      break;
 8007e3c:	bf00      	nop
  }

  if (err != 0U)
 8007e3e:	7afb      	ldrb	r3, [r7, #11]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11e      	bne.n	8007e82 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	88db      	ldrh	r3, [r3, #6]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d016      	beq.n	8007e7a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e4c:	893b      	ldrh	r3, [r7, #8]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d00e      	beq.n	8007e70 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	88da      	ldrh	r2, [r3, #6]
 8007e56:	893b      	ldrh	r3, [r7, #8]
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	bf28      	it	cs
 8007e5c:	4613      	movcs	r3, r2
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e62:	893b      	ldrh	r3, [r7, #8]
 8007e64:	461a      	mov	r2, r3
 8007e66:	68f9      	ldr	r1, [r7, #12]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fa5d 	bl	8008328 <USBD_CtlSendData>
 8007e6e:	e009      	b.n	8007e84 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007e70:	6839      	ldr	r1, [r7, #0]
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9e7 	bl	8008246 <USBD_CtlError>
 8007e78:	e004      	b.n	8007e84 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 faae 	bl	80083dc <USBD_CtlSendStatus>
 8007e80:	e000      	b.n	8007e84 <USBD_GetDescriptor+0x2cc>
    return;
 8007e82:	bf00      	nop
  }
}
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	bf00      	nop

08007e8c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	889b      	ldrh	r3, [r3, #4]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d131      	bne.n	8007f02 <USBD_SetAddress+0x76>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	88db      	ldrh	r3, [r3, #6]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d12d      	bne.n	8007f02 <USBD_SetAddress+0x76>
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	885b      	ldrh	r3, [r3, #2]
 8007eaa:	2b7f      	cmp	r3, #127	@ 0x7f
 8007eac:	d829      	bhi.n	8007f02 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	885b      	ldrh	r3, [r3, #2]
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007eb8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d104      	bne.n	8007ed0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f9bc 	bl	8008246 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ece:	e01d      	b.n	8007f0c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7bfa      	ldrb	r2, [r7, #15]
 8007ed4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 fefb 	bl	8008cd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa7a 	bl	80083dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d004      	beq.n	8007ef8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2202      	movs	r2, #2
 8007ef2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	e009      	b.n	8007f0c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f00:	e004      	b.n	8007f0c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f99e 	bl	8008246 <USBD_CtlError>
  }
}
 8007f0a:	bf00      	nop
 8007f0c:	bf00      	nop
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	b2da      	uxtb	r2, r3
 8007f28:	4b4e      	ldr	r3, [pc, #312]	@ (8008064 <USBD_SetConfig+0x150>)
 8007f2a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f2c:	4b4d      	ldr	r3, [pc, #308]	@ (8008064 <USBD_SetConfig+0x150>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d905      	bls.n	8007f40 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 f985 	bl	8008246 <USBD_CtlError>
    return USBD_FAIL;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e08c      	b.n	800805a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d002      	beq.n	8007f52 <USBD_SetConfig+0x3e>
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d029      	beq.n	8007fa4 <USBD_SetConfig+0x90>
 8007f50:	e075      	b.n	800803e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f52:	4b44      	ldr	r3, [pc, #272]	@ (8008064 <USBD_SetConfig+0x150>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d020      	beq.n	8007f9c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007f5a:	4b42      	ldr	r3, [pc, #264]	@ (8008064 <USBD_SetConfig+0x150>)
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f64:	4b3f      	ldr	r3, [pc, #252]	@ (8008064 <USBD_SetConfig+0x150>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7fe ffe3 	bl	8006f36 <USBD_SetClassConfig>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d008      	beq.n	8007f8c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f962 	bl	8008246 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007f8a:	e065      	b.n	8008058 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 fa25 	bl	80083dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2203      	movs	r2, #3
 8007f96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f9a:	e05d      	b.n	8008058 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fa1d 	bl	80083dc <USBD_CtlSendStatus>
      break;
 8007fa2:	e059      	b.n	8008058 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8008064 <USBD_SetConfig+0x150>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d112      	bne.n	8007fd2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007fb4:	4b2b      	ldr	r3, [pc, #172]	@ (8008064 <USBD_SetConfig+0x150>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007fbe:	4b29      	ldr	r3, [pc, #164]	@ (8008064 <USBD_SetConfig+0x150>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f7fe ffd2 	bl	8006f6e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fa06 	bl	80083dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fd0:	e042      	b.n	8008058 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007fd2:	4b24      	ldr	r3, [pc, #144]	@ (8008064 <USBD_SetConfig+0x150>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d02a      	beq.n	8008036 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7fe ffc0 	bl	8006f6e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007fee:	4b1d      	ldr	r3, [pc, #116]	@ (8008064 <USBD_SetConfig+0x150>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8008064 <USBD_SetConfig+0x150>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f7fe ff99 	bl	8006f36 <USBD_SetClassConfig>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00f      	beq.n	800802e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800800e:	6839      	ldr	r1, [r7, #0]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 f918 	bl	8008246 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7fe ffa5 	bl	8006f6e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800802c:	e014      	b.n	8008058 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f9d4 	bl	80083dc <USBD_CtlSendStatus>
      break;
 8008034:	e010      	b.n	8008058 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f9d0 	bl	80083dc <USBD_CtlSendStatus>
      break;
 800803c:	e00c      	b.n	8008058 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800803e:	6839      	ldr	r1, [r7, #0]
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f900 	bl	8008246 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008046:	4b07      	ldr	r3, [pc, #28]	@ (8008064 <USBD_SetConfig+0x150>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7fe ff8e 	bl	8006f6e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008052:	2303      	movs	r3, #3
 8008054:	73fb      	strb	r3, [r7, #15]
      break;
 8008056:	bf00      	nop
  }

  return ret;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	200008c0 	.word	0x200008c0

08008068 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	88db      	ldrh	r3, [r3, #6]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d004      	beq.n	8008084 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800807a:	6839      	ldr	r1, [r7, #0]
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 f8e2 	bl	8008246 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008082:	e023      	b.n	80080cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800808a:	b2db      	uxtb	r3, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	dc02      	bgt.n	8008096 <USBD_GetConfig+0x2e>
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc03      	bgt.n	800809c <USBD_GetConfig+0x34>
 8008094:	e015      	b.n	80080c2 <USBD_GetConfig+0x5a>
 8008096:	2b03      	cmp	r3, #3
 8008098:	d00b      	beq.n	80080b2 <USBD_GetConfig+0x4a>
 800809a:	e012      	b.n	80080c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	3308      	adds	r3, #8
 80080a6:	2201      	movs	r2, #1
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f93c 	bl	8008328 <USBD_CtlSendData>
        break;
 80080b0:	e00c      	b.n	80080cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3304      	adds	r3, #4
 80080b6:	2201      	movs	r2, #1
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f934 	bl	8008328 <USBD_CtlSendData>
        break;
 80080c0:	e004      	b.n	80080cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f8be 	bl	8008246 <USBD_CtlError>
        break;
 80080ca:	bf00      	nop
}
 80080cc:	bf00      	nop
 80080ce:	3708      	adds	r7, #8
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	3b01      	subs	r3, #1
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d81e      	bhi.n	800812a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	88db      	ldrh	r3, [r3, #6]
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	d004      	beq.n	80080fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80080f4:	6839      	ldr	r1, [r7, #0]
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f8a5 	bl	8008246 <USBD_CtlError>
        break;
 80080fc:	e01a      	b.n	8008134 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f043 0202 	orr.w	r2, r3, #2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	330c      	adds	r3, #12
 800811e:	2202      	movs	r2, #2
 8008120:	4619      	mov	r1, r3
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f900 	bl	8008328 <USBD_CtlSendData>
      break;
 8008128:	e004      	b.n	8008134 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800812a:	6839      	ldr	r1, [r7, #0]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f000 f88a 	bl	8008246 <USBD_CtlError>
      break;
 8008132:	bf00      	nop
  }
}
 8008134:	bf00      	nop
 8008136:	3708      	adds	r7, #8
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}

0800813c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	885b      	ldrh	r3, [r3, #2]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d107      	bne.n	800815e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2201      	movs	r2, #1
 8008152:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f940 	bl	80083dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800815c:	e013      	b.n	8008186 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	885b      	ldrh	r3, [r3, #2]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d10b      	bne.n	800817e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	889b      	ldrh	r3, [r3, #4]
 800816a:	0a1b      	lsrs	r3, r3, #8
 800816c:	b29b      	uxth	r3, r3
 800816e:	b2da      	uxtb	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f930 	bl	80083dc <USBD_CtlSendStatus>
}
 800817c:	e003      	b.n	8008186 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f860 	bl	8008246 <USBD_CtlError>
}
 8008186:	bf00      	nop
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
 8008196:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	3b01      	subs	r3, #1
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	d80b      	bhi.n	80081be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	885b      	ldrh	r3, [r3, #2]
 80081aa:	2b01      	cmp	r3, #1
 80081ac:	d10c      	bne.n	80081c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f000 f910 	bl	80083dc <USBD_CtlSendStatus>
      }
      break;
 80081bc:	e004      	b.n	80081c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f000 f840 	bl	8008246 <USBD_CtlError>
      break;
 80081c6:	e000      	b.n	80081ca <USBD_ClrFeature+0x3c>
      break;
 80081c8:	bf00      	nop
  }
}
 80081ca:	bf00      	nop
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
 80081da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	781a      	ldrb	r2, [r3, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	3301      	adds	r3, #1
 80081ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	781a      	ldrb	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f7ff fa40 	bl	8007682 <SWAPBYTE>
 8008202:	4603      	mov	r3, r0
 8008204:	461a      	mov	r2, r3
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	3301      	adds	r3, #1
 800820e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f7ff fa33 	bl	8007682 <SWAPBYTE>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3301      	adds	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f7ff fa26 	bl	8007682 <SWAPBYTE>
 8008236:	4603      	mov	r3, r0
 8008238:	461a      	mov	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	80da      	strh	r2, [r3, #6]
}
 800823e:	bf00      	nop
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008250:	2180      	movs	r1, #128	@ 0x80
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fcd6 	bl	8008c04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008258:	2100      	movs	r1, #0
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fcd2 	bl	8008c04 <USBD_LL_StallEP>
}
 8008260:	bf00      	nop
 8008262:	3708      	adds	r7, #8
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b086      	sub	sp, #24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d036      	beq.n	80082ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008282:	6938      	ldr	r0, [r7, #16]
 8008284:	f000 f836 	bl	80082f4 <USBD_GetLen>
 8008288:	4603      	mov	r3, r0
 800828a:	3301      	adds	r3, #1
 800828c:	b29b      	uxth	r3, r3
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	b29a      	uxth	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008296:	7dfb      	ldrb	r3, [r7, #23]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	4413      	add	r3, r2
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	7812      	ldrb	r2, [r2, #0]
 80082a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	3301      	adds	r3, #1
 80082a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	4413      	add	r3, r2
 80082ae:	2203      	movs	r2, #3
 80082b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	3301      	adds	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082b8:	e013      	b.n	80082e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082ba:	7dfb      	ldrb	r3, [r7, #23]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	4413      	add	r3, r2
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	7812      	ldrb	r2, [r2, #0]
 80082c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	3301      	adds	r3, #1
 80082ca:	613b      	str	r3, [r7, #16]
    idx++;
 80082cc:	7dfb      	ldrb	r3, [r7, #23]
 80082ce:	3301      	adds	r3, #1
 80082d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	4413      	add	r3, r2
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
    idx++;
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
 80082de:	3301      	adds	r3, #1
 80082e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e7      	bne.n	80082ba <USBD_GetString+0x52>
 80082ea:	e000      	b.n	80082ee <USBD_GetString+0x86>
    return;
 80082ec:	bf00      	nop
  }
}
 80082ee:	3718      	adds	r7, #24
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008304:	e005      	b.n	8008312 <USBD_GetLen+0x1e>
  {
    len++;
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	3301      	adds	r3, #1
 800830a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	3301      	adds	r3, #1
 8008310:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1f5      	bne.n	8008306 <USBD_GetLen+0x12>
  }

  return len;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2202      	movs	r2, #2
 8008338:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	2100      	movs	r1, #0
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f000 fce1 	bl	8008d16 <USBD_LL_Transmit>

  return USBD_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}

0800835e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	60b9      	str	r1, [r7, #8]
 8008368:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	2100      	movs	r1, #0
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 fcd0 	bl	8008d16 <USBD_LL_Transmit>

  return USBD_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	2203      	movs	r2, #3
 8008390:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	2100      	movs	r1, #0
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fcd4 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	60f8      	str	r0, [r7, #12]
 80083c2:	60b9      	str	r1, [r7, #8]
 80083c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	2100      	movs	r1, #0
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f000 fcc3 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2204      	movs	r2, #4
 80083e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083ec:	2300      	movs	r3, #0
 80083ee:	2200      	movs	r2, #0
 80083f0:	2100      	movs	r1, #0
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fc8f 	bl	8008d16 <USBD_LL_Transmit>

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2205      	movs	r2, #5
 800840e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008412:	2300      	movs	r3, #0
 8008414:	2200      	movs	r2, #0
 8008416:	2100      	movs	r1, #0
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fc9d 	bl	8008d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800842c:	2200      	movs	r2, #0
 800842e:	4912      	ldr	r1, [pc, #72]	@ (8008478 <MX_USB_DEVICE_Init+0x50>)
 8008430:	4812      	ldr	r0, [pc, #72]	@ (800847c <MX_USB_DEVICE_Init+0x54>)
 8008432:	f7fe fd03 	bl	8006e3c <USBD_Init>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800843c:	f7f8 ff82 	bl	8001344 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008440:	490f      	ldr	r1, [pc, #60]	@ (8008480 <MX_USB_DEVICE_Init+0x58>)
 8008442:	480e      	ldr	r0, [pc, #56]	@ (800847c <MX_USB_DEVICE_Init+0x54>)
 8008444:	f7fe fd2a 	bl	8006e9c <USBD_RegisterClass>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800844e:	f7f8 ff79 	bl	8001344 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008452:	490c      	ldr	r1, [pc, #48]	@ (8008484 <MX_USB_DEVICE_Init+0x5c>)
 8008454:	4809      	ldr	r0, [pc, #36]	@ (800847c <MX_USB_DEVICE_Init+0x54>)
 8008456:	f7fe fc21 	bl	8006c9c <USBD_CDC_RegisterInterface>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008460:	f7f8 ff70 	bl	8001344 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008464:	4805      	ldr	r0, [pc, #20]	@ (800847c <MX_USB_DEVICE_Init+0x54>)
 8008466:	f7fe fd4f 	bl	8006f08 <USBD_Start>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d001      	beq.n	8008474 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008470:	f7f8 ff68 	bl	8001344 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008474:	bf00      	nop
 8008476:	bd80      	pop	{r7, pc}
 8008478:	200000b0 	.word	0x200000b0
 800847c:	200008c4 	.word	0x200008c4
 8008480:	2000001c 	.word	0x2000001c
 8008484:	2000009c 	.word	0x2000009c

08008488 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800848c:	2200      	movs	r2, #0
 800848e:	4905      	ldr	r1, [pc, #20]	@ (80084a4 <CDC_Init_FS+0x1c>)
 8008490:	4805      	ldr	r0, [pc, #20]	@ (80084a8 <CDC_Init_FS+0x20>)
 8008492:	f7fe fc1d 	bl	8006cd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008496:	4905      	ldr	r1, [pc, #20]	@ (80084ac <CDC_Init_FS+0x24>)
 8008498:	4803      	ldr	r0, [pc, #12]	@ (80084a8 <CDC_Init_FS+0x20>)
 800849a:	f7fe fc3b 	bl	8006d14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800849e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	200013a0 	.word	0x200013a0
 80084a8:	200008c4 	.word	0x200008c4
 80084ac:	20000ba0 	.word	0x20000ba0

080084b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	4603      	mov	r3, r0
 80084c8:	6039      	str	r1, [r7, #0]
 80084ca:	71fb      	strb	r3, [r7, #7]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	2b23      	cmp	r3, #35	@ 0x23
 80084d4:	d84a      	bhi.n	800856c <CDC_Control_FS+0xac>
 80084d6:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <CDC_Control_FS+0x1c>)
 80084d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084dc:	0800856d 	.word	0x0800856d
 80084e0:	0800856d 	.word	0x0800856d
 80084e4:	0800856d 	.word	0x0800856d
 80084e8:	0800856d 	.word	0x0800856d
 80084ec:	0800856d 	.word	0x0800856d
 80084f0:	0800856d 	.word	0x0800856d
 80084f4:	0800856d 	.word	0x0800856d
 80084f8:	0800856d 	.word	0x0800856d
 80084fc:	0800856d 	.word	0x0800856d
 8008500:	0800856d 	.word	0x0800856d
 8008504:	0800856d 	.word	0x0800856d
 8008508:	0800856d 	.word	0x0800856d
 800850c:	0800856d 	.word	0x0800856d
 8008510:	0800856d 	.word	0x0800856d
 8008514:	0800856d 	.word	0x0800856d
 8008518:	0800856d 	.word	0x0800856d
 800851c:	0800856d 	.word	0x0800856d
 8008520:	0800856d 	.word	0x0800856d
 8008524:	0800856d 	.word	0x0800856d
 8008528:	0800856d 	.word	0x0800856d
 800852c:	0800856d 	.word	0x0800856d
 8008530:	0800856d 	.word	0x0800856d
 8008534:	0800856d 	.word	0x0800856d
 8008538:	0800856d 	.word	0x0800856d
 800853c:	0800856d 	.word	0x0800856d
 8008540:	0800856d 	.word	0x0800856d
 8008544:	0800856d 	.word	0x0800856d
 8008548:	0800856d 	.word	0x0800856d
 800854c:	0800856d 	.word	0x0800856d
 8008550:	0800856d 	.word	0x0800856d
 8008554:	0800856d 	.word	0x0800856d
 8008558:	0800856d 	.word	0x0800856d
 800855c:	0800856d 	.word	0x0800856d
 8008560:	0800856d 	.word	0x0800856d
 8008564:	0800856d 	.word	0x0800856d
 8008568:	0800856d 	.word	0x0800856d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800856c:	bf00      	nop
  }

  return (USBD_OK);
 800856e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008570:	4618      	mov	r0, r3
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	4805      	ldr	r0, [pc, #20]	@ (80085a0 <CDC_Receive_FS+0x24>)
 800858a:	f7fe fbc3 	bl	8006d14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800858e:	4804      	ldr	r0, [pc, #16]	@ (80085a0 <CDC_Receive_FS+0x24>)
 8008590:	f7fe fc1e 	bl	8006dd0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008594:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	200008c4 	.word	0x200008c4

080085a4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80085b4:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <CDC_Transmit_FS+0x48>)
 80085b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80085ba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80085c6:	2301      	movs	r3, #1
 80085c8:	e00b      	b.n	80085e2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80085ca:	887b      	ldrh	r3, [r7, #2]
 80085cc:	461a      	mov	r2, r3
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	4806      	ldr	r0, [pc, #24]	@ (80085ec <CDC_Transmit_FS+0x48>)
 80085d2:	f7fe fb7d 	bl	8006cd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80085d6:	4805      	ldr	r0, [pc, #20]	@ (80085ec <CDC_Transmit_FS+0x48>)
 80085d8:	f7fe fbba 	bl	8006d50 <USBD_CDC_TransmitPacket>
 80085dc:	4603      	mov	r3, r0
 80085de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80085e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	200008c4 	.word	0x200008c4

080085f0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	4613      	mov	r3, r2
 80085fc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80085fe:	2300      	movs	r3, #0
 8008600:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008602:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008606:	4618      	mov	r0, r3
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr
	...

08008614 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	4603      	mov	r3, r0
 800861c:	6039      	str	r1, [r7, #0]
 800861e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	2212      	movs	r2, #18
 8008624:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008626:	4b03      	ldr	r3, [pc, #12]	@ (8008634 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008628:	4618      	mov	r0, r3
 800862a:	370c      	adds	r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr
 8008634:	200000cc 	.word	0x200000cc

08008638 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	4603      	mov	r3, r0
 8008640:	6039      	str	r1, [r7, #0]
 8008642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	2204      	movs	r2, #4
 8008648:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800864a:	4b03      	ldr	r3, [pc, #12]	@ (8008658 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	200000e0 	.word	0x200000e0

0800865c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	4603      	mov	r3, r0
 8008664:	6039      	str	r1, [r7, #0]
 8008666:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008668:	79fb      	ldrb	r3, [r7, #7]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d105      	bne.n	800867a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4907      	ldr	r1, [pc, #28]	@ (8008690 <USBD_FS_ProductStrDescriptor+0x34>)
 8008672:	4808      	ldr	r0, [pc, #32]	@ (8008694 <USBD_FS_ProductStrDescriptor+0x38>)
 8008674:	f7ff fdf8 	bl	8008268 <USBD_GetString>
 8008678:	e004      	b.n	8008684 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800867a:	683a      	ldr	r2, [r7, #0]
 800867c:	4904      	ldr	r1, [pc, #16]	@ (8008690 <USBD_FS_ProductStrDescriptor+0x34>)
 800867e:	4805      	ldr	r0, [pc, #20]	@ (8008694 <USBD_FS_ProductStrDescriptor+0x38>)
 8008680:	f7ff fdf2 	bl	8008268 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008684:	4b02      	ldr	r3, [pc, #8]	@ (8008690 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008686:	4618      	mov	r0, r3
 8008688:	3708      	adds	r7, #8
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20001ba0 	.word	0x20001ba0
 8008694:	0800e7b8 	.word	0x0800e7b8

08008698 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	6039      	str	r1, [r7, #0]
 80086a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80086a4:	683a      	ldr	r2, [r7, #0]
 80086a6:	4904      	ldr	r1, [pc, #16]	@ (80086b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80086a8:	4804      	ldr	r0, [pc, #16]	@ (80086bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80086aa:	f7ff fddd 	bl	8008268 <USBD_GetString>
  return USBD_StrDesc;
 80086ae:	4b02      	ldr	r3, [pc, #8]	@ (80086b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20001ba0 	.word	0x20001ba0
 80086bc:	0800e7d0 	.word	0x0800e7d0

080086c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	4603      	mov	r3, r0
 80086c8:	6039      	str	r1, [r7, #0]
 80086ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	221a      	movs	r2, #26
 80086d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086d2:	f000 f843 	bl	800875c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086d6:	4b02      	ldr	r3, [pc, #8]	@ (80086e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	200000e4 	.word	0x200000e4

080086e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	4603      	mov	r3, r0
 80086ec:	6039      	str	r1, [r7, #0]
 80086ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086f0:	79fb      	ldrb	r3, [r7, #7]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d105      	bne.n	8008702 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	4907      	ldr	r1, [pc, #28]	@ (8008718 <USBD_FS_ConfigStrDescriptor+0x34>)
 80086fa:	4808      	ldr	r0, [pc, #32]	@ (800871c <USBD_FS_ConfigStrDescriptor+0x38>)
 80086fc:	f7ff fdb4 	bl	8008268 <USBD_GetString>
 8008700:	e004      	b.n	800870c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	4904      	ldr	r1, [pc, #16]	@ (8008718 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008706:	4805      	ldr	r0, [pc, #20]	@ (800871c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008708:	f7ff fdae 	bl	8008268 <USBD_GetString>
  }
  return USBD_StrDesc;
 800870c:	4b02      	ldr	r3, [pc, #8]	@ (8008718 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800870e:	4618      	mov	r0, r3
 8008710:	3708      	adds	r7, #8
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20001ba0 	.word	0x20001ba0
 800871c:	0800e7e4 	.word	0x0800e7e4

08008720 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	4603      	mov	r3, r0
 8008728:	6039      	str	r1, [r7, #0]
 800872a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d105      	bne.n	800873e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4907      	ldr	r1, [pc, #28]	@ (8008754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008736:	4808      	ldr	r0, [pc, #32]	@ (8008758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008738:	f7ff fd96 	bl	8008268 <USBD_GetString>
 800873c:	e004      	b.n	8008748 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4904      	ldr	r1, [pc, #16]	@ (8008754 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008742:	4805      	ldr	r0, [pc, #20]	@ (8008758 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008744:	f7ff fd90 	bl	8008268 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008748:	4b02      	ldr	r3, [pc, #8]	@ (8008754 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20001ba0 	.word	0x20001ba0
 8008758:	0800e7f0 	.word	0x0800e7f0

0800875c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008762:	4b0f      	ldr	r3, [pc, #60]	@ (80087a0 <Get_SerialNum+0x44>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008768:	4b0e      	ldr	r3, [pc, #56]	@ (80087a4 <Get_SerialNum+0x48>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800876e:	4b0e      	ldr	r3, [pc, #56]	@ (80087a8 <Get_SerialNum+0x4c>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d009      	beq.n	8008796 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008782:	2208      	movs	r2, #8
 8008784:	4909      	ldr	r1, [pc, #36]	@ (80087ac <Get_SerialNum+0x50>)
 8008786:	68f8      	ldr	r0, [r7, #12]
 8008788:	f000 f814 	bl	80087b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800878c:	2204      	movs	r2, #4
 800878e:	4908      	ldr	r1, [pc, #32]	@ (80087b0 <Get_SerialNum+0x54>)
 8008790:	68b8      	ldr	r0, [r7, #8]
 8008792:	f000 f80f 	bl	80087b4 <IntToUnicode>
  }
}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	1fff7a10 	.word	0x1fff7a10
 80087a4:	1fff7a14 	.word	0x1fff7a14
 80087a8:	1fff7a18 	.word	0x1fff7a18
 80087ac:	200000e6 	.word	0x200000e6
 80087b0:	200000f6 	.word	0x200000f6

080087b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	4613      	mov	r3, r2
 80087c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087c2:	2300      	movs	r3, #0
 80087c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087c6:	2300      	movs	r3, #0
 80087c8:	75fb      	strb	r3, [r7, #23]
 80087ca:	e027      	b.n	800881c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	0f1b      	lsrs	r3, r3, #28
 80087d0:	2b09      	cmp	r3, #9
 80087d2:	d80b      	bhi.n	80087ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	0f1b      	lsrs	r3, r3, #28
 80087d8:	b2da      	uxtb	r2, r3
 80087da:	7dfb      	ldrb	r3, [r7, #23]
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	4619      	mov	r1, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	440b      	add	r3, r1
 80087e4:	3230      	adds	r2, #48	@ 0x30
 80087e6:	b2d2      	uxtb	r2, r2
 80087e8:	701a      	strb	r2, [r3, #0]
 80087ea:	e00a      	b.n	8008802 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	0f1b      	lsrs	r3, r3, #28
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	4619      	mov	r1, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	440b      	add	r3, r1
 80087fc:	3237      	adds	r2, #55	@ 0x37
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	011b      	lsls	r3, r3, #4
 8008806:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008808:	7dfb      	ldrb	r3, [r7, #23]
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	3301      	adds	r3, #1
 800880e:	68ba      	ldr	r2, [r7, #8]
 8008810:	4413      	add	r3, r2
 8008812:	2200      	movs	r2, #0
 8008814:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008816:	7dfb      	ldrb	r3, [r7, #23]
 8008818:	3301      	adds	r3, #1
 800881a:	75fb      	strb	r3, [r7, #23]
 800881c:	7dfa      	ldrb	r2, [r7, #23]
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	429a      	cmp	r2, r3
 8008822:	d3d3      	bcc.n	80087cc <IntToUnicode+0x18>
  }
}
 8008824:	bf00      	nop
 8008826:	bf00      	nop
 8008828:	371c      	adds	r7, #28
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr
	...

08008834 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08a      	sub	sp, #40	@ 0x28
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800883c:	f107 0314 	add.w	r3, r7, #20
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	609a      	str	r2, [r3, #8]
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008854:	d13a      	bne.n	80088cc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008856:	2300      	movs	r3, #0
 8008858:	613b      	str	r3, [r7, #16]
 800885a:	4b1e      	ldr	r3, [pc, #120]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 800885c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800885e:	4a1d      	ldr	r2, [pc, #116]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 8008860:	f043 0301 	orr.w	r3, r3, #1
 8008864:	6313      	str	r3, [r2, #48]	@ 0x30
 8008866:	4b1b      	ldr	r3, [pc, #108]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008872:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008878:	2302      	movs	r3, #2
 800887a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887c:	2300      	movs	r3, #0
 800887e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008880:	2303      	movs	r3, #3
 8008882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008884:	230a      	movs	r3, #10
 8008886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008888:	f107 0314 	add.w	r3, r7, #20
 800888c:	4619      	mov	r1, r3
 800888e:	4812      	ldr	r0, [pc, #72]	@ (80088d8 <HAL_PCD_MspInit+0xa4>)
 8008890:	f7f9 fdc0 	bl	8002414 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008894:	4b0f      	ldr	r3, [pc, #60]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 8008896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008898:	4a0e      	ldr	r2, [pc, #56]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 800889a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800889e:	6353      	str	r3, [r2, #52]	@ 0x34
 80088a0:	2300      	movs	r3, #0
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	4b0b      	ldr	r3, [pc, #44]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 80088a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088a8:	4a0a      	ldr	r2, [pc, #40]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 80088aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80088ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80088b0:	4b08      	ldr	r3, [pc, #32]	@ (80088d4 <HAL_PCD_MspInit+0xa0>)
 80088b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80088bc:	2200      	movs	r2, #0
 80088be:	2100      	movs	r1, #0
 80088c0:	2043      	movs	r0, #67	@ 0x43
 80088c2:	f7f9 fd70 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80088c6:	2043      	movs	r0, #67	@ 0x43
 80088c8:	f7f9 fd89 	bl	80023de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80088cc:	bf00      	nop
 80088ce:	3728      	adds	r7, #40	@ 0x28
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	40023800 	.word	0x40023800
 80088d8:	40020000 	.word	0x40020000

080088dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80088f0:	4619      	mov	r1, r3
 80088f2:	4610      	mov	r0, r2
 80088f4:	f7fe fb55 	bl	8006fa2 <USBD_LL_SetupStage>
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008912:	78fa      	ldrb	r2, [r7, #3]
 8008914:	6879      	ldr	r1, [r7, #4]
 8008916:	4613      	mov	r3, r2
 8008918:	00db      	lsls	r3, r3, #3
 800891a:	4413      	add	r3, r2
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	440b      	add	r3, r1
 8008920:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	4619      	mov	r1, r3
 800892a:	f7fe fb8f 	bl	800704c <USBD_LL_DataOutStage>
}
 800892e:	bf00      	nop
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008948:	78fa      	ldrb	r2, [r7, #3]
 800894a:	6879      	ldr	r1, [r7, #4]
 800894c:	4613      	mov	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	3320      	adds	r3, #32
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	78fb      	ldrb	r3, [r7, #3]
 800895c:	4619      	mov	r1, r3
 800895e:	f7fe fc28 	bl	80071b2 <USBD_LL_DataInStage>
}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008978:	4618      	mov	r0, r3
 800897a:	f7fe fd62 	bl	8007442 <USBD_LL_SOF>
}
 800897e:	bf00      	nop
 8008980:	3708      	adds	r7, #8
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b084      	sub	sp, #16
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800898e:	2301      	movs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	79db      	ldrb	r3, [r3, #7]
 8008996:	2b02      	cmp	r3, #2
 8008998:	d001      	beq.n	800899e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800899a:	f7f8 fcd3 	bl	8001344 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089a4:	7bfa      	ldrb	r2, [r7, #15]
 80089a6:	4611      	mov	r1, r2
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7fe fd06 	bl	80073ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fe fcae 	bl	8007316 <USBD_LL_Reset>
}
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
	...

080089c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b082      	sub	sp, #8
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fd01 	bl	80073da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	6812      	ldr	r2, [r2, #0]
 80089e6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80089ea:	f043 0301 	orr.w	r3, r3, #1
 80089ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7adb      	ldrb	r3, [r3, #11]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80089f8:	4b04      	ldr	r3, [pc, #16]	@ (8008a0c <HAL_PCD_SuspendCallback+0x48>)
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	4a03      	ldr	r2, [pc, #12]	@ (8008a0c <HAL_PCD_SuspendCallback+0x48>)
 80089fe:	f043 0306 	orr.w	r3, r3, #6
 8008a02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a04:	bf00      	nop
 8008a06:	3708      	adds	r7, #8
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	e000ed00 	.word	0xe000ed00

08008a10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fcf7 	bl	8007412 <USBD_LL_Resume>
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	4611      	mov	r1, r2
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fe fd4f 	bl	80074e6 <USBD_LL_IsoOUTIncomplete>
}
 8008a48:	bf00      	nop
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	460b      	mov	r3, r1
 8008a5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a62:	78fa      	ldrb	r2, [r7, #3]
 8008a64:	4611      	mov	r1, r2
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fd0b 	bl	8007482 <USBD_LL_IsoINIncomplete>
}
 8008a6c:	bf00      	nop
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fe fd61 	bl	800754a <USBD_LL_DevConnected>
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fe fd5e 	bl	8007560 <USBD_LL_DevDisconnected>
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d13c      	bne.n	8008b36 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008abc:	4a20      	ldr	r2, [pc, #128]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008ac8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008acc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008ace:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008ad2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008ad6:	2204      	movs	r2, #4
 8008ad8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008ada:	4b19      	ldr	r3, [pc, #100]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008adc:	2202      	movs	r2, #2
 8008ade:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008ae0:	4b17      	ldr	r3, [pc, #92]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008ae6:	4b16      	ldr	r3, [pc, #88]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008ae8:	2202      	movs	r2, #2
 8008aea:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008aec:	4b14      	ldr	r3, [pc, #80]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008af2:	4b13      	ldr	r3, [pc, #76]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008af8:	4b11      	ldr	r3, [pc, #68]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008afe:	4b10      	ldr	r3, [pc, #64]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008b04:	4b0e      	ldr	r3, [pc, #56]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008b06:	2200      	movs	r2, #0
 8008b08:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008b0a:	480d      	ldr	r0, [pc, #52]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008b0c:	f7fa faef 	bl	80030ee <HAL_PCD_Init>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008b16:	f7f8 fc15 	bl	8001344 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008b1a:	2180      	movs	r1, #128	@ 0x80
 8008b1c:	4808      	ldr	r0, [pc, #32]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008b1e:	f7fb fd1a 	bl	8004556 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008b22:	2240      	movs	r2, #64	@ 0x40
 8008b24:	2100      	movs	r1, #0
 8008b26:	4806      	ldr	r0, [pc, #24]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008b28:	f7fb fcce 	bl	80044c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008b2c:	2280      	movs	r2, #128	@ 0x80
 8008b2e:	2101      	movs	r1, #1
 8008b30:	4803      	ldr	r0, [pc, #12]	@ (8008b40 <USBD_LL_Init+0x94>)
 8008b32:	f7fb fcc9 	bl	80044c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20001da0 	.word	0x20001da0

08008b44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7fa fbd6 	bl	800330c <HAL_PCD_Start>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f000 f942 	bl	8008df0 <USBD_Get_USB_Status>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
 8008b82:	4608      	mov	r0, r1
 8008b84:	4611      	mov	r1, r2
 8008b86:	461a      	mov	r2, r3
 8008b88:	4603      	mov	r3, r0
 8008b8a:	70fb      	strb	r3, [r7, #3]
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	70bb      	strb	r3, [r7, #2]
 8008b90:	4613      	mov	r3, r2
 8008b92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008ba2:	78bb      	ldrb	r3, [r7, #2]
 8008ba4:	883a      	ldrh	r2, [r7, #0]
 8008ba6:	78f9      	ldrb	r1, [r7, #3]
 8008ba8:	f7fb f8aa 	bl	8003d00 <HAL_PCD_EP_Open>
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f91c 	bl	8008df0 <USBD_Get_USB_Status>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b084      	sub	sp, #16
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008be0:	78fa      	ldrb	r2, [r7, #3]
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fb f8f3 	bl	8003dd0 <HAL_PCD_EP_Close>
 8008bea:	4603      	mov	r3, r0
 8008bec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bee:	7bfb      	ldrb	r3, [r7, #15]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 f8fd 	bl	8008df0 <USBD_Get_USB_Status>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	460b      	mov	r3, r1
 8008c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	4611      	mov	r1, r2
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fb f9ab 	bl	8003f7e <HAL_PCD_EP_SetStall>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c2c:	7bfb      	ldrb	r3, [r7, #15]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f000 f8de 	bl	8008df0 <USBD_Get_USB_Status>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3710      	adds	r7, #16
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c5c:	78fa      	ldrb	r2, [r7, #3]
 8008c5e:	4611      	mov	r1, r2
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fb f9ef 	bl	8004044 <HAL_PCD_EP_ClrStall>
 8008c66:	4603      	mov	r3, r0
 8008c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6a:	7bfb      	ldrb	r3, [r7, #15]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 f8bf 	bl	8008df0 <USBD_Get_USB_Status>
 8008c72:	4603      	mov	r3, r0
 8008c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da0b      	bge.n	8008cb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ca2:	68f9      	ldr	r1, [r7, #12]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	440b      	add	r3, r1
 8008cae:	3316      	adds	r3, #22
 8008cb0:	781b      	ldrb	r3, [r3, #0]
 8008cb2:	e00b      	b.n	8008ccc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cb4:	78fb      	ldrb	r3, [r7, #3]
 8008cb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008cca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cf2:	78fa      	ldrb	r2, [r7, #3]
 8008cf4:	4611      	mov	r1, r2
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fa ffde 	bl	8003cb8 <HAL_PCD_SetAddress>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 f874 	bl	8008df0 <USBD_Get_USB_Status>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b086      	sub	sp, #24
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	60f8      	str	r0, [r7, #12]
 8008d1e:	607a      	str	r2, [r7, #4]
 8008d20:	603b      	str	r3, [r7, #0]
 8008d22:	460b      	mov	r3, r1
 8008d24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d26:	2300      	movs	r3, #0
 8008d28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d34:	7af9      	ldrb	r1, [r7, #11]
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	f7fb f8e6 	bl	8003f0a <HAL_PCD_EP_Transmit>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f000 f853 	bl	8008df0 <USBD_Get_USB_Status>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3718      	adds	r7, #24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	607a      	str	r2, [r7, #4]
 8008d62:	603b      	str	r3, [r7, #0]
 8008d64:	460b      	mov	r3, r1
 8008d66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008d76:	7af9      	ldrb	r1, [r7, #11]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	f7fb f872 	bl	8003e64 <HAL_PCD_EP_Receive>
 8008d80:	4603      	mov	r3, r0
 8008d82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d84:	7dfb      	ldrb	r3, [r7, #23]
 8008d86:	4618      	mov	r0, r3
 8008d88:	f000 f832 	bl	8008df0 <USBD_Get_USB_Status>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d90:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3718      	adds	r7, #24
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b082      	sub	sp, #8
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008dac:	78fa      	ldrb	r2, [r7, #3]
 8008dae:	4611      	mov	r1, r2
 8008db0:	4618      	mov	r0, r3
 8008db2:	f7fb f892 	bl	8003eda <HAL_PCD_EP_GetRxCount>
 8008db6:	4603      	mov	r3, r0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3708      	adds	r7, #8
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008dc8:	4b03      	ldr	r3, [pc, #12]	@ (8008dd8 <USBD_static_malloc+0x18>)
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	20002284 	.word	0x20002284

08008ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dee:	4770      	bx	lr

08008df0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008dfe:	79fb      	ldrb	r3, [r7, #7]
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d817      	bhi.n	8008e34 <USBD_Get_USB_Status+0x44>
 8008e04:	a201      	add	r2, pc, #4	@ (adr r2, 8008e0c <USBD_Get_USB_Status+0x1c>)
 8008e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0a:	bf00      	nop
 8008e0c:	08008e1d 	.word	0x08008e1d
 8008e10:	08008e23 	.word	0x08008e23
 8008e14:	08008e29 	.word	0x08008e29
 8008e18:	08008e2f 	.word	0x08008e2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e20:	e00b      	b.n	8008e3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e22:	2303      	movs	r3, #3
 8008e24:	73fb      	strb	r3, [r7, #15]
    break;
 8008e26:	e008      	b.n	8008e3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e2c:	e005      	b.n	8008e3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	73fb      	strb	r3, [r7, #15]
    break;
 8008e32:	e002      	b.n	8008e3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e34:	2303      	movs	r3, #3
 8008e36:	73fb      	strb	r3, [r7, #15]
    break;
 8008e38:	bf00      	nop
  }
  return usb_status;
 8008e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3714      	adds	r7, #20
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <std>:
 8008e48:	2300      	movs	r3, #0
 8008e4a:	b510      	push	{r4, lr}
 8008e4c:	4604      	mov	r4, r0
 8008e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e56:	6083      	str	r3, [r0, #8]
 8008e58:	8181      	strh	r1, [r0, #12]
 8008e5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e5c:	81c2      	strh	r2, [r0, #14]
 8008e5e:	6183      	str	r3, [r0, #24]
 8008e60:	4619      	mov	r1, r3
 8008e62:	2208      	movs	r2, #8
 8008e64:	305c      	adds	r0, #92	@ 0x5c
 8008e66:	f000 f914 	bl	8009092 <memset>
 8008e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea0 <std+0x58>)
 8008e6c:	6223      	str	r3, [r4, #32]
 8008e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea4 <std+0x5c>)
 8008e70:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ea8 <std+0x60>)
 8008e74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e76:	4b0d      	ldr	r3, [pc, #52]	@ (8008eac <std+0x64>)
 8008e78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb0 <std+0x68>)
 8008e7c:	61e4      	str	r4, [r4, #28]
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d006      	beq.n	8008e90 <std+0x48>
 8008e82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e86:	4294      	cmp	r4, r2
 8008e88:	d002      	beq.n	8008e90 <std+0x48>
 8008e8a:	33d0      	adds	r3, #208	@ 0xd0
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	d105      	bne.n	8008e9c <std+0x54>
 8008e90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e98:	f000 b974 	b.w	8009184 <__retarget_lock_init_recursive>
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	bf00      	nop
 8008ea0:	0800900d 	.word	0x0800900d
 8008ea4:	0800902f 	.word	0x0800902f
 8008ea8:	08009067 	.word	0x08009067
 8008eac:	0800908b 	.word	0x0800908b
 8008eb0:	200024a4 	.word	0x200024a4

08008eb4 <stdio_exit_handler>:
 8008eb4:	4a02      	ldr	r2, [pc, #8]	@ (8008ec0 <stdio_exit_handler+0xc>)
 8008eb6:	4903      	ldr	r1, [pc, #12]	@ (8008ec4 <stdio_exit_handler+0x10>)
 8008eb8:	4803      	ldr	r0, [pc, #12]	@ (8008ec8 <stdio_exit_handler+0x14>)
 8008eba:	f000 b869 	b.w	8008f90 <_fwalk_sglue>
 8008ebe:	bf00      	nop
 8008ec0:	20000100 	.word	0x20000100
 8008ec4:	0800ac25 	.word	0x0800ac25
 8008ec8:	20000110 	.word	0x20000110

08008ecc <cleanup_stdio>:
 8008ecc:	6841      	ldr	r1, [r0, #4]
 8008ece:	4b0c      	ldr	r3, [pc, #48]	@ (8008f00 <cleanup_stdio+0x34>)
 8008ed0:	4299      	cmp	r1, r3
 8008ed2:	b510      	push	{r4, lr}
 8008ed4:	4604      	mov	r4, r0
 8008ed6:	d001      	beq.n	8008edc <cleanup_stdio+0x10>
 8008ed8:	f001 fea4 	bl	800ac24 <_fclose_r>
 8008edc:	68a1      	ldr	r1, [r4, #8]
 8008ede:	4b09      	ldr	r3, [pc, #36]	@ (8008f04 <cleanup_stdio+0x38>)
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <cleanup_stdio+0x1e>
 8008ee4:	4620      	mov	r0, r4
 8008ee6:	f001 fe9d 	bl	800ac24 <_fclose_r>
 8008eea:	68e1      	ldr	r1, [r4, #12]
 8008eec:	4b06      	ldr	r3, [pc, #24]	@ (8008f08 <cleanup_stdio+0x3c>)
 8008eee:	4299      	cmp	r1, r3
 8008ef0:	d004      	beq.n	8008efc <cleanup_stdio+0x30>
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ef8:	f001 be94 	b.w	800ac24 <_fclose_r>
 8008efc:	bd10      	pop	{r4, pc}
 8008efe:	bf00      	nop
 8008f00:	200024a4 	.word	0x200024a4
 8008f04:	2000250c 	.word	0x2000250c
 8008f08:	20002574 	.word	0x20002574

08008f0c <global_stdio_init.part.0>:
 8008f0c:	b510      	push	{r4, lr}
 8008f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008f3c <global_stdio_init.part.0+0x30>)
 8008f10:	4c0b      	ldr	r4, [pc, #44]	@ (8008f40 <global_stdio_init.part.0+0x34>)
 8008f12:	4a0c      	ldr	r2, [pc, #48]	@ (8008f44 <global_stdio_init.part.0+0x38>)
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	4620      	mov	r0, r4
 8008f18:	2200      	movs	r2, #0
 8008f1a:	2104      	movs	r1, #4
 8008f1c:	f7ff ff94 	bl	8008e48 <std>
 8008f20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f24:	2201      	movs	r2, #1
 8008f26:	2109      	movs	r1, #9
 8008f28:	f7ff ff8e 	bl	8008e48 <std>
 8008f2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f30:	2202      	movs	r2, #2
 8008f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f36:	2112      	movs	r1, #18
 8008f38:	f7ff bf86 	b.w	8008e48 <std>
 8008f3c:	200025dc 	.word	0x200025dc
 8008f40:	200024a4 	.word	0x200024a4
 8008f44:	08008eb5 	.word	0x08008eb5

08008f48 <__sfp_lock_acquire>:
 8008f48:	4801      	ldr	r0, [pc, #4]	@ (8008f50 <__sfp_lock_acquire+0x8>)
 8008f4a:	f000 b91d 	b.w	8009188 <__retarget_lock_acquire_recursive>
 8008f4e:	bf00      	nop
 8008f50:	200025e6 	.word	0x200025e6

08008f54 <__sfp_lock_release>:
 8008f54:	4801      	ldr	r0, [pc, #4]	@ (8008f5c <__sfp_lock_release+0x8>)
 8008f56:	f000 b918 	b.w	800918a <__retarget_lock_release_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	200025e6 	.word	0x200025e6

08008f60 <__sinit>:
 8008f60:	b510      	push	{r4, lr}
 8008f62:	4604      	mov	r4, r0
 8008f64:	f7ff fff0 	bl	8008f48 <__sfp_lock_acquire>
 8008f68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f6a:	b11b      	cbz	r3, 8008f74 <__sinit+0x14>
 8008f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f70:	f7ff bff0 	b.w	8008f54 <__sfp_lock_release>
 8008f74:	4b04      	ldr	r3, [pc, #16]	@ (8008f88 <__sinit+0x28>)
 8008f76:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f78:	4b04      	ldr	r3, [pc, #16]	@ (8008f8c <__sinit+0x2c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d1f5      	bne.n	8008f6c <__sinit+0xc>
 8008f80:	f7ff ffc4 	bl	8008f0c <global_stdio_init.part.0>
 8008f84:	e7f2      	b.n	8008f6c <__sinit+0xc>
 8008f86:	bf00      	nop
 8008f88:	08008ecd 	.word	0x08008ecd
 8008f8c:	200025dc 	.word	0x200025dc

08008f90 <_fwalk_sglue>:
 8008f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f94:	4607      	mov	r7, r0
 8008f96:	4688      	mov	r8, r1
 8008f98:	4614      	mov	r4, r2
 8008f9a:	2600      	movs	r6, #0
 8008f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8008fa4:	d505      	bpl.n	8008fb2 <_fwalk_sglue+0x22>
 8008fa6:	6824      	ldr	r4, [r4, #0]
 8008fa8:	2c00      	cmp	r4, #0
 8008faa:	d1f7      	bne.n	8008f9c <_fwalk_sglue+0xc>
 8008fac:	4630      	mov	r0, r6
 8008fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fb2:	89ab      	ldrh	r3, [r5, #12]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d907      	bls.n	8008fc8 <_fwalk_sglue+0x38>
 8008fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	d003      	beq.n	8008fc8 <_fwalk_sglue+0x38>
 8008fc0:	4629      	mov	r1, r5
 8008fc2:	4638      	mov	r0, r7
 8008fc4:	47c0      	blx	r8
 8008fc6:	4306      	orrs	r6, r0
 8008fc8:	3568      	adds	r5, #104	@ 0x68
 8008fca:	e7e9      	b.n	8008fa0 <_fwalk_sglue+0x10>

08008fcc <sprintf>:
 8008fcc:	b40e      	push	{r1, r2, r3}
 8008fce:	b500      	push	{lr}
 8008fd0:	b09c      	sub	sp, #112	@ 0x70
 8008fd2:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fd4:	9002      	str	r0, [sp, #8]
 8008fd6:	9006      	str	r0, [sp, #24]
 8008fd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fdc:	4809      	ldr	r0, [pc, #36]	@ (8009004 <sprintf+0x38>)
 8008fde:	9107      	str	r1, [sp, #28]
 8008fe0:	9104      	str	r1, [sp, #16]
 8008fe2:	4909      	ldr	r1, [pc, #36]	@ (8009008 <sprintf+0x3c>)
 8008fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe8:	9105      	str	r1, [sp, #20]
 8008fea:	6800      	ldr	r0, [r0, #0]
 8008fec:	9301      	str	r3, [sp, #4]
 8008fee:	a902      	add	r1, sp, #8
 8008ff0:	f000 fc3a 	bl	8009868 <_svfprintf_r>
 8008ff4:	9b02      	ldr	r3, [sp, #8]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	b01c      	add	sp, #112	@ 0x70
 8008ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009000:	b003      	add	sp, #12
 8009002:	4770      	bx	lr
 8009004:	2000010c 	.word	0x2000010c
 8009008:	ffff0208 	.word	0xffff0208

0800900c <__sread>:
 800900c:	b510      	push	{r4, lr}
 800900e:	460c      	mov	r4, r1
 8009010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009014:	f000 f868 	bl	80090e8 <_read_r>
 8009018:	2800      	cmp	r0, #0
 800901a:	bfab      	itete	ge
 800901c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 800901e:	89a3      	ldrhlt	r3, [r4, #12]
 8009020:	181b      	addge	r3, r3, r0
 8009022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009026:	bfac      	ite	ge
 8009028:	6523      	strge	r3, [r4, #80]	@ 0x50
 800902a:	81a3      	strhlt	r3, [r4, #12]
 800902c:	bd10      	pop	{r4, pc}

0800902e <__swrite>:
 800902e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009032:	461f      	mov	r7, r3
 8009034:	898b      	ldrh	r3, [r1, #12]
 8009036:	05db      	lsls	r3, r3, #23
 8009038:	4605      	mov	r5, r0
 800903a:	460c      	mov	r4, r1
 800903c:	4616      	mov	r6, r2
 800903e:	d505      	bpl.n	800904c <__swrite+0x1e>
 8009040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009044:	2302      	movs	r3, #2
 8009046:	2200      	movs	r2, #0
 8009048:	f000 f83c 	bl	80090c4 <_lseek_r>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009052:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009056:	81a3      	strh	r3, [r4, #12]
 8009058:	4632      	mov	r2, r6
 800905a:	463b      	mov	r3, r7
 800905c:	4628      	mov	r0, r5
 800905e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009062:	f000 b853 	b.w	800910c <_write_r>

08009066 <__sseek>:
 8009066:	b510      	push	{r4, lr}
 8009068:	460c      	mov	r4, r1
 800906a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906e:	f000 f829 	bl	80090c4 <_lseek_r>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	bf15      	itete	ne
 8009078:	6520      	strne	r0, [r4, #80]	@ 0x50
 800907a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800907e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009082:	81a3      	strheq	r3, [r4, #12]
 8009084:	bf18      	it	ne
 8009086:	81a3      	strhne	r3, [r4, #12]
 8009088:	bd10      	pop	{r4, pc}

0800908a <__sclose>:
 800908a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908e:	f000 b809 	b.w	80090a4 <_close_r>

08009092 <memset>:
 8009092:	4402      	add	r2, r0
 8009094:	4603      	mov	r3, r0
 8009096:	4293      	cmp	r3, r2
 8009098:	d100      	bne.n	800909c <memset+0xa>
 800909a:	4770      	bx	lr
 800909c:	f803 1b01 	strb.w	r1, [r3], #1
 80090a0:	e7f9      	b.n	8009096 <memset+0x4>
	...

080090a4 <_close_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d06      	ldr	r5, [pc, #24]	@ (80090c0 <_close_r+0x1c>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7f8 faba 	bl	8001628 <_close>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_close_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_close_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	200025e0 	.word	0x200025e0

080090c4 <_lseek_r>:
 80090c4:	b538      	push	{r3, r4, r5, lr}
 80090c6:	4d07      	ldr	r5, [pc, #28]	@ (80090e4 <_lseek_r+0x20>)
 80090c8:	4604      	mov	r4, r0
 80090ca:	4608      	mov	r0, r1
 80090cc:	4611      	mov	r1, r2
 80090ce:	2200      	movs	r2, #0
 80090d0:	602a      	str	r2, [r5, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	f7f8 facf 	bl	8001676 <_lseek>
 80090d8:	1c43      	adds	r3, r0, #1
 80090da:	d102      	bne.n	80090e2 <_lseek_r+0x1e>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	b103      	cbz	r3, 80090e2 <_lseek_r+0x1e>
 80090e0:	6023      	str	r3, [r4, #0]
 80090e2:	bd38      	pop	{r3, r4, r5, pc}
 80090e4:	200025e0 	.word	0x200025e0

080090e8 <_read_r>:
 80090e8:	b538      	push	{r3, r4, r5, lr}
 80090ea:	4d07      	ldr	r5, [pc, #28]	@ (8009108 <_read_r+0x20>)
 80090ec:	4604      	mov	r4, r0
 80090ee:	4608      	mov	r0, r1
 80090f0:	4611      	mov	r1, r2
 80090f2:	2200      	movs	r2, #0
 80090f4:	602a      	str	r2, [r5, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f7f8 fa5d 	bl	80015b6 <_read>
 80090fc:	1c43      	adds	r3, r0, #1
 80090fe:	d102      	bne.n	8009106 <_read_r+0x1e>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	b103      	cbz	r3, 8009106 <_read_r+0x1e>
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	200025e0 	.word	0x200025e0

0800910c <_write_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d07      	ldr	r5, [pc, #28]	@ (800912c <_write_r+0x20>)
 8009110:	4604      	mov	r4, r0
 8009112:	4608      	mov	r0, r1
 8009114:	4611      	mov	r1, r2
 8009116:	2200      	movs	r2, #0
 8009118:	602a      	str	r2, [r5, #0]
 800911a:	461a      	mov	r2, r3
 800911c:	f7f8 fa68 	bl	80015f0 <_write>
 8009120:	1c43      	adds	r3, r0, #1
 8009122:	d102      	bne.n	800912a <_write_r+0x1e>
 8009124:	682b      	ldr	r3, [r5, #0]
 8009126:	b103      	cbz	r3, 800912a <_write_r+0x1e>
 8009128:	6023      	str	r3, [r4, #0]
 800912a:	bd38      	pop	{r3, r4, r5, pc}
 800912c:	200025e0 	.word	0x200025e0

08009130 <__errno>:
 8009130:	4b01      	ldr	r3, [pc, #4]	@ (8009138 <__errno+0x8>)
 8009132:	6818      	ldr	r0, [r3, #0]
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop
 8009138:	2000010c 	.word	0x2000010c

0800913c <__libc_init_array>:
 800913c:	b570      	push	{r4, r5, r6, lr}
 800913e:	4d0d      	ldr	r5, [pc, #52]	@ (8009174 <__libc_init_array+0x38>)
 8009140:	4c0d      	ldr	r4, [pc, #52]	@ (8009178 <__libc_init_array+0x3c>)
 8009142:	1b64      	subs	r4, r4, r5
 8009144:	10a4      	asrs	r4, r4, #2
 8009146:	2600      	movs	r6, #0
 8009148:	42a6      	cmp	r6, r4
 800914a:	d109      	bne.n	8009160 <__libc_init_array+0x24>
 800914c:	4d0b      	ldr	r5, [pc, #44]	@ (800917c <__libc_init_array+0x40>)
 800914e:	4c0c      	ldr	r4, [pc, #48]	@ (8009180 <__libc_init_array+0x44>)
 8009150:	f005 fb04 	bl	800e75c <_init>
 8009154:	1b64      	subs	r4, r4, r5
 8009156:	10a4      	asrs	r4, r4, #2
 8009158:	2600      	movs	r6, #0
 800915a:	42a6      	cmp	r6, r4
 800915c:	d105      	bne.n	800916a <__libc_init_array+0x2e>
 800915e:	bd70      	pop	{r4, r5, r6, pc}
 8009160:	f855 3b04 	ldr.w	r3, [r5], #4
 8009164:	4798      	blx	r3
 8009166:	3601      	adds	r6, #1
 8009168:	e7ee      	b.n	8009148 <__libc_init_array+0xc>
 800916a:	f855 3b04 	ldr.w	r3, [r5], #4
 800916e:	4798      	blx	r3
 8009170:	3601      	adds	r6, #1
 8009172:	e7f2      	b.n	800915a <__libc_init_array+0x1e>
 8009174:	0800ebd8 	.word	0x0800ebd8
 8009178:	0800ebd8 	.word	0x0800ebd8
 800917c:	0800ebd8 	.word	0x0800ebd8
 8009180:	0800ebe0 	.word	0x0800ebe0

08009184 <__retarget_lock_init_recursive>:
 8009184:	4770      	bx	lr

08009186 <__retarget_lock_close_recursive>:
 8009186:	4770      	bx	lr

08009188 <__retarget_lock_acquire_recursive>:
 8009188:	4770      	bx	lr

0800918a <__retarget_lock_release_recursive>:
 800918a:	4770      	bx	lr

0800918c <register_fini>:
 800918c:	4b02      	ldr	r3, [pc, #8]	@ (8009198 <register_fini+0xc>)
 800918e:	b113      	cbz	r3, 8009196 <register_fini+0xa>
 8009190:	4802      	ldr	r0, [pc, #8]	@ (800919c <register_fini+0x10>)
 8009192:	f000 b805 	b.w	80091a0 <atexit>
 8009196:	4770      	bx	lr
 8009198:	00000000 	.word	0x00000000
 800919c:	0800ae79 	.word	0x0800ae79

080091a0 <atexit>:
 80091a0:	2300      	movs	r3, #0
 80091a2:	4601      	mov	r1, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	4618      	mov	r0, r3
 80091a8:	f001 bebc 	b.w	800af24 <__register_exitproc>

080091ac <_malloc_trim_r>:
 80091ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b0:	4606      	mov	r6, r0
 80091b2:	2008      	movs	r0, #8
 80091b4:	4689      	mov	r9, r1
 80091b6:	f001 fe73 	bl	800aea0 <sysconf>
 80091ba:	4f24      	ldr	r7, [pc, #144]	@ (800924c <_malloc_trim_r+0xa0>)
 80091bc:	4680      	mov	r8, r0
 80091be:	4630      	mov	r0, r6
 80091c0:	f000 fb44 	bl	800984c <__malloc_lock>
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	685d      	ldr	r5, [r3, #4]
 80091c8:	f025 0503 	bic.w	r5, r5, #3
 80091cc:	f1a5 0411 	sub.w	r4, r5, #17
 80091d0:	eba4 0409 	sub.w	r4, r4, r9
 80091d4:	4444      	add	r4, r8
 80091d6:	fbb4 f4f8 	udiv	r4, r4, r8
 80091da:	3c01      	subs	r4, #1
 80091dc:	fb08 f404 	mul.w	r4, r8, r4
 80091e0:	45a0      	cmp	r8, r4
 80091e2:	dd05      	ble.n	80091f0 <_malloc_trim_r+0x44>
 80091e4:	4630      	mov	r0, r6
 80091e6:	f000 fb37 	bl	8009858 <__malloc_unlock>
 80091ea:	2000      	movs	r0, #0
 80091ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091f0:	2100      	movs	r1, #0
 80091f2:	4630      	mov	r0, r6
 80091f4:	f001 fe30 	bl	800ae58 <_sbrk_r>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	442b      	add	r3, r5
 80091fc:	4298      	cmp	r0, r3
 80091fe:	d1f1      	bne.n	80091e4 <_malloc_trim_r+0x38>
 8009200:	4261      	negs	r1, r4
 8009202:	4630      	mov	r0, r6
 8009204:	f001 fe28 	bl	800ae58 <_sbrk_r>
 8009208:	3001      	adds	r0, #1
 800920a:	d110      	bne.n	800922e <_malloc_trim_r+0x82>
 800920c:	2100      	movs	r1, #0
 800920e:	4630      	mov	r0, r6
 8009210:	f001 fe22 	bl	800ae58 <_sbrk_r>
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	1a83      	subs	r3, r0, r2
 8009218:	2b0f      	cmp	r3, #15
 800921a:	dde3      	ble.n	80091e4 <_malloc_trim_r+0x38>
 800921c:	490c      	ldr	r1, [pc, #48]	@ (8009250 <_malloc_trim_r+0xa4>)
 800921e:	6809      	ldr	r1, [r1, #0]
 8009220:	1a40      	subs	r0, r0, r1
 8009222:	490c      	ldr	r1, [pc, #48]	@ (8009254 <_malloc_trim_r+0xa8>)
 8009224:	f043 0301 	orr.w	r3, r3, #1
 8009228:	6008      	str	r0, [r1, #0]
 800922a:	6053      	str	r3, [r2, #4]
 800922c:	e7da      	b.n	80091e4 <_malloc_trim_r+0x38>
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	4a08      	ldr	r2, [pc, #32]	@ (8009254 <_malloc_trim_r+0xa8>)
 8009232:	1b2d      	subs	r5, r5, r4
 8009234:	f045 0501 	orr.w	r5, r5, #1
 8009238:	605d      	str	r5, [r3, #4]
 800923a:	6813      	ldr	r3, [r2, #0]
 800923c:	4630      	mov	r0, r6
 800923e:	1b1b      	subs	r3, r3, r4
 8009240:	6013      	str	r3, [r2, #0]
 8009242:	f000 fb09 	bl	8009858 <__malloc_unlock>
 8009246:	2001      	movs	r0, #1
 8009248:	e7d0      	b.n	80091ec <_malloc_trim_r+0x40>
 800924a:	bf00      	nop
 800924c:	2000023c 	.word	0x2000023c
 8009250:	20000234 	.word	0x20000234
 8009254:	200025ec 	.word	0x200025ec

08009258 <_free_r>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	4604      	mov	r4, r0
 800925c:	460f      	mov	r7, r1
 800925e:	2900      	cmp	r1, #0
 8009260:	f000 80b1 	beq.w	80093c6 <_free_r+0x16e>
 8009264:	f000 faf2 	bl	800984c <__malloc_lock>
 8009268:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800926c:	4d56      	ldr	r5, [pc, #344]	@ (80093c8 <_free_r+0x170>)
 800926e:	f022 0001 	bic.w	r0, r2, #1
 8009272:	f1a7 0308 	sub.w	r3, r7, #8
 8009276:	eb03 0c00 	add.w	ip, r3, r0
 800927a:	68a9      	ldr	r1, [r5, #8]
 800927c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8009280:	4561      	cmp	r1, ip
 8009282:	f026 0603 	bic.w	r6, r6, #3
 8009286:	f002 0201 	and.w	r2, r2, #1
 800928a:	d11b      	bne.n	80092c4 <_free_r+0x6c>
 800928c:	4406      	add	r6, r0
 800928e:	b93a      	cbnz	r2, 80092a0 <_free_r+0x48>
 8009290:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8009294:	1a9b      	subs	r3, r3, r2
 8009296:	4416      	add	r6, r2
 8009298:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800929c:	60ca      	str	r2, [r1, #12]
 800929e:	6091      	str	r1, [r2, #8]
 80092a0:	f046 0201 	orr.w	r2, r6, #1
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	60ab      	str	r3, [r5, #8]
 80092a8:	4b48      	ldr	r3, [pc, #288]	@ (80093cc <_free_r+0x174>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	42b3      	cmp	r3, r6
 80092ae:	d804      	bhi.n	80092ba <_free_r+0x62>
 80092b0:	4b47      	ldr	r3, [pc, #284]	@ (80093d0 <_free_r+0x178>)
 80092b2:	4620      	mov	r0, r4
 80092b4:	6819      	ldr	r1, [r3, #0]
 80092b6:	f7ff ff79 	bl	80091ac <_malloc_trim_r>
 80092ba:	4620      	mov	r0, r4
 80092bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80092c0:	f000 baca 	b.w	8009858 <__malloc_unlock>
 80092c4:	f8cc 6004 	str.w	r6, [ip, #4]
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d138      	bne.n	800933e <_free_r+0xe6>
 80092cc:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80092d0:	1a5b      	subs	r3, r3, r1
 80092d2:	4408      	add	r0, r1
 80092d4:	6899      	ldr	r1, [r3, #8]
 80092d6:	f105 0708 	add.w	r7, r5, #8
 80092da:	42b9      	cmp	r1, r7
 80092dc:	d031      	beq.n	8009342 <_free_r+0xea>
 80092de:	68df      	ldr	r7, [r3, #12]
 80092e0:	60cf      	str	r7, [r1, #12]
 80092e2:	60b9      	str	r1, [r7, #8]
 80092e4:	eb0c 0106 	add.w	r1, ip, r6
 80092e8:	6849      	ldr	r1, [r1, #4]
 80092ea:	07c9      	lsls	r1, r1, #31
 80092ec:	d40b      	bmi.n	8009306 <_free_r+0xae>
 80092ee:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80092f2:	4430      	add	r0, r6
 80092f4:	bb3a      	cbnz	r2, 8009346 <_free_r+0xee>
 80092f6:	4e37      	ldr	r6, [pc, #220]	@ (80093d4 <_free_r+0x17c>)
 80092f8:	42b1      	cmp	r1, r6
 80092fa:	d124      	bne.n	8009346 <_free_r+0xee>
 80092fc:	e9c5 3304 	strd	r3, r3, [r5, #16]
 8009300:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8009304:	2201      	movs	r2, #1
 8009306:	f040 0101 	orr.w	r1, r0, #1
 800930a:	6059      	str	r1, [r3, #4]
 800930c:	5018      	str	r0, [r3, r0]
 800930e:	2a00      	cmp	r2, #0
 8009310:	d1d3      	bne.n	80092ba <_free_r+0x62>
 8009312:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8009316:	d21b      	bcs.n	8009350 <_free_r+0xf8>
 8009318:	08c2      	lsrs	r2, r0, #3
 800931a:	2101      	movs	r1, #1
 800931c:	0940      	lsrs	r0, r0, #5
 800931e:	4081      	lsls	r1, r0
 8009320:	6868      	ldr	r0, [r5, #4]
 8009322:	3201      	adds	r2, #1
 8009324:	4301      	orrs	r1, r0
 8009326:	6069      	str	r1, [r5, #4]
 8009328:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 800932c:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 8009330:	3908      	subs	r1, #8
 8009332:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009336:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 800933a:	60c3      	str	r3, [r0, #12]
 800933c:	e7bd      	b.n	80092ba <_free_r+0x62>
 800933e:	2200      	movs	r2, #0
 8009340:	e7d0      	b.n	80092e4 <_free_r+0x8c>
 8009342:	2201      	movs	r2, #1
 8009344:	e7ce      	b.n	80092e4 <_free_r+0x8c>
 8009346:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800934a:	60ce      	str	r6, [r1, #12]
 800934c:	60b1      	str	r1, [r6, #8]
 800934e:	e7da      	b.n	8009306 <_free_r+0xae>
 8009350:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8009354:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8009358:	d214      	bcs.n	8009384 <_free_r+0x12c>
 800935a:	0982      	lsrs	r2, r0, #6
 800935c:	3238      	adds	r2, #56	@ 0x38
 800935e:	1c51      	adds	r1, r2, #1
 8009360:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009364:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009368:	428e      	cmp	r6, r1
 800936a:	d125      	bne.n	80093b8 <_free_r+0x160>
 800936c:	2001      	movs	r0, #1
 800936e:	1092      	asrs	r2, r2, #2
 8009370:	fa00 f202 	lsl.w	r2, r0, r2
 8009374:	6868      	ldr	r0, [r5, #4]
 8009376:	4302      	orrs	r2, r0
 8009378:	606a      	str	r2, [r5, #4]
 800937a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800937e:	60b3      	str	r3, [r6, #8]
 8009380:	60cb      	str	r3, [r1, #12]
 8009382:	e79a      	b.n	80092ba <_free_r+0x62>
 8009384:	2a14      	cmp	r2, #20
 8009386:	d801      	bhi.n	800938c <_free_r+0x134>
 8009388:	325b      	adds	r2, #91	@ 0x5b
 800938a:	e7e8      	b.n	800935e <_free_r+0x106>
 800938c:	2a54      	cmp	r2, #84	@ 0x54
 800938e:	d802      	bhi.n	8009396 <_free_r+0x13e>
 8009390:	0b02      	lsrs	r2, r0, #12
 8009392:	326e      	adds	r2, #110	@ 0x6e
 8009394:	e7e3      	b.n	800935e <_free_r+0x106>
 8009396:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800939a:	d802      	bhi.n	80093a2 <_free_r+0x14a>
 800939c:	0bc2      	lsrs	r2, r0, #15
 800939e:	3277      	adds	r2, #119	@ 0x77
 80093a0:	e7dd      	b.n	800935e <_free_r+0x106>
 80093a2:	f240 5154 	movw	r1, #1364	@ 0x554
 80093a6:	428a      	cmp	r2, r1
 80093a8:	bf9a      	itte	ls
 80093aa:	0c82      	lsrls	r2, r0, #18
 80093ac:	327c      	addls	r2, #124	@ 0x7c
 80093ae:	227e      	movhi	r2, #126	@ 0x7e
 80093b0:	e7d5      	b.n	800935e <_free_r+0x106>
 80093b2:	6889      	ldr	r1, [r1, #8]
 80093b4:	428e      	cmp	r6, r1
 80093b6:	d004      	beq.n	80093c2 <_free_r+0x16a>
 80093b8:	684a      	ldr	r2, [r1, #4]
 80093ba:	f022 0203 	bic.w	r2, r2, #3
 80093be:	4282      	cmp	r2, r0
 80093c0:	d8f7      	bhi.n	80093b2 <_free_r+0x15a>
 80093c2:	68ce      	ldr	r6, [r1, #12]
 80093c4:	e7d9      	b.n	800937a <_free_r+0x122>
 80093c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093c8:	2000023c 	.word	0x2000023c
 80093cc:	20000238 	.word	0x20000238
 80093d0:	2000261c 	.word	0x2000261c
 80093d4:	20000244 	.word	0x20000244

080093d8 <_malloc_r>:
 80093d8:	f101 030b 	add.w	r3, r1, #11
 80093dc:	2b16      	cmp	r3, #22
 80093de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e2:	4605      	mov	r5, r0
 80093e4:	d906      	bls.n	80093f4 <_malloc_r+0x1c>
 80093e6:	f033 0707 	bics.w	r7, r3, #7
 80093ea:	d504      	bpl.n	80093f6 <_malloc_r+0x1e>
 80093ec:	230c      	movs	r3, #12
 80093ee:	602b      	str	r3, [r5, #0]
 80093f0:	2400      	movs	r4, #0
 80093f2:	e1a3      	b.n	800973c <_malloc_r+0x364>
 80093f4:	2710      	movs	r7, #16
 80093f6:	42b9      	cmp	r1, r7
 80093f8:	d8f8      	bhi.n	80093ec <_malloc_r+0x14>
 80093fa:	4628      	mov	r0, r5
 80093fc:	f000 fa26 	bl	800984c <__malloc_lock>
 8009400:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8009404:	4eaf      	ldr	r6, [pc, #700]	@ (80096c4 <_malloc_r+0x2ec>)
 8009406:	d237      	bcs.n	8009478 <_malloc_r+0xa0>
 8009408:	f107 0208 	add.w	r2, r7, #8
 800940c:	4432      	add	r2, r6
 800940e:	f1a2 0108 	sub.w	r1, r2, #8
 8009412:	6854      	ldr	r4, [r2, #4]
 8009414:	428c      	cmp	r4, r1
 8009416:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 800941a:	d102      	bne.n	8009422 <_malloc_r+0x4a>
 800941c:	68d4      	ldr	r4, [r2, #12]
 800941e:	42a2      	cmp	r2, r4
 8009420:	d010      	beq.n	8009444 <_malloc_r+0x6c>
 8009422:	6863      	ldr	r3, [r4, #4]
 8009424:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009428:	f023 0303 	bic.w	r3, r3, #3
 800942c:	60ca      	str	r2, [r1, #12]
 800942e:	4423      	add	r3, r4
 8009430:	6091      	str	r1, [r2, #8]
 8009432:	685a      	ldr	r2, [r3, #4]
 8009434:	f042 0201 	orr.w	r2, r2, #1
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	4628      	mov	r0, r5
 800943c:	f000 fa0c 	bl	8009858 <__malloc_unlock>
 8009440:	3408      	adds	r4, #8
 8009442:	e17b      	b.n	800973c <_malloc_r+0x364>
 8009444:	3302      	adds	r3, #2
 8009446:	6934      	ldr	r4, [r6, #16]
 8009448:	499f      	ldr	r1, [pc, #636]	@ (80096c8 <_malloc_r+0x2f0>)
 800944a:	428c      	cmp	r4, r1
 800944c:	d077      	beq.n	800953e <_malloc_r+0x166>
 800944e:	6862      	ldr	r2, [r4, #4]
 8009450:	f022 0c03 	bic.w	ip, r2, #3
 8009454:	ebac 0007 	sub.w	r0, ip, r7
 8009458:	280f      	cmp	r0, #15
 800945a:	dd48      	ble.n	80094ee <_malloc_r+0x116>
 800945c:	19e2      	adds	r2, r4, r7
 800945e:	f040 0301 	orr.w	r3, r0, #1
 8009462:	f047 0701 	orr.w	r7, r7, #1
 8009466:	6067      	str	r7, [r4, #4]
 8009468:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800946c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009470:	6053      	str	r3, [r2, #4]
 8009472:	f844 000c 	str.w	r0, [r4, ip]
 8009476:	e7e0      	b.n	800943a <_malloc_r+0x62>
 8009478:	0a7b      	lsrs	r3, r7, #9
 800947a:	d02a      	beq.n	80094d2 <_malloc_r+0xfa>
 800947c:	2b04      	cmp	r3, #4
 800947e:	d812      	bhi.n	80094a6 <_malloc_r+0xce>
 8009480:	09bb      	lsrs	r3, r7, #6
 8009482:	3338      	adds	r3, #56	@ 0x38
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800948a:	f1a2 0c08 	sub.w	ip, r2, #8
 800948e:	6854      	ldr	r4, [r2, #4]
 8009490:	4564      	cmp	r4, ip
 8009492:	d006      	beq.n	80094a2 <_malloc_r+0xca>
 8009494:	6862      	ldr	r2, [r4, #4]
 8009496:	f022 0203 	bic.w	r2, r2, #3
 800949a:	1bd0      	subs	r0, r2, r7
 800949c:	280f      	cmp	r0, #15
 800949e:	dd1c      	ble.n	80094da <_malloc_r+0x102>
 80094a0:	3b01      	subs	r3, #1
 80094a2:	3301      	adds	r3, #1
 80094a4:	e7cf      	b.n	8009446 <_malloc_r+0x6e>
 80094a6:	2b14      	cmp	r3, #20
 80094a8:	d801      	bhi.n	80094ae <_malloc_r+0xd6>
 80094aa:	335b      	adds	r3, #91	@ 0x5b
 80094ac:	e7ea      	b.n	8009484 <_malloc_r+0xac>
 80094ae:	2b54      	cmp	r3, #84	@ 0x54
 80094b0:	d802      	bhi.n	80094b8 <_malloc_r+0xe0>
 80094b2:	0b3b      	lsrs	r3, r7, #12
 80094b4:	336e      	adds	r3, #110	@ 0x6e
 80094b6:	e7e5      	b.n	8009484 <_malloc_r+0xac>
 80094b8:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 80094bc:	d802      	bhi.n	80094c4 <_malloc_r+0xec>
 80094be:	0bfb      	lsrs	r3, r7, #15
 80094c0:	3377      	adds	r3, #119	@ 0x77
 80094c2:	e7df      	b.n	8009484 <_malloc_r+0xac>
 80094c4:	f240 5254 	movw	r2, #1364	@ 0x554
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d804      	bhi.n	80094d6 <_malloc_r+0xfe>
 80094cc:	0cbb      	lsrs	r3, r7, #18
 80094ce:	337c      	adds	r3, #124	@ 0x7c
 80094d0:	e7d8      	b.n	8009484 <_malloc_r+0xac>
 80094d2:	233f      	movs	r3, #63	@ 0x3f
 80094d4:	e7d6      	b.n	8009484 <_malloc_r+0xac>
 80094d6:	237e      	movs	r3, #126	@ 0x7e
 80094d8:	e7d4      	b.n	8009484 <_malloc_r+0xac>
 80094da:	2800      	cmp	r0, #0
 80094dc:	68e1      	ldr	r1, [r4, #12]
 80094de:	db04      	blt.n	80094ea <_malloc_r+0x112>
 80094e0:	68a3      	ldr	r3, [r4, #8]
 80094e2:	60d9      	str	r1, [r3, #12]
 80094e4:	608b      	str	r3, [r1, #8]
 80094e6:	18a3      	adds	r3, r4, r2
 80094e8:	e7a3      	b.n	8009432 <_malloc_r+0x5a>
 80094ea:	460c      	mov	r4, r1
 80094ec:	e7d0      	b.n	8009490 <_malloc_r+0xb8>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80094f4:	db07      	blt.n	8009506 <_malloc_r+0x12e>
 80094f6:	44a4      	add	ip, r4
 80094f8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80094fc:	f043 0301 	orr.w	r3, r3, #1
 8009500:	f8cc 3004 	str.w	r3, [ip, #4]
 8009504:	e799      	b.n	800943a <_malloc_r+0x62>
 8009506:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 800950a:	6870      	ldr	r0, [r6, #4]
 800950c:	f080 8095 	bcs.w	800963a <_malloc_r+0x262>
 8009510:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009514:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009518:	f04f 0c01 	mov.w	ip, #1
 800951c:	3201      	adds	r2, #1
 800951e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009522:	ea4c 0000 	orr.w	r0, ip, r0
 8009526:	6070      	str	r0, [r6, #4]
 8009528:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 800952c:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009530:	3808      	subs	r0, #8
 8009532:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009536:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 800953a:	f8cc 400c 	str.w	r4, [ip, #12]
 800953e:	1098      	asrs	r0, r3, #2
 8009540:	2201      	movs	r2, #1
 8009542:	4082      	lsls	r2, r0
 8009544:	6870      	ldr	r0, [r6, #4]
 8009546:	4290      	cmp	r0, r2
 8009548:	d326      	bcc.n	8009598 <_malloc_r+0x1c0>
 800954a:	4210      	tst	r0, r2
 800954c:	d106      	bne.n	800955c <_malloc_r+0x184>
 800954e:	f023 0303 	bic.w	r3, r3, #3
 8009552:	0052      	lsls	r2, r2, #1
 8009554:	4210      	tst	r0, r2
 8009556:	f103 0304 	add.w	r3, r3, #4
 800955a:	d0fa      	beq.n	8009552 <_malloc_r+0x17a>
 800955c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009560:	46c1      	mov	r9, r8
 8009562:	469e      	mov	lr, r3
 8009564:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009568:	454c      	cmp	r4, r9
 800956a:	f040 80b9 	bne.w	80096e0 <_malloc_r+0x308>
 800956e:	f10e 0e01 	add.w	lr, lr, #1
 8009572:	f01e 0f03 	tst.w	lr, #3
 8009576:	f109 0908 	add.w	r9, r9, #8
 800957a:	d1f3      	bne.n	8009564 <_malloc_r+0x18c>
 800957c:	0798      	lsls	r0, r3, #30
 800957e:	f040 80e3 	bne.w	8009748 <_malloc_r+0x370>
 8009582:	6873      	ldr	r3, [r6, #4]
 8009584:	ea23 0302 	bic.w	r3, r3, r2
 8009588:	6073      	str	r3, [r6, #4]
 800958a:	6870      	ldr	r0, [r6, #4]
 800958c:	0052      	lsls	r2, r2, #1
 800958e:	4290      	cmp	r0, r2
 8009590:	d302      	bcc.n	8009598 <_malloc_r+0x1c0>
 8009592:	2a00      	cmp	r2, #0
 8009594:	f040 80e5 	bne.w	8009762 <_malloc_r+0x38a>
 8009598:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800959c:	f8da 3004 	ldr.w	r3, [sl, #4]
 80095a0:	f023 0903 	bic.w	r9, r3, #3
 80095a4:	45b9      	cmp	r9, r7
 80095a6:	d304      	bcc.n	80095b2 <_malloc_r+0x1da>
 80095a8:	eba9 0207 	sub.w	r2, r9, r7
 80095ac:	2a0f      	cmp	r2, #15
 80095ae:	f300 8141 	bgt.w	8009834 <_malloc_r+0x45c>
 80095b2:	4b46      	ldr	r3, [pc, #280]	@ (80096cc <_malloc_r+0x2f4>)
 80095b4:	6819      	ldr	r1, [r3, #0]
 80095b6:	3110      	adds	r1, #16
 80095b8:	4439      	add	r1, r7
 80095ba:	2008      	movs	r0, #8
 80095bc:	9101      	str	r1, [sp, #4]
 80095be:	f001 fc6f 	bl	800aea0 <sysconf>
 80095c2:	4a43      	ldr	r2, [pc, #268]	@ (80096d0 <_malloc_r+0x2f8>)
 80095c4:	9901      	ldr	r1, [sp, #4]
 80095c6:	6813      	ldr	r3, [r2, #0]
 80095c8:	3301      	adds	r3, #1
 80095ca:	bf1f      	itttt	ne
 80095cc:	f101 31ff 	addne.w	r1, r1, #4294967295
 80095d0:	1809      	addne	r1, r1, r0
 80095d2:	4243      	negne	r3, r0
 80095d4:	4019      	andne	r1, r3
 80095d6:	4680      	mov	r8, r0
 80095d8:	4628      	mov	r0, r5
 80095da:	9101      	str	r1, [sp, #4]
 80095dc:	f001 fc3c 	bl	800ae58 <_sbrk_r>
 80095e0:	1c42      	adds	r2, r0, #1
 80095e2:	eb0a 0b09 	add.w	fp, sl, r9
 80095e6:	4604      	mov	r4, r0
 80095e8:	f000 80f7 	beq.w	80097da <_malloc_r+0x402>
 80095ec:	4583      	cmp	fp, r0
 80095ee:	9901      	ldr	r1, [sp, #4]
 80095f0:	4a37      	ldr	r2, [pc, #220]	@ (80096d0 <_malloc_r+0x2f8>)
 80095f2:	d902      	bls.n	80095fa <_malloc_r+0x222>
 80095f4:	45b2      	cmp	sl, r6
 80095f6:	f040 80f0 	bne.w	80097da <_malloc_r+0x402>
 80095fa:	4b36      	ldr	r3, [pc, #216]	@ (80096d4 <_malloc_r+0x2fc>)
 80095fc:	6818      	ldr	r0, [r3, #0]
 80095fe:	45a3      	cmp	fp, r4
 8009600:	eb00 0e01 	add.w	lr, r0, r1
 8009604:	f8c3 e000 	str.w	lr, [r3]
 8009608:	f108 3cff 	add.w	ip, r8, #4294967295
 800960c:	f040 80ab 	bne.w	8009766 <_malloc_r+0x38e>
 8009610:	ea1b 0f0c 	tst.w	fp, ip
 8009614:	f040 80a7 	bne.w	8009766 <_malloc_r+0x38e>
 8009618:	68b2      	ldr	r2, [r6, #8]
 800961a:	4449      	add	r1, r9
 800961c:	f041 0101 	orr.w	r1, r1, #1
 8009620:	6051      	str	r1, [r2, #4]
 8009622:	4a2d      	ldr	r2, [pc, #180]	@ (80096d8 <_malloc_r+0x300>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	6811      	ldr	r1, [r2, #0]
 8009628:	428b      	cmp	r3, r1
 800962a:	bf88      	it	hi
 800962c:	6013      	strhi	r3, [r2, #0]
 800962e:	4a2b      	ldr	r2, [pc, #172]	@ (80096dc <_malloc_r+0x304>)
 8009630:	6811      	ldr	r1, [r2, #0]
 8009632:	428b      	cmp	r3, r1
 8009634:	bf88      	it	hi
 8009636:	6013      	strhi	r3, [r2, #0]
 8009638:	e0cf      	b.n	80097da <_malloc_r+0x402>
 800963a:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 800963e:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009642:	d218      	bcs.n	8009676 <_malloc_r+0x29e>
 8009644:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009648:	3238      	adds	r2, #56	@ 0x38
 800964a:	f102 0e01 	add.w	lr, r2, #1
 800964e:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009652:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009656:	45f0      	cmp	r8, lr
 8009658:	d12b      	bne.n	80096b2 <_malloc_r+0x2da>
 800965a:	1092      	asrs	r2, r2, #2
 800965c:	f04f 0c01 	mov.w	ip, #1
 8009660:	fa0c f202 	lsl.w	r2, ip, r2
 8009664:	4302      	orrs	r2, r0
 8009666:	6072      	str	r2, [r6, #4]
 8009668:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800966c:	f8c8 4008 	str.w	r4, [r8, #8]
 8009670:	f8ce 400c 	str.w	r4, [lr, #12]
 8009674:	e763      	b.n	800953e <_malloc_r+0x166>
 8009676:	2a14      	cmp	r2, #20
 8009678:	d801      	bhi.n	800967e <_malloc_r+0x2a6>
 800967a:	325b      	adds	r2, #91	@ 0x5b
 800967c:	e7e5      	b.n	800964a <_malloc_r+0x272>
 800967e:	2a54      	cmp	r2, #84	@ 0x54
 8009680:	d803      	bhi.n	800968a <_malloc_r+0x2b2>
 8009682:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009686:	326e      	adds	r2, #110	@ 0x6e
 8009688:	e7df      	b.n	800964a <_malloc_r+0x272>
 800968a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800968e:	d803      	bhi.n	8009698 <_malloc_r+0x2c0>
 8009690:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009694:	3277      	adds	r2, #119	@ 0x77
 8009696:	e7d8      	b.n	800964a <_malloc_r+0x272>
 8009698:	f240 5e54 	movw	lr, #1364	@ 0x554
 800969c:	4572      	cmp	r2, lr
 800969e:	bf9a      	itte	ls
 80096a0:	ea4f 429c 	movls.w	r2, ip, lsr #18
 80096a4:	327c      	addls	r2, #124	@ 0x7c
 80096a6:	227e      	movhi	r2, #126	@ 0x7e
 80096a8:	e7cf      	b.n	800964a <_malloc_r+0x272>
 80096aa:	f8de e008 	ldr.w	lr, [lr, #8]
 80096ae:	45f0      	cmp	r8, lr
 80096b0:	d005      	beq.n	80096be <_malloc_r+0x2e6>
 80096b2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80096b6:	f022 0203 	bic.w	r2, r2, #3
 80096ba:	4562      	cmp	r2, ip
 80096bc:	d8f5      	bhi.n	80096aa <_malloc_r+0x2d2>
 80096be:	f8de 800c 	ldr.w	r8, [lr, #12]
 80096c2:	e7d1      	b.n	8009668 <_malloc_r+0x290>
 80096c4:	2000023c 	.word	0x2000023c
 80096c8:	20000244 	.word	0x20000244
 80096cc:	2000261c 	.word	0x2000261c
 80096d0:	20000234 	.word	0x20000234
 80096d4:	200025ec 	.word	0x200025ec
 80096d8:	20002618 	.word	0x20002618
 80096dc:	20002614 	.word	0x20002614
 80096e0:	6860      	ldr	r0, [r4, #4]
 80096e2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80096e6:	f020 0003 	bic.w	r0, r0, #3
 80096ea:	eba0 0a07 	sub.w	sl, r0, r7
 80096ee:	f1ba 0f0f 	cmp.w	sl, #15
 80096f2:	dd12      	ble.n	800971a <_malloc_r+0x342>
 80096f4:	68a3      	ldr	r3, [r4, #8]
 80096f6:	19e2      	adds	r2, r4, r7
 80096f8:	f047 0701 	orr.w	r7, r7, #1
 80096fc:	6067      	str	r7, [r4, #4]
 80096fe:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009702:	f8cc 3008 	str.w	r3, [ip, #8]
 8009706:	f04a 0301 	orr.w	r3, sl, #1
 800970a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800970e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009712:	6053      	str	r3, [r2, #4]
 8009714:	f844 a000 	str.w	sl, [r4, r0]
 8009718:	e68f      	b.n	800943a <_malloc_r+0x62>
 800971a:	f1ba 0f00 	cmp.w	sl, #0
 800971e:	db11      	blt.n	8009744 <_malloc_r+0x36c>
 8009720:	4420      	add	r0, r4
 8009722:	6843      	ldr	r3, [r0, #4]
 8009724:	f043 0301 	orr.w	r3, r3, #1
 8009728:	6043      	str	r3, [r0, #4]
 800972a:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800972e:	4628      	mov	r0, r5
 8009730:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009734:	f8cc 3008 	str.w	r3, [ip, #8]
 8009738:	f000 f88e 	bl	8009858 <__malloc_unlock>
 800973c:	4620      	mov	r0, r4
 800973e:	b003      	add	sp, #12
 8009740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009744:	4664      	mov	r4, ip
 8009746:	e70f      	b.n	8009568 <_malloc_r+0x190>
 8009748:	f858 0908 	ldr.w	r0, [r8], #-8
 800974c:	4540      	cmp	r0, r8
 800974e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009752:	f43f af13 	beq.w	800957c <_malloc_r+0x1a4>
 8009756:	e718      	b.n	800958a <_malloc_r+0x1b2>
 8009758:	3304      	adds	r3, #4
 800975a:	0052      	lsls	r2, r2, #1
 800975c:	4210      	tst	r0, r2
 800975e:	d0fb      	beq.n	8009758 <_malloc_r+0x380>
 8009760:	e6fc      	b.n	800955c <_malloc_r+0x184>
 8009762:	4673      	mov	r3, lr
 8009764:	e7fa      	b.n	800975c <_malloc_r+0x384>
 8009766:	6810      	ldr	r0, [r2, #0]
 8009768:	3001      	adds	r0, #1
 800976a:	bf1b      	ittet	ne
 800976c:	eba4 0b0b 	subne.w	fp, r4, fp
 8009770:	eb0b 020e 	addne.w	r2, fp, lr
 8009774:	6014      	streq	r4, [r2, #0]
 8009776:	601a      	strne	r2, [r3, #0]
 8009778:	f014 0b07 	ands.w	fp, r4, #7
 800977c:	bf1a      	itte	ne
 800977e:	f1cb 0008 	rsbne	r0, fp, #8
 8009782:	1824      	addne	r4, r4, r0
 8009784:	4658      	moveq	r0, fp
 8009786:	1862      	adds	r2, r4, r1
 8009788:	ea02 010c 	and.w	r1, r2, ip
 800978c:	4480      	add	r8, r0
 800978e:	eba8 0801 	sub.w	r8, r8, r1
 8009792:	ea08 080c 	and.w	r8, r8, ip
 8009796:	4641      	mov	r1, r8
 8009798:	4628      	mov	r0, r5
 800979a:	9201      	str	r2, [sp, #4]
 800979c:	f001 fb5c 	bl	800ae58 <_sbrk_r>
 80097a0:	1c43      	adds	r3, r0, #1
 80097a2:	9a01      	ldr	r2, [sp, #4]
 80097a4:	4b28      	ldr	r3, [pc, #160]	@ (8009848 <_malloc_r+0x470>)
 80097a6:	d107      	bne.n	80097b8 <_malloc_r+0x3e0>
 80097a8:	f1bb 0f00 	cmp.w	fp, #0
 80097ac:	d023      	beq.n	80097f6 <_malloc_r+0x41e>
 80097ae:	f1ab 0008 	sub.w	r0, fp, #8
 80097b2:	4410      	add	r0, r2
 80097b4:	f04f 0800 	mov.w	r8, #0
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	60b4      	str	r4, [r6, #8]
 80097bc:	1b00      	subs	r0, r0, r4
 80097be:	4440      	add	r0, r8
 80097c0:	4442      	add	r2, r8
 80097c2:	f040 0001 	orr.w	r0, r0, #1
 80097c6:	45b2      	cmp	sl, r6
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	6060      	str	r0, [r4, #4]
 80097cc:	f43f af29 	beq.w	8009622 <_malloc_r+0x24a>
 80097d0:	f1b9 0f0f 	cmp.w	r9, #15
 80097d4:	d812      	bhi.n	80097fc <_malloc_r+0x424>
 80097d6:	2301      	movs	r3, #1
 80097d8:	6063      	str	r3, [r4, #4]
 80097da:	68b3      	ldr	r3, [r6, #8]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	f023 0303 	bic.w	r3, r3, #3
 80097e2:	42bb      	cmp	r3, r7
 80097e4:	eba3 0207 	sub.w	r2, r3, r7
 80097e8:	d301      	bcc.n	80097ee <_malloc_r+0x416>
 80097ea:	2a0f      	cmp	r2, #15
 80097ec:	dc22      	bgt.n	8009834 <_malloc_r+0x45c>
 80097ee:	4628      	mov	r0, r5
 80097f0:	f000 f832 	bl	8009858 <__malloc_unlock>
 80097f4:	e5fc      	b.n	80093f0 <_malloc_r+0x18>
 80097f6:	4610      	mov	r0, r2
 80097f8:	46d8      	mov	r8, fp
 80097fa:	e7dd      	b.n	80097b8 <_malloc_r+0x3e0>
 80097fc:	f8da 2004 	ldr.w	r2, [sl, #4]
 8009800:	f1a9 090c 	sub.w	r9, r9, #12
 8009804:	f029 0907 	bic.w	r9, r9, #7
 8009808:	f002 0201 	and.w	r2, r2, #1
 800980c:	ea42 0209 	orr.w	r2, r2, r9
 8009810:	f8ca 2004 	str.w	r2, [sl, #4]
 8009814:	2105      	movs	r1, #5
 8009816:	eb0a 0209 	add.w	r2, sl, r9
 800981a:	f1b9 0f0f 	cmp.w	r9, #15
 800981e:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8009822:	f67f aefe 	bls.w	8009622 <_malloc_r+0x24a>
 8009826:	f10a 0108 	add.w	r1, sl, #8
 800982a:	4628      	mov	r0, r5
 800982c:	f7ff fd14 	bl	8009258 <_free_r>
 8009830:	4b05      	ldr	r3, [pc, #20]	@ (8009848 <_malloc_r+0x470>)
 8009832:	e6f6      	b.n	8009622 <_malloc_r+0x24a>
 8009834:	68b4      	ldr	r4, [r6, #8]
 8009836:	f047 0301 	orr.w	r3, r7, #1
 800983a:	4427      	add	r7, r4
 800983c:	f042 0201 	orr.w	r2, r2, #1
 8009840:	6063      	str	r3, [r4, #4]
 8009842:	60b7      	str	r7, [r6, #8]
 8009844:	607a      	str	r2, [r7, #4]
 8009846:	e5f8      	b.n	800943a <_malloc_r+0x62>
 8009848:	200025ec 	.word	0x200025ec

0800984c <__malloc_lock>:
 800984c:	4801      	ldr	r0, [pc, #4]	@ (8009854 <__malloc_lock+0x8>)
 800984e:	f7ff bc9b 	b.w	8009188 <__retarget_lock_acquire_recursive>
 8009852:	bf00      	nop
 8009854:	200025e4 	.word	0x200025e4

08009858 <__malloc_unlock>:
 8009858:	4801      	ldr	r0, [pc, #4]	@ (8009860 <__malloc_unlock+0x8>)
 800985a:	f7ff bc96 	b.w	800918a <__retarget_lock_release_recursive>
 800985e:	bf00      	nop
 8009860:	200025e4 	.word	0x200025e4
 8009864:	00000000 	.word	0x00000000

08009868 <_svfprintf_r>:
 8009868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	b0d3      	sub	sp, #332	@ 0x14c
 800986e:	468b      	mov	fp, r1
 8009870:	4691      	mov	r9, r2
 8009872:	461e      	mov	r6, r3
 8009874:	9003      	str	r0, [sp, #12]
 8009876:	f001 faeb 	bl	800ae50 <_localeconv_r>
 800987a:	6803      	ldr	r3, [r0, #0]
 800987c:	9316      	str	r3, [sp, #88]	@ 0x58
 800987e:	4618      	mov	r0, r3
 8009880:	f7f6 fcfe 	bl	8000280 <strlen>
 8009884:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009888:	900d      	str	r0, [sp, #52]	@ 0x34
 800988a:	061b      	lsls	r3, r3, #24
 800988c:	d515      	bpl.n	80098ba <_svfprintf_r+0x52>
 800988e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009892:	b993      	cbnz	r3, 80098ba <_svfprintf_r+0x52>
 8009894:	9803      	ldr	r0, [sp, #12]
 8009896:	2140      	movs	r1, #64	@ 0x40
 8009898:	f7ff fd9e 	bl	80093d8 <_malloc_r>
 800989c:	f8cb 0000 	str.w	r0, [fp]
 80098a0:	f8cb 0010 	str.w	r0, [fp, #16]
 80098a4:	b930      	cbnz	r0, 80098b4 <_svfprintf_r+0x4c>
 80098a6:	9a03      	ldr	r2, [sp, #12]
 80098a8:	230c      	movs	r3, #12
 80098aa:	6013      	str	r3, [r2, #0]
 80098ac:	f04f 33ff 	mov.w	r3, #4294967295
 80098b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098b2:	e1f7      	b.n	8009ca4 <_svfprintf_r+0x43c>
 80098b4:	2340      	movs	r3, #64	@ 0x40
 80098b6:	f8cb 3014 	str.w	r3, [fp, #20]
 80098ba:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8009b08 <_svfprintf_r+0x2a0>
 80098be:	2300      	movs	r3, #0
 80098c0:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 80098c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80098c8:	e9cd 3318 	strd	r3, r3, [sp, #96]	@ 0x60
 80098cc:	ac29      	add	r4, sp, #164	@ 0xa4
 80098ce:	9426      	str	r4, [sp, #152]	@ 0x98
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098d4:	9312      	str	r3, [sp, #72]	@ 0x48
 80098d6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80098d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098da:	464b      	mov	r3, r9
 80098dc:	461d      	mov	r5, r3
 80098de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80098e2:	b10a      	cbz	r2, 80098e8 <_svfprintf_r+0x80>
 80098e4:	2a25      	cmp	r2, #37	@ 0x25
 80098e6:	d1f9      	bne.n	80098dc <_svfprintf_r+0x74>
 80098e8:	ebb5 0709 	subs.w	r7, r5, r9
 80098ec:	d00d      	beq.n	800990a <_svfprintf_r+0xa2>
 80098ee:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80098f0:	443b      	add	r3, r7
 80098f2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80098f4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80098f6:	3301      	adds	r3, #1
 80098f8:	2b07      	cmp	r3, #7
 80098fa:	e9c4 9700 	strd	r9, r7, [r4]
 80098fe:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009900:	dc75      	bgt.n	80099ee <_svfprintf_r+0x186>
 8009902:	3408      	adds	r4, #8
 8009904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009906:	443b      	add	r3, r7
 8009908:	930f      	str	r3, [sp, #60]	@ 0x3c
 800990a:	782b      	ldrb	r3, [r5, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	f001 8148 	beq.w	800aba2 <_svfprintf_r+0x133a>
 8009912:	2200      	movs	r2, #0
 8009914:	1c6b      	adds	r3, r5, #1
 8009916:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800991a:	f04f 38ff 	mov.w	r8, #4294967295
 800991e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009920:	4615      	mov	r5, r2
 8009922:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009926:	9206      	str	r2, [sp, #24]
 8009928:	930c      	str	r3, [sp, #48]	@ 0x30
 800992a:	9b06      	ldr	r3, [sp, #24]
 800992c:	3b20      	subs	r3, #32
 800992e:	2b5a      	cmp	r3, #90	@ 0x5a
 8009930:	f200 85a4 	bhi.w	800a47c <_svfprintf_r+0xc14>
 8009934:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009938:	05a2009d 	.word	0x05a2009d
 800993c:	00a505a2 	.word	0x00a505a2
 8009940:	05a205a2 	.word	0x05a205a2
 8009944:	008505a2 	.word	0x008505a2
 8009948:	05a205a2 	.word	0x05a205a2
 800994c:	00b200a8 	.word	0x00b200a8
 8009950:	00af05a2 	.word	0x00af05a2
 8009954:	05a200b4 	.word	0x05a200b4
 8009958:	00d100ce 	.word	0x00d100ce
 800995c:	00d100d1 	.word	0x00d100d1
 8009960:	00d100d1 	.word	0x00d100d1
 8009964:	00d100d1 	.word	0x00d100d1
 8009968:	00d100d1 	.word	0x00d100d1
 800996c:	05a205a2 	.word	0x05a205a2
 8009970:	05a205a2 	.word	0x05a205a2
 8009974:	05a205a2 	.word	0x05a205a2
 8009978:	014705a2 	.word	0x014705a2
 800997c:	010805a2 	.word	0x010805a2
 8009980:	0147011b 	.word	0x0147011b
 8009984:	01470147 	.word	0x01470147
 8009988:	05a205a2 	.word	0x05a205a2
 800998c:	05a205a2 	.word	0x05a205a2
 8009990:	05a200e2 	.word	0x05a200e2
 8009994:	049d05a2 	.word	0x049d05a2
 8009998:	05a205a2 	.word	0x05a205a2
 800999c:	04e705a2 	.word	0x04e705a2
 80099a0:	050805a2 	.word	0x050805a2
 80099a4:	05a205a2 	.word	0x05a205a2
 80099a8:	05a2052a 	.word	0x05a2052a
 80099ac:	05a205a2 	.word	0x05a205a2
 80099b0:	05a205a2 	.word	0x05a205a2
 80099b4:	05a205a2 	.word	0x05a205a2
 80099b8:	014705a2 	.word	0x014705a2
 80099bc:	010805a2 	.word	0x010805a2
 80099c0:	0147011d 	.word	0x0147011d
 80099c4:	01470147 	.word	0x01470147
 80099c8:	011d00ee 	.word	0x011d00ee
 80099cc:	05a20102 	.word	0x05a20102
 80099d0:	05a200fb 	.word	0x05a200fb
 80099d4:	049f047e 	.word	0x049f047e
 80099d8:	010204d6 	.word	0x010204d6
 80099dc:	04e705a2 	.word	0x04e705a2
 80099e0:	050a009b 	.word	0x050a009b
 80099e4:	05a205a2 	.word	0x05a205a2
 80099e8:	05a20065 	.word	0x05a20065
 80099ec:	009b      	.short	0x009b
 80099ee:	9803      	ldr	r0, [sp, #12]
 80099f0:	aa26      	add	r2, sp, #152	@ 0x98
 80099f2:	4659      	mov	r1, fp
 80099f4:	f002 fc40 	bl	800c278 <__ssprint_r>
 80099f8:	2800      	cmp	r0, #0
 80099fa:	f040 814e 	bne.w	8009c9a <_svfprintf_r+0x432>
 80099fe:	ac29      	add	r4, sp, #164	@ 0xa4
 8009a00:	e780      	b.n	8009904 <_svfprintf_r+0x9c>
 8009a02:	4b43      	ldr	r3, [pc, #268]	@ (8009b10 <_svfprintf_r+0x2a8>)
 8009a04:	9319      	str	r3, [sp, #100]	@ 0x64
 8009a06:	f015 0320 	ands.w	r3, r5, #32
 8009a0a:	f000 84c2 	beq.w	800a392 <_svfprintf_r+0xb2a>
 8009a0e:	3607      	adds	r6, #7
 8009a10:	f026 0307 	bic.w	r3, r6, #7
 8009a14:	461a      	mov	r2, r3
 8009a16:	685f      	ldr	r7, [r3, #4]
 8009a18:	f852 6b08 	ldr.w	r6, [r2], #8
 8009a1c:	9207      	str	r2, [sp, #28]
 8009a1e:	07eb      	lsls	r3, r5, #31
 8009a20:	d50a      	bpl.n	8009a38 <_svfprintf_r+0x1d0>
 8009a22:	ea56 0307 	orrs.w	r3, r6, r7
 8009a26:	d007      	beq.n	8009a38 <_svfprintf_r+0x1d0>
 8009a28:	2330      	movs	r3, #48	@ 0x30
 8009a2a:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8009a2e:	9b06      	ldr	r3, [sp, #24]
 8009a30:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8009a34:	f045 0502 	orr.w	r5, r5, #2
 8009a38:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	f000 bc28 	b.w	800a292 <_svfprintf_r+0xa2a>
 8009a42:	9803      	ldr	r0, [sp, #12]
 8009a44:	f001 fa04 	bl	800ae50 <_localeconv_r>
 8009a48:	6843      	ldr	r3, [r0, #4]
 8009a4a:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f7f6 fc17 	bl	8000280 <strlen>
 8009a52:	9012      	str	r0, [sp, #72]	@ 0x48
 8009a54:	9803      	ldr	r0, [sp, #12]
 8009a56:	f001 f9fb 	bl	800ae50 <_localeconv_r>
 8009a5a:	6883      	ldr	r3, [r0, #8]
 8009a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009a60:	b12b      	cbz	r3, 8009a6e <_svfprintf_r+0x206>
 8009a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a64:	b11b      	cbz	r3, 8009a6e <_svfprintf_r+0x206>
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	b10b      	cbz	r3, 8009a6e <_svfprintf_r+0x206>
 8009a6a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8009a6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a70:	e757      	b.n	8009922 <_svfprintf_r+0xba>
 8009a72:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1f9      	bne.n	8009a6e <_svfprintf_r+0x206>
 8009a7a:	2320      	movs	r3, #32
 8009a7c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009a80:	e7f5      	b.n	8009a6e <_svfprintf_r+0x206>
 8009a82:	f045 0501 	orr.w	r5, r5, #1
 8009a86:	e7f2      	b.n	8009a6e <_svfprintf_r+0x206>
 8009a88:	f856 3b04 	ldr.w	r3, [r6], #4
 8009a8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	daed      	bge.n	8009a6e <_svfprintf_r+0x206>
 8009a92:	425b      	negs	r3, r3
 8009a94:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a96:	f045 0504 	orr.w	r5, r5, #4
 8009a9a:	e7e8      	b.n	8009a6e <_svfprintf_r+0x206>
 8009a9c:	232b      	movs	r3, #43	@ 0x2b
 8009a9e:	e7ed      	b.n	8009a7c <_svfprintf_r+0x214>
 8009aa0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aa6:	9206      	str	r2, [sp, #24]
 8009aa8:	2a2a      	cmp	r2, #42	@ 0x2a
 8009aaa:	d10f      	bne.n	8009acc <_svfprintf_r+0x264>
 8009aac:	f856 2b04 	ldr.w	r2, [r6], #4
 8009ab0:	930c      	str	r3, [sp, #48]	@ 0x30
 8009ab2:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 8009ab6:	e7da      	b.n	8009a6e <_svfprintf_r+0x206>
 8009ab8:	fb01 2808 	mla	r8, r1, r8, r2
 8009abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac0:	9206      	str	r2, [sp, #24]
 8009ac2:	9a06      	ldr	r2, [sp, #24]
 8009ac4:	3a30      	subs	r2, #48	@ 0x30
 8009ac6:	2a09      	cmp	r2, #9
 8009ac8:	d9f6      	bls.n	8009ab8 <_svfprintf_r+0x250>
 8009aca:	e72d      	b.n	8009928 <_svfprintf_r+0xc0>
 8009acc:	f04f 0800 	mov.w	r8, #0
 8009ad0:	210a      	movs	r1, #10
 8009ad2:	e7f6      	b.n	8009ac2 <_svfprintf_r+0x25a>
 8009ad4:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8009ad8:	e7c9      	b.n	8009a6e <_svfprintf_r+0x206>
 8009ada:	2200      	movs	r2, #0
 8009adc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ade:	920e      	str	r2, [sp, #56]	@ 0x38
 8009ae0:	210a      	movs	r1, #10
 8009ae2:	9a06      	ldr	r2, [sp, #24]
 8009ae4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009ae6:	3a30      	subs	r2, #48	@ 0x30
 8009ae8:	fb01 2200 	mla	r2, r1, r0, r2
 8009aec:	920e      	str	r2, [sp, #56]	@ 0x38
 8009aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009af2:	9206      	str	r2, [sp, #24]
 8009af4:	3a30      	subs	r2, #48	@ 0x30
 8009af6:	2a09      	cmp	r2, #9
 8009af8:	d9f3      	bls.n	8009ae2 <_svfprintf_r+0x27a>
 8009afa:	e715      	b.n	8009928 <_svfprintf_r+0xc0>
 8009afc:	f045 0508 	orr.w	r5, r5, #8
 8009b00:	e7b5      	b.n	8009a6e <_svfprintf_r+0x206>
 8009b02:	bf00      	nop
 8009b04:	f3af 8000 	nop.w
	...
 8009b10:	0800e828 	.word	0x0800e828
 8009b14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b68      	cmp	r3, #104	@ 0x68
 8009b1a:	bf01      	itttt	eq
 8009b1c:	9b0c      	ldreq	r3, [sp, #48]	@ 0x30
 8009b1e:	3301      	addeq	r3, #1
 8009b20:	930c      	streq	r3, [sp, #48]	@ 0x30
 8009b22:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8009b26:	bf18      	it	ne
 8009b28:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8009b2c:	e79f      	b.n	8009a6e <_svfprintf_r+0x206>
 8009b2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	2b6c      	cmp	r3, #108	@ 0x6c
 8009b34:	d105      	bne.n	8009b42 <_svfprintf_r+0x2da>
 8009b36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b38:	3301      	adds	r3, #1
 8009b3a:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b3c:	f045 0520 	orr.w	r5, r5, #32
 8009b40:	e795      	b.n	8009a6e <_svfprintf_r+0x206>
 8009b42:	f045 0510 	orr.w	r5, r5, #16
 8009b46:	e792      	b.n	8009a6e <_svfprintf_r+0x206>
 8009b48:	4632      	mov	r2, r6
 8009b4a:	f852 3b04 	ldr.w	r3, [r2], #4
 8009b4e:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8009b52:	2300      	movs	r3, #0
 8009b54:	9207      	str	r2, [sp, #28]
 8009b56:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009b5a:	469a      	mov	sl, r3
 8009b5c:	f04f 0801 	mov.w	r8, #1
 8009b60:	9310      	str	r3, [sp, #64]	@ 0x40
 8009b62:	461f      	mov	r7, r3
 8009b64:	9308      	str	r3, [sp, #32]
 8009b66:	461e      	mov	r6, r3
 8009b68:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8009b6c:	e1d2      	b.n	8009f14 <_svfprintf_r+0x6ac>
 8009b6e:	f045 0510 	orr.w	r5, r5, #16
 8009b72:	06af      	lsls	r7, r5, #26
 8009b74:	d512      	bpl.n	8009b9c <_svfprintf_r+0x334>
 8009b76:	3607      	adds	r6, #7
 8009b78:	f026 0307 	bic.w	r3, r6, #7
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	685f      	ldr	r7, [r3, #4]
 8009b80:	f852 6b08 	ldr.w	r6, [r2], #8
 8009b84:	9207      	str	r2, [sp, #28]
 8009b86:	2f00      	cmp	r7, #0
 8009b88:	da06      	bge.n	8009b98 <_svfprintf_r+0x330>
 8009b8a:	4276      	negs	r6, r6
 8009b8c:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8009b90:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009b94:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e37d      	b.n	800a298 <_svfprintf_r+0xa30>
 8009b9c:	4633      	mov	r3, r6
 8009b9e:	06ee      	lsls	r6, r5, #27
 8009ba0:	f853 7b04 	ldr.w	r7, [r3], #4
 8009ba4:	9307      	str	r3, [sp, #28]
 8009ba6:	d502      	bpl.n	8009bae <_svfprintf_r+0x346>
 8009ba8:	463e      	mov	r6, r7
 8009baa:	17ff      	asrs	r7, r7, #31
 8009bac:	e7eb      	b.n	8009b86 <_svfprintf_r+0x31e>
 8009bae:	0668      	lsls	r0, r5, #25
 8009bb0:	d503      	bpl.n	8009bba <_svfprintf_r+0x352>
 8009bb2:	b23e      	sxth	r6, r7
 8009bb4:	f347 37c0 	sbfx	r7, r7, #15, #1
 8009bb8:	e7e5      	b.n	8009b86 <_svfprintf_r+0x31e>
 8009bba:	05a9      	lsls	r1, r5, #22
 8009bbc:	d5f4      	bpl.n	8009ba8 <_svfprintf_r+0x340>
 8009bbe:	b27e      	sxtb	r6, r7
 8009bc0:	f347 17c0 	sbfx	r7, r7, #7, #1
 8009bc4:	e7df      	b.n	8009b86 <_svfprintf_r+0x31e>
 8009bc6:	3607      	adds	r6, #7
 8009bc8:	f026 0307 	bic.w	r3, r6, #7
 8009bcc:	ecb3 7b02 	vldmia	r3!, {d7}
 8009bd0:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009bd4:	9307      	str	r3, [sp, #28]
 8009bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bdc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009be0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009be2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8009be6:	4b81      	ldr	r3, [pc, #516]	@ (8009dec <_svfprintf_r+0x584>)
 8009be8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bec:	f7f6 ffa6 	bl	8000b3c <__aeabi_dcmpun>
 8009bf0:	bb10      	cbnz	r0, 8009c38 <_svfprintf_r+0x3d0>
 8009bf2:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	@ 0x68
 8009bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8009dec <_svfprintf_r+0x584>)
 8009bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfc:	f7f6 ff80 	bl	8000b00 <__aeabi_dcmple>
 8009c00:	b9d0      	cbnz	r0, 8009c38 <_svfprintf_r+0x3d0>
 8009c02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c06:	2200      	movs	r2, #0
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f7f6 ff6f 	bl	8000aec <__aeabi_dcmplt>
 8009c0e:	b110      	cbz	r0, 8009c16 <_svfprintf_r+0x3ae>
 8009c10:	232d      	movs	r3, #45	@ 0x2d
 8009c12:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8009c16:	4a76      	ldr	r2, [pc, #472]	@ (8009df0 <_svfprintf_r+0x588>)
 8009c18:	4b76      	ldr	r3, [pc, #472]	@ (8009df4 <_svfprintf_r+0x58c>)
 8009c1a:	9906      	ldr	r1, [sp, #24]
 8009c1c:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8009c20:	2947      	cmp	r1, #71	@ 0x47
 8009c22:	bfd4      	ite	le
 8009c24:	4691      	movle	r9, r2
 8009c26:	4699      	movgt	r9, r3
 8009c28:	f04f 0a00 	mov.w	sl, #0
 8009c2c:	f04f 0803 	mov.w	r8, #3
 8009c30:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
 8009c34:	f000 bfec 	b.w	800ac10 <_svfprintf_r+0x13a8>
 8009c38:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8009c3c:	4610      	mov	r0, r2
 8009c3e:	4619      	mov	r1, r3
 8009c40:	f7f6 ff7c 	bl	8000b3c <__aeabi_dcmpun>
 8009c44:	4682      	mov	sl, r0
 8009c46:	b140      	cbz	r0, 8009c5a <_svfprintf_r+0x3f2>
 8009c48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c4a:	4a6b      	ldr	r2, [pc, #428]	@ (8009df8 <_svfprintf_r+0x590>)
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	bfbc      	itt	lt
 8009c50:	232d      	movlt	r3, #45	@ 0x2d
 8009c52:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8009c56:	4b69      	ldr	r3, [pc, #420]	@ (8009dfc <_svfprintf_r+0x594>)
 8009c58:	e7df      	b.n	8009c1a <_svfprintf_r+0x3b2>
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	2b61      	cmp	r3, #97	@ 0x61
 8009c5e:	d025      	beq.n	8009cac <_svfprintf_r+0x444>
 8009c60:	2b41      	cmp	r3, #65	@ 0x41
 8009c62:	d125      	bne.n	8009cb0 <_svfprintf_r+0x448>
 8009c64:	2358      	movs	r3, #88	@ 0x58
 8009c66:	2230      	movs	r2, #48	@ 0x30
 8009c68:	f1b8 0f63 	cmp.w	r8, #99	@ 0x63
 8009c6c:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8009c70:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8009c74:	f045 0502 	orr.w	r5, r5, #2
 8009c78:	f340 80a5 	ble.w	8009dc6 <_svfprintf_r+0x55e>
 8009c7c:	9803      	ldr	r0, [sp, #12]
 8009c7e:	f108 0101 	add.w	r1, r8, #1
 8009c82:	f7ff fba9 	bl	80093d8 <_malloc_r>
 8009c86:	4681      	mov	r9, r0
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	f040 80a1 	bne.w	8009dd0 <_svfprintf_r+0x568>
 8009c8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c96:	f8ab 300c 	strh.w	r3, [fp, #12]
 8009c9a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8009c9e:	065b      	lsls	r3, r3, #25
 8009ca0:	f53f ae04 	bmi.w	80098ac <_svfprintf_r+0x44>
 8009ca4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8009ca6:	b053      	add	sp, #332	@ 0x14c
 8009ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cac:	2378      	movs	r3, #120	@ 0x78
 8009cae:	e7da      	b.n	8009c66 <_svfprintf_r+0x3fe>
 8009cb0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009cb4:	f000 808e 	beq.w	8009dd4 <_svfprintf_r+0x56c>
 8009cb8:	9b06      	ldr	r3, [sp, #24]
 8009cba:	f023 0320 	bic.w	r3, r3, #32
 8009cbe:	2b47      	cmp	r3, #71	@ 0x47
 8009cc0:	d105      	bne.n	8009cce <_svfprintf_r+0x466>
 8009cc2:	f1b8 0f00 	cmp.w	r8, #0
 8009cc6:	d102      	bne.n	8009cce <_svfprintf_r+0x466>
 8009cc8:	46c2      	mov	sl, r8
 8009cca:	f04f 0801 	mov.w	r8, #1
 8009cce:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8009cd2:	9311      	str	r3, [sp, #68]	@ 0x44
 8009cd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	da7f      	bge.n	8009dda <_svfprintf_r+0x572>
 8009cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cdc:	9314      	str	r3, [sp, #80]	@ 0x50
 8009cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ce0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009ce4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ce6:	232d      	movs	r3, #45	@ 0x2d
 8009ce8:	931c      	str	r3, [sp, #112]	@ 0x70
 8009cea:	9b06      	ldr	r3, [sp, #24]
 8009cec:	f023 0320 	bic.w	r3, r3, #32
 8009cf0:	2b41      	cmp	r3, #65	@ 0x41
 8009cf2:	9308      	str	r3, [sp, #32]
 8009cf4:	f040 81e6 	bne.w	800a0c4 <_svfprintf_r+0x85c>
 8009cf8:	a820      	add	r0, sp, #128	@ 0x80
 8009cfa:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 8009cfe:	f001 f8db 	bl	800aeb8 <frexp>
 8009d02:	2200      	movs	r2, #0
 8009d04:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009d08:	ec51 0b10 	vmov	r0, r1, d0
 8009d0c:	f7f6 fc7c 	bl	8000608 <__aeabi_dmul>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	f7f6 fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d20:	b108      	cbz	r0, 8009d26 <_svfprintf_r+0x4be>
 8009d22:	2301      	movs	r3, #1
 8009d24:	9320      	str	r3, [sp, #128]	@ 0x80
 8009d26:	4a36      	ldr	r2, [pc, #216]	@ (8009e00 <_svfprintf_r+0x598>)
 8009d28:	4b36      	ldr	r3, [pc, #216]	@ (8009e04 <_svfprintf_r+0x59c>)
 8009d2a:	9906      	ldr	r1, [sp, #24]
 8009d2c:	2961      	cmp	r1, #97	@ 0x61
 8009d2e:	bf18      	it	ne
 8009d30:	461a      	movne	r2, r3
 8009d32:	9210      	str	r2, [sp, #64]	@ 0x40
 8009d34:	f108 37ff 	add.w	r7, r8, #4294967295
 8009d38:	464e      	mov	r6, r9
 8009d3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d3e:	4b32      	ldr	r3, [pc, #200]	@ (8009e08 <_svfprintf_r+0x5a0>)
 8009d40:	2200      	movs	r2, #0
 8009d42:	f7f6 fc61 	bl	8000608 <__aeabi_dmul>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d4e:	f7f6 ff0b 	bl	8000b68 <__aeabi_d2iz>
 8009d52:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009d54:	f7f6 fbee 	bl	8000534 <__aeabi_i2d>
 8009d58:	4602      	mov	r2, r0
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d60:	f7f6 fa9a 	bl	8000298 <__aeabi_dsub>
 8009d64:	4602      	mov	r2, r0
 8009d66:	460b      	mov	r3, r1
 8009d68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009d6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d70:	5c9b      	ldrb	r3, [r3, r2]
 8009d72:	f806 3b01 	strb.w	r3, [r6], #1
 8009d76:	1c7a      	adds	r2, r7, #1
 8009d78:	d006      	beq.n	8009d88 <_svfprintf_r+0x520>
 8009d7a:	1e7b      	subs	r3, r7, #1
 8009d7c:	931d      	str	r3, [sp, #116]	@ 0x74
 8009d7e:	2200      	movs	r2, #0
 8009d80:	2300      	movs	r3, #0
 8009d82:	f7f6 fea9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d86:	b370      	cbz	r0, 8009de6 <_svfprintf_r+0x57e>
 8009d88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8009e0c <_svfprintf_r+0x5a4>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f7f6 feca 	bl	8000b28 <__aeabi_dcmpgt>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	d13b      	bne.n	8009e10 <_svfprintf_r+0x5a8>
 8009d98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8009e0c <_svfprintf_r+0x5a4>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f7f6 fe9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8009da4:	b110      	cbz	r0, 8009dac <_svfprintf_r+0x544>
 8009da6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009da8:	07db      	lsls	r3, r3, #31
 8009daa:	d431      	bmi.n	8009e10 <_svfprintf_r+0x5a8>
 8009dac:	4633      	mov	r3, r6
 8009dae:	19f1      	adds	r1, r6, r7
 8009db0:	2030      	movs	r0, #48	@ 0x30
 8009db2:	1aca      	subs	r2, r1, r3
 8009db4:	2a00      	cmp	r2, #0
 8009db6:	f280 8182 	bge.w	800a0be <_svfprintf_r+0x856>
 8009dba:	1c7b      	adds	r3, r7, #1
 8009dbc:	3701      	adds	r7, #1
 8009dbe:	bfb8      	it	lt
 8009dc0:	2300      	movlt	r3, #0
 8009dc2:	441e      	add	r6, r3
 8009dc4:	e038      	b.n	8009e38 <_svfprintf_r+0x5d0>
 8009dc6:	f04f 0a00 	mov.w	sl, #0
 8009dca:	f10d 09e4 	add.w	r9, sp, #228	@ 0xe4
 8009dce:	e77e      	b.n	8009cce <_svfprintf_r+0x466>
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	e77c      	b.n	8009cce <_svfprintf_r+0x466>
 8009dd4:	f04f 0806 	mov.w	r8, #6
 8009dd8:	e779      	b.n	8009cce <_svfprintf_r+0x466>
 8009dda:	ed9d 7b0a 	vldr	d7, [sp, #40]	@ 0x28
 8009dde:	2300      	movs	r3, #0
 8009de0:	ed8d 7b14 	vstr	d7, [sp, #80]	@ 0x50
 8009de4:	e780      	b.n	8009ce8 <_svfprintf_r+0x480>
 8009de6:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8009de8:	e7a7      	b.n	8009d3a <_svfprintf_r+0x4d2>
 8009dea:	bf00      	nop
 8009dec:	7fefffff 	.word	0x7fefffff
 8009df0:	0800e818 	.word	0x0800e818
 8009df4:	0800e81c 	.word	0x0800e81c
 8009df8:	0800e820 	.word	0x0800e820
 8009dfc:	0800e824 	.word	0x0800e824
 8009e00:	0800e828 	.word	0x0800e828
 8009e04:	0800e839 	.word	0x0800e839
 8009e08:	40300000 	.word	0x40300000
 8009e0c:	3fe00000 	.word	0x3fe00000
 8009e10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e12:	9624      	str	r6, [sp, #144]	@ 0x90
 8009e14:	7bd9      	ldrb	r1, [r3, #15]
 8009e16:	2030      	movs	r0, #48	@ 0x30
 8009e18:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e1a:	1e53      	subs	r3, r2, #1
 8009e1c:	9324      	str	r3, [sp, #144]	@ 0x90
 8009e1e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8009e22:	428b      	cmp	r3, r1
 8009e24:	f000 8148 	beq.w	800a0b8 <_svfprintf_r+0x850>
 8009e28:	2b39      	cmp	r3, #57	@ 0x39
 8009e2a:	bf0b      	itete	eq
 8009e2c:	9b10      	ldreq	r3, [sp, #64]	@ 0x40
 8009e2e:	3301      	addne	r3, #1
 8009e30:	7a9b      	ldrbeq	r3, [r3, #10]
 8009e32:	b2db      	uxtbne	r3, r3
 8009e34:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009e38:	eba6 0309 	sub.w	r3, r6, r9
 8009e3c:	9304      	str	r3, [sp, #16]
 8009e3e:	9b08      	ldr	r3, [sp, #32]
 8009e40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009e42:	2b47      	cmp	r3, #71	@ 0x47
 8009e44:	f040 8187 	bne.w	800a156 <_svfprintf_r+0x8ee>
 8009e48:	1cf1      	adds	r1, r6, #3
 8009e4a:	db02      	blt.n	8009e52 <_svfprintf_r+0x5ea>
 8009e4c:	4546      	cmp	r6, r8
 8009e4e:	f340 81a5 	ble.w	800a19c <_svfprintf_r+0x934>
 8009e52:	9b06      	ldr	r3, [sp, #24]
 8009e54:	3b02      	subs	r3, #2
 8009e56:	9306      	str	r3, [sp, #24]
 8009e58:	9906      	ldr	r1, [sp, #24]
 8009e5a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8009e5e:	f021 0120 	bic.w	r1, r1, #32
 8009e62:	2941      	cmp	r1, #65	@ 0x41
 8009e64:	bf08      	it	eq
 8009e66:	320f      	addeq	r2, #15
 8009e68:	f106 33ff 	add.w	r3, r6, #4294967295
 8009e6c:	bf06      	itte	eq
 8009e6e:	b2d2      	uxtbeq	r2, r2
 8009e70:	2101      	moveq	r1, #1
 8009e72:	2100      	movne	r1, #0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	9320      	str	r3, [sp, #128]	@ 0x80
 8009e78:	bfb8      	it	lt
 8009e7a:	f1c6 0301 	rsblt	r3, r6, #1
 8009e7e:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8009e82:	bfb4      	ite	lt
 8009e84:	222d      	movlt	r2, #45	@ 0x2d
 8009e86:	222b      	movge	r2, #43	@ 0x2b
 8009e88:	2b09      	cmp	r3, #9
 8009e8a:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8009e8e:	f340 8178 	ble.w	800a182 <_svfprintf_r+0x91a>
 8009e92:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8009e96:	270a      	movs	r7, #10
 8009e98:	4602      	mov	r2, r0
 8009e9a:	fbb3 f6f7 	udiv	r6, r3, r7
 8009e9e:	fb07 3116 	mls	r1, r7, r6, r3
 8009ea2:	3130      	adds	r1, #48	@ 0x30
 8009ea4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	2963      	cmp	r1, #99	@ 0x63
 8009eac:	f100 30ff 	add.w	r0, r0, #4294967295
 8009eb0:	4633      	mov	r3, r6
 8009eb2:	dcf1      	bgt.n	8009e98 <_svfprintf_r+0x630>
 8009eb4:	3330      	adds	r3, #48	@ 0x30
 8009eb6:	1e91      	subs	r1, r2, #2
 8009eb8:	f800 3c01 	strb.w	r3, [r0, #-1]
 8009ebc:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8009ec6:	4283      	cmp	r3, r0
 8009ec8:	f0c0 8156 	bcc.w	800a178 <_svfprintf_r+0x910>
 8009ecc:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	4281      	cmp	r1, r0
 8009ed4:	bf88      	it	hi
 8009ed6:	2300      	movhi	r3, #0
 8009ed8:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8009edc:	441a      	add	r2, r3
 8009ede:	ab22      	add	r3, sp, #136	@ 0x88
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	9a04      	ldr	r2, [sp, #16]
 8009ee4:	9318      	str	r3, [sp, #96]	@ 0x60
 8009ee6:	2a01      	cmp	r2, #1
 8009ee8:	eb03 0802 	add.w	r8, r3, r2
 8009eec:	dc01      	bgt.n	8009ef2 <_svfprintf_r+0x68a>
 8009eee:	07ea      	lsls	r2, r5, #31
 8009ef0:	d501      	bpl.n	8009ef6 <_svfprintf_r+0x68e>
 8009ef2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ef4:	4498      	add	r8, r3
 8009ef6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8009efa:	2700      	movs	r7, #0
 8009efc:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8009f00:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f02:	9708      	str	r7, [sp, #32]
 8009f04:	463e      	mov	r6, r7
 8009f06:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 818f 	bne.w	800a22c <_svfprintf_r+0x9c4>
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8009f12:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f14:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009f16:	4543      	cmp	r3, r8
 8009f18:	bfb8      	it	lt
 8009f1a:	4643      	movlt	r3, r8
 8009f1c:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f1e:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8009f22:	b113      	cbz	r3, 8009f2a <_svfprintf_r+0x6c2>
 8009f24:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f26:	3301      	adds	r3, #1
 8009f28:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f2a:	f015 0302 	ands.w	r3, r5, #2
 8009f2e:	931c      	str	r3, [sp, #112]	@ 0x70
 8009f30:	bf1e      	ittt	ne
 8009f32:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 8009f34:	3302      	addne	r3, #2
 8009f36:	9311      	strne	r3, [sp, #68]	@ 0x44
 8009f38:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8009f3c:	931d      	str	r3, [sp, #116]	@ 0x74
 8009f3e:	d122      	bne.n	8009f86 <_svfprintf_r+0x71e>
 8009f40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f42:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f4a:	dd1c      	ble.n	8009f86 <_svfprintf_r+0x71e>
 8009f4c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009f4e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8009f52:	2810      	cmp	r0, #16
 8009f54:	489e      	ldr	r0, [pc, #632]	@ (800a1d0 <_svfprintf_r+0x968>)
 8009f56:	6020      	str	r0, [r4, #0]
 8009f58:	f102 0201 	add.w	r2, r2, #1
 8009f5c:	f104 0108 	add.w	r1, r4, #8
 8009f60:	f300 8298 	bgt.w	800a494 <_svfprintf_r+0xc2c>
 8009f64:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009f66:	6060      	str	r0, [r4, #4]
 8009f68:	4403      	add	r3, r0
 8009f6a:	2a07      	cmp	r2, #7
 8009f6c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8009f70:	f340 82a5 	ble.w	800a4be <_svfprintf_r+0xc56>
 8009f74:	9803      	ldr	r0, [sp, #12]
 8009f76:	aa26      	add	r2, sp, #152	@ 0x98
 8009f78:	4659      	mov	r1, fp
 8009f7a:	f002 f97d 	bl	800c278 <__ssprint_r>
 8009f7e:	2800      	cmp	r0, #0
 8009f80:	f040 85ed 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 8009f84:	ac29      	add	r4, sp, #164	@ 0xa4
 8009f86:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 8009f8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009f8c:	b16a      	cbz	r2, 8009faa <_svfprintf_r+0x742>
 8009f8e:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8009f92:	6022      	str	r2, [r4, #0]
 8009f94:	2201      	movs	r2, #1
 8009f96:	4413      	add	r3, r2
 8009f98:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009f9a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009f9c:	6062      	str	r2, [r4, #4]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	2b07      	cmp	r3, #7
 8009fa2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009fa4:	f300 828d 	bgt.w	800a4c2 <_svfprintf_r+0xc5a>
 8009fa8:	3408      	adds	r4, #8
 8009faa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009fac:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8009fae:	b162      	cbz	r2, 8009fca <_svfprintf_r+0x762>
 8009fb0:	aa1f      	add	r2, sp, #124	@ 0x7c
 8009fb2:	6022      	str	r2, [r4, #0]
 8009fb4:	2202      	movs	r2, #2
 8009fb6:	4413      	add	r3, r2
 8009fb8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8009fba:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8009fbc:	6062      	str	r2, [r4, #4]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	2b07      	cmp	r3, #7
 8009fc2:	9327      	str	r3, [sp, #156]	@ 0x9c
 8009fc4:	f300 8287 	bgt.w	800a4d6 <_svfprintf_r+0xc6e>
 8009fc8:	3408      	adds	r4, #8
 8009fca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fcc:	2b80      	cmp	r3, #128	@ 0x80
 8009fce:	d122      	bne.n	800a016 <_svfprintf_r+0x7ae>
 8009fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fd2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009fda:	dd1c      	ble.n	800a016 <_svfprintf_r+0x7ae>
 8009fdc:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009fde:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 8009fe2:	2810      	cmp	r0, #16
 8009fe4:	487b      	ldr	r0, [pc, #492]	@ (800a1d4 <_svfprintf_r+0x96c>)
 8009fe6:	6020      	str	r0, [r4, #0]
 8009fe8:	f102 0201 	add.w	r2, r2, #1
 8009fec:	f104 0108 	add.w	r1, r4, #8
 8009ff0:	f300 827b 	bgt.w	800a4ea <_svfprintf_r+0xc82>
 8009ff4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8009ff6:	6060      	str	r0, [r4, #4]
 8009ff8:	4403      	add	r3, r0
 8009ffa:	2a07      	cmp	r2, #7
 8009ffc:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a000:	f340 8288 	ble.w	800a514 <_svfprintf_r+0xcac>
 800a004:	9803      	ldr	r0, [sp, #12]
 800a006:	aa26      	add	r2, sp, #152	@ 0x98
 800a008:	4659      	mov	r1, fp
 800a00a:	f002 f935 	bl	800c278 <__ssprint_r>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f040 85a5 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a014:	ac29      	add	r4, sp, #164	@ 0xa4
 800a016:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a018:	eba3 0308 	sub.w	r3, r3, r8
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a020:	dd1c      	ble.n	800a05c <_svfprintf_r+0x7f4>
 800a022:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a024:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a028:	2810      	cmp	r0, #16
 800a02a:	486a      	ldr	r0, [pc, #424]	@ (800a1d4 <_svfprintf_r+0x96c>)
 800a02c:	6020      	str	r0, [r4, #0]
 800a02e:	f102 0201 	add.w	r2, r2, #1
 800a032:	f104 0108 	add.w	r1, r4, #8
 800a036:	f300 826f 	bgt.w	800a518 <_svfprintf_r+0xcb0>
 800a03a:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800a03c:	6060      	str	r0, [r4, #4]
 800a03e:	4403      	add	r3, r0
 800a040:	2a07      	cmp	r2, #7
 800a042:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a046:	f340 827c 	ble.w	800a542 <_svfprintf_r+0xcda>
 800a04a:	9803      	ldr	r0, [sp, #12]
 800a04c:	aa26      	add	r2, sp, #152	@ 0x98
 800a04e:	4659      	mov	r1, fp
 800a050:	f002 f912 	bl	800c278 <__ssprint_r>
 800a054:	2800      	cmp	r0, #0
 800a056:	f040 8582 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a05a:	ac29      	add	r4, sp, #164	@ 0xa4
 800a05c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a05e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a060:	05ea      	lsls	r2, r5, #23
 800a062:	f100 8275 	bmi.w	800a550 <_svfprintf_r+0xce8>
 800a066:	4443      	add	r3, r8
 800a068:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a06a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a06c:	3301      	adds	r3, #1
 800a06e:	2b07      	cmp	r3, #7
 800a070:	e9c4 9800 	strd	r9, r8, [r4]
 800a074:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a076:	f300 82b1 	bgt.w	800a5dc <_svfprintf_r+0xd74>
 800a07a:	3408      	adds	r4, #8
 800a07c:	076a      	lsls	r2, r5, #29
 800a07e:	f100 8550 	bmi.w	800ab22 <_svfprintf_r+0x12ba>
 800a082:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a086:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800a088:	428a      	cmp	r2, r1
 800a08a:	bfac      	ite	ge
 800a08c:	189b      	addge	r3, r3, r2
 800a08e:	185b      	addlt	r3, r3, r1
 800a090:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a092:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a094:	b13b      	cbz	r3, 800a0a6 <_svfprintf_r+0x83e>
 800a096:	9803      	ldr	r0, [sp, #12]
 800a098:	aa26      	add	r2, sp, #152	@ 0x98
 800a09a:	4659      	mov	r1, fp
 800a09c:	f002 f8ec 	bl	800c278 <__ssprint_r>
 800a0a0:	2800      	cmp	r0, #0
 800a0a2:	f040 855c 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a0aa:	f1ba 0f00 	cmp.w	sl, #0
 800a0ae:	f040 8572 	bne.w	800ab96 <_svfprintf_r+0x132e>
 800a0b2:	9e07      	ldr	r6, [sp, #28]
 800a0b4:	ac29      	add	r4, sp, #164	@ 0xa4
 800a0b6:	e0c6      	b.n	800a246 <_svfprintf_r+0x9de>
 800a0b8:	f802 0c01 	strb.w	r0, [r2, #-1]
 800a0bc:	e6ac      	b.n	8009e18 <_svfprintf_r+0x5b0>
 800a0be:	f803 0b01 	strb.w	r0, [r3], #1
 800a0c2:	e676      	b.n	8009db2 <_svfprintf_r+0x54a>
 800a0c4:	9b08      	ldr	r3, [sp, #32]
 800a0c6:	2b46      	cmp	r3, #70	@ 0x46
 800a0c8:	d005      	beq.n	800a0d6 <_svfprintf_r+0x86e>
 800a0ca:	2b45      	cmp	r3, #69	@ 0x45
 800a0cc:	d11a      	bne.n	800a104 <_svfprintf_r+0x89c>
 800a0ce:	f108 0601 	add.w	r6, r8, #1
 800a0d2:	2102      	movs	r1, #2
 800a0d4:	e001      	b.n	800a0da <_svfprintf_r+0x872>
 800a0d6:	4646      	mov	r6, r8
 800a0d8:	2103      	movs	r1, #3
 800a0da:	ab24      	add	r3, sp, #144	@ 0x90
 800a0dc:	9301      	str	r3, [sp, #4]
 800a0de:	ab21      	add	r3, sp, #132	@ 0x84
 800a0e0:	9300      	str	r3, [sp, #0]
 800a0e2:	ed9d 0b14 	vldr	d0, [sp, #80]	@ 0x50
 800a0e6:	ab20      	add	r3, sp, #128	@ 0x80
 800a0e8:	9803      	ldr	r0, [sp, #12]
 800a0ea:	4632      	mov	r2, r6
 800a0ec:	f000 ffe4 	bl	800b0b8 <_dtoa_r>
 800a0f0:	9b08      	ldr	r3, [sp, #32]
 800a0f2:	2b47      	cmp	r3, #71	@ 0x47
 800a0f4:	4681      	mov	r9, r0
 800a0f6:	d119      	bne.n	800a12c <_svfprintf_r+0x8c4>
 800a0f8:	07e8      	lsls	r0, r5, #31
 800a0fa:	d405      	bmi.n	800a108 <_svfprintf_r+0x8a0>
 800a0fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a0fe:	eba3 0309 	sub.w	r3, r3, r9
 800a102:	e69b      	b.n	8009e3c <_svfprintf_r+0x5d4>
 800a104:	4646      	mov	r6, r8
 800a106:	e7e4      	b.n	800a0d2 <_svfprintf_r+0x86a>
 800a108:	eb09 0706 	add.w	r7, r9, r6
 800a10c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800a110:	2200      	movs	r2, #0
 800a112:	2300      	movs	r3, #0
 800a114:	f7f6 fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a118:	b100      	cbz	r0, 800a11c <_svfprintf_r+0x8b4>
 800a11a:	9724      	str	r7, [sp, #144]	@ 0x90
 800a11c:	2230      	movs	r2, #48	@ 0x30
 800a11e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a120:	429f      	cmp	r7, r3
 800a122:	d9eb      	bls.n	800a0fc <_svfprintf_r+0x894>
 800a124:	1c59      	adds	r1, r3, #1
 800a126:	9124      	str	r1, [sp, #144]	@ 0x90
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	e7f8      	b.n	800a11e <_svfprintf_r+0x8b6>
 800a12c:	9b08      	ldr	r3, [sp, #32]
 800a12e:	2b46      	cmp	r3, #70	@ 0x46
 800a130:	eb00 0706 	add.w	r7, r0, r6
 800a134:	d1ea      	bne.n	800a10c <_svfprintf_r+0x8a4>
 800a136:	7803      	ldrb	r3, [r0, #0]
 800a138:	2b30      	cmp	r3, #48	@ 0x30
 800a13a:	d109      	bne.n	800a150 <_svfprintf_r+0x8e8>
 800a13c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	@ 0x50
 800a140:	2200      	movs	r2, #0
 800a142:	2300      	movs	r3, #0
 800a144:	f7f6 fcc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a148:	b910      	cbnz	r0, 800a150 <_svfprintf_r+0x8e8>
 800a14a:	f1c6 0601 	rsb	r6, r6, #1
 800a14e:	9620      	str	r6, [sp, #128]	@ 0x80
 800a150:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a152:	441f      	add	r7, r3
 800a154:	e7da      	b.n	800a10c <_svfprintf_r+0x8a4>
 800a156:	9b08      	ldr	r3, [sp, #32]
 800a158:	2b46      	cmp	r3, #70	@ 0x46
 800a15a:	f47f ae7d 	bne.w	8009e58 <_svfprintf_r+0x5f0>
 800a15e:	f005 0301 	and.w	r3, r5, #1
 800a162:	2e00      	cmp	r6, #0
 800a164:	ea43 0308 	orr.w	r3, r3, r8
 800a168:	dd25      	ble.n	800a1b6 <_svfprintf_r+0x94e>
 800a16a:	b37b      	cbz	r3, 800a1cc <_svfprintf_r+0x964>
 800a16c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a16e:	18f3      	adds	r3, r6, r3
 800a170:	4498      	add	r8, r3
 800a172:	2366      	movs	r3, #102	@ 0x66
 800a174:	9306      	str	r3, [sp, #24]
 800a176:	e033      	b.n	800a1e0 <_svfprintf_r+0x978>
 800a178:	f813 7b01 	ldrb.w	r7, [r3], #1
 800a17c:	f806 7f01 	strb.w	r7, [r6, #1]!
 800a180:	e6a1      	b.n	8009ec6 <_svfprintf_r+0x65e>
 800a182:	b941      	cbnz	r1, 800a196 <_svfprintf_r+0x92e>
 800a184:	2230      	movs	r2, #48	@ 0x30
 800a186:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800a18a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800a18e:	3330      	adds	r3, #48	@ 0x30
 800a190:	f802 3b01 	strb.w	r3, [r2], #1
 800a194:	e6a3      	b.n	8009ede <_svfprintf_r+0x676>
 800a196:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800a19a:	e7f8      	b.n	800a18e <_svfprintf_r+0x926>
 800a19c:	9b04      	ldr	r3, [sp, #16]
 800a19e:	429e      	cmp	r6, r3
 800a1a0:	da0d      	bge.n	800a1be <_svfprintf_r+0x956>
 800a1a2:	9b04      	ldr	r3, [sp, #16]
 800a1a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a1a6:	2e00      	cmp	r6, #0
 800a1a8:	eb03 0802 	add.w	r8, r3, r2
 800a1ac:	dc0c      	bgt.n	800a1c8 <_svfprintf_r+0x960>
 800a1ae:	f1c6 0301 	rsb	r3, r6, #1
 800a1b2:	4498      	add	r8, r3
 800a1b4:	e008      	b.n	800a1c8 <_svfprintf_r+0x960>
 800a1b6:	b17b      	cbz	r3, 800a1d8 <_svfprintf_r+0x970>
 800a1b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	e7d8      	b.n	800a170 <_svfprintf_r+0x908>
 800a1be:	07eb      	lsls	r3, r5, #31
 800a1c0:	d521      	bpl.n	800a206 <_svfprintf_r+0x99e>
 800a1c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1c4:	eb06 0803 	add.w	r8, r6, r3
 800a1c8:	2367      	movs	r3, #103	@ 0x67
 800a1ca:	e7d3      	b.n	800a174 <_svfprintf_r+0x90c>
 800a1cc:	46b0      	mov	r8, r6
 800a1ce:	e7d0      	b.n	800a172 <_svfprintf_r+0x90a>
 800a1d0:	0800e85c 	.word	0x0800e85c
 800a1d4:	0800e84c 	.word	0x0800e84c
 800a1d8:	2366      	movs	r3, #102	@ 0x66
 800a1da:	9306      	str	r3, [sp, #24]
 800a1dc:	f04f 0801 	mov.w	r8, #1
 800a1e0:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 800a1e4:	9308      	str	r3, [sp, #32]
 800a1e6:	d01f      	beq.n	800a228 <_svfprintf_r+0x9c0>
 800a1e8:	2700      	movs	r7, #0
 800a1ea:	2e00      	cmp	r6, #0
 800a1ec:	9708      	str	r7, [sp, #32]
 800a1ee:	f77f ae8a 	ble.w	8009f06 <_svfprintf_r+0x69e>
 800a1f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	2bff      	cmp	r3, #255	@ 0xff
 800a1f8:	d107      	bne.n	800a20a <_svfprintf_r+0x9a2>
 800a1fa:	9b08      	ldr	r3, [sp, #32]
 800a1fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a1fe:	443b      	add	r3, r7
 800a200:	fb02 8803 	mla	r8, r2, r3, r8
 800a204:	e67f      	b.n	8009f06 <_svfprintf_r+0x69e>
 800a206:	46b0      	mov	r8, r6
 800a208:	e7de      	b.n	800a1c8 <_svfprintf_r+0x960>
 800a20a:	42b3      	cmp	r3, r6
 800a20c:	daf5      	bge.n	800a1fa <_svfprintf_r+0x992>
 800a20e:	1af6      	subs	r6, r6, r3
 800a210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a212:	785b      	ldrb	r3, [r3, #1]
 800a214:	b133      	cbz	r3, 800a224 <_svfprintf_r+0x9bc>
 800a216:	9b08      	ldr	r3, [sp, #32]
 800a218:	3301      	adds	r3, #1
 800a21a:	9308      	str	r3, [sp, #32]
 800a21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21e:	3301      	adds	r3, #1
 800a220:	9309      	str	r3, [sp, #36]	@ 0x24
 800a222:	e7e6      	b.n	800a1f2 <_svfprintf_r+0x98a>
 800a224:	3701      	adds	r7, #1
 800a226:	e7e4      	b.n	800a1f2 <_svfprintf_r+0x98a>
 800a228:	9f08      	ldr	r7, [sp, #32]
 800a22a:	e66c      	b.n	8009f06 <_svfprintf_r+0x69e>
 800a22c:	232d      	movs	r3, #45	@ 0x2d
 800a22e:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a232:	e66c      	b.n	8009f0e <_svfprintf_r+0x6a6>
 800a234:	06af      	lsls	r7, r5, #26
 800a236:	d50a      	bpl.n	800a24e <_svfprintf_r+0x9e6>
 800a238:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a23a:	6833      	ldr	r3, [r6, #0]
 800a23c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a23e:	17d2      	asrs	r2, r2, #31
 800a240:	e9c3 1200 	strd	r1, r2, [r3]
 800a244:	3604      	adds	r6, #4
 800a246:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
 800a24a:	f7ff bb46 	b.w	80098da <_svfprintf_r+0x72>
 800a24e:	06e8      	lsls	r0, r5, #27
 800a250:	d503      	bpl.n	800a25a <_svfprintf_r+0x9f2>
 800a252:	6833      	ldr	r3, [r6, #0]
 800a254:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a256:	601a      	str	r2, [r3, #0]
 800a258:	e7f4      	b.n	800a244 <_svfprintf_r+0x9dc>
 800a25a:	0669      	lsls	r1, r5, #25
 800a25c:	d503      	bpl.n	800a266 <_svfprintf_r+0x9fe>
 800a25e:	6833      	ldr	r3, [r6, #0]
 800a260:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a262:	801a      	strh	r2, [r3, #0]
 800a264:	e7ee      	b.n	800a244 <_svfprintf_r+0x9dc>
 800a266:	05aa      	lsls	r2, r5, #22
 800a268:	d5f3      	bpl.n	800a252 <_svfprintf_r+0x9ea>
 800a26a:	6833      	ldr	r3, [r6, #0]
 800a26c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a26e:	701a      	strb	r2, [r3, #0]
 800a270:	e7e8      	b.n	800a244 <_svfprintf_r+0x9dc>
 800a272:	f045 0510 	orr.w	r5, r5, #16
 800a276:	f015 0320 	ands.w	r3, r5, #32
 800a27a:	d020      	beq.n	800a2be <_svfprintf_r+0xa56>
 800a27c:	3607      	adds	r6, #7
 800a27e:	f026 0307 	bic.w	r3, r6, #7
 800a282:	461a      	mov	r2, r3
 800a284:	685f      	ldr	r7, [r3, #4]
 800a286:	f852 6b08 	ldr.w	r6, [r2], #8
 800a28a:	9207      	str	r2, [sp, #28]
 800a28c:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800a290:	2300      	movs	r3, #0
 800a292:	2200      	movs	r2, #0
 800a294:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 800a298:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a29c:	f000 848c 	beq.w	800abb8 <_svfprintf_r+0x1350>
 800a2a0:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 800a2a4:	9208      	str	r2, [sp, #32]
 800a2a6:	ea56 0207 	orrs.w	r2, r6, r7
 800a2aa:	f040 848a 	bne.w	800abc2 <_svfprintf_r+0x135a>
 800a2ae:	f1b8 0f00 	cmp.w	r8, #0
 800a2b2:	f000 80db 	beq.w	800a46c <_svfprintf_r+0xc04>
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	f040 8486 	bne.w	800abc8 <_svfprintf_r+0x1360>
 800a2bc:	e083      	b.n	800a3c6 <_svfprintf_r+0xb5e>
 800a2be:	4632      	mov	r2, r6
 800a2c0:	f015 0710 	ands.w	r7, r5, #16
 800a2c4:	f852 6b04 	ldr.w	r6, [r2], #4
 800a2c8:	9207      	str	r2, [sp, #28]
 800a2ca:	d001      	beq.n	800a2d0 <_svfprintf_r+0xa68>
 800a2cc:	461f      	mov	r7, r3
 800a2ce:	e7dd      	b.n	800a28c <_svfprintf_r+0xa24>
 800a2d0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800a2d4:	d001      	beq.n	800a2da <_svfprintf_r+0xa72>
 800a2d6:	b2b6      	uxth	r6, r6
 800a2d8:	e7d8      	b.n	800a28c <_svfprintf_r+0xa24>
 800a2da:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800a2de:	d0d5      	beq.n	800a28c <_svfprintf_r+0xa24>
 800a2e0:	b2f6      	uxtb	r6, r6
 800a2e2:	e7f3      	b.n	800a2cc <_svfprintf_r+0xa64>
 800a2e4:	4633      	mov	r3, r6
 800a2e6:	2278      	movs	r2, #120	@ 0x78
 800a2e8:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2ec:	9307      	str	r3, [sp, #28]
 800a2ee:	f647 0330 	movw	r3, #30768	@ 0x7830
 800a2f2:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 800a2f6:	4b94      	ldr	r3, [pc, #592]	@ (800a548 <_svfprintf_r+0xce0>)
 800a2f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2fa:	2700      	movs	r7, #0
 800a2fc:	f045 0502 	orr.w	r5, r5, #2
 800a300:	2302      	movs	r3, #2
 800a302:	9206      	str	r2, [sp, #24]
 800a304:	e7c5      	b.n	800a292 <_svfprintf_r+0xa2a>
 800a306:	4633      	mov	r3, r6
 800a308:	f1b8 3fff 	cmp.w	r8, #4294967295
 800a30c:	f853 9b04 	ldr.w	r9, [r3], #4
 800a310:	9307      	str	r3, [sp, #28]
 800a312:	f04f 0600 	mov.w	r6, #0
 800a316:	f88d 607b 	strb.w	r6, [sp, #123]	@ 0x7b
 800a31a:	d00f      	beq.n	800a33c <_svfprintf_r+0xad4>
 800a31c:	4642      	mov	r2, r8
 800a31e:	4631      	mov	r1, r6
 800a320:	4648      	mov	r0, r9
 800a322:	f7f5 ff5d 	bl	80001e0 <memchr>
 800a326:	4682      	mov	sl, r0
 800a328:	2800      	cmp	r0, #0
 800a32a:	f43f ac81 	beq.w	8009c30 <_svfprintf_r+0x3c8>
 800a32e:	eba0 0809 	sub.w	r8, r0, r9
 800a332:	46b2      	mov	sl, r6
 800a334:	9610      	str	r6, [sp, #64]	@ 0x40
 800a336:	4637      	mov	r7, r6
 800a338:	9608      	str	r6, [sp, #32]
 800a33a:	e5eb      	b.n	8009f14 <_svfprintf_r+0x6ac>
 800a33c:	4648      	mov	r0, r9
 800a33e:	f7f5 ff9f 	bl	8000280 <strlen>
 800a342:	46b2      	mov	sl, r6
 800a344:	4680      	mov	r8, r0
 800a346:	e473      	b.n	8009c30 <_svfprintf_r+0x3c8>
 800a348:	f045 0510 	orr.w	r5, r5, #16
 800a34c:	f015 0320 	ands.w	r3, r5, #32
 800a350:	d009      	beq.n	800a366 <_svfprintf_r+0xafe>
 800a352:	3607      	adds	r6, #7
 800a354:	f026 0307 	bic.w	r3, r6, #7
 800a358:	461a      	mov	r2, r3
 800a35a:	685f      	ldr	r7, [r3, #4]
 800a35c:	f852 6b08 	ldr.w	r6, [r2], #8
 800a360:	9207      	str	r2, [sp, #28]
 800a362:	2301      	movs	r3, #1
 800a364:	e795      	b.n	800a292 <_svfprintf_r+0xa2a>
 800a366:	4632      	mov	r2, r6
 800a368:	f015 0710 	ands.w	r7, r5, #16
 800a36c:	f852 6b04 	ldr.w	r6, [r2], #4
 800a370:	9207      	str	r2, [sp, #28]
 800a372:	d001      	beq.n	800a378 <_svfprintf_r+0xb10>
 800a374:	461f      	mov	r7, r3
 800a376:	e7f4      	b.n	800a362 <_svfprintf_r+0xafa>
 800a378:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800a37c:	d001      	beq.n	800a382 <_svfprintf_r+0xb1a>
 800a37e:	b2b6      	uxth	r6, r6
 800a380:	e7ef      	b.n	800a362 <_svfprintf_r+0xafa>
 800a382:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800a386:	d0ec      	beq.n	800a362 <_svfprintf_r+0xafa>
 800a388:	b2f6      	uxtb	r6, r6
 800a38a:	e7f3      	b.n	800a374 <_svfprintf_r+0xb0c>
 800a38c:	4b6f      	ldr	r3, [pc, #444]	@ (800a54c <_svfprintf_r+0xce4>)
 800a38e:	f7ff bb39 	b.w	8009a04 <_svfprintf_r+0x19c>
 800a392:	4632      	mov	r2, r6
 800a394:	f015 0710 	ands.w	r7, r5, #16
 800a398:	f852 6b04 	ldr.w	r6, [r2], #4
 800a39c:	9207      	str	r2, [sp, #28]
 800a39e:	d002      	beq.n	800a3a6 <_svfprintf_r+0xb3e>
 800a3a0:	461f      	mov	r7, r3
 800a3a2:	f7ff bb3c 	b.w	8009a1e <_svfprintf_r+0x1b6>
 800a3a6:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800a3aa:	d002      	beq.n	800a3b2 <_svfprintf_r+0xb4a>
 800a3ac:	b2b6      	uxth	r6, r6
 800a3ae:	f7ff bb36 	b.w	8009a1e <_svfprintf_r+0x1b6>
 800a3b2:	f415 7700 	ands.w	r7, r5, #512	@ 0x200
 800a3b6:	f43f ab32 	beq.w	8009a1e <_svfprintf_r+0x1b6>
 800a3ba:	b2f6      	uxtb	r6, r6
 800a3bc:	e7f0      	b.n	800a3a0 <_svfprintf_r+0xb38>
 800a3be:	2e0a      	cmp	r6, #10
 800a3c0:	f177 0300 	sbcs.w	r3, r7, #0
 800a3c4:	d207      	bcs.n	800a3d6 <_svfprintf_r+0xb6e>
 800a3c6:	3630      	adds	r6, #48	@ 0x30
 800a3c8:	b2f6      	uxtb	r6, r6
 800a3ca:	f88d 6147 	strb.w	r6, [sp, #327]	@ 0x147
 800a3ce:	f20d 1947 	addw	r9, sp, #327	@ 0x147
 800a3d2:	f000 bc15 	b.w	800ac00 <_svfprintf_r+0x1398>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	9304      	str	r3, [sp, #16]
 800a3da:	9b08      	ldr	r3, [sp, #32]
 800a3dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a3e0:	ad52      	add	r5, sp, #328	@ 0x148
 800a3e2:	9310      	str	r3, [sp, #64]	@ 0x40
 800a3e4:	220a      	movs	r2, #10
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	f7f6 fbe4 	bl	8000bb8 <__aeabi_uldivmod>
 800a3f0:	9b04      	ldr	r3, [sp, #16]
 800a3f2:	9011      	str	r0, [sp, #68]	@ 0x44
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	9304      	str	r3, [sp, #16]
 800a3f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a3fa:	3230      	adds	r2, #48	@ 0x30
 800a3fc:	468a      	mov	sl, r1
 800a3fe:	f105 39ff 	add.w	r9, r5, #4294967295
 800a402:	f805 2c01 	strb.w	r2, [r5, #-1]
 800a406:	b1d3      	cbz	r3, 800a43e <_svfprintf_r+0xbd6>
 800a408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a40a:	9a04      	ldr	r2, [sp, #16]
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d115      	bne.n	800a43e <_svfprintf_r+0xbd6>
 800a412:	2aff      	cmp	r2, #255	@ 0xff
 800a414:	d013      	beq.n	800a43e <_svfprintf_r+0xbd6>
 800a416:	2e0a      	cmp	r6, #10
 800a418:	f177 0300 	sbcs.w	r3, r7, #0
 800a41c:	d30f      	bcc.n	800a43e <_svfprintf_r+0xbd6>
 800a41e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a420:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800a422:	eba9 0903 	sub.w	r9, r9, r3
 800a426:	461a      	mov	r2, r3
 800a428:	4648      	mov	r0, r9
 800a42a:	f000 fcfe 	bl	800ae2a <strncpy>
 800a42e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a430:	785b      	ldrb	r3, [r3, #1]
 800a432:	b11b      	cbz	r3, 800a43c <_svfprintf_r+0xbd4>
 800a434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a436:	3301      	adds	r3, #1
 800a438:	9309      	str	r3, [sp, #36]	@ 0x24
 800a43a:	2300      	movs	r3, #0
 800a43c:	9304      	str	r3, [sp, #16]
 800a43e:	2e0a      	cmp	r6, #10
 800a440:	f177 0700 	sbcs.w	r7, r7, #0
 800a444:	f0c0 83dc 	bcc.w	800ac00 <_svfprintf_r+0x1398>
 800a448:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800a44a:	4657      	mov	r7, sl
 800a44c:	464d      	mov	r5, r9
 800a44e:	e7c9      	b.n	800a3e4 <_svfprintf_r+0xb7c>
 800a450:	f006 030f 	and.w	r3, r6, #15
 800a454:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a456:	0936      	lsrs	r6, r6, #4
 800a458:	5cd3      	ldrb	r3, [r2, r3]
 800a45a:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800a45e:	ea46 7607 	orr.w	r6, r6, r7, lsl #28
 800a462:	093f      	lsrs	r7, r7, #4
 800a464:	ea56 0307 	orrs.w	r3, r6, r7
 800a468:	d1f2      	bne.n	800a450 <_svfprintf_r+0xbe8>
 800a46a:	e3c9      	b.n	800ac00 <_svfprintf_r+0x1398>
 800a46c:	b91b      	cbnz	r3, 800a476 <_svfprintf_r+0xc0e>
 800a46e:	07e9      	lsls	r1, r5, #31
 800a470:	d501      	bpl.n	800a476 <_svfprintf_r+0xc0e>
 800a472:	2630      	movs	r6, #48	@ 0x30
 800a474:	e7a9      	b.n	800a3ca <_svfprintf_r+0xb62>
 800a476:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800a47a:	e3c1      	b.n	800ac00 <_svfprintf_r+0x1398>
 800a47c:	9b06      	ldr	r3, [sp, #24]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f000 838f 	beq.w	800aba2 <_svfprintf_r+0x133a>
 800a484:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 800a488:	2300      	movs	r3, #0
 800a48a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800a48e:	9607      	str	r6, [sp, #28]
 800a490:	f7ff bb63 	b.w	8009b5a <_svfprintf_r+0x2f2>
 800a494:	2010      	movs	r0, #16
 800a496:	4403      	add	r3, r0
 800a498:	2a07      	cmp	r2, #7
 800a49a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a49e:	6060      	str	r0, [r4, #4]
 800a4a0:	dd08      	ble.n	800a4b4 <_svfprintf_r+0xc4c>
 800a4a2:	9803      	ldr	r0, [sp, #12]
 800a4a4:	aa26      	add	r2, sp, #152	@ 0x98
 800a4a6:	4659      	mov	r1, fp
 800a4a8:	f001 fee6 	bl	800c278 <__ssprint_r>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	f040 8356 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a4b2:	a929      	add	r1, sp, #164	@ 0xa4
 800a4b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a4b6:	3b10      	subs	r3, #16
 800a4b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4ba:	460c      	mov	r4, r1
 800a4bc:	e546      	b.n	8009f4c <_svfprintf_r+0x6e4>
 800a4be:	460c      	mov	r4, r1
 800a4c0:	e561      	b.n	8009f86 <_svfprintf_r+0x71e>
 800a4c2:	9803      	ldr	r0, [sp, #12]
 800a4c4:	aa26      	add	r2, sp, #152	@ 0x98
 800a4c6:	4659      	mov	r1, fp
 800a4c8:	f001 fed6 	bl	800c278 <__ssprint_r>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f040 8346 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a4d2:	ac29      	add	r4, sp, #164	@ 0xa4
 800a4d4:	e569      	b.n	8009faa <_svfprintf_r+0x742>
 800a4d6:	9803      	ldr	r0, [sp, #12]
 800a4d8:	aa26      	add	r2, sp, #152	@ 0x98
 800a4da:	4659      	mov	r1, fp
 800a4dc:	f001 fecc 	bl	800c278 <__ssprint_r>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	f040 833c 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a4e6:	ac29      	add	r4, sp, #164	@ 0xa4
 800a4e8:	e56f      	b.n	8009fca <_svfprintf_r+0x762>
 800a4ea:	2010      	movs	r0, #16
 800a4ec:	4403      	add	r3, r0
 800a4ee:	2a07      	cmp	r2, #7
 800a4f0:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a4f4:	6060      	str	r0, [r4, #4]
 800a4f6:	dd08      	ble.n	800a50a <_svfprintf_r+0xca2>
 800a4f8:	9803      	ldr	r0, [sp, #12]
 800a4fa:	aa26      	add	r2, sp, #152	@ 0x98
 800a4fc:	4659      	mov	r1, fp
 800a4fe:	f001 febb 	bl	800c278 <__ssprint_r>
 800a502:	2800      	cmp	r0, #0
 800a504:	f040 832b 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a508:	a929      	add	r1, sp, #164	@ 0xa4
 800a50a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a50c:	3b10      	subs	r3, #16
 800a50e:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a510:	460c      	mov	r4, r1
 800a512:	e563      	b.n	8009fdc <_svfprintf_r+0x774>
 800a514:	460c      	mov	r4, r1
 800a516:	e57e      	b.n	800a016 <_svfprintf_r+0x7ae>
 800a518:	2010      	movs	r0, #16
 800a51a:	4403      	add	r3, r0
 800a51c:	2a07      	cmp	r2, #7
 800a51e:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a522:	6060      	str	r0, [r4, #4]
 800a524:	dd08      	ble.n	800a538 <_svfprintf_r+0xcd0>
 800a526:	9803      	ldr	r0, [sp, #12]
 800a528:	aa26      	add	r2, sp, #152	@ 0x98
 800a52a:	4659      	mov	r1, fp
 800a52c:	f001 fea4 	bl	800c278 <__ssprint_r>
 800a530:	2800      	cmp	r0, #0
 800a532:	f040 8314 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a536:	a929      	add	r1, sp, #164	@ 0xa4
 800a538:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a53a:	3b10      	subs	r3, #16
 800a53c:	9310      	str	r3, [sp, #64]	@ 0x40
 800a53e:	460c      	mov	r4, r1
 800a540:	e56f      	b.n	800a022 <_svfprintf_r+0x7ba>
 800a542:	460c      	mov	r4, r1
 800a544:	e58a      	b.n	800a05c <_svfprintf_r+0x7f4>
 800a546:	bf00      	nop
 800a548:	0800e828 	.word	0x0800e828
 800a54c:	0800e839 	.word	0x0800e839
 800a550:	9b06      	ldr	r3, [sp, #24]
 800a552:	2b65      	cmp	r3, #101	@ 0x65
 800a554:	f340 8246 	ble.w	800a9e4 <_svfprintf_r+0x117c>
 800a558:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a55c:	2200      	movs	r2, #0
 800a55e:	2300      	movs	r3, #0
 800a560:	f7f6 faba 	bl	8000ad8 <__aeabi_dcmpeq>
 800a564:	2800      	cmp	r0, #0
 800a566:	d06a      	beq.n	800a63e <_svfprintf_r+0xdd6>
 800a568:	4b73      	ldr	r3, [pc, #460]	@ (800a738 <_svfprintf_r+0xed0>)
 800a56a:	6023      	str	r3, [r4, #0]
 800a56c:	2301      	movs	r3, #1
 800a56e:	6063      	str	r3, [r4, #4]
 800a570:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a572:	3301      	adds	r3, #1
 800a574:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a576:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a578:	3301      	adds	r3, #1
 800a57a:	2b07      	cmp	r3, #7
 800a57c:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a57e:	dc37      	bgt.n	800a5f0 <_svfprintf_r+0xd88>
 800a580:	3408      	adds	r4, #8
 800a582:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a584:	9a04      	ldr	r2, [sp, #16]
 800a586:	4293      	cmp	r3, r2
 800a588:	db02      	blt.n	800a590 <_svfprintf_r+0xd28>
 800a58a:	07ef      	lsls	r7, r5, #31
 800a58c:	f57f ad76 	bpl.w	800a07c <_svfprintf_r+0x814>
 800a590:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a592:	6023      	str	r3, [r4, #0]
 800a594:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a596:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a598:	6063      	str	r3, [r4, #4]
 800a59a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a59c:	4413      	add	r3, r2
 800a59e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a5a0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	2b07      	cmp	r3, #7
 800a5a6:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a5a8:	dc2c      	bgt.n	800a604 <_svfprintf_r+0xd9c>
 800a5aa:	3408      	adds	r4, #8
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	1e5e      	subs	r6, r3, #1
 800a5b0:	2e00      	cmp	r6, #0
 800a5b2:	f77f ad63 	ble.w	800a07c <_svfprintf_r+0x814>
 800a5b6:	4f61      	ldr	r7, [pc, #388]	@ (800a73c <_svfprintf_r+0xed4>)
 800a5b8:	f04f 0810 	mov.w	r8, #16
 800a5bc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800a5c0:	2e10      	cmp	r6, #16
 800a5c2:	f103 0301 	add.w	r3, r3, #1
 800a5c6:	f104 0108 	add.w	r1, r4, #8
 800a5ca:	6027      	str	r7, [r4, #0]
 800a5cc:	dc24      	bgt.n	800a618 <_svfprintf_r+0xdb0>
 800a5ce:	6066      	str	r6, [r4, #4]
 800a5d0:	2b07      	cmp	r3, #7
 800a5d2:	4416      	add	r6, r2
 800a5d4:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800a5d8:	f340 82a0 	ble.w	800ab1c <_svfprintf_r+0x12b4>
 800a5dc:	9803      	ldr	r0, [sp, #12]
 800a5de:	aa26      	add	r2, sp, #152	@ 0x98
 800a5e0:	4659      	mov	r1, fp
 800a5e2:	f001 fe49 	bl	800c278 <__ssprint_r>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f040 82b9 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a5ec:	ac29      	add	r4, sp, #164	@ 0xa4
 800a5ee:	e545      	b.n	800a07c <_svfprintf_r+0x814>
 800a5f0:	9803      	ldr	r0, [sp, #12]
 800a5f2:	aa26      	add	r2, sp, #152	@ 0x98
 800a5f4:	4659      	mov	r1, fp
 800a5f6:	f001 fe3f 	bl	800c278 <__ssprint_r>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	f040 82af 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a600:	ac29      	add	r4, sp, #164	@ 0xa4
 800a602:	e7be      	b.n	800a582 <_svfprintf_r+0xd1a>
 800a604:	9803      	ldr	r0, [sp, #12]
 800a606:	aa26      	add	r2, sp, #152	@ 0x98
 800a608:	4659      	mov	r1, fp
 800a60a:	f001 fe35 	bl	800c278 <__ssprint_r>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f040 82a5 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a614:	ac29      	add	r4, sp, #164	@ 0xa4
 800a616:	e7c9      	b.n	800a5ac <_svfprintf_r+0xd44>
 800a618:	3210      	adds	r2, #16
 800a61a:	2b07      	cmp	r3, #7
 800a61c:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a620:	f8c4 8004 	str.w	r8, [r4, #4]
 800a624:	dd08      	ble.n	800a638 <_svfprintf_r+0xdd0>
 800a626:	9803      	ldr	r0, [sp, #12]
 800a628:	aa26      	add	r2, sp, #152	@ 0x98
 800a62a:	4659      	mov	r1, fp
 800a62c:	f001 fe24 	bl	800c278 <__ssprint_r>
 800a630:	2800      	cmp	r0, #0
 800a632:	f040 8294 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a636:	a929      	add	r1, sp, #164	@ 0xa4
 800a638:	3e10      	subs	r6, #16
 800a63a:	460c      	mov	r4, r1
 800a63c:	e7be      	b.n	800a5bc <_svfprintf_r+0xd54>
 800a63e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a640:	2b00      	cmp	r3, #0
 800a642:	dc7d      	bgt.n	800a740 <_svfprintf_r+0xed8>
 800a644:	4b3c      	ldr	r3, [pc, #240]	@ (800a738 <_svfprintf_r+0xed0>)
 800a646:	6023      	str	r3, [r4, #0]
 800a648:	2301      	movs	r3, #1
 800a64a:	6063      	str	r3, [r4, #4]
 800a64c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a64e:	3301      	adds	r3, #1
 800a650:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a652:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a654:	3301      	adds	r3, #1
 800a656:	2b07      	cmp	r3, #7
 800a658:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a65a:	dc46      	bgt.n	800a6ea <_svfprintf_r+0xe82>
 800a65c:	3408      	adds	r4, #8
 800a65e:	9904      	ldr	r1, [sp, #16]
 800a660:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a662:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800a664:	430b      	orrs	r3, r1
 800a666:	f005 0101 	and.w	r1, r5, #1
 800a66a:	430b      	orrs	r3, r1
 800a66c:	f43f ad06 	beq.w	800a07c <_svfprintf_r+0x814>
 800a670:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a676:	6063      	str	r3, [r4, #4]
 800a678:	441a      	add	r2, r3
 800a67a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a67c:	9228      	str	r2, [sp, #160]	@ 0xa0
 800a67e:	3301      	adds	r3, #1
 800a680:	2b07      	cmp	r3, #7
 800a682:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a684:	dc3b      	bgt.n	800a6fe <_svfprintf_r+0xe96>
 800a686:	f104 0308 	add.w	r3, r4, #8
 800a68a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a68c:	2e00      	cmp	r6, #0
 800a68e:	da1b      	bge.n	800a6c8 <_svfprintf_r+0xe60>
 800a690:	4f2a      	ldr	r7, [pc, #168]	@ (800a73c <_svfprintf_r+0xed4>)
 800a692:	4276      	negs	r6, r6
 800a694:	461a      	mov	r2, r3
 800a696:	2410      	movs	r4, #16
 800a698:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 800a69c:	2e10      	cmp	r6, #16
 800a69e:	f101 0101 	add.w	r1, r1, #1
 800a6a2:	f103 0308 	add.w	r3, r3, #8
 800a6a6:	6017      	str	r7, [r2, #0]
 800a6a8:	dc33      	bgt.n	800a712 <_svfprintf_r+0xeaa>
 800a6aa:	6056      	str	r6, [r2, #4]
 800a6ac:	2907      	cmp	r1, #7
 800a6ae:	4406      	add	r6, r0
 800a6b0:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800a6b4:	dd08      	ble.n	800a6c8 <_svfprintf_r+0xe60>
 800a6b6:	9803      	ldr	r0, [sp, #12]
 800a6b8:	aa26      	add	r2, sp, #152	@ 0x98
 800a6ba:	4659      	mov	r1, fp
 800a6bc:	f001 fddc 	bl	800c278 <__ssprint_r>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	f040 824c 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a6c6:	ab29      	add	r3, sp, #164	@ 0xa4
 800a6c8:	9a04      	ldr	r2, [sp, #16]
 800a6ca:	9904      	ldr	r1, [sp, #16]
 800a6cc:	605a      	str	r2, [r3, #4]
 800a6ce:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 800a6d0:	f8c3 9000 	str.w	r9, [r3]
 800a6d4:	440a      	add	r2, r1
 800a6d6:	9228      	str	r2, [sp, #160]	@ 0xa0
 800a6d8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800a6da:	3201      	adds	r2, #1
 800a6dc:	2a07      	cmp	r2, #7
 800a6de:	9227      	str	r2, [sp, #156]	@ 0x9c
 800a6e0:	f73f af7c 	bgt.w	800a5dc <_svfprintf_r+0xd74>
 800a6e4:	f103 0408 	add.w	r4, r3, #8
 800a6e8:	e4c8      	b.n	800a07c <_svfprintf_r+0x814>
 800a6ea:	9803      	ldr	r0, [sp, #12]
 800a6ec:	aa26      	add	r2, sp, #152	@ 0x98
 800a6ee:	4659      	mov	r1, fp
 800a6f0:	f001 fdc2 	bl	800c278 <__ssprint_r>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	f040 8232 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a6fa:	ac29      	add	r4, sp, #164	@ 0xa4
 800a6fc:	e7af      	b.n	800a65e <_svfprintf_r+0xdf6>
 800a6fe:	9803      	ldr	r0, [sp, #12]
 800a700:	aa26      	add	r2, sp, #152	@ 0x98
 800a702:	4659      	mov	r1, fp
 800a704:	f001 fdb8 	bl	800c278 <__ssprint_r>
 800a708:	2800      	cmp	r0, #0
 800a70a:	f040 8228 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a70e:	ab29      	add	r3, sp, #164	@ 0xa4
 800a710:	e7bb      	b.n	800a68a <_svfprintf_r+0xe22>
 800a712:	3010      	adds	r0, #16
 800a714:	2907      	cmp	r1, #7
 800a716:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 800a71a:	6054      	str	r4, [r2, #4]
 800a71c:	dd08      	ble.n	800a730 <_svfprintf_r+0xec8>
 800a71e:	9803      	ldr	r0, [sp, #12]
 800a720:	aa26      	add	r2, sp, #152	@ 0x98
 800a722:	4659      	mov	r1, fp
 800a724:	f001 fda8 	bl	800c278 <__ssprint_r>
 800a728:	2800      	cmp	r0, #0
 800a72a:	f040 8218 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a72e:	ab29      	add	r3, sp, #164	@ 0xa4
 800a730:	3e10      	subs	r6, #16
 800a732:	461a      	mov	r2, r3
 800a734:	e7b0      	b.n	800a698 <_svfprintf_r+0xe30>
 800a736:	bf00      	nop
 800a738:	0800e84a 	.word	0x0800e84a
 800a73c:	0800e84c 	.word	0x0800e84c
 800a740:	9b04      	ldr	r3, [sp, #16]
 800a742:	444b      	add	r3, r9
 800a744:	9306      	str	r3, [sp, #24]
 800a746:	9b04      	ldr	r3, [sp, #16]
 800a748:	42b3      	cmp	r3, r6
 800a74a:	bfa8      	it	ge
 800a74c:	4633      	movge	r3, r6
 800a74e:	2b00      	cmp	r3, #0
 800a750:	4698      	mov	r8, r3
 800a752:	dd0b      	ble.n	800a76c <_svfprintf_r+0xf04>
 800a754:	e9c4 9300 	strd	r9, r3, [r4]
 800a758:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a75a:	4443      	add	r3, r8
 800a75c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a75e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a760:	3301      	adds	r3, #1
 800a762:	2b07      	cmp	r3, #7
 800a764:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a766:	f300 8089 	bgt.w	800a87c <_svfprintf_r+0x1014>
 800a76a:	3408      	adds	r4, #8
 800a76c:	4643      	mov	r3, r8
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bfac      	ite	ge
 800a772:	eba6 0808 	subge.w	r8, r6, r8
 800a776:	46b0      	movlt	r8, r6
 800a778:	f1b8 0f00 	cmp.w	r8, #0
 800a77c:	dd1b      	ble.n	800a7b6 <_svfprintf_r+0xf4e>
 800a77e:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800a782:	4897      	ldr	r0, [pc, #604]	@ (800a9e0 <_svfprintf_r+0x1178>)
 800a784:	6020      	str	r0, [r4, #0]
 800a786:	f1b8 0f10 	cmp.w	r8, #16
 800a78a:	f102 0201 	add.w	r2, r2, #1
 800a78e:	f104 0108 	add.w	r1, r4, #8
 800a792:	dc7d      	bgt.n	800a890 <_svfprintf_r+0x1028>
 800a794:	4443      	add	r3, r8
 800a796:	2a07      	cmp	r2, #7
 800a798:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a79c:	f8c4 8004 	str.w	r8, [r4, #4]
 800a7a0:	f340 808a 	ble.w	800a8b8 <_svfprintf_r+0x1050>
 800a7a4:	9803      	ldr	r0, [sp, #12]
 800a7a6:	aa26      	add	r2, sp, #152	@ 0x98
 800a7a8:	4659      	mov	r1, fp
 800a7aa:	f001 fd65 	bl	800c278 <__ssprint_r>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f040 81d5 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a7b4:	ac29      	add	r4, sp, #164	@ 0xa4
 800a7b6:	eb09 0806 	add.w	r8, r9, r6
 800a7ba:	056e      	lsls	r6, r5, #21
 800a7bc:	d508      	bpl.n	800a7d0 <_svfprintf_r+0xf68>
 800a7be:	9b08      	ldr	r3, [sp, #32]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d17b      	bne.n	800a8bc <_svfprintf_r+0x1054>
 800a7c4:	2f00      	cmp	r7, #0
 800a7c6:	d17b      	bne.n	800a8c0 <_svfprintf_r+0x1058>
 800a7c8:	9b06      	ldr	r3, [sp, #24]
 800a7ca:	4598      	cmp	r8, r3
 800a7cc:	bf28      	it	cs
 800a7ce:	4698      	movcs	r8, r3
 800a7d0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a7d2:	9a04      	ldr	r2, [sp, #16]
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	db01      	blt.n	800a7dc <_svfprintf_r+0xf74>
 800a7d8:	07e8      	lsls	r0, r5, #31
 800a7da:	d50e      	bpl.n	800a7fa <_svfprintf_r+0xf92>
 800a7dc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a7e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7e4:	6063      	str	r3, [r4, #4]
 800a7e6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a7e8:	4413      	add	r3, r2
 800a7ea:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a7ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	2b07      	cmp	r3, #7
 800a7f2:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a7f4:	f300 80df 	bgt.w	800a9b6 <_svfprintf_r+0x114e>
 800a7f8:	3408      	adds	r4, #8
 800a7fa:	9b04      	ldr	r3, [sp, #16]
 800a7fc:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800a7fe:	1bdf      	subs	r7, r3, r7
 800a800:	9b06      	ldr	r3, [sp, #24]
 800a802:	eba3 0308 	sub.w	r3, r3, r8
 800a806:	429f      	cmp	r7, r3
 800a808:	bfa8      	it	ge
 800a80a:	461f      	movge	r7, r3
 800a80c:	2f00      	cmp	r7, #0
 800a80e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a810:	dd0a      	ble.n	800a828 <_svfprintf_r+0xfc0>
 800a812:	443b      	add	r3, r7
 800a814:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a816:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a818:	3301      	adds	r3, #1
 800a81a:	2b07      	cmp	r3, #7
 800a81c:	e9c4 8700 	strd	r8, r7, [r4]
 800a820:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a822:	f300 80d2 	bgt.w	800a9ca <_svfprintf_r+0x1162>
 800a826:	3408      	adds	r4, #8
 800a828:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a82a:	9b04      	ldr	r3, [sp, #16]
 800a82c:	2f00      	cmp	r7, #0
 800a82e:	eba3 0606 	sub.w	r6, r3, r6
 800a832:	bfa8      	it	ge
 800a834:	1bf6      	subge	r6, r6, r7
 800a836:	2e00      	cmp	r6, #0
 800a838:	f77f ac20 	ble.w	800a07c <_svfprintf_r+0x814>
 800a83c:	4f68      	ldr	r7, [pc, #416]	@ (800a9e0 <_svfprintf_r+0x1178>)
 800a83e:	f04f 0810 	mov.w	r8, #16
 800a842:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800a846:	2e10      	cmp	r6, #16
 800a848:	f103 0301 	add.w	r3, r3, #1
 800a84c:	f104 0108 	add.w	r1, r4, #8
 800a850:	6027      	str	r7, [r4, #0]
 800a852:	f77f aebc 	ble.w	800a5ce <_svfprintf_r+0xd66>
 800a856:	3210      	adds	r2, #16
 800a858:	2b07      	cmp	r3, #7
 800a85a:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a85e:	f8c4 8004 	str.w	r8, [r4, #4]
 800a862:	dd08      	ble.n	800a876 <_svfprintf_r+0x100e>
 800a864:	9803      	ldr	r0, [sp, #12]
 800a866:	aa26      	add	r2, sp, #152	@ 0x98
 800a868:	4659      	mov	r1, fp
 800a86a:	f001 fd05 	bl	800c278 <__ssprint_r>
 800a86e:	2800      	cmp	r0, #0
 800a870:	f040 8175 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a874:	a929      	add	r1, sp, #164	@ 0xa4
 800a876:	3e10      	subs	r6, #16
 800a878:	460c      	mov	r4, r1
 800a87a:	e7e2      	b.n	800a842 <_svfprintf_r+0xfda>
 800a87c:	9803      	ldr	r0, [sp, #12]
 800a87e:	aa26      	add	r2, sp, #152	@ 0x98
 800a880:	4659      	mov	r1, fp
 800a882:	f001 fcf9 	bl	800c278 <__ssprint_r>
 800a886:	2800      	cmp	r0, #0
 800a888:	f040 8169 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a88c:	ac29      	add	r4, sp, #164	@ 0xa4
 800a88e:	e76d      	b.n	800a76c <_svfprintf_r+0xf04>
 800a890:	2010      	movs	r0, #16
 800a892:	4403      	add	r3, r0
 800a894:	2a07      	cmp	r2, #7
 800a896:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800a89a:	6060      	str	r0, [r4, #4]
 800a89c:	dd08      	ble.n	800a8b0 <_svfprintf_r+0x1048>
 800a89e:	9803      	ldr	r0, [sp, #12]
 800a8a0:	aa26      	add	r2, sp, #152	@ 0x98
 800a8a2:	4659      	mov	r1, fp
 800a8a4:	f001 fce8 	bl	800c278 <__ssprint_r>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	f040 8158 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a8ae:	a929      	add	r1, sp, #164	@ 0xa4
 800a8b0:	f1a8 0810 	sub.w	r8, r8, #16
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	e762      	b.n	800a77e <_svfprintf_r+0xf16>
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	e77c      	b.n	800a7b6 <_svfprintf_r+0xf4e>
 800a8bc:	2f00      	cmp	r7, #0
 800a8be:	d04a      	beq.n	800a956 <_svfprintf_r+0x10ee>
 800a8c0:	3f01      	subs	r7, #1
 800a8c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a8c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a8ca:	6063      	str	r3, [r4, #4]
 800a8cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a8ce:	4413      	add	r3, r2
 800a8d0:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a8d2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	2b07      	cmp	r3, #7
 800a8d8:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a8da:	dc43      	bgt.n	800a964 <_svfprintf_r+0x10fc>
 800a8dc:	3408      	adds	r4, #8
 800a8de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	9b06      	ldr	r3, [sp, #24]
 800a8e4:	eba3 0308 	sub.w	r3, r3, r8
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	bfa8      	it	ge
 800a8ec:	461a      	movge	r2, r3
 800a8ee:	2a00      	cmp	r2, #0
 800a8f0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800a8f2:	4691      	mov	r9, r2
 800a8f4:	dd09      	ble.n	800a90a <_svfprintf_r+0x10a2>
 800a8f6:	4413      	add	r3, r2
 800a8f8:	9328      	str	r3, [sp, #160]	@ 0xa0
 800a8fa:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	2b07      	cmp	r3, #7
 800a900:	e9c4 8200 	strd	r8, r2, [r4]
 800a904:	9327      	str	r3, [sp, #156]	@ 0x9c
 800a906:	dc37      	bgt.n	800a978 <_svfprintf_r+0x1110>
 800a908:	3408      	adds	r4, #8
 800a90a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a90c:	781e      	ldrb	r6, [r3, #0]
 800a90e:	f1b9 0f00 	cmp.w	r9, #0
 800a912:	bfa8      	it	ge
 800a914:	eba6 0609 	subge.w	r6, r6, r9
 800a918:	2e00      	cmp	r6, #0
 800a91a:	dd18      	ble.n	800a94e <_svfprintf_r+0x10e6>
 800a91c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800a920:	482f      	ldr	r0, [pc, #188]	@ (800a9e0 <_svfprintf_r+0x1178>)
 800a922:	6020      	str	r0, [r4, #0]
 800a924:	2e10      	cmp	r6, #16
 800a926:	f103 0301 	add.w	r3, r3, #1
 800a92a:	f104 0108 	add.w	r1, r4, #8
 800a92e:	dc2d      	bgt.n	800a98c <_svfprintf_r+0x1124>
 800a930:	6066      	str	r6, [r4, #4]
 800a932:	2b07      	cmp	r3, #7
 800a934:	4416      	add	r6, r2
 800a936:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800a93a:	dd3a      	ble.n	800a9b2 <_svfprintf_r+0x114a>
 800a93c:	9803      	ldr	r0, [sp, #12]
 800a93e:	aa26      	add	r2, sp, #152	@ 0x98
 800a940:	4659      	mov	r1, fp
 800a942:	f001 fc99 	bl	800c278 <__ssprint_r>
 800a946:	2800      	cmp	r0, #0
 800a948:	f040 8109 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a94c:	ac29      	add	r4, sp, #164	@ 0xa4
 800a94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	4498      	add	r8, r3
 800a954:	e733      	b.n	800a7be <_svfprintf_r+0xf56>
 800a956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a958:	3b01      	subs	r3, #1
 800a95a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a95c:	9b08      	ldr	r3, [sp, #32]
 800a95e:	3b01      	subs	r3, #1
 800a960:	9308      	str	r3, [sp, #32]
 800a962:	e7ae      	b.n	800a8c2 <_svfprintf_r+0x105a>
 800a964:	9803      	ldr	r0, [sp, #12]
 800a966:	aa26      	add	r2, sp, #152	@ 0x98
 800a968:	4659      	mov	r1, fp
 800a96a:	f001 fc85 	bl	800c278 <__ssprint_r>
 800a96e:	2800      	cmp	r0, #0
 800a970:	f040 80f5 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a974:	ac29      	add	r4, sp, #164	@ 0xa4
 800a976:	e7b2      	b.n	800a8de <_svfprintf_r+0x1076>
 800a978:	9803      	ldr	r0, [sp, #12]
 800a97a:	aa26      	add	r2, sp, #152	@ 0x98
 800a97c:	4659      	mov	r1, fp
 800a97e:	f001 fc7b 	bl	800c278 <__ssprint_r>
 800a982:	2800      	cmp	r0, #0
 800a984:	f040 80eb 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a988:	ac29      	add	r4, sp, #164	@ 0xa4
 800a98a:	e7be      	b.n	800a90a <_svfprintf_r+0x10a2>
 800a98c:	2010      	movs	r0, #16
 800a98e:	4402      	add	r2, r0
 800a990:	2b07      	cmp	r3, #7
 800a992:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800a996:	6060      	str	r0, [r4, #4]
 800a998:	dd08      	ble.n	800a9ac <_svfprintf_r+0x1144>
 800a99a:	9803      	ldr	r0, [sp, #12]
 800a99c:	aa26      	add	r2, sp, #152	@ 0x98
 800a99e:	4659      	mov	r1, fp
 800a9a0:	f001 fc6a 	bl	800c278 <__ssprint_r>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	f040 80da 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a9aa:	a929      	add	r1, sp, #164	@ 0xa4
 800a9ac:	3e10      	subs	r6, #16
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	e7b4      	b.n	800a91c <_svfprintf_r+0x10b4>
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	e7cb      	b.n	800a94e <_svfprintf_r+0x10e6>
 800a9b6:	9803      	ldr	r0, [sp, #12]
 800a9b8:	aa26      	add	r2, sp, #152	@ 0x98
 800a9ba:	4659      	mov	r1, fp
 800a9bc:	f001 fc5c 	bl	800c278 <__ssprint_r>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	f040 80cc 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a9c6:	ac29      	add	r4, sp, #164	@ 0xa4
 800a9c8:	e717      	b.n	800a7fa <_svfprintf_r+0xf92>
 800a9ca:	9803      	ldr	r0, [sp, #12]
 800a9cc:	aa26      	add	r2, sp, #152	@ 0x98
 800a9ce:	4659      	mov	r1, fp
 800a9d0:	f001 fc52 	bl	800c278 <__ssprint_r>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	f040 80c2 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800a9da:	ac29      	add	r4, sp, #164	@ 0xa4
 800a9dc:	e724      	b.n	800a828 <_svfprintf_r+0xfc0>
 800a9de:	bf00      	nop
 800a9e0:	0800e84c 	.word	0x0800e84c
 800a9e4:	9904      	ldr	r1, [sp, #16]
 800a9e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a9e8:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 800a9ea:	2901      	cmp	r1, #1
 800a9ec:	f103 0301 	add.w	r3, r3, #1
 800a9f0:	f102 0201 	add.w	r2, r2, #1
 800a9f4:	f104 0608 	add.w	r6, r4, #8
 800a9f8:	dc02      	bgt.n	800aa00 <_svfprintf_r+0x1198>
 800a9fa:	07e9      	lsls	r1, r5, #31
 800a9fc:	f140 8083 	bpl.w	800ab06 <_svfprintf_r+0x129e>
 800aa00:	2101      	movs	r1, #1
 800aa02:	2a07      	cmp	r2, #7
 800aa04:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800aa08:	f8c4 9000 	str.w	r9, [r4]
 800aa0c:	6061      	str	r1, [r4, #4]
 800aa0e:	dd08      	ble.n	800aa22 <_svfprintf_r+0x11ba>
 800aa10:	9803      	ldr	r0, [sp, #12]
 800aa12:	aa26      	add	r2, sp, #152	@ 0x98
 800aa14:	4659      	mov	r1, fp
 800aa16:	f001 fc2f 	bl	800c278 <__ssprint_r>
 800aa1a:	2800      	cmp	r0, #0
 800aa1c:	f040 809f 	bne.w	800ab5e <_svfprintf_r+0x12f6>
 800aa20:	ae29      	add	r6, sp, #164	@ 0xa4
 800aa22:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa24:	6033      	str	r3, [r6, #0]
 800aa26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa2a:	6073      	str	r3, [r6, #4]
 800aa2c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800aa2e:	4413      	add	r3, r2
 800aa30:	9328      	str	r3, [sp, #160]	@ 0xa0
 800aa32:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800aa34:	3301      	adds	r3, #1
 800aa36:	2b07      	cmp	r3, #7
 800aa38:	9327      	str	r3, [sp, #156]	@ 0x9c
 800aa3a:	dc33      	bgt.n	800aaa4 <_svfprintf_r+0x123c>
 800aa3c:	3608      	adds	r6, #8
 800aa3e:	9b04      	ldr	r3, [sp, #16]
 800aa40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aa44:	1e5c      	subs	r4, r3, #1
 800aa46:	2200      	movs	r2, #0
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 800aa4e:	f7f6 f843 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa52:	2800      	cmp	r0, #0
 800aa54:	d12f      	bne.n	800aab6 <_svfprintf_r+0x124e>
 800aa56:	f109 0201 	add.w	r2, r9, #1
 800aa5a:	e9c6 2400 	strd	r2, r4, [r6]
 800aa5e:	9a04      	ldr	r2, [sp, #16]
 800aa60:	f108 0301 	add.w	r3, r8, #1
 800aa64:	3f01      	subs	r7, #1
 800aa66:	4417      	add	r7, r2
 800aa68:	2b07      	cmp	r3, #7
 800aa6a:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 800aa6e:	dd53      	ble.n	800ab18 <_svfprintf_r+0x12b0>
 800aa70:	9803      	ldr	r0, [sp, #12]
 800aa72:	aa26      	add	r2, sp, #152	@ 0x98
 800aa74:	4659      	mov	r1, fp
 800aa76:	f001 fbff 	bl	800c278 <__ssprint_r>
 800aa7a:	2800      	cmp	r0, #0
 800aa7c:	d16f      	bne.n	800ab5e <_svfprintf_r+0x12f6>
 800aa7e:	ae29      	add	r6, sp, #164	@ 0xa4
 800aa80:	ab22      	add	r3, sp, #136	@ 0x88
 800aa82:	6033      	str	r3, [r6, #0]
 800aa84:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800aa86:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800aa88:	6073      	str	r3, [r6, #4]
 800aa8a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800aa8c:	4413      	add	r3, r2
 800aa8e:	9328      	str	r3, [sp, #160]	@ 0xa0
 800aa90:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800aa92:	3301      	adds	r3, #1
 800aa94:	2b07      	cmp	r3, #7
 800aa96:	9327      	str	r3, [sp, #156]	@ 0x9c
 800aa98:	f73f ada0 	bgt.w	800a5dc <_svfprintf_r+0xd74>
 800aa9c:	f106 0408 	add.w	r4, r6, #8
 800aaa0:	f7ff baec 	b.w	800a07c <_svfprintf_r+0x814>
 800aaa4:	9803      	ldr	r0, [sp, #12]
 800aaa6:	aa26      	add	r2, sp, #152	@ 0x98
 800aaa8:	4659      	mov	r1, fp
 800aaaa:	f001 fbe5 	bl	800c278 <__ssprint_r>
 800aaae:	2800      	cmp	r0, #0
 800aab0:	d155      	bne.n	800ab5e <_svfprintf_r+0x12f6>
 800aab2:	ae29      	add	r6, sp, #164	@ 0xa4
 800aab4:	e7c3      	b.n	800aa3e <_svfprintf_r+0x11d6>
 800aab6:	9b04      	ldr	r3, [sp, #16]
 800aab8:	2b01      	cmp	r3, #1
 800aaba:	dde1      	ble.n	800aa80 <_svfprintf_r+0x1218>
 800aabc:	4f57      	ldr	r7, [pc, #348]	@ (800ac1c <_svfprintf_r+0x13b4>)
 800aabe:	f04f 0810 	mov.w	r8, #16
 800aac2:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800aac6:	2c10      	cmp	r4, #16
 800aac8:	f103 0301 	add.w	r3, r3, #1
 800aacc:	f106 0108 	add.w	r1, r6, #8
 800aad0:	6037      	str	r7, [r6, #0]
 800aad2:	dc07      	bgt.n	800aae4 <_svfprintf_r+0x127c>
 800aad4:	6074      	str	r4, [r6, #4]
 800aad6:	2b07      	cmp	r3, #7
 800aad8:	4414      	add	r4, r2
 800aada:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 800aade:	dcc7      	bgt.n	800aa70 <_svfprintf_r+0x1208>
 800aae0:	460e      	mov	r6, r1
 800aae2:	e7cd      	b.n	800aa80 <_svfprintf_r+0x1218>
 800aae4:	3210      	adds	r2, #16
 800aae6:	2b07      	cmp	r3, #7
 800aae8:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800aaec:	f8c6 8004 	str.w	r8, [r6, #4]
 800aaf0:	dd06      	ble.n	800ab00 <_svfprintf_r+0x1298>
 800aaf2:	9803      	ldr	r0, [sp, #12]
 800aaf4:	aa26      	add	r2, sp, #152	@ 0x98
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	f001 fbbe 	bl	800c278 <__ssprint_r>
 800aafc:	bb78      	cbnz	r0, 800ab5e <_svfprintf_r+0x12f6>
 800aafe:	a929      	add	r1, sp, #164	@ 0xa4
 800ab00:	3c10      	subs	r4, #16
 800ab02:	460e      	mov	r6, r1
 800ab04:	e7dd      	b.n	800aac2 <_svfprintf_r+0x125a>
 800ab06:	2101      	movs	r1, #1
 800ab08:	2a07      	cmp	r2, #7
 800ab0a:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 800ab0e:	f8c4 9000 	str.w	r9, [r4]
 800ab12:	6061      	str	r1, [r4, #4]
 800ab14:	ddb4      	ble.n	800aa80 <_svfprintf_r+0x1218>
 800ab16:	e7ab      	b.n	800aa70 <_svfprintf_r+0x1208>
 800ab18:	3608      	adds	r6, #8
 800ab1a:	e7b1      	b.n	800aa80 <_svfprintf_r+0x1218>
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	f7ff baad 	b.w	800a07c <_svfprintf_r+0x814>
 800ab22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab24:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab26:	1a9d      	subs	r5, r3, r2
 800ab28:	2d00      	cmp	r5, #0
 800ab2a:	f77f aaaa 	ble.w	800a082 <_svfprintf_r+0x81a>
 800ab2e:	4e3c      	ldr	r6, [pc, #240]	@ (800ac20 <_svfprintf_r+0x13b8>)
 800ab30:	2710      	movs	r7, #16
 800ab32:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800ab36:	2d10      	cmp	r5, #16
 800ab38:	f103 0301 	add.w	r3, r3, #1
 800ab3c:	6026      	str	r6, [r4, #0]
 800ab3e:	dc18      	bgt.n	800ab72 <_svfprintf_r+0x130a>
 800ab40:	442a      	add	r2, r5
 800ab42:	2b07      	cmp	r3, #7
 800ab44:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800ab48:	6065      	str	r5, [r4, #4]
 800ab4a:	f77f aa9a 	ble.w	800a082 <_svfprintf_r+0x81a>
 800ab4e:	9803      	ldr	r0, [sp, #12]
 800ab50:	aa26      	add	r2, sp, #152	@ 0x98
 800ab52:	4659      	mov	r1, fp
 800ab54:	f001 fb90 	bl	800c278 <__ssprint_r>
 800ab58:	2800      	cmp	r0, #0
 800ab5a:	f43f aa92 	beq.w	800a082 <_svfprintf_r+0x81a>
 800ab5e:	f1ba 0f00 	cmp.w	sl, #0
 800ab62:	f43f a89a 	beq.w	8009c9a <_svfprintf_r+0x432>
 800ab66:	9803      	ldr	r0, [sp, #12]
 800ab68:	4651      	mov	r1, sl
 800ab6a:	f7fe fb75 	bl	8009258 <_free_r>
 800ab6e:	f7ff b894 	b.w	8009c9a <_svfprintf_r+0x432>
 800ab72:	3210      	adds	r2, #16
 800ab74:	2b07      	cmp	r3, #7
 800ab76:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 800ab7a:	6067      	str	r7, [r4, #4]
 800ab7c:	dc02      	bgt.n	800ab84 <_svfprintf_r+0x131c>
 800ab7e:	3408      	adds	r4, #8
 800ab80:	3d10      	subs	r5, #16
 800ab82:	e7d6      	b.n	800ab32 <_svfprintf_r+0x12ca>
 800ab84:	9803      	ldr	r0, [sp, #12]
 800ab86:	aa26      	add	r2, sp, #152	@ 0x98
 800ab88:	4659      	mov	r1, fp
 800ab8a:	f001 fb75 	bl	800c278 <__ssprint_r>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d1e5      	bne.n	800ab5e <_svfprintf_r+0x12f6>
 800ab92:	ac29      	add	r4, sp, #164	@ 0xa4
 800ab94:	e7f4      	b.n	800ab80 <_svfprintf_r+0x1318>
 800ab96:	9803      	ldr	r0, [sp, #12]
 800ab98:	4651      	mov	r1, sl
 800ab9a:	f7fe fb5d 	bl	8009258 <_free_r>
 800ab9e:	f7ff ba88 	b.w	800a0b2 <_svfprintf_r+0x84a>
 800aba2:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f43f a878 	beq.w	8009c9a <_svfprintf_r+0x432>
 800abaa:	9803      	ldr	r0, [sp, #12]
 800abac:	aa26      	add	r2, sp, #152	@ 0x98
 800abae:	4659      	mov	r1, fp
 800abb0:	f001 fb62 	bl	800c278 <__ssprint_r>
 800abb4:	f7ff b871 	b.w	8009c9a <_svfprintf_r+0x432>
 800abb8:	ea56 0207 	orrs.w	r2, r6, r7
 800abbc:	9508      	str	r5, [sp, #32]
 800abbe:	f43f ab7a 	beq.w	800a2b6 <_svfprintf_r+0xa4e>
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	f43f abfb 	beq.w	800a3be <_svfprintf_r+0xb56>
 800abc8:	2b02      	cmp	r3, #2
 800abca:	f50d 79a4 	add.w	r9, sp, #328	@ 0x148
 800abce:	f43f ac3f 	beq.w	800a450 <_svfprintf_r+0xbe8>
 800abd2:	f006 0307 	and.w	r3, r6, #7
 800abd6:	08f6      	lsrs	r6, r6, #3
 800abd8:	ea46 7647 	orr.w	r6, r6, r7, lsl #29
 800abdc:	08ff      	lsrs	r7, r7, #3
 800abde:	3330      	adds	r3, #48	@ 0x30
 800abe0:	ea56 0107 	orrs.w	r1, r6, r7
 800abe4:	464a      	mov	r2, r9
 800abe6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800abea:	d1f2      	bne.n	800abd2 <_svfprintf_r+0x136a>
 800abec:	9908      	ldr	r1, [sp, #32]
 800abee:	07c8      	lsls	r0, r1, #31
 800abf0:	d506      	bpl.n	800ac00 <_svfprintf_r+0x1398>
 800abf2:	2b30      	cmp	r3, #48	@ 0x30
 800abf4:	d004      	beq.n	800ac00 <_svfprintf_r+0x1398>
 800abf6:	2330      	movs	r3, #48	@ 0x30
 800abf8:	f809 3c01 	strb.w	r3, [r9, #-1]
 800abfc:	f1a2 0902 	sub.w	r9, r2, #2
 800ac00:	ab52      	add	r3, sp, #328	@ 0x148
 800ac02:	9d08      	ldr	r5, [sp, #32]
 800ac04:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800ac08:	f04f 0a00 	mov.w	sl, #0
 800ac0c:	eba3 0809 	sub.w	r8, r3, r9
 800ac10:	4657      	mov	r7, sl
 800ac12:	f8cd a020 	str.w	sl, [sp, #32]
 800ac16:	4656      	mov	r6, sl
 800ac18:	f7ff b97c 	b.w	8009f14 <_svfprintf_r+0x6ac>
 800ac1c:	0800e84c 	.word	0x0800e84c
 800ac20:	0800e85c 	.word	0x0800e85c

0800ac24 <_fclose_r>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	4605      	mov	r5, r0
 800ac28:	460c      	mov	r4, r1
 800ac2a:	b1b1      	cbz	r1, 800ac5a <_fclose_r+0x36>
 800ac2c:	b118      	cbz	r0, 800ac36 <_fclose_r+0x12>
 800ac2e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800ac30:	b90b      	cbnz	r3, 800ac36 <_fclose_r+0x12>
 800ac32:	f7fe f995 	bl	8008f60 <__sinit>
 800ac36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac38:	07de      	lsls	r6, r3, #31
 800ac3a:	d405      	bmi.n	800ac48 <_fclose_r+0x24>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	0598      	lsls	r0, r3, #22
 800ac40:	d402      	bmi.n	800ac48 <_fclose_r+0x24>
 800ac42:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac44:	f7fe faa0 	bl	8009188 <__retarget_lock_acquire_recursive>
 800ac48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac4c:	b943      	cbnz	r3, 800ac60 <_fclose_r+0x3c>
 800ac4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac50:	07d9      	lsls	r1, r3, #31
 800ac52:	d402      	bmi.n	800ac5a <_fclose_r+0x36>
 800ac54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac56:	f7fe fa98 	bl	800918a <__retarget_lock_release_recursive>
 800ac5a:	2600      	movs	r6, #0
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	4621      	mov	r1, r4
 800ac62:	4628      	mov	r0, r5
 800ac64:	f000 f834 	bl	800acd0 <__sflush_r>
 800ac68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac6a:	4606      	mov	r6, r0
 800ac6c:	b133      	cbz	r3, 800ac7c <_fclose_r+0x58>
 800ac6e:	69e1      	ldr	r1, [r4, #28]
 800ac70:	4628      	mov	r0, r5
 800ac72:	4798      	blx	r3
 800ac74:	2800      	cmp	r0, #0
 800ac76:	bfb8      	it	lt
 800ac78:	f04f 36ff 	movlt.w	r6, #4294967295
 800ac7c:	89a3      	ldrh	r3, [r4, #12]
 800ac7e:	061a      	lsls	r2, r3, #24
 800ac80:	d503      	bpl.n	800ac8a <_fclose_r+0x66>
 800ac82:	6921      	ldr	r1, [r4, #16]
 800ac84:	4628      	mov	r0, r5
 800ac86:	f7fe fae7 	bl	8009258 <_free_r>
 800ac8a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ac8c:	b141      	cbz	r1, 800aca0 <_fclose_r+0x7c>
 800ac8e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800ac92:	4299      	cmp	r1, r3
 800ac94:	d002      	beq.n	800ac9c <_fclose_r+0x78>
 800ac96:	4628      	mov	r0, r5
 800ac98:	f7fe fade 	bl	8009258 <_free_r>
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	6323      	str	r3, [r4, #48]	@ 0x30
 800aca0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800aca2:	b121      	cbz	r1, 800acae <_fclose_r+0x8a>
 800aca4:	4628      	mov	r0, r5
 800aca6:	f7fe fad7 	bl	8009258 <_free_r>
 800acaa:	2300      	movs	r3, #0
 800acac:	6463      	str	r3, [r4, #68]	@ 0x44
 800acae:	f7fe f94b 	bl	8008f48 <__sfp_lock_acquire>
 800acb2:	2300      	movs	r3, #0
 800acb4:	81a3      	strh	r3, [r4, #12]
 800acb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800acb8:	07db      	lsls	r3, r3, #31
 800acba:	d402      	bmi.n	800acc2 <_fclose_r+0x9e>
 800acbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acbe:	f7fe fa64 	bl	800918a <__retarget_lock_release_recursive>
 800acc2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acc4:	f7fe fa5f 	bl	8009186 <__retarget_lock_close_recursive>
 800acc8:	f7fe f944 	bl	8008f54 <__sfp_lock_release>
 800accc:	e7c6      	b.n	800ac5c <_fclose_r+0x38>
	...

0800acd0 <__sflush_r>:
 800acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acd4:	4605      	mov	r5, r0
 800acd6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 800acda:	0706      	lsls	r6, r0, #28
 800acdc:	460c      	mov	r4, r1
 800acde:	d457      	bmi.n	800ad90 <__sflush_r+0xc0>
 800ace0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 800ace4:	818b      	strh	r3, [r1, #12]
 800ace6:	684b      	ldr	r3, [r1, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dc02      	bgt.n	800acf2 <__sflush_r+0x22>
 800acec:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 800acee:	2b00      	cmp	r3, #0
 800acf0:	dd4c      	ble.n	800ad8c <__sflush_r+0xbc>
 800acf2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800acf4:	2e00      	cmp	r6, #0
 800acf6:	d049      	beq.n	800ad8c <__sflush_r+0xbc>
 800acf8:	2300      	movs	r3, #0
 800acfa:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 800acfe:	682f      	ldr	r7, [r5, #0]
 800ad00:	69e1      	ldr	r1, [r4, #28]
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	d034      	beq.n	800ad70 <__sflush_r+0xa0>
 800ad06:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800ad08:	89a3      	ldrh	r3, [r4, #12]
 800ad0a:	0759      	lsls	r1, r3, #29
 800ad0c:	d505      	bpl.n	800ad1a <__sflush_r+0x4a>
 800ad0e:	6863      	ldr	r3, [r4, #4]
 800ad10:	1ad2      	subs	r2, r2, r3
 800ad12:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ad14:	b10b      	cbz	r3, 800ad1a <__sflush_r+0x4a>
 800ad16:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ad18:	1ad2      	subs	r2, r2, r3
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ad1e:	69e1      	ldr	r1, [r4, #28]
 800ad20:	4628      	mov	r0, r5
 800ad22:	47b0      	blx	r6
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d106      	bne.n	800ad36 <__sflush_r+0x66>
 800ad28:	682a      	ldr	r2, [r5, #0]
 800ad2a:	2a1d      	cmp	r2, #29
 800ad2c:	d848      	bhi.n	800adc0 <__sflush_r+0xf0>
 800ad2e:	4b2b      	ldr	r3, [pc, #172]	@ (800addc <__sflush_r+0x10c>)
 800ad30:	4113      	asrs	r3, r2
 800ad32:	07de      	lsls	r6, r3, #31
 800ad34:	d444      	bmi.n	800adc0 <__sflush_r+0xf0>
 800ad36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad3e:	81a2      	strh	r2, [r4, #12]
 800ad40:	2200      	movs	r2, #0
 800ad42:	6062      	str	r2, [r4, #4]
 800ad44:	04d9      	lsls	r1, r3, #19
 800ad46:	6922      	ldr	r2, [r4, #16]
 800ad48:	6022      	str	r2, [r4, #0]
 800ad4a:	d504      	bpl.n	800ad56 <__sflush_r+0x86>
 800ad4c:	1c42      	adds	r2, r0, #1
 800ad4e:	d101      	bne.n	800ad54 <__sflush_r+0x84>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b903      	cbnz	r3, 800ad56 <__sflush_r+0x86>
 800ad54:	6520      	str	r0, [r4, #80]	@ 0x50
 800ad56:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ad58:	602f      	str	r7, [r5, #0]
 800ad5a:	b1b9      	cbz	r1, 800ad8c <__sflush_r+0xbc>
 800ad5c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800ad60:	4299      	cmp	r1, r3
 800ad62:	d002      	beq.n	800ad6a <__sflush_r+0x9a>
 800ad64:	4628      	mov	r0, r5
 800ad66:	f7fe fa77 	bl	8009258 <_free_r>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800ad6e:	e00d      	b.n	800ad8c <__sflush_r+0xbc>
 800ad70:	2301      	movs	r3, #1
 800ad72:	4628      	mov	r0, r5
 800ad74:	47b0      	blx	r6
 800ad76:	4602      	mov	r2, r0
 800ad78:	1c50      	adds	r0, r2, #1
 800ad7a:	d1c5      	bne.n	800ad08 <__sflush_r+0x38>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d0c2      	beq.n	800ad08 <__sflush_r+0x38>
 800ad82:	2b1d      	cmp	r3, #29
 800ad84:	d001      	beq.n	800ad8a <__sflush_r+0xba>
 800ad86:	2b16      	cmp	r3, #22
 800ad88:	d11a      	bne.n	800adc0 <__sflush_r+0xf0>
 800ad8a:	602f      	str	r7, [r5, #0]
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	e01e      	b.n	800adce <__sflush_r+0xfe>
 800ad90:	690f      	ldr	r7, [r1, #16]
 800ad92:	2f00      	cmp	r7, #0
 800ad94:	d0fa      	beq.n	800ad8c <__sflush_r+0xbc>
 800ad96:	0783      	lsls	r3, r0, #30
 800ad98:	680e      	ldr	r6, [r1, #0]
 800ad9a:	bf08      	it	eq
 800ad9c:	694b      	ldreq	r3, [r1, #20]
 800ad9e:	600f      	str	r7, [r1, #0]
 800ada0:	bf18      	it	ne
 800ada2:	2300      	movne	r3, #0
 800ada4:	eba6 0807 	sub.w	r8, r6, r7
 800ada8:	608b      	str	r3, [r1, #8]
 800adaa:	f1b8 0f00 	cmp.w	r8, #0
 800adae:	dded      	ble.n	800ad8c <__sflush_r+0xbc>
 800adb0:	69e1      	ldr	r1, [r4, #28]
 800adb2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 800adb4:	4643      	mov	r3, r8
 800adb6:	463a      	mov	r2, r7
 800adb8:	4628      	mov	r0, r5
 800adba:	47b0      	blx	r6
 800adbc:	2800      	cmp	r0, #0
 800adbe:	dc08      	bgt.n	800add2 <__sflush_r+0x102>
 800adc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adc8:	81a3      	strh	r3, [r4, #12]
 800adca:	f04f 30ff 	mov.w	r0, #4294967295
 800adce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800add2:	4407      	add	r7, r0
 800add4:	eba8 0800 	sub.w	r8, r8, r0
 800add8:	e7e7      	b.n	800adaa <__sflush_r+0xda>
 800adda:	bf00      	nop
 800addc:	dfbffffe 	.word	0xdfbffffe

0800ade0 <_fflush_r>:
 800ade0:	b538      	push	{r3, r4, r5, lr}
 800ade2:	460c      	mov	r4, r1
 800ade4:	4605      	mov	r5, r0
 800ade6:	b118      	cbz	r0, 800adf0 <_fflush_r+0x10>
 800ade8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800adea:	b90b      	cbnz	r3, 800adf0 <_fflush_r+0x10>
 800adec:	f7fe f8b8 	bl	8008f60 <__sinit>
 800adf0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800adf4:	b1b8      	cbz	r0, 800ae26 <_fflush_r+0x46>
 800adf6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800adf8:	07db      	lsls	r3, r3, #31
 800adfa:	d404      	bmi.n	800ae06 <_fflush_r+0x26>
 800adfc:	0581      	lsls	r1, r0, #22
 800adfe:	d402      	bmi.n	800ae06 <_fflush_r+0x26>
 800ae00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae02:	f7fe f9c1 	bl	8009188 <__retarget_lock_acquire_recursive>
 800ae06:	4628      	mov	r0, r5
 800ae08:	4621      	mov	r1, r4
 800ae0a:	f7ff ff61 	bl	800acd0 <__sflush_r>
 800ae0e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae10:	07da      	lsls	r2, r3, #31
 800ae12:	4605      	mov	r5, r0
 800ae14:	d405      	bmi.n	800ae22 <_fflush_r+0x42>
 800ae16:	89a3      	ldrh	r3, [r4, #12]
 800ae18:	059b      	lsls	r3, r3, #22
 800ae1a:	d402      	bmi.n	800ae22 <_fflush_r+0x42>
 800ae1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae1e:	f7fe f9b4 	bl	800918a <__retarget_lock_release_recursive>
 800ae22:	4628      	mov	r0, r5
 800ae24:	bd38      	pop	{r3, r4, r5, pc}
 800ae26:	4605      	mov	r5, r0
 800ae28:	e7fb      	b.n	800ae22 <_fflush_r+0x42>

0800ae2a <strncpy>:
 800ae2a:	b510      	push	{r4, lr}
 800ae2c:	3901      	subs	r1, #1
 800ae2e:	4603      	mov	r3, r0
 800ae30:	b132      	cbz	r2, 800ae40 <strncpy+0x16>
 800ae32:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ae36:	f803 4b01 	strb.w	r4, [r3], #1
 800ae3a:	3a01      	subs	r2, #1
 800ae3c:	2c00      	cmp	r4, #0
 800ae3e:	d1f7      	bne.n	800ae30 <strncpy+0x6>
 800ae40:	441a      	add	r2, r3
 800ae42:	2100      	movs	r1, #0
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d100      	bne.n	800ae4a <strncpy+0x20>
 800ae48:	bd10      	pop	{r4, pc}
 800ae4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae4e:	e7f9      	b.n	800ae44 <strncpy+0x1a>

0800ae50 <_localeconv_r>:
 800ae50:	4800      	ldr	r0, [pc, #0]	@ (800ae54 <_localeconv_r+0x4>)
 800ae52:	4770      	bx	lr
 800ae54:	20000734 	.word	0x20000734

0800ae58 <_sbrk_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4d06      	ldr	r5, [pc, #24]	@ (800ae74 <_sbrk_r+0x1c>)
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4608      	mov	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f6 fc14 	bl	8001690 <_sbrk>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d102      	bne.n	800ae72 <_sbrk_r+0x1a>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	b103      	cbz	r3, 800ae72 <_sbrk_r+0x1a>
 800ae70:	6023      	str	r3, [r4, #0]
 800ae72:	bd38      	pop	{r3, r4, r5, pc}
 800ae74:	200025e0 	.word	0x200025e0

0800ae78 <__libc_fini_array>:
 800ae78:	b538      	push	{r3, r4, r5, lr}
 800ae7a:	4d07      	ldr	r5, [pc, #28]	@ (800ae98 <__libc_fini_array+0x20>)
 800ae7c:	4c07      	ldr	r4, [pc, #28]	@ (800ae9c <__libc_fini_array+0x24>)
 800ae7e:	1b64      	subs	r4, r4, r5
 800ae80:	10a4      	asrs	r4, r4, #2
 800ae82:	b91c      	cbnz	r4, 800ae8c <__libc_fini_array+0x14>
 800ae84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae88:	f003 bc6e 	b.w	800e768 <_fini>
 800ae8c:	3c01      	subs	r4, #1
 800ae8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ae92:	4798      	blx	r3
 800ae94:	e7f5      	b.n	800ae82 <__libc_fini_array+0xa>
 800ae96:	bf00      	nop
 800ae98:	0800ebe0 	.word	0x0800ebe0
 800ae9c:	0800ebe4 	.word	0x0800ebe4

0800aea0 <sysconf>:
 800aea0:	2808      	cmp	r0, #8
 800aea2:	b508      	push	{r3, lr}
 800aea4:	d006      	beq.n	800aeb4 <sysconf+0x14>
 800aea6:	f7fe f943 	bl	8009130 <__errno>
 800aeaa:	2316      	movs	r3, #22
 800aeac:	6003      	str	r3, [r0, #0]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb2:	bd08      	pop	{r3, pc}
 800aeb4:	2080      	movs	r0, #128	@ 0x80
 800aeb6:	e7fc      	b.n	800aeb2 <sysconf+0x12>

0800aeb8 <frexp>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	2100      	movs	r1, #0
 800aebc:	ec55 4b10 	vmov	r4, r5, d0
 800aec0:	6001      	str	r1, [r0, #0]
 800aec2:	4915      	ldr	r1, [pc, #84]	@ (800af18 <frexp+0x60>)
 800aec4:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800aec8:	428a      	cmp	r2, r1
 800aeca:	4606      	mov	r6, r0
 800aecc:	462b      	mov	r3, r5
 800aece:	d820      	bhi.n	800af12 <frexp+0x5a>
 800aed0:	4621      	mov	r1, r4
 800aed2:	4311      	orrs	r1, r2
 800aed4:	d01d      	beq.n	800af12 <frexp+0x5a>
 800aed6:	4911      	ldr	r1, [pc, #68]	@ (800af1c <frexp+0x64>)
 800aed8:	4029      	ands	r1, r5
 800aeda:	b961      	cbnz	r1, 800aef6 <frexp+0x3e>
 800aedc:	4b10      	ldr	r3, [pc, #64]	@ (800af20 <frexp+0x68>)
 800aede:	2200      	movs	r2, #0
 800aee0:	4620      	mov	r0, r4
 800aee2:	4629      	mov	r1, r5
 800aee4:	f7f5 fb90 	bl	8000608 <__aeabi_dmul>
 800aee8:	460b      	mov	r3, r1
 800aeea:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 800aeee:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 800aef2:	4604      	mov	r4, r0
 800aef4:	6031      	str	r1, [r6, #0]
 800aef6:	6831      	ldr	r1, [r6, #0]
 800aef8:	1512      	asrs	r2, r2, #20
 800aefa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800aefe:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 800af02:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800af06:	4411      	add	r1, r2
 800af08:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800af0c:	6031      	str	r1, [r6, #0]
 800af0e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 800af12:	ec45 4b10 	vmov	d0, r4, r5
 800af16:	bd70      	pop	{r4, r5, r6, pc}
 800af18:	7fefffff 	.word	0x7fefffff
 800af1c:	7ff00000 	.word	0x7ff00000
 800af20:	43500000 	.word	0x43500000

0800af24 <__register_exitproc>:
 800af24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af28:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800afa0 <__register_exitproc+0x7c>
 800af2c:	4606      	mov	r6, r0
 800af2e:	f8da 0000 	ldr.w	r0, [sl]
 800af32:	4698      	mov	r8, r3
 800af34:	460f      	mov	r7, r1
 800af36:	4691      	mov	r9, r2
 800af38:	f7fe f926 	bl	8009188 <__retarget_lock_acquire_recursive>
 800af3c:	4b16      	ldr	r3, [pc, #88]	@ (800af98 <__register_exitproc+0x74>)
 800af3e:	681c      	ldr	r4, [r3, #0]
 800af40:	b90c      	cbnz	r4, 800af46 <__register_exitproc+0x22>
 800af42:	4c16      	ldr	r4, [pc, #88]	@ (800af9c <__register_exitproc+0x78>)
 800af44:	601c      	str	r4, [r3, #0]
 800af46:	6865      	ldr	r5, [r4, #4]
 800af48:	f8da 0000 	ldr.w	r0, [sl]
 800af4c:	2d1f      	cmp	r5, #31
 800af4e:	dd05      	ble.n	800af5c <__register_exitproc+0x38>
 800af50:	f7fe f91b 	bl	800918a <__retarget_lock_release_recursive>
 800af54:	f04f 30ff 	mov.w	r0, #4294967295
 800af58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af5c:	b19e      	cbz	r6, 800af86 <__register_exitproc+0x62>
 800af5e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800af62:	2201      	movs	r2, #1
 800af64:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 800af68:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 800af6c:	40aa      	lsls	r2, r5
 800af6e:	4313      	orrs	r3, r2
 800af70:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 800af74:	2e02      	cmp	r6, #2
 800af76:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 800af7a:	bf02      	ittt	eq
 800af7c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800af80:	4313      	orreq	r3, r2
 800af82:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 800af86:	1c6b      	adds	r3, r5, #1
 800af88:	3502      	adds	r5, #2
 800af8a:	6063      	str	r3, [r4, #4]
 800af8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800af90:	f7fe f8fb 	bl	800918a <__retarget_lock_release_recursive>
 800af94:	2000      	movs	r0, #0
 800af96:	e7df      	b.n	800af58 <__register_exitproc+0x34>
 800af98:	200025e8 	.word	0x200025e8
 800af9c:	20002620 	.word	0x20002620
 800afa0:	20000230 	.word	0x20000230

0800afa4 <quorem>:
 800afa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa8:	6903      	ldr	r3, [r0, #16]
 800afaa:	690c      	ldr	r4, [r1, #16]
 800afac:	42a3      	cmp	r3, r4
 800afae:	4607      	mov	r7, r0
 800afb0:	db7e      	blt.n	800b0b0 <quorem+0x10c>
 800afb2:	3c01      	subs	r4, #1
 800afb4:	f101 0814 	add.w	r8, r1, #20
 800afb8:	00a3      	lsls	r3, r4, #2
 800afba:	f100 0514 	add.w	r5, r0, #20
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afc4:	9301      	str	r3, [sp, #4]
 800afc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afce:	3301      	adds	r3, #1
 800afd0:	429a      	cmp	r2, r3
 800afd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afd6:	fbb2 f6f3 	udiv	r6, r2, r3
 800afda:	d32e      	bcc.n	800b03a <quorem+0x96>
 800afdc:	f04f 0a00 	mov.w	sl, #0
 800afe0:	46c4      	mov	ip, r8
 800afe2:	46ae      	mov	lr, r5
 800afe4:	46d3      	mov	fp, sl
 800afe6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afea:	b298      	uxth	r0, r3
 800afec:	fb06 a000 	mla	r0, r6, r0, sl
 800aff0:	0c02      	lsrs	r2, r0, #16
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	fb06 2303 	mla	r3, r6, r3, r2
 800aff8:	f8de 2000 	ldr.w	r2, [lr]
 800affc:	b280      	uxth	r0, r0
 800affe:	b292      	uxth	r2, r2
 800b000:	1a12      	subs	r2, r2, r0
 800b002:	445a      	add	r2, fp
 800b004:	f8de 0000 	ldr.w	r0, [lr]
 800b008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b012:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b016:	b292      	uxth	r2, r2
 800b018:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b01c:	45e1      	cmp	r9, ip
 800b01e:	f84e 2b04 	str.w	r2, [lr], #4
 800b022:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b026:	d2de      	bcs.n	800afe6 <quorem+0x42>
 800b028:	9b00      	ldr	r3, [sp, #0]
 800b02a:	58eb      	ldr	r3, [r5, r3]
 800b02c:	b92b      	cbnz	r3, 800b03a <quorem+0x96>
 800b02e:	9b01      	ldr	r3, [sp, #4]
 800b030:	3b04      	subs	r3, #4
 800b032:	429d      	cmp	r5, r3
 800b034:	461a      	mov	r2, r3
 800b036:	d32f      	bcc.n	800b098 <quorem+0xf4>
 800b038:	613c      	str	r4, [r7, #16]
 800b03a:	4638      	mov	r0, r7
 800b03c:	f001 f814 	bl	800c068 <__mcmp>
 800b040:	2800      	cmp	r0, #0
 800b042:	db25      	blt.n	800b090 <quorem+0xec>
 800b044:	4629      	mov	r1, r5
 800b046:	2000      	movs	r0, #0
 800b048:	f858 2b04 	ldr.w	r2, [r8], #4
 800b04c:	f8d1 c000 	ldr.w	ip, [r1]
 800b050:	fa1f fe82 	uxth.w	lr, r2
 800b054:	fa1f f38c 	uxth.w	r3, ip
 800b058:	eba3 030e 	sub.w	r3, r3, lr
 800b05c:	4403      	add	r3, r0
 800b05e:	0c12      	lsrs	r2, r2, #16
 800b060:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b064:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b068:	b29b      	uxth	r3, r3
 800b06a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b06e:	45c1      	cmp	r9, r8
 800b070:	f841 3b04 	str.w	r3, [r1], #4
 800b074:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b078:	d2e6      	bcs.n	800b048 <quorem+0xa4>
 800b07a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b07e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b082:	b922      	cbnz	r2, 800b08e <quorem+0xea>
 800b084:	3b04      	subs	r3, #4
 800b086:	429d      	cmp	r5, r3
 800b088:	461a      	mov	r2, r3
 800b08a:	d30b      	bcc.n	800b0a4 <quorem+0x100>
 800b08c:	613c      	str	r4, [r7, #16]
 800b08e:	3601      	adds	r6, #1
 800b090:	4630      	mov	r0, r6
 800b092:	b003      	add	sp, #12
 800b094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b098:	6812      	ldr	r2, [r2, #0]
 800b09a:	3b04      	subs	r3, #4
 800b09c:	2a00      	cmp	r2, #0
 800b09e:	d1cb      	bne.n	800b038 <quorem+0x94>
 800b0a0:	3c01      	subs	r4, #1
 800b0a2:	e7c6      	b.n	800b032 <quorem+0x8e>
 800b0a4:	6812      	ldr	r2, [r2, #0]
 800b0a6:	3b04      	subs	r3, #4
 800b0a8:	2a00      	cmp	r2, #0
 800b0aa:	d1ef      	bne.n	800b08c <quorem+0xe8>
 800b0ac:	3c01      	subs	r4, #1
 800b0ae:	e7ea      	b.n	800b086 <quorem+0xe2>
 800b0b0:	2000      	movs	r0, #0
 800b0b2:	e7ee      	b.n	800b092 <quorem+0xee>
 800b0b4:	0000      	movs	r0, r0
	...

0800b0b8 <_dtoa_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	b099      	sub	sp, #100	@ 0x64
 800b0be:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b0c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0c4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 800b0c6:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b0c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0ca:	ec55 4b10 	vmov	r4, r5, d0
 800b0ce:	4683      	mov	fp, r0
 800b0d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0d2:	b149      	cbz	r1, 800b0e8 <_dtoa_r+0x30>
 800b0d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0d6:	604a      	str	r2, [r1, #4]
 800b0d8:	2301      	movs	r3, #1
 800b0da:	4093      	lsls	r3, r2
 800b0dc:	608b      	str	r3, [r1, #8]
 800b0de:	f000 fdbc 	bl	800bc5a <_Bfree>
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f8cb 3038 	str.w	r3, [fp, #56]	@ 0x38
 800b0e8:	1e2b      	subs	r3, r5, #0
 800b0ea:	bfb9      	ittee	lt
 800b0ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b0f0:	9303      	strlt	r3, [sp, #12]
 800b0f2:	2300      	movge	r3, #0
 800b0f4:	6033      	strge	r3, [r6, #0]
 800b0f6:	9f03      	ldr	r7, [sp, #12]
 800b0f8:	4b97      	ldr	r3, [pc, #604]	@ (800b358 <_dtoa_r+0x2a0>)
 800b0fa:	bfbc      	itt	lt
 800b0fc:	2201      	movlt	r2, #1
 800b0fe:	6032      	strlt	r2, [r6, #0]
 800b100:	43bb      	bics	r3, r7
 800b102:	d114      	bne.n	800b12e <_dtoa_r+0x76>
 800b104:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b106:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b10a:	6013      	str	r3, [r2, #0]
 800b10c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b110:	4323      	orrs	r3, r4
 800b112:	f000 854c 	beq.w	800bbae <_dtoa_r+0xaf6>
 800b116:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b118:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b370 <_dtoa_r+0x2b8>
 800b11c:	b11b      	cbz	r3, 800b126 <_dtoa_r+0x6e>
 800b11e:	f10a 0303 	add.w	r3, sl, #3
 800b122:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	4650      	mov	r0, sl
 800b128:	b019      	add	sp, #100	@ 0x64
 800b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b12e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b132:	2200      	movs	r2, #0
 800b134:	ec51 0b17 	vmov	r0, r1, d7
 800b138:	2300      	movs	r3, #0
 800b13a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b13e:	f7f5 fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 800b142:	4680      	mov	r8, r0
 800b144:	b150      	cbz	r0, 800b15c <_dtoa_r+0xa4>
 800b146:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b148:	2301      	movs	r3, #1
 800b14a:	6013      	str	r3, [r2, #0]
 800b14c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b14e:	b113      	cbz	r3, 800b156 <_dtoa_r+0x9e>
 800b150:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b152:	4b82      	ldr	r3, [pc, #520]	@ (800b35c <_dtoa_r+0x2a4>)
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 800b374 <_dtoa_r+0x2bc>
 800b15a:	e7e4      	b.n	800b126 <_dtoa_r+0x6e>
 800b15c:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b160:	aa16      	add	r2, sp, #88	@ 0x58
 800b162:	a917      	add	r1, sp, #92	@ 0x5c
 800b164:	4658      	mov	r0, fp
 800b166:	f001 f82f 	bl	800c1c8 <__d2b>
 800b16a:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b16e:	4681      	mov	r9, r0
 800b170:	2e00      	cmp	r6, #0
 800b172:	d077      	beq.n	800b264 <_dtoa_r+0x1ac>
 800b174:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b176:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b17a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b17e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b182:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b186:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b18a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b18e:	4619      	mov	r1, r3
 800b190:	2200      	movs	r2, #0
 800b192:	4b73      	ldr	r3, [pc, #460]	@ (800b360 <_dtoa_r+0x2a8>)
 800b194:	f7f5 f880 	bl	8000298 <__aeabi_dsub>
 800b198:	a369      	add	r3, pc, #420	@ (adr r3, 800b340 <_dtoa_r+0x288>)
 800b19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19e:	f7f5 fa33 	bl	8000608 <__aeabi_dmul>
 800b1a2:	a369      	add	r3, pc, #420	@ (adr r3, 800b348 <_dtoa_r+0x290>)
 800b1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a8:	f7f5 f878 	bl	800029c <__adddf3>
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	4630      	mov	r0, r6
 800b1b0:	460d      	mov	r5, r1
 800b1b2:	f7f5 f9bf 	bl	8000534 <__aeabi_i2d>
 800b1b6:	a366      	add	r3, pc, #408	@ (adr r3, 800b350 <_dtoa_r+0x298>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	f7f5 fa24 	bl	8000608 <__aeabi_dmul>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	4629      	mov	r1, r5
 800b1c8:	f7f5 f868 	bl	800029c <__adddf3>
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	460d      	mov	r5, r1
 800b1d0:	f7f5 fcca 	bl	8000b68 <__aeabi_d2iz>
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	4607      	mov	r7, r0
 800b1d8:	2300      	movs	r3, #0
 800b1da:	4620      	mov	r0, r4
 800b1dc:	4629      	mov	r1, r5
 800b1de:	f7f5 fc85 	bl	8000aec <__aeabi_dcmplt>
 800b1e2:	b140      	cbz	r0, 800b1f6 <_dtoa_r+0x13e>
 800b1e4:	4638      	mov	r0, r7
 800b1e6:	f7f5 f9a5 	bl	8000534 <__aeabi_i2d>
 800b1ea:	4622      	mov	r2, r4
 800b1ec:	462b      	mov	r3, r5
 800b1ee:	f7f5 fc73 	bl	8000ad8 <__aeabi_dcmpeq>
 800b1f2:	b900      	cbnz	r0, 800b1f6 <_dtoa_r+0x13e>
 800b1f4:	3f01      	subs	r7, #1
 800b1f6:	2f16      	cmp	r7, #22
 800b1f8:	d851      	bhi.n	800b29e <_dtoa_r+0x1e6>
 800b1fa:	4b5a      	ldr	r3, [pc, #360]	@ (800b364 <_dtoa_r+0x2ac>)
 800b1fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b208:	f7f5 fc70 	bl	8000aec <__aeabi_dcmplt>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	d048      	beq.n	800b2a2 <_dtoa_r+0x1ea>
 800b210:	3f01      	subs	r7, #1
 800b212:	2300      	movs	r3, #0
 800b214:	9312      	str	r3, [sp, #72]	@ 0x48
 800b216:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b218:	1b9b      	subs	r3, r3, r6
 800b21a:	1e5a      	subs	r2, r3, #1
 800b21c:	bf44      	itt	mi
 800b21e:	f1c3 0801 	rsbmi	r8, r3, #1
 800b222:	2300      	movmi	r3, #0
 800b224:	9208      	str	r2, [sp, #32]
 800b226:	bf54      	ite	pl
 800b228:	f04f 0800 	movpl.w	r8, #0
 800b22c:	9308      	strmi	r3, [sp, #32]
 800b22e:	2f00      	cmp	r7, #0
 800b230:	db39      	blt.n	800b2a6 <_dtoa_r+0x1ee>
 800b232:	9b08      	ldr	r3, [sp, #32]
 800b234:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b236:	443b      	add	r3, r7
 800b238:	9308      	str	r3, [sp, #32]
 800b23a:	2300      	movs	r3, #0
 800b23c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b240:	2b09      	cmp	r3, #9
 800b242:	d865      	bhi.n	800b310 <_dtoa_r+0x258>
 800b244:	2b05      	cmp	r3, #5
 800b246:	bfc4      	itt	gt
 800b248:	3b04      	subgt	r3, #4
 800b24a:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24e:	f1a3 0302 	sub.w	r3, r3, #2
 800b252:	bfcc      	ite	gt
 800b254:	2400      	movgt	r4, #0
 800b256:	2401      	movle	r4, #1
 800b258:	2b03      	cmp	r3, #3
 800b25a:	d864      	bhi.n	800b326 <_dtoa_r+0x26e>
 800b25c:	e8df f003 	tbb	[pc, r3]
 800b260:	5635372a 	.word	0x5635372a
 800b264:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b268:	441e      	add	r6, r3
 800b26a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b26e:	2b20      	cmp	r3, #32
 800b270:	bfc1      	itttt	gt
 800b272:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b276:	409f      	lslgt	r7, r3
 800b278:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b27c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b280:	bfd6      	itet	le
 800b282:	f1c3 0320 	rsble	r3, r3, #32
 800b286:	ea47 0003 	orrgt.w	r0, r7, r3
 800b28a:	fa04 f003 	lslle.w	r0, r4, r3
 800b28e:	f7f5 f941 	bl	8000514 <__aeabi_ui2d>
 800b292:	2201      	movs	r2, #1
 800b294:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b298:	3e01      	subs	r6, #1
 800b29a:	9214      	str	r2, [sp, #80]	@ 0x50
 800b29c:	e777      	b.n	800b18e <_dtoa_r+0xd6>
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e7b8      	b.n	800b214 <_dtoa_r+0x15c>
 800b2a2:	9012      	str	r0, [sp, #72]	@ 0x48
 800b2a4:	e7b7      	b.n	800b216 <_dtoa_r+0x15e>
 800b2a6:	427b      	negs	r3, r7
 800b2a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	eba8 0807 	sub.w	r8, r8, r7
 800b2b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2b2:	e7c4      	b.n	800b23e <_dtoa_r+0x186>
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	dc36      	bgt.n	800b32c <_dtoa_r+0x274>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	9300      	str	r3, [sp, #0]
 800b2c2:	9307      	str	r3, [sp, #28]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2c8:	e00b      	b.n	800b2e2 <_dtoa_r+0x22a>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e7f3      	b.n	800b2b6 <_dtoa_r+0x1fe>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2d4:	18fb      	adds	r3, r7, r3
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	3301      	adds	r3, #1
 800b2da:	2b01      	cmp	r3, #1
 800b2dc:	9307      	str	r3, [sp, #28]
 800b2de:	bfb8      	it	lt
 800b2e0:	2301      	movlt	r3, #1
 800b2e2:	2100      	movs	r1, #0
 800b2e4:	2204      	movs	r2, #4
 800b2e6:	f102 0014 	add.w	r0, r2, #20
 800b2ea:	4298      	cmp	r0, r3
 800b2ec:	d922      	bls.n	800b334 <_dtoa_r+0x27c>
 800b2ee:	f8cb 103c 	str.w	r1, [fp, #60]	@ 0x3c
 800b2f2:	4658      	mov	r0, fp
 800b2f4:	f000 fc8c 	bl	800bc10 <_Balloc>
 800b2f8:	4682      	mov	sl, r0
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	d13c      	bne.n	800b378 <_dtoa_r+0x2c0>
 800b2fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b368 <_dtoa_r+0x2b0>)
 800b300:	4602      	mov	r2, r0
 800b302:	f240 11af 	movw	r1, #431	@ 0x1af
 800b306:	4819      	ldr	r0, [pc, #100]	@ (800b36c <_dtoa_r+0x2b4>)
 800b308:	f001 f862 	bl	800c3d0 <__assert_func>
 800b30c:	2301      	movs	r3, #1
 800b30e:	e7df      	b.n	800b2d0 <_dtoa_r+0x218>
 800b310:	2401      	movs	r4, #1
 800b312:	2300      	movs	r3, #0
 800b314:	9309      	str	r3, [sp, #36]	@ 0x24
 800b316:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b318:	f04f 33ff 	mov.w	r3, #4294967295
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	9307      	str	r3, [sp, #28]
 800b320:	2200      	movs	r2, #0
 800b322:	2312      	movs	r3, #18
 800b324:	e7cf      	b.n	800b2c6 <_dtoa_r+0x20e>
 800b326:	2301      	movs	r3, #1
 800b328:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b32a:	e7f5      	b.n	800b318 <_dtoa_r+0x260>
 800b32c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	9307      	str	r3, [sp, #28]
 800b332:	e7d6      	b.n	800b2e2 <_dtoa_r+0x22a>
 800b334:	3101      	adds	r1, #1
 800b336:	0052      	lsls	r2, r2, #1
 800b338:	e7d5      	b.n	800b2e6 <_dtoa_r+0x22e>
 800b33a:	bf00      	nop
 800b33c:	f3af 8000 	nop.w
 800b340:	636f4361 	.word	0x636f4361
 800b344:	3fd287a7 	.word	0x3fd287a7
 800b348:	8b60c8b3 	.word	0x8b60c8b3
 800b34c:	3fc68a28 	.word	0x3fc68a28
 800b350:	509f79fb 	.word	0x509f79fb
 800b354:	3fd34413 	.word	0x3fd34413
 800b358:	7ff00000 	.word	0x7ff00000
 800b35c:	0800e84b 	.word	0x0800e84b
 800b360:	3ff80000 	.word	0x3ff80000
 800b364:	0800e970 	.word	0x0800e970
 800b368:	0800e879 	.word	0x0800e879
 800b36c:	0800e88a 	.word	0x0800e88a
 800b370:	0800e875 	.word	0x0800e875
 800b374:	0800e84a 	.word	0x0800e84a
 800b378:	9b07      	ldr	r3, [sp, #28]
 800b37a:	f8cb 0038 	str.w	r0, [fp, #56]	@ 0x38
 800b37e:	2b0e      	cmp	r3, #14
 800b380:	f200 80a4 	bhi.w	800b4cc <_dtoa_r+0x414>
 800b384:	2c00      	cmp	r4, #0
 800b386:	f000 80a1 	beq.w	800b4cc <_dtoa_r+0x414>
 800b38a:	2f00      	cmp	r7, #0
 800b38c:	dd33      	ble.n	800b3f6 <_dtoa_r+0x33e>
 800b38e:	4bae      	ldr	r3, [pc, #696]	@ (800b648 <_dtoa_r+0x590>)
 800b390:	f007 020f 	and.w	r2, r7, #15
 800b394:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b398:	ed93 7b00 	vldr	d7, [r3]
 800b39c:	05f8      	lsls	r0, r7, #23
 800b39e:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b3a2:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b3a6:	d516      	bpl.n	800b3d6 <_dtoa_r+0x31e>
 800b3a8:	4ba8      	ldr	r3, [pc, #672]	@ (800b64c <_dtoa_r+0x594>)
 800b3aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3b2:	f7f5 fa53 	bl	800085c <__aeabi_ddiv>
 800b3b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3ba:	f004 040f 	and.w	r4, r4, #15
 800b3be:	2603      	movs	r6, #3
 800b3c0:	4da2      	ldr	r5, [pc, #648]	@ (800b64c <_dtoa_r+0x594>)
 800b3c2:	b954      	cbnz	r4, 800b3da <_dtoa_r+0x322>
 800b3c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3cc:	f7f5 fa46 	bl	800085c <__aeabi_ddiv>
 800b3d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d4:	e028      	b.n	800b428 <_dtoa_r+0x370>
 800b3d6:	2602      	movs	r6, #2
 800b3d8:	e7f2      	b.n	800b3c0 <_dtoa_r+0x308>
 800b3da:	07e1      	lsls	r1, r4, #31
 800b3dc:	d508      	bpl.n	800b3f0 <_dtoa_r+0x338>
 800b3de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3e6:	f7f5 f90f 	bl	8000608 <__aeabi_dmul>
 800b3ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3ee:	3601      	adds	r6, #1
 800b3f0:	1064      	asrs	r4, r4, #1
 800b3f2:	3508      	adds	r5, #8
 800b3f4:	e7e5      	b.n	800b3c2 <_dtoa_r+0x30a>
 800b3f6:	f000 80d2 	beq.w	800b59e <_dtoa_r+0x4e6>
 800b3fa:	427c      	negs	r4, r7
 800b3fc:	4b92      	ldr	r3, [pc, #584]	@ (800b648 <_dtoa_r+0x590>)
 800b3fe:	4d93      	ldr	r5, [pc, #588]	@ (800b64c <_dtoa_r+0x594>)
 800b400:	f004 020f 	and.w	r2, r4, #15
 800b404:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b410:	f7f5 f8fa 	bl	8000608 <__aeabi_dmul>
 800b414:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b418:	1124      	asrs	r4, r4, #4
 800b41a:	2300      	movs	r3, #0
 800b41c:	2602      	movs	r6, #2
 800b41e:	2c00      	cmp	r4, #0
 800b420:	f040 80b2 	bne.w	800b588 <_dtoa_r+0x4d0>
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1d3      	bne.n	800b3d0 <_dtoa_r+0x318>
 800b428:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b42a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	f000 80b7 	beq.w	800b5a2 <_dtoa_r+0x4ea>
 800b434:	4b86      	ldr	r3, [pc, #536]	@ (800b650 <_dtoa_r+0x598>)
 800b436:	2200      	movs	r2, #0
 800b438:	4620      	mov	r0, r4
 800b43a:	4629      	mov	r1, r5
 800b43c:	f7f5 fb56 	bl	8000aec <__aeabi_dcmplt>
 800b440:	2800      	cmp	r0, #0
 800b442:	f000 80ae 	beq.w	800b5a2 <_dtoa_r+0x4ea>
 800b446:	9b07      	ldr	r3, [sp, #28]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	f000 80aa 	beq.w	800b5a2 <_dtoa_r+0x4ea>
 800b44e:	9b00      	ldr	r3, [sp, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	dd37      	ble.n	800b4c4 <_dtoa_r+0x40c>
 800b454:	1e7b      	subs	r3, r7, #1
 800b456:	9304      	str	r3, [sp, #16]
 800b458:	4620      	mov	r0, r4
 800b45a:	4b7e      	ldr	r3, [pc, #504]	@ (800b654 <_dtoa_r+0x59c>)
 800b45c:	2200      	movs	r2, #0
 800b45e:	4629      	mov	r1, r5
 800b460:	f7f5 f8d2 	bl	8000608 <__aeabi_dmul>
 800b464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b468:	9c00      	ldr	r4, [sp, #0]
 800b46a:	3601      	adds	r6, #1
 800b46c:	4630      	mov	r0, r6
 800b46e:	f7f5 f861 	bl	8000534 <__aeabi_i2d>
 800b472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b476:	f7f5 f8c7 	bl	8000608 <__aeabi_dmul>
 800b47a:	4b77      	ldr	r3, [pc, #476]	@ (800b658 <_dtoa_r+0x5a0>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	f7f4 ff0d 	bl	800029c <__adddf3>
 800b482:	4605      	mov	r5, r0
 800b484:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b488:	2c00      	cmp	r4, #0
 800b48a:	f040 808d 	bne.w	800b5a8 <_dtoa_r+0x4f0>
 800b48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b492:	4b72      	ldr	r3, [pc, #456]	@ (800b65c <_dtoa_r+0x5a4>)
 800b494:	2200      	movs	r2, #0
 800b496:	f7f4 feff 	bl	8000298 <__aeabi_dsub>
 800b49a:	4602      	mov	r2, r0
 800b49c:	460b      	mov	r3, r1
 800b49e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4a2:	462a      	mov	r2, r5
 800b4a4:	4633      	mov	r3, r6
 800b4a6:	f7f5 fb3f 	bl	8000b28 <__aeabi_dcmpgt>
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f040 828c 	bne.w	800b9c8 <_dtoa_r+0x910>
 800b4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b4:	462a      	mov	r2, r5
 800b4b6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4ba:	f7f5 fb17 	bl	8000aec <__aeabi_dcmplt>
 800b4be:	2800      	cmp	r0, #0
 800b4c0:	f040 8129 	bne.w	800b716 <_dtoa_r+0x65e>
 800b4c4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4c8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b4cc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f2c0 815b 	blt.w	800b78a <_dtoa_r+0x6d2>
 800b4d4:	2f0e      	cmp	r7, #14
 800b4d6:	f300 8158 	bgt.w	800b78a <_dtoa_r+0x6d2>
 800b4da:	4b5b      	ldr	r3, [pc, #364]	@ (800b648 <_dtoa_r+0x590>)
 800b4dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4e0:	ed93 7b00 	vldr	d7, [r3]
 800b4e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	ed8d 7b00 	vstr	d7, [sp]
 800b4ec:	da03      	bge.n	800b4f6 <_dtoa_r+0x43e>
 800b4ee:	9b07      	ldr	r3, [sp, #28]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f340 8102 	ble.w	800b6fa <_dtoa_r+0x642>
 800b4f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b4fa:	4656      	mov	r6, sl
 800b4fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b500:	4620      	mov	r0, r4
 800b502:	4629      	mov	r1, r5
 800b504:	f7f5 f9aa 	bl	800085c <__aeabi_ddiv>
 800b508:	f7f5 fb2e 	bl	8000b68 <__aeabi_d2iz>
 800b50c:	4680      	mov	r8, r0
 800b50e:	f7f5 f811 	bl	8000534 <__aeabi_i2d>
 800b512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b516:	f7f5 f877 	bl	8000608 <__aeabi_dmul>
 800b51a:	4602      	mov	r2, r0
 800b51c:	460b      	mov	r3, r1
 800b51e:	4620      	mov	r0, r4
 800b520:	4629      	mov	r1, r5
 800b522:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b526:	f7f4 feb7 	bl	8000298 <__aeabi_dsub>
 800b52a:	f806 4b01 	strb.w	r4, [r6], #1
 800b52e:	9d07      	ldr	r5, [sp, #28]
 800b530:	eba6 040a 	sub.w	r4, r6, sl
 800b534:	42a5      	cmp	r5, r4
 800b536:	4602      	mov	r2, r0
 800b538:	460b      	mov	r3, r1
 800b53a:	f040 8118 	bne.w	800b76e <_dtoa_r+0x6b6>
 800b53e:	f7f4 fead 	bl	800029c <__adddf3>
 800b542:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b546:	4604      	mov	r4, r0
 800b548:	460d      	mov	r5, r1
 800b54a:	f7f5 faed 	bl	8000b28 <__aeabi_dcmpgt>
 800b54e:	2800      	cmp	r0, #0
 800b550:	f040 80fa 	bne.w	800b748 <_dtoa_r+0x690>
 800b554:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b558:	4620      	mov	r0, r4
 800b55a:	4629      	mov	r1, r5
 800b55c:	f7f5 fabc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b560:	b118      	cbz	r0, 800b56a <_dtoa_r+0x4b2>
 800b562:	f018 0f01 	tst.w	r8, #1
 800b566:	f040 80ef 	bne.w	800b748 <_dtoa_r+0x690>
 800b56a:	4649      	mov	r1, r9
 800b56c:	4658      	mov	r0, fp
 800b56e:	f000 fb74 	bl	800bc5a <_Bfree>
 800b572:	2300      	movs	r3, #0
 800b574:	7033      	strb	r3, [r6, #0]
 800b576:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b578:	3701      	adds	r7, #1
 800b57a:	601f      	str	r7, [r3, #0]
 800b57c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f43f add1 	beq.w	800b126 <_dtoa_r+0x6e>
 800b584:	601e      	str	r6, [r3, #0]
 800b586:	e5ce      	b.n	800b126 <_dtoa_r+0x6e>
 800b588:	07e2      	lsls	r2, r4, #31
 800b58a:	d505      	bpl.n	800b598 <_dtoa_r+0x4e0>
 800b58c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b590:	f7f5 f83a 	bl	8000608 <__aeabi_dmul>
 800b594:	3601      	adds	r6, #1
 800b596:	2301      	movs	r3, #1
 800b598:	1064      	asrs	r4, r4, #1
 800b59a:	3508      	adds	r5, #8
 800b59c:	e73f      	b.n	800b41e <_dtoa_r+0x366>
 800b59e:	2602      	movs	r6, #2
 800b5a0:	e742      	b.n	800b428 <_dtoa_r+0x370>
 800b5a2:	9c07      	ldr	r4, [sp, #28]
 800b5a4:	9704      	str	r7, [sp, #16]
 800b5a6:	e761      	b.n	800b46c <_dtoa_r+0x3b4>
 800b5a8:	4b27      	ldr	r3, [pc, #156]	@ (800b648 <_dtoa_r+0x590>)
 800b5aa:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5b0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5b4:	4454      	add	r4, sl
 800b5b6:	2900      	cmp	r1, #0
 800b5b8:	d054      	beq.n	800b664 <_dtoa_r+0x5ac>
 800b5ba:	4929      	ldr	r1, [pc, #164]	@ (800b660 <_dtoa_r+0x5a8>)
 800b5bc:	2000      	movs	r0, #0
 800b5be:	f7f5 f94d 	bl	800085c <__aeabi_ddiv>
 800b5c2:	4633      	mov	r3, r6
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	f7f4 fe67 	bl	8000298 <__aeabi_dsub>
 800b5ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5ce:	4656      	mov	r6, sl
 800b5d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5d4:	f7f5 fac8 	bl	8000b68 <__aeabi_d2iz>
 800b5d8:	4605      	mov	r5, r0
 800b5da:	f7f4 ffab 	bl	8000534 <__aeabi_i2d>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5e6:	f7f4 fe57 	bl	8000298 <__aeabi_dsub>
 800b5ea:	3530      	adds	r5, #48	@ 0x30
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b5f4:	f806 5b01 	strb.w	r5, [r6], #1
 800b5f8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b5fc:	f7f5 fa76 	bl	8000aec <__aeabi_dcmplt>
 800b600:	2800      	cmp	r0, #0
 800b602:	d172      	bne.n	800b6ea <_dtoa_r+0x632>
 800b604:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b608:	4911      	ldr	r1, [pc, #68]	@ (800b650 <_dtoa_r+0x598>)
 800b60a:	2000      	movs	r0, #0
 800b60c:	f7f4 fe44 	bl	8000298 <__aeabi_dsub>
 800b610:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b614:	f7f5 fa6a 	bl	8000aec <__aeabi_dcmplt>
 800b618:	2800      	cmp	r0, #0
 800b61a:	f040 8096 	bne.w	800b74a <_dtoa_r+0x692>
 800b61e:	42a6      	cmp	r6, r4
 800b620:	f43f af50 	beq.w	800b4c4 <_dtoa_r+0x40c>
 800b624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b628:	4b0a      	ldr	r3, [pc, #40]	@ (800b654 <_dtoa_r+0x59c>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	f7f4 ffec 	bl	8000608 <__aeabi_dmul>
 800b630:	4b08      	ldr	r3, [pc, #32]	@ (800b654 <_dtoa_r+0x59c>)
 800b632:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b636:	2200      	movs	r2, #0
 800b638:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63c:	f7f4 ffe4 	bl	8000608 <__aeabi_dmul>
 800b640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b644:	e7c4      	b.n	800b5d0 <_dtoa_r+0x518>
 800b646:	bf00      	nop
 800b648:	0800e970 	.word	0x0800e970
 800b64c:	0800e948 	.word	0x0800e948
 800b650:	3ff00000 	.word	0x3ff00000
 800b654:	40240000 	.word	0x40240000
 800b658:	401c0000 	.word	0x401c0000
 800b65c:	40140000 	.word	0x40140000
 800b660:	3fe00000 	.word	0x3fe00000
 800b664:	4631      	mov	r1, r6
 800b666:	4628      	mov	r0, r5
 800b668:	f7f4 ffce 	bl	8000608 <__aeabi_dmul>
 800b66c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b670:	9415      	str	r4, [sp, #84]	@ 0x54
 800b672:	4656      	mov	r6, sl
 800b674:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b678:	f7f5 fa76 	bl	8000b68 <__aeabi_d2iz>
 800b67c:	4605      	mov	r5, r0
 800b67e:	f7f4 ff59 	bl	8000534 <__aeabi_i2d>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b68a:	f7f4 fe05 	bl	8000298 <__aeabi_dsub>
 800b68e:	3530      	adds	r5, #48	@ 0x30
 800b690:	f806 5b01 	strb.w	r5, [r6], #1
 800b694:	4602      	mov	r2, r0
 800b696:	460b      	mov	r3, r1
 800b698:	42a6      	cmp	r6, r4
 800b69a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b69e:	f04f 0200 	mov.w	r2, #0
 800b6a2:	d124      	bne.n	800b6ee <_dtoa_r+0x636>
 800b6a4:	4bac      	ldr	r3, [pc, #688]	@ (800b958 <_dtoa_r+0x8a0>)
 800b6a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6aa:	f7f4 fdf7 	bl	800029c <__adddf3>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6b6:	f7f5 fa37 	bl	8000b28 <__aeabi_dcmpgt>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d145      	bne.n	800b74a <_dtoa_r+0x692>
 800b6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6c2:	49a5      	ldr	r1, [pc, #660]	@ (800b958 <_dtoa_r+0x8a0>)
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	f7f4 fde7 	bl	8000298 <__aeabi_dsub>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6d2:	f7f5 fa0b 	bl	8000aec <__aeabi_dcmplt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	f43f aef4 	beq.w	800b4c4 <_dtoa_r+0x40c>
 800b6dc:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b6de:	1e73      	subs	r3, r6, #1
 800b6e0:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6e2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b6e6:	2b30      	cmp	r3, #48	@ 0x30
 800b6e8:	d0f8      	beq.n	800b6dc <_dtoa_r+0x624>
 800b6ea:	9f04      	ldr	r7, [sp, #16]
 800b6ec:	e73d      	b.n	800b56a <_dtoa_r+0x4b2>
 800b6ee:	4b9b      	ldr	r3, [pc, #620]	@ (800b95c <_dtoa_r+0x8a4>)
 800b6f0:	f7f4 ff8a 	bl	8000608 <__aeabi_dmul>
 800b6f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b6f8:	e7bc      	b.n	800b674 <_dtoa_r+0x5bc>
 800b6fa:	d10c      	bne.n	800b716 <_dtoa_r+0x65e>
 800b6fc:	4b98      	ldr	r3, [pc, #608]	@ (800b960 <_dtoa_r+0x8a8>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b704:	f7f4 ff80 	bl	8000608 <__aeabi_dmul>
 800b708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b70c:	f7f5 fa02 	bl	8000b14 <__aeabi_dcmpge>
 800b710:	2800      	cmp	r0, #0
 800b712:	f000 8157 	beq.w	800b9c4 <_dtoa_r+0x90c>
 800b716:	2400      	movs	r4, #0
 800b718:	4625      	mov	r5, r4
 800b71a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b71c:	43db      	mvns	r3, r3
 800b71e:	9304      	str	r3, [sp, #16]
 800b720:	4656      	mov	r6, sl
 800b722:	2700      	movs	r7, #0
 800b724:	4621      	mov	r1, r4
 800b726:	4658      	mov	r0, fp
 800b728:	f000 fa97 	bl	800bc5a <_Bfree>
 800b72c:	2d00      	cmp	r5, #0
 800b72e:	d0dc      	beq.n	800b6ea <_dtoa_r+0x632>
 800b730:	b12f      	cbz	r7, 800b73e <_dtoa_r+0x686>
 800b732:	42af      	cmp	r7, r5
 800b734:	d003      	beq.n	800b73e <_dtoa_r+0x686>
 800b736:	4639      	mov	r1, r7
 800b738:	4658      	mov	r0, fp
 800b73a:	f000 fa8e 	bl	800bc5a <_Bfree>
 800b73e:	4629      	mov	r1, r5
 800b740:	4658      	mov	r0, fp
 800b742:	f000 fa8a 	bl	800bc5a <_Bfree>
 800b746:	e7d0      	b.n	800b6ea <_dtoa_r+0x632>
 800b748:	9704      	str	r7, [sp, #16]
 800b74a:	4633      	mov	r3, r6
 800b74c:	461e      	mov	r6, r3
 800b74e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b752:	2a39      	cmp	r2, #57	@ 0x39
 800b754:	d107      	bne.n	800b766 <_dtoa_r+0x6ae>
 800b756:	459a      	cmp	sl, r3
 800b758:	d1f8      	bne.n	800b74c <_dtoa_r+0x694>
 800b75a:	9a04      	ldr	r2, [sp, #16]
 800b75c:	3201      	adds	r2, #1
 800b75e:	9204      	str	r2, [sp, #16]
 800b760:	2230      	movs	r2, #48	@ 0x30
 800b762:	f88a 2000 	strb.w	r2, [sl]
 800b766:	781a      	ldrb	r2, [r3, #0]
 800b768:	3201      	adds	r2, #1
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	e7bd      	b.n	800b6ea <_dtoa_r+0x632>
 800b76e:	4b7b      	ldr	r3, [pc, #492]	@ (800b95c <_dtoa_r+0x8a4>)
 800b770:	2200      	movs	r2, #0
 800b772:	f7f4 ff49 	bl	8000608 <__aeabi_dmul>
 800b776:	2200      	movs	r2, #0
 800b778:	2300      	movs	r3, #0
 800b77a:	4604      	mov	r4, r0
 800b77c:	460d      	mov	r5, r1
 800b77e:	f7f5 f9ab 	bl	8000ad8 <__aeabi_dcmpeq>
 800b782:	2800      	cmp	r0, #0
 800b784:	f43f aeba 	beq.w	800b4fc <_dtoa_r+0x444>
 800b788:	e6ef      	b.n	800b56a <_dtoa_r+0x4b2>
 800b78a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b78c:	2a00      	cmp	r2, #0
 800b78e:	f000 80db 	beq.w	800b948 <_dtoa_r+0x890>
 800b792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b794:	2a01      	cmp	r2, #1
 800b796:	f300 80bf 	bgt.w	800b918 <_dtoa_r+0x860>
 800b79a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b79c:	2a00      	cmp	r2, #0
 800b79e:	f000 80b7 	beq.w	800b910 <_dtoa_r+0x858>
 800b7a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b7a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b7a8:	4646      	mov	r6, r8
 800b7aa:	9a08      	ldr	r2, [sp, #32]
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	441a      	add	r2, r3
 800b7b0:	4658      	mov	r0, fp
 800b7b2:	4498      	add	r8, r3
 800b7b4:	9208      	str	r2, [sp, #32]
 800b7b6:	f000 faeb 	bl	800bd90 <__i2b>
 800b7ba:	4605      	mov	r5, r0
 800b7bc:	b15e      	cbz	r6, 800b7d6 <_dtoa_r+0x71e>
 800b7be:	9b08      	ldr	r3, [sp, #32]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dd08      	ble.n	800b7d6 <_dtoa_r+0x71e>
 800b7c4:	42b3      	cmp	r3, r6
 800b7c6:	9a08      	ldr	r2, [sp, #32]
 800b7c8:	bfa8      	it	ge
 800b7ca:	4633      	movge	r3, r6
 800b7cc:	eba8 0803 	sub.w	r8, r8, r3
 800b7d0:	1af6      	subs	r6, r6, r3
 800b7d2:	1ad3      	subs	r3, r2, r3
 800b7d4:	9308      	str	r3, [sp, #32]
 800b7d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7d8:	b1f3      	cbz	r3, 800b818 <_dtoa_r+0x760>
 800b7da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 80b7 	beq.w	800b950 <_dtoa_r+0x898>
 800b7e2:	b18c      	cbz	r4, 800b808 <_dtoa_r+0x750>
 800b7e4:	4629      	mov	r1, r5
 800b7e6:	4622      	mov	r2, r4
 800b7e8:	4658      	mov	r0, fp
 800b7ea:	f000 fb91 	bl	800bf10 <__pow5mult>
 800b7ee:	464a      	mov	r2, r9
 800b7f0:	4601      	mov	r1, r0
 800b7f2:	4605      	mov	r5, r0
 800b7f4:	4658      	mov	r0, fp
 800b7f6:	f000 fae1 	bl	800bdbc <__multiply>
 800b7fa:	4649      	mov	r1, r9
 800b7fc:	9004      	str	r0, [sp, #16]
 800b7fe:	4658      	mov	r0, fp
 800b800:	f000 fa2b 	bl	800bc5a <_Bfree>
 800b804:	9b04      	ldr	r3, [sp, #16]
 800b806:	4699      	mov	r9, r3
 800b808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b80a:	1b1a      	subs	r2, r3, r4
 800b80c:	d004      	beq.n	800b818 <_dtoa_r+0x760>
 800b80e:	4649      	mov	r1, r9
 800b810:	4658      	mov	r0, fp
 800b812:	f000 fb7d 	bl	800bf10 <__pow5mult>
 800b816:	4681      	mov	r9, r0
 800b818:	2101      	movs	r1, #1
 800b81a:	4658      	mov	r0, fp
 800b81c:	f000 fab8 	bl	800bd90 <__i2b>
 800b820:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b822:	4604      	mov	r4, r0
 800b824:	2b00      	cmp	r3, #0
 800b826:	f000 81cc 	beq.w	800bbc2 <_dtoa_r+0xb0a>
 800b82a:	461a      	mov	r2, r3
 800b82c:	4601      	mov	r1, r0
 800b82e:	4658      	mov	r0, fp
 800b830:	f000 fb6e 	bl	800bf10 <__pow5mult>
 800b834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b836:	2b01      	cmp	r3, #1
 800b838:	4604      	mov	r4, r0
 800b83a:	f300 8095 	bgt.w	800b968 <_dtoa_r+0x8b0>
 800b83e:	9b02      	ldr	r3, [sp, #8]
 800b840:	2b00      	cmp	r3, #0
 800b842:	f040 8087 	bne.w	800b954 <_dtoa_r+0x89c>
 800b846:	9b03      	ldr	r3, [sp, #12]
 800b848:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f040 8089 	bne.w	800b964 <_dtoa_r+0x8ac>
 800b852:	9b03      	ldr	r3, [sp, #12]
 800b854:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b858:	0d1b      	lsrs	r3, r3, #20
 800b85a:	051b      	lsls	r3, r3, #20
 800b85c:	b12b      	cbz	r3, 800b86a <_dtoa_r+0x7b2>
 800b85e:	9b08      	ldr	r3, [sp, #32]
 800b860:	3301      	adds	r3, #1
 800b862:	9308      	str	r3, [sp, #32]
 800b864:	f108 0801 	add.w	r8, r8, #1
 800b868:	2301      	movs	r3, #1
 800b86a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b86c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b86e:	2b00      	cmp	r3, #0
 800b870:	f000 81ad 	beq.w	800bbce <_dtoa_r+0xb16>
 800b874:	6923      	ldr	r3, [r4, #16]
 800b876:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b87a:	6918      	ldr	r0, [r3, #16]
 800b87c:	f000 fa3c 	bl	800bcf8 <__hi0bits>
 800b880:	f1c0 0020 	rsb	r0, r0, #32
 800b884:	9b08      	ldr	r3, [sp, #32]
 800b886:	4418      	add	r0, r3
 800b888:	f010 001f 	ands.w	r0, r0, #31
 800b88c:	d077      	beq.n	800b97e <_dtoa_r+0x8c6>
 800b88e:	f1c0 0320 	rsb	r3, r0, #32
 800b892:	2b04      	cmp	r3, #4
 800b894:	dd6b      	ble.n	800b96e <_dtoa_r+0x8b6>
 800b896:	9b08      	ldr	r3, [sp, #32]
 800b898:	f1c0 001c 	rsb	r0, r0, #28
 800b89c:	4403      	add	r3, r0
 800b89e:	4480      	add	r8, r0
 800b8a0:	4406      	add	r6, r0
 800b8a2:	9308      	str	r3, [sp, #32]
 800b8a4:	f1b8 0f00 	cmp.w	r8, #0
 800b8a8:	dd05      	ble.n	800b8b6 <_dtoa_r+0x7fe>
 800b8aa:	4649      	mov	r1, r9
 800b8ac:	4642      	mov	r2, r8
 800b8ae:	4658      	mov	r0, fp
 800b8b0:	f000 fb6e 	bl	800bf90 <__lshift>
 800b8b4:	4681      	mov	r9, r0
 800b8b6:	9b08      	ldr	r3, [sp, #32]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	dd05      	ble.n	800b8c8 <_dtoa_r+0x810>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	461a      	mov	r2, r3
 800b8c0:	4658      	mov	r0, fp
 800b8c2:	f000 fb65 	bl	800bf90 <__lshift>
 800b8c6:	4604      	mov	r4, r0
 800b8c8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d059      	beq.n	800b982 <_dtoa_r+0x8ca>
 800b8ce:	4621      	mov	r1, r4
 800b8d0:	4648      	mov	r0, r9
 800b8d2:	f000 fbc9 	bl	800c068 <__mcmp>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	da53      	bge.n	800b982 <_dtoa_r+0x8ca>
 800b8da:	1e7b      	subs	r3, r7, #1
 800b8dc:	9304      	str	r3, [sp, #16]
 800b8de:	4649      	mov	r1, r9
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	220a      	movs	r2, #10
 800b8e4:	4658      	mov	r0, fp
 800b8e6:	f000 f9c1 	bl	800bc6c <__multadd>
 800b8ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b8ec:	4681      	mov	r9, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	f000 816f 	beq.w	800bbd2 <_dtoa_r+0xb1a>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	220a      	movs	r2, #10
 800b8fa:	4658      	mov	r0, fp
 800b8fc:	f000 f9b6 	bl	800bc6c <__multadd>
 800b900:	9b00      	ldr	r3, [sp, #0]
 800b902:	2b00      	cmp	r3, #0
 800b904:	4605      	mov	r5, r0
 800b906:	dc67      	bgt.n	800b9d8 <_dtoa_r+0x920>
 800b908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b90a:	2b02      	cmp	r3, #2
 800b90c:	dc41      	bgt.n	800b992 <_dtoa_r+0x8da>
 800b90e:	e063      	b.n	800b9d8 <_dtoa_r+0x920>
 800b910:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b912:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b916:	e746      	b.n	800b7a6 <_dtoa_r+0x6ee>
 800b918:	9b07      	ldr	r3, [sp, #28]
 800b91a:	1e5c      	subs	r4, r3, #1
 800b91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b91e:	42a3      	cmp	r3, r4
 800b920:	bfbf      	itttt	lt
 800b922:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b924:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b926:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b928:	1ae3      	sublt	r3, r4, r3
 800b92a:	bfb4      	ite	lt
 800b92c:	18d2      	addlt	r2, r2, r3
 800b92e:	1b1c      	subge	r4, r3, r4
 800b930:	9b07      	ldr	r3, [sp, #28]
 800b932:	bfbc      	itt	lt
 800b934:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b936:	2400      	movlt	r4, #0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bfb5      	itete	lt
 800b93c:	eba8 0603 	sublt.w	r6, r8, r3
 800b940:	9b07      	ldrge	r3, [sp, #28]
 800b942:	2300      	movlt	r3, #0
 800b944:	4646      	movge	r6, r8
 800b946:	e730      	b.n	800b7aa <_dtoa_r+0x6f2>
 800b948:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b94a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b94c:	4646      	mov	r6, r8
 800b94e:	e735      	b.n	800b7bc <_dtoa_r+0x704>
 800b950:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b952:	e75c      	b.n	800b80e <_dtoa_r+0x756>
 800b954:	2300      	movs	r3, #0
 800b956:	e788      	b.n	800b86a <_dtoa_r+0x7b2>
 800b958:	3fe00000 	.word	0x3fe00000
 800b95c:	40240000 	.word	0x40240000
 800b960:	40140000 	.word	0x40140000
 800b964:	9b02      	ldr	r3, [sp, #8]
 800b966:	e780      	b.n	800b86a <_dtoa_r+0x7b2>
 800b968:	2300      	movs	r3, #0
 800b96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b96c:	e782      	b.n	800b874 <_dtoa_r+0x7bc>
 800b96e:	d099      	beq.n	800b8a4 <_dtoa_r+0x7ec>
 800b970:	9a08      	ldr	r2, [sp, #32]
 800b972:	331c      	adds	r3, #28
 800b974:	441a      	add	r2, r3
 800b976:	4498      	add	r8, r3
 800b978:	441e      	add	r6, r3
 800b97a:	9208      	str	r2, [sp, #32]
 800b97c:	e792      	b.n	800b8a4 <_dtoa_r+0x7ec>
 800b97e:	4603      	mov	r3, r0
 800b980:	e7f6      	b.n	800b970 <_dtoa_r+0x8b8>
 800b982:	9b07      	ldr	r3, [sp, #28]
 800b984:	9704      	str	r7, [sp, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	dc20      	bgt.n	800b9cc <_dtoa_r+0x914>
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b98e:	2b02      	cmp	r3, #2
 800b990:	dd1e      	ble.n	800b9d0 <_dtoa_r+0x918>
 800b992:	9b00      	ldr	r3, [sp, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f47f aec0 	bne.w	800b71a <_dtoa_r+0x662>
 800b99a:	4621      	mov	r1, r4
 800b99c:	2205      	movs	r2, #5
 800b99e:	4658      	mov	r0, fp
 800b9a0:	f000 f964 	bl	800bc6c <__multadd>
 800b9a4:	4601      	mov	r1, r0
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4648      	mov	r0, r9
 800b9aa:	f000 fb5d 	bl	800c068 <__mcmp>
 800b9ae:	2800      	cmp	r0, #0
 800b9b0:	f77f aeb3 	ble.w	800b71a <_dtoa_r+0x662>
 800b9b4:	4656      	mov	r6, sl
 800b9b6:	2331      	movs	r3, #49	@ 0x31
 800b9b8:	f806 3b01 	strb.w	r3, [r6], #1
 800b9bc:	9b04      	ldr	r3, [sp, #16]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	e6ae      	b.n	800b722 <_dtoa_r+0x66a>
 800b9c4:	9c07      	ldr	r4, [sp, #28]
 800b9c6:	9704      	str	r7, [sp, #16]
 800b9c8:	4625      	mov	r5, r4
 800b9ca:	e7f3      	b.n	800b9b4 <_dtoa_r+0x8fc>
 800b9cc:	9b07      	ldr	r3, [sp, #28]
 800b9ce:	9300      	str	r3, [sp, #0]
 800b9d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	f000 8101 	beq.w	800bbda <_dtoa_r+0xb22>
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	dd05      	ble.n	800b9e8 <_dtoa_r+0x930>
 800b9dc:	4629      	mov	r1, r5
 800b9de:	4632      	mov	r2, r6
 800b9e0:	4658      	mov	r0, fp
 800b9e2:	f000 fad5 	bl	800bf90 <__lshift>
 800b9e6:	4605      	mov	r5, r0
 800b9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d059      	beq.n	800baa2 <_dtoa_r+0x9ea>
 800b9ee:	6869      	ldr	r1, [r5, #4]
 800b9f0:	4658      	mov	r0, fp
 800b9f2:	f000 f90d 	bl	800bc10 <_Balloc>
 800b9f6:	4606      	mov	r6, r0
 800b9f8:	b920      	cbnz	r0, 800ba04 <_dtoa_r+0x94c>
 800b9fa:	4b83      	ldr	r3, [pc, #524]	@ (800bc08 <_dtoa_r+0xb50>)
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba02:	e480      	b.n	800b306 <_dtoa_r+0x24e>
 800ba04:	692a      	ldr	r2, [r5, #16]
 800ba06:	3202      	adds	r2, #2
 800ba08:	0092      	lsls	r2, r2, #2
 800ba0a:	f105 010c 	add.w	r1, r5, #12
 800ba0e:	300c      	adds	r0, #12
 800ba10:	f000 fcd0 	bl	800c3b4 <memcpy>
 800ba14:	2201      	movs	r2, #1
 800ba16:	4631      	mov	r1, r6
 800ba18:	4658      	mov	r0, fp
 800ba1a:	f000 fab9 	bl	800bf90 <__lshift>
 800ba1e:	f10a 0301 	add.w	r3, sl, #1
 800ba22:	9307      	str	r3, [sp, #28]
 800ba24:	9b00      	ldr	r3, [sp, #0]
 800ba26:	4453      	add	r3, sl
 800ba28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba2a:	9b02      	ldr	r3, [sp, #8]
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	462f      	mov	r7, r5
 800ba32:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba34:	4605      	mov	r5, r0
 800ba36:	9b07      	ldr	r3, [sp, #28]
 800ba38:	4621      	mov	r1, r4
 800ba3a:	3b01      	subs	r3, #1
 800ba3c:	4648      	mov	r0, r9
 800ba3e:	9300      	str	r3, [sp, #0]
 800ba40:	f7ff fab0 	bl	800afa4 <quorem>
 800ba44:	4639      	mov	r1, r7
 800ba46:	9002      	str	r0, [sp, #8]
 800ba48:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba4c:	4648      	mov	r0, r9
 800ba4e:	f000 fb0b 	bl	800c068 <__mcmp>
 800ba52:	462a      	mov	r2, r5
 800ba54:	9008      	str	r0, [sp, #32]
 800ba56:	4621      	mov	r1, r4
 800ba58:	4658      	mov	r0, fp
 800ba5a:	f000 fb21 	bl	800c0a0 <__mdiff>
 800ba5e:	68c2      	ldr	r2, [r0, #12]
 800ba60:	4606      	mov	r6, r0
 800ba62:	bb02      	cbnz	r2, 800baa6 <_dtoa_r+0x9ee>
 800ba64:	4601      	mov	r1, r0
 800ba66:	4648      	mov	r0, r9
 800ba68:	f000 fafe 	bl	800c068 <__mcmp>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	4631      	mov	r1, r6
 800ba70:	4658      	mov	r0, fp
 800ba72:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba74:	f000 f8f1 	bl	800bc5a <_Bfree>
 800ba78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba7c:	9e07      	ldr	r6, [sp, #28]
 800ba7e:	ea43 0102 	orr.w	r1, r3, r2
 800ba82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba84:	4319      	orrs	r1, r3
 800ba86:	d110      	bne.n	800baaa <_dtoa_r+0x9f2>
 800ba88:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ba8c:	d029      	beq.n	800bae2 <_dtoa_r+0xa2a>
 800ba8e:	9b08      	ldr	r3, [sp, #32]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dd02      	ble.n	800ba9a <_dtoa_r+0x9e2>
 800ba94:	9b02      	ldr	r3, [sp, #8]
 800ba96:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ba9a:	9b00      	ldr	r3, [sp, #0]
 800ba9c:	f883 8000 	strb.w	r8, [r3]
 800baa0:	e640      	b.n	800b724 <_dtoa_r+0x66c>
 800baa2:	4628      	mov	r0, r5
 800baa4:	e7bb      	b.n	800ba1e <_dtoa_r+0x966>
 800baa6:	2201      	movs	r2, #1
 800baa8:	e7e1      	b.n	800ba6e <_dtoa_r+0x9b6>
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	2b00      	cmp	r3, #0
 800baae:	db04      	blt.n	800baba <_dtoa_r+0xa02>
 800bab0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bab2:	430b      	orrs	r3, r1
 800bab4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bab6:	430b      	orrs	r3, r1
 800bab8:	d120      	bne.n	800bafc <_dtoa_r+0xa44>
 800baba:	2a00      	cmp	r2, #0
 800babc:	dded      	ble.n	800ba9a <_dtoa_r+0x9e2>
 800babe:	4649      	mov	r1, r9
 800bac0:	2201      	movs	r2, #1
 800bac2:	4658      	mov	r0, fp
 800bac4:	f000 fa64 	bl	800bf90 <__lshift>
 800bac8:	4621      	mov	r1, r4
 800baca:	4681      	mov	r9, r0
 800bacc:	f000 facc 	bl	800c068 <__mcmp>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	dc03      	bgt.n	800badc <_dtoa_r+0xa24>
 800bad4:	d1e1      	bne.n	800ba9a <_dtoa_r+0x9e2>
 800bad6:	f018 0f01 	tst.w	r8, #1
 800bada:	d0de      	beq.n	800ba9a <_dtoa_r+0x9e2>
 800badc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bae0:	d1d8      	bne.n	800ba94 <_dtoa_r+0x9dc>
 800bae2:	9a00      	ldr	r2, [sp, #0]
 800bae4:	2339      	movs	r3, #57	@ 0x39
 800bae6:	7013      	strb	r3, [r2, #0]
 800bae8:	4633      	mov	r3, r6
 800baea:	461e      	mov	r6, r3
 800baec:	3b01      	subs	r3, #1
 800baee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800baf2:	2a39      	cmp	r2, #57	@ 0x39
 800baf4:	d052      	beq.n	800bb9c <_dtoa_r+0xae4>
 800baf6:	3201      	adds	r2, #1
 800baf8:	701a      	strb	r2, [r3, #0]
 800bafa:	e613      	b.n	800b724 <_dtoa_r+0x66c>
 800bafc:	2a00      	cmp	r2, #0
 800bafe:	dd07      	ble.n	800bb10 <_dtoa_r+0xa58>
 800bb00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb04:	d0ed      	beq.n	800bae2 <_dtoa_r+0xa2a>
 800bb06:	9a00      	ldr	r2, [sp, #0]
 800bb08:	f108 0301 	add.w	r3, r8, #1
 800bb0c:	7013      	strb	r3, [r2, #0]
 800bb0e:	e609      	b.n	800b724 <_dtoa_r+0x66c>
 800bb10:	9b07      	ldr	r3, [sp, #28]
 800bb12:	9a07      	ldr	r2, [sp, #28]
 800bb14:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d028      	beq.n	800bb70 <_dtoa_r+0xab8>
 800bb1e:	4649      	mov	r1, r9
 800bb20:	2300      	movs	r3, #0
 800bb22:	220a      	movs	r2, #10
 800bb24:	4658      	mov	r0, fp
 800bb26:	f000 f8a1 	bl	800bc6c <__multadd>
 800bb2a:	42af      	cmp	r7, r5
 800bb2c:	4681      	mov	r9, r0
 800bb2e:	f04f 0300 	mov.w	r3, #0
 800bb32:	f04f 020a 	mov.w	r2, #10
 800bb36:	4639      	mov	r1, r7
 800bb38:	4658      	mov	r0, fp
 800bb3a:	d107      	bne.n	800bb4c <_dtoa_r+0xa94>
 800bb3c:	f000 f896 	bl	800bc6c <__multadd>
 800bb40:	4607      	mov	r7, r0
 800bb42:	4605      	mov	r5, r0
 800bb44:	9b07      	ldr	r3, [sp, #28]
 800bb46:	3301      	adds	r3, #1
 800bb48:	9307      	str	r3, [sp, #28]
 800bb4a:	e774      	b.n	800ba36 <_dtoa_r+0x97e>
 800bb4c:	f000 f88e 	bl	800bc6c <__multadd>
 800bb50:	4629      	mov	r1, r5
 800bb52:	4607      	mov	r7, r0
 800bb54:	2300      	movs	r3, #0
 800bb56:	220a      	movs	r2, #10
 800bb58:	4658      	mov	r0, fp
 800bb5a:	f000 f887 	bl	800bc6c <__multadd>
 800bb5e:	4605      	mov	r5, r0
 800bb60:	e7f0      	b.n	800bb44 <_dtoa_r+0xa8c>
 800bb62:	9b00      	ldr	r3, [sp, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	bfcc      	ite	gt
 800bb68:	461e      	movgt	r6, r3
 800bb6a:	2601      	movle	r6, #1
 800bb6c:	4456      	add	r6, sl
 800bb6e:	2700      	movs	r7, #0
 800bb70:	4649      	mov	r1, r9
 800bb72:	2201      	movs	r2, #1
 800bb74:	4658      	mov	r0, fp
 800bb76:	f000 fa0b 	bl	800bf90 <__lshift>
 800bb7a:	4621      	mov	r1, r4
 800bb7c:	4681      	mov	r9, r0
 800bb7e:	f000 fa73 	bl	800c068 <__mcmp>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	dcb0      	bgt.n	800bae8 <_dtoa_r+0xa30>
 800bb86:	d102      	bne.n	800bb8e <_dtoa_r+0xad6>
 800bb88:	f018 0f01 	tst.w	r8, #1
 800bb8c:	d1ac      	bne.n	800bae8 <_dtoa_r+0xa30>
 800bb8e:	4633      	mov	r3, r6
 800bb90:	461e      	mov	r6, r3
 800bb92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb96:	2a30      	cmp	r2, #48	@ 0x30
 800bb98:	d0fa      	beq.n	800bb90 <_dtoa_r+0xad8>
 800bb9a:	e5c3      	b.n	800b724 <_dtoa_r+0x66c>
 800bb9c:	459a      	cmp	sl, r3
 800bb9e:	d1a4      	bne.n	800baea <_dtoa_r+0xa32>
 800bba0:	9b04      	ldr	r3, [sp, #16]
 800bba2:	3301      	adds	r3, #1
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	2331      	movs	r3, #49	@ 0x31
 800bba8:	f88a 3000 	strb.w	r3, [sl]
 800bbac:	e5ba      	b.n	800b724 <_dtoa_r+0x66c>
 800bbae:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800bc0c <_dtoa_r+0xb54>
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f43f aab6 	beq.w	800b126 <_dtoa_r+0x6e>
 800bbba:	f10a 0308 	add.w	r3, sl, #8
 800bbbe:	f7ff bab0 	b.w	800b122 <_dtoa_r+0x6a>
 800bbc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	f77f ae3a 	ble.w	800b83e <_dtoa_r+0x786>
 800bbca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbcc:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbce:	2001      	movs	r0, #1
 800bbd0:	e658      	b.n	800b884 <_dtoa_r+0x7cc>
 800bbd2:	9b00      	ldr	r3, [sp, #0]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f77f aed9 	ble.w	800b98c <_dtoa_r+0x8d4>
 800bbda:	4656      	mov	r6, sl
 800bbdc:	4621      	mov	r1, r4
 800bbde:	4648      	mov	r0, r9
 800bbe0:	f7ff f9e0 	bl	800afa4 <quorem>
 800bbe4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bbe8:	f806 8b01 	strb.w	r8, [r6], #1
 800bbec:	9b00      	ldr	r3, [sp, #0]
 800bbee:	eba6 020a 	sub.w	r2, r6, sl
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	ddb5      	ble.n	800bb62 <_dtoa_r+0xaaa>
 800bbf6:	4649      	mov	r1, r9
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	220a      	movs	r2, #10
 800bbfc:	4658      	mov	r0, fp
 800bbfe:	f000 f835 	bl	800bc6c <__multadd>
 800bc02:	4681      	mov	r9, r0
 800bc04:	e7ea      	b.n	800bbdc <_dtoa_r+0xb24>
 800bc06:	bf00      	nop
 800bc08:	0800e879 	.word	0x0800e879
 800bc0c:	0800e86c 	.word	0x0800e86c

0800bc10 <_Balloc>:
 800bc10:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800bc12:	b570      	push	{r4, r5, r6, lr}
 800bc14:	4605      	mov	r5, r0
 800bc16:	460c      	mov	r4, r1
 800bc18:	b17b      	cbz	r3, 800bc3a <_Balloc+0x2a>
 800bc1a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800bc1c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bc20:	b9a0      	cbnz	r0, 800bc4c <_Balloc+0x3c>
 800bc22:	2101      	movs	r1, #1
 800bc24:	fa01 f604 	lsl.w	r6, r1, r4
 800bc28:	1d72      	adds	r2, r6, #5
 800bc2a:	0092      	lsls	r2, r2, #2
 800bc2c:	4628      	mov	r0, r5
 800bc2e:	f000 fbed 	bl	800c40c <_calloc_r>
 800bc32:	b148      	cbz	r0, 800bc48 <_Balloc+0x38>
 800bc34:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800bc38:	e00b      	b.n	800bc52 <_Balloc+0x42>
 800bc3a:	2221      	movs	r2, #33	@ 0x21
 800bc3c:	2104      	movs	r1, #4
 800bc3e:	f000 fbe5 	bl	800c40c <_calloc_r>
 800bc42:	6468      	str	r0, [r5, #68]	@ 0x44
 800bc44:	2800      	cmp	r0, #0
 800bc46:	d1e8      	bne.n	800bc1a <_Balloc+0xa>
 800bc48:	2000      	movs	r0, #0
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	6802      	ldr	r2, [r0, #0]
 800bc4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800bc52:	2300      	movs	r3, #0
 800bc54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bc58:	e7f7      	b.n	800bc4a <_Balloc+0x3a>

0800bc5a <_Bfree>:
 800bc5a:	b131      	cbz	r1, 800bc6a <_Bfree+0x10>
 800bc5c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800bc5e:	684a      	ldr	r2, [r1, #4]
 800bc60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bc64:	6008      	str	r0, [r1, #0]
 800bc66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bc6a:	4770      	bx	lr

0800bc6c <__multadd>:
 800bc6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc70:	690d      	ldr	r5, [r1, #16]
 800bc72:	4607      	mov	r7, r0
 800bc74:	460c      	mov	r4, r1
 800bc76:	461e      	mov	r6, r3
 800bc78:	f101 0c14 	add.w	ip, r1, #20
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	f8dc 3000 	ldr.w	r3, [ip]
 800bc82:	b299      	uxth	r1, r3
 800bc84:	fb02 6101 	mla	r1, r2, r1, r6
 800bc88:	0c1e      	lsrs	r6, r3, #16
 800bc8a:	0c0b      	lsrs	r3, r1, #16
 800bc8c:	fb02 3306 	mla	r3, r2, r6, r3
 800bc90:	b289      	uxth	r1, r1
 800bc92:	3001      	adds	r0, #1
 800bc94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc98:	4285      	cmp	r5, r0
 800bc9a:	f84c 1b04 	str.w	r1, [ip], #4
 800bc9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bca2:	dcec      	bgt.n	800bc7e <__multadd+0x12>
 800bca4:	b30e      	cbz	r6, 800bcea <__multadd+0x7e>
 800bca6:	68a3      	ldr	r3, [r4, #8]
 800bca8:	42ab      	cmp	r3, r5
 800bcaa:	dc19      	bgt.n	800bce0 <__multadd+0x74>
 800bcac:	6861      	ldr	r1, [r4, #4]
 800bcae:	4638      	mov	r0, r7
 800bcb0:	3101      	adds	r1, #1
 800bcb2:	f7ff ffad 	bl	800bc10 <_Balloc>
 800bcb6:	4680      	mov	r8, r0
 800bcb8:	b928      	cbnz	r0, 800bcc6 <__multadd+0x5a>
 800bcba:	4602      	mov	r2, r0
 800bcbc:	4b0c      	ldr	r3, [pc, #48]	@ (800bcf0 <__multadd+0x84>)
 800bcbe:	480d      	ldr	r0, [pc, #52]	@ (800bcf4 <__multadd+0x88>)
 800bcc0:	21ba      	movs	r1, #186	@ 0xba
 800bcc2:	f000 fb85 	bl	800c3d0 <__assert_func>
 800bcc6:	6922      	ldr	r2, [r4, #16]
 800bcc8:	3202      	adds	r2, #2
 800bcca:	f104 010c 	add.w	r1, r4, #12
 800bcce:	0092      	lsls	r2, r2, #2
 800bcd0:	300c      	adds	r0, #12
 800bcd2:	f000 fb6f 	bl	800c3b4 <memcpy>
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7ff ffbe 	bl	800bc5a <_Bfree>
 800bcde:	4644      	mov	r4, r8
 800bce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bce4:	3501      	adds	r5, #1
 800bce6:	615e      	str	r6, [r3, #20]
 800bce8:	6125      	str	r5, [r4, #16]
 800bcea:	4620      	mov	r0, r4
 800bcec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf0:	0800e879 	.word	0x0800e879
 800bcf4:	0800e8e2 	.word	0x0800e8e2

0800bcf8 <__hi0bits>:
 800bcf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	bf36      	itet	cc
 800bd00:	0403      	lslcc	r3, r0, #16
 800bd02:	2000      	movcs	r0, #0
 800bd04:	2010      	movcc	r0, #16
 800bd06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd0a:	bf3c      	itt	cc
 800bd0c:	021b      	lslcc	r3, r3, #8
 800bd0e:	3008      	addcc	r0, #8
 800bd10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd14:	bf3c      	itt	cc
 800bd16:	011b      	lslcc	r3, r3, #4
 800bd18:	3004      	addcc	r0, #4
 800bd1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd1e:	bf3c      	itt	cc
 800bd20:	009b      	lslcc	r3, r3, #2
 800bd22:	3002      	addcc	r0, #2
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	db05      	blt.n	800bd34 <__hi0bits+0x3c>
 800bd28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd2c:	f100 0001 	add.w	r0, r0, #1
 800bd30:	bf08      	it	eq
 800bd32:	2020      	moveq	r0, #32
 800bd34:	4770      	bx	lr

0800bd36 <__lo0bits>:
 800bd36:	6803      	ldr	r3, [r0, #0]
 800bd38:	4602      	mov	r2, r0
 800bd3a:	f013 0007 	ands.w	r0, r3, #7
 800bd3e:	d00b      	beq.n	800bd58 <__lo0bits+0x22>
 800bd40:	07d9      	lsls	r1, r3, #31
 800bd42:	d421      	bmi.n	800bd88 <__lo0bits+0x52>
 800bd44:	0798      	lsls	r0, r3, #30
 800bd46:	bf49      	itett	mi
 800bd48:	085b      	lsrmi	r3, r3, #1
 800bd4a:	089b      	lsrpl	r3, r3, #2
 800bd4c:	2001      	movmi	r0, #1
 800bd4e:	6013      	strmi	r3, [r2, #0]
 800bd50:	bf5c      	itt	pl
 800bd52:	6013      	strpl	r3, [r2, #0]
 800bd54:	2002      	movpl	r0, #2
 800bd56:	4770      	bx	lr
 800bd58:	b299      	uxth	r1, r3
 800bd5a:	b909      	cbnz	r1, 800bd60 <__lo0bits+0x2a>
 800bd5c:	0c1b      	lsrs	r3, r3, #16
 800bd5e:	2010      	movs	r0, #16
 800bd60:	b2d9      	uxtb	r1, r3
 800bd62:	b909      	cbnz	r1, 800bd68 <__lo0bits+0x32>
 800bd64:	3008      	adds	r0, #8
 800bd66:	0a1b      	lsrs	r3, r3, #8
 800bd68:	0719      	lsls	r1, r3, #28
 800bd6a:	bf04      	itt	eq
 800bd6c:	091b      	lsreq	r3, r3, #4
 800bd6e:	3004      	addeq	r0, #4
 800bd70:	0799      	lsls	r1, r3, #30
 800bd72:	bf04      	itt	eq
 800bd74:	089b      	lsreq	r3, r3, #2
 800bd76:	3002      	addeq	r0, #2
 800bd78:	07d9      	lsls	r1, r3, #31
 800bd7a:	d403      	bmi.n	800bd84 <__lo0bits+0x4e>
 800bd7c:	085b      	lsrs	r3, r3, #1
 800bd7e:	f100 0001 	add.w	r0, r0, #1
 800bd82:	d003      	beq.n	800bd8c <__lo0bits+0x56>
 800bd84:	6013      	str	r3, [r2, #0]
 800bd86:	4770      	bx	lr
 800bd88:	2000      	movs	r0, #0
 800bd8a:	4770      	bx	lr
 800bd8c:	2020      	movs	r0, #32
 800bd8e:	4770      	bx	lr

0800bd90 <__i2b>:
 800bd90:	b510      	push	{r4, lr}
 800bd92:	460c      	mov	r4, r1
 800bd94:	2101      	movs	r1, #1
 800bd96:	f7ff ff3b 	bl	800bc10 <_Balloc>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	b928      	cbnz	r0, 800bdaa <__i2b+0x1a>
 800bd9e:	4b05      	ldr	r3, [pc, #20]	@ (800bdb4 <__i2b+0x24>)
 800bda0:	4805      	ldr	r0, [pc, #20]	@ (800bdb8 <__i2b+0x28>)
 800bda2:	f240 1145 	movw	r1, #325	@ 0x145
 800bda6:	f000 fb13 	bl	800c3d0 <__assert_func>
 800bdaa:	2301      	movs	r3, #1
 800bdac:	6144      	str	r4, [r0, #20]
 800bdae:	6103      	str	r3, [r0, #16]
 800bdb0:	bd10      	pop	{r4, pc}
 800bdb2:	bf00      	nop
 800bdb4:	0800e879 	.word	0x0800e879
 800bdb8:	0800e8e2 	.word	0x0800e8e2

0800bdbc <__multiply>:
 800bdbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	690a      	ldr	r2, [r1, #16]
 800bdc4:	6923      	ldr	r3, [r4, #16]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	bfa8      	it	ge
 800bdca:	4623      	movge	r3, r4
 800bdcc:	460f      	mov	r7, r1
 800bdce:	bfa4      	itt	ge
 800bdd0:	460c      	movge	r4, r1
 800bdd2:	461f      	movge	r7, r3
 800bdd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bdd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bddc:	68a3      	ldr	r3, [r4, #8]
 800bdde:	6861      	ldr	r1, [r4, #4]
 800bde0:	eb0a 0609 	add.w	r6, sl, r9
 800bde4:	42b3      	cmp	r3, r6
 800bde6:	b085      	sub	sp, #20
 800bde8:	bfb8      	it	lt
 800bdea:	3101      	addlt	r1, #1
 800bdec:	f7ff ff10 	bl	800bc10 <_Balloc>
 800bdf0:	b930      	cbnz	r0, 800be00 <__multiply+0x44>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	4b44      	ldr	r3, [pc, #272]	@ (800bf08 <__multiply+0x14c>)
 800bdf6:	4845      	ldr	r0, [pc, #276]	@ (800bf0c <__multiply+0x150>)
 800bdf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bdfc:	f000 fae8 	bl	800c3d0 <__assert_func>
 800be00:	f100 0514 	add.w	r5, r0, #20
 800be04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be08:	462b      	mov	r3, r5
 800be0a:	2200      	movs	r2, #0
 800be0c:	4543      	cmp	r3, r8
 800be0e:	d321      	bcc.n	800be54 <__multiply+0x98>
 800be10:	f107 0114 	add.w	r1, r7, #20
 800be14:	f104 0214 	add.w	r2, r4, #20
 800be18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be20:	9302      	str	r3, [sp, #8]
 800be22:	1b13      	subs	r3, r2, r4
 800be24:	3b15      	subs	r3, #21
 800be26:	f023 0303 	bic.w	r3, r3, #3
 800be2a:	3304      	adds	r3, #4
 800be2c:	f104 0715 	add.w	r7, r4, #21
 800be30:	42ba      	cmp	r2, r7
 800be32:	bf38      	it	cc
 800be34:	2304      	movcc	r3, #4
 800be36:	9301      	str	r3, [sp, #4]
 800be38:	9b02      	ldr	r3, [sp, #8]
 800be3a:	9103      	str	r1, [sp, #12]
 800be3c:	428b      	cmp	r3, r1
 800be3e:	d80c      	bhi.n	800be5a <__multiply+0x9e>
 800be40:	2e00      	cmp	r6, #0
 800be42:	dd03      	ble.n	800be4c <__multiply+0x90>
 800be44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d05b      	beq.n	800bf04 <__multiply+0x148>
 800be4c:	6106      	str	r6, [r0, #16]
 800be4e:	b005      	add	sp, #20
 800be50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be54:	f843 2b04 	str.w	r2, [r3], #4
 800be58:	e7d8      	b.n	800be0c <__multiply+0x50>
 800be5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800be5e:	f1ba 0f00 	cmp.w	sl, #0
 800be62:	d024      	beq.n	800beae <__multiply+0xf2>
 800be64:	f104 0e14 	add.w	lr, r4, #20
 800be68:	46a9      	mov	r9, r5
 800be6a:	f04f 0c00 	mov.w	ip, #0
 800be6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800be72:	f8d9 3000 	ldr.w	r3, [r9]
 800be76:	fa1f fb87 	uxth.w	fp, r7
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800be80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800be84:	f8d9 7000 	ldr.w	r7, [r9]
 800be88:	4463      	add	r3, ip
 800be8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800be8e:	fb0a c70b 	mla	r7, sl, fp, ip
 800be92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800be96:	b29b      	uxth	r3, r3
 800be98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800be9c:	4572      	cmp	r2, lr
 800be9e:	f849 3b04 	str.w	r3, [r9], #4
 800bea2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bea6:	d8e2      	bhi.n	800be6e <__multiply+0xb2>
 800bea8:	9b01      	ldr	r3, [sp, #4]
 800beaa:	f845 c003 	str.w	ip, [r5, r3]
 800beae:	9b03      	ldr	r3, [sp, #12]
 800beb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800beb4:	3104      	adds	r1, #4
 800beb6:	f1b9 0f00 	cmp.w	r9, #0
 800beba:	d021      	beq.n	800bf00 <__multiply+0x144>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	f104 0c14 	add.w	ip, r4, #20
 800bec2:	46ae      	mov	lr, r5
 800bec4:	f04f 0a00 	mov.w	sl, #0
 800bec8:	f8bc b000 	ldrh.w	fp, [ip]
 800becc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bed0:	fb09 770b 	mla	r7, r9, fp, r7
 800bed4:	4457      	add	r7, sl
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bedc:	f84e 3b04 	str.w	r3, [lr], #4
 800bee0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bee8:	f8be 3000 	ldrh.w	r3, [lr]
 800beec:	fb09 330a 	mla	r3, r9, sl, r3
 800bef0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bef4:	4562      	cmp	r2, ip
 800bef6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800befa:	d8e5      	bhi.n	800bec8 <__multiply+0x10c>
 800befc:	9f01      	ldr	r7, [sp, #4]
 800befe:	51eb      	str	r3, [r5, r7]
 800bf00:	3504      	adds	r5, #4
 800bf02:	e799      	b.n	800be38 <__multiply+0x7c>
 800bf04:	3e01      	subs	r6, #1
 800bf06:	e79b      	b.n	800be40 <__multiply+0x84>
 800bf08:	0800e879 	.word	0x0800e879
 800bf0c:	0800e8e2 	.word	0x0800e8e2

0800bf10 <__pow5mult>:
 800bf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf14:	4615      	mov	r5, r2
 800bf16:	f012 0203 	ands.w	r2, r2, #3
 800bf1a:	4607      	mov	r7, r0
 800bf1c:	460e      	mov	r6, r1
 800bf1e:	d007      	beq.n	800bf30 <__pow5mult+0x20>
 800bf20:	4c1a      	ldr	r4, [pc, #104]	@ (800bf8c <__pow5mult+0x7c>)
 800bf22:	3a01      	subs	r2, #1
 800bf24:	2300      	movs	r3, #0
 800bf26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf2a:	f7ff fe9f 	bl	800bc6c <__multadd>
 800bf2e:	4606      	mov	r6, r0
 800bf30:	10ad      	asrs	r5, r5, #2
 800bf32:	d027      	beq.n	800bf84 <__pow5mult+0x74>
 800bf34:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 800bf36:	b944      	cbnz	r4, 800bf4a <__pow5mult+0x3a>
 800bf38:	f240 2171 	movw	r1, #625	@ 0x271
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff ff27 	bl	800bd90 <__i2b>
 800bf42:	2300      	movs	r3, #0
 800bf44:	6438      	str	r0, [r7, #64]	@ 0x40
 800bf46:	4604      	mov	r4, r0
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	f04f 0900 	mov.w	r9, #0
 800bf4e:	07eb      	lsls	r3, r5, #31
 800bf50:	d50a      	bpl.n	800bf68 <__pow5mult+0x58>
 800bf52:	4631      	mov	r1, r6
 800bf54:	4622      	mov	r2, r4
 800bf56:	4638      	mov	r0, r7
 800bf58:	f7ff ff30 	bl	800bdbc <__multiply>
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	4680      	mov	r8, r0
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff fe7a 	bl	800bc5a <_Bfree>
 800bf66:	4646      	mov	r6, r8
 800bf68:	106d      	asrs	r5, r5, #1
 800bf6a:	d00b      	beq.n	800bf84 <__pow5mult+0x74>
 800bf6c:	6820      	ldr	r0, [r4, #0]
 800bf6e:	b938      	cbnz	r0, 800bf80 <__pow5mult+0x70>
 800bf70:	4622      	mov	r2, r4
 800bf72:	4621      	mov	r1, r4
 800bf74:	4638      	mov	r0, r7
 800bf76:	f7ff ff21 	bl	800bdbc <__multiply>
 800bf7a:	6020      	str	r0, [r4, #0]
 800bf7c:	f8c0 9000 	str.w	r9, [r0]
 800bf80:	4604      	mov	r4, r0
 800bf82:	e7e4      	b.n	800bf4e <__pow5mult+0x3e>
 800bf84:	4630      	mov	r0, r6
 800bf86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf8a:	bf00      	nop
 800bf8c:	0800e93c 	.word	0x0800e93c

0800bf90 <__lshift>:
 800bf90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf94:	460c      	mov	r4, r1
 800bf96:	6849      	ldr	r1, [r1, #4]
 800bf98:	6923      	ldr	r3, [r4, #16]
 800bf9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf9e:	68a3      	ldr	r3, [r4, #8]
 800bfa0:	4607      	mov	r7, r0
 800bfa2:	4691      	mov	r9, r2
 800bfa4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bfa8:	f108 0601 	add.w	r6, r8, #1
 800bfac:	42b3      	cmp	r3, r6
 800bfae:	db0b      	blt.n	800bfc8 <__lshift+0x38>
 800bfb0:	4638      	mov	r0, r7
 800bfb2:	f7ff fe2d 	bl	800bc10 <_Balloc>
 800bfb6:	4605      	mov	r5, r0
 800bfb8:	b948      	cbnz	r0, 800bfce <__lshift+0x3e>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	4b28      	ldr	r3, [pc, #160]	@ (800c060 <__lshift+0xd0>)
 800bfbe:	4829      	ldr	r0, [pc, #164]	@ (800c064 <__lshift+0xd4>)
 800bfc0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bfc4:	f000 fa04 	bl	800c3d0 <__assert_func>
 800bfc8:	3101      	adds	r1, #1
 800bfca:	005b      	lsls	r3, r3, #1
 800bfcc:	e7ee      	b.n	800bfac <__lshift+0x1c>
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f100 0114 	add.w	r1, r0, #20
 800bfd4:	f100 0210 	add.w	r2, r0, #16
 800bfd8:	4618      	mov	r0, r3
 800bfda:	4553      	cmp	r3, sl
 800bfdc:	db33      	blt.n	800c046 <__lshift+0xb6>
 800bfde:	6920      	ldr	r0, [r4, #16]
 800bfe0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bfe4:	f104 0314 	add.w	r3, r4, #20
 800bfe8:	f019 091f 	ands.w	r9, r9, #31
 800bfec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bff0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bff4:	d02b      	beq.n	800c04e <__lshift+0xbe>
 800bff6:	f1c9 0e20 	rsb	lr, r9, #32
 800bffa:	468a      	mov	sl, r1
 800bffc:	2200      	movs	r2, #0
 800bffe:	6818      	ldr	r0, [r3, #0]
 800c000:	fa00 f009 	lsl.w	r0, r0, r9
 800c004:	4310      	orrs	r0, r2
 800c006:	f84a 0b04 	str.w	r0, [sl], #4
 800c00a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00e:	459c      	cmp	ip, r3
 800c010:	fa22 f20e 	lsr.w	r2, r2, lr
 800c014:	d8f3      	bhi.n	800bffe <__lshift+0x6e>
 800c016:	ebac 0304 	sub.w	r3, ip, r4
 800c01a:	3b15      	subs	r3, #21
 800c01c:	f023 0303 	bic.w	r3, r3, #3
 800c020:	3304      	adds	r3, #4
 800c022:	f104 0015 	add.w	r0, r4, #21
 800c026:	4584      	cmp	ip, r0
 800c028:	bf38      	it	cc
 800c02a:	2304      	movcc	r3, #4
 800c02c:	50ca      	str	r2, [r1, r3]
 800c02e:	b10a      	cbz	r2, 800c034 <__lshift+0xa4>
 800c030:	f108 0602 	add.w	r6, r8, #2
 800c034:	3e01      	subs	r6, #1
 800c036:	4638      	mov	r0, r7
 800c038:	612e      	str	r6, [r5, #16]
 800c03a:	4621      	mov	r1, r4
 800c03c:	f7ff fe0d 	bl	800bc5a <_Bfree>
 800c040:	4628      	mov	r0, r5
 800c042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c046:	f842 0f04 	str.w	r0, [r2, #4]!
 800c04a:	3301      	adds	r3, #1
 800c04c:	e7c5      	b.n	800bfda <__lshift+0x4a>
 800c04e:	3904      	subs	r1, #4
 800c050:	f853 2b04 	ldr.w	r2, [r3], #4
 800c054:	f841 2f04 	str.w	r2, [r1, #4]!
 800c058:	459c      	cmp	ip, r3
 800c05a:	d8f9      	bhi.n	800c050 <__lshift+0xc0>
 800c05c:	e7ea      	b.n	800c034 <__lshift+0xa4>
 800c05e:	bf00      	nop
 800c060:	0800e879 	.word	0x0800e879
 800c064:	0800e8e2 	.word	0x0800e8e2

0800c068 <__mcmp>:
 800c068:	690a      	ldr	r2, [r1, #16]
 800c06a:	4603      	mov	r3, r0
 800c06c:	6900      	ldr	r0, [r0, #16]
 800c06e:	1a80      	subs	r0, r0, r2
 800c070:	b530      	push	{r4, r5, lr}
 800c072:	d10e      	bne.n	800c092 <__mcmp+0x2a>
 800c074:	3314      	adds	r3, #20
 800c076:	3114      	adds	r1, #20
 800c078:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c07c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c080:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c084:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c088:	4295      	cmp	r5, r2
 800c08a:	d003      	beq.n	800c094 <__mcmp+0x2c>
 800c08c:	d205      	bcs.n	800c09a <__mcmp+0x32>
 800c08e:	f04f 30ff 	mov.w	r0, #4294967295
 800c092:	bd30      	pop	{r4, r5, pc}
 800c094:	42a3      	cmp	r3, r4
 800c096:	d3f3      	bcc.n	800c080 <__mcmp+0x18>
 800c098:	e7fb      	b.n	800c092 <__mcmp+0x2a>
 800c09a:	2001      	movs	r0, #1
 800c09c:	e7f9      	b.n	800c092 <__mcmp+0x2a>
	...

0800c0a0 <__mdiff>:
 800c0a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	4689      	mov	r9, r1
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	4648      	mov	r0, r9
 800c0ac:	4614      	mov	r4, r2
 800c0ae:	f7ff ffdb 	bl	800c068 <__mcmp>
 800c0b2:	1e05      	subs	r5, r0, #0
 800c0b4:	d112      	bne.n	800c0dc <__mdiff+0x3c>
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	f7ff fda9 	bl	800bc10 <_Balloc>
 800c0be:	4602      	mov	r2, r0
 800c0c0:	b928      	cbnz	r0, 800c0ce <__mdiff+0x2e>
 800c0c2:	4b3f      	ldr	r3, [pc, #252]	@ (800c1c0 <__mdiff+0x120>)
 800c0c4:	f240 2137 	movw	r1, #567	@ 0x237
 800c0c8:	483e      	ldr	r0, [pc, #248]	@ (800c1c4 <__mdiff+0x124>)
 800c0ca:	f000 f981 	bl	800c3d0 <__assert_func>
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c0d4:	4610      	mov	r0, r2
 800c0d6:	b003      	add	sp, #12
 800c0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0dc:	bfbc      	itt	lt
 800c0de:	464b      	movlt	r3, r9
 800c0e0:	46a1      	movlt	r9, r4
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c0e8:	bfba      	itte	lt
 800c0ea:	461c      	movlt	r4, r3
 800c0ec:	2501      	movlt	r5, #1
 800c0ee:	2500      	movge	r5, #0
 800c0f0:	f7ff fd8e 	bl	800bc10 <_Balloc>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	b918      	cbnz	r0, 800c100 <__mdiff+0x60>
 800c0f8:	4b31      	ldr	r3, [pc, #196]	@ (800c1c0 <__mdiff+0x120>)
 800c0fa:	f240 2145 	movw	r1, #581	@ 0x245
 800c0fe:	e7e3      	b.n	800c0c8 <__mdiff+0x28>
 800c100:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c104:	6926      	ldr	r6, [r4, #16]
 800c106:	60c5      	str	r5, [r0, #12]
 800c108:	f109 0310 	add.w	r3, r9, #16
 800c10c:	f109 0514 	add.w	r5, r9, #20
 800c110:	f104 0e14 	add.w	lr, r4, #20
 800c114:	f100 0b14 	add.w	fp, r0, #20
 800c118:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c11c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	46d9      	mov	r9, fp
 800c124:	f04f 0c00 	mov.w	ip, #0
 800c128:	9b01      	ldr	r3, [sp, #4]
 800c12a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c12e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c132:	9301      	str	r3, [sp, #4]
 800c134:	fa1f f38a 	uxth.w	r3, sl
 800c138:	4619      	mov	r1, r3
 800c13a:	b283      	uxth	r3, r0
 800c13c:	1acb      	subs	r3, r1, r3
 800c13e:	0c00      	lsrs	r0, r0, #16
 800c140:	4463      	add	r3, ip
 800c142:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c146:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c150:	4576      	cmp	r6, lr
 800c152:	f849 3b04 	str.w	r3, [r9], #4
 800c156:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c15a:	d8e5      	bhi.n	800c128 <__mdiff+0x88>
 800c15c:	1b33      	subs	r3, r6, r4
 800c15e:	3b15      	subs	r3, #21
 800c160:	f023 0303 	bic.w	r3, r3, #3
 800c164:	3415      	adds	r4, #21
 800c166:	3304      	adds	r3, #4
 800c168:	42a6      	cmp	r6, r4
 800c16a:	bf38      	it	cc
 800c16c:	2304      	movcc	r3, #4
 800c16e:	441d      	add	r5, r3
 800c170:	445b      	add	r3, fp
 800c172:	461e      	mov	r6, r3
 800c174:	462c      	mov	r4, r5
 800c176:	4544      	cmp	r4, r8
 800c178:	d30e      	bcc.n	800c198 <__mdiff+0xf8>
 800c17a:	f108 0103 	add.w	r1, r8, #3
 800c17e:	1b49      	subs	r1, r1, r5
 800c180:	f021 0103 	bic.w	r1, r1, #3
 800c184:	3d03      	subs	r5, #3
 800c186:	45a8      	cmp	r8, r5
 800c188:	bf38      	it	cc
 800c18a:	2100      	movcc	r1, #0
 800c18c:	440b      	add	r3, r1
 800c18e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c192:	b191      	cbz	r1, 800c1ba <__mdiff+0x11a>
 800c194:	6117      	str	r7, [r2, #16]
 800c196:	e79d      	b.n	800c0d4 <__mdiff+0x34>
 800c198:	f854 1b04 	ldr.w	r1, [r4], #4
 800c19c:	46e6      	mov	lr, ip
 800c19e:	0c08      	lsrs	r0, r1, #16
 800c1a0:	fa1c fc81 	uxtah	ip, ip, r1
 800c1a4:	4471      	add	r1, lr
 800c1a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c1aa:	b289      	uxth	r1, r1
 800c1ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c1b0:	f846 1b04 	str.w	r1, [r6], #4
 800c1b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1b8:	e7dd      	b.n	800c176 <__mdiff+0xd6>
 800c1ba:	3f01      	subs	r7, #1
 800c1bc:	e7e7      	b.n	800c18e <__mdiff+0xee>
 800c1be:	bf00      	nop
 800c1c0:	0800e879 	.word	0x0800e879
 800c1c4:	0800e8e2 	.word	0x0800e8e2

0800c1c8 <__d2b>:
 800c1c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1cc:	460f      	mov	r7, r1
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	ec59 8b10 	vmov	r8, r9, d0
 800c1d4:	4616      	mov	r6, r2
 800c1d6:	f7ff fd1b 	bl	800bc10 <_Balloc>
 800c1da:	4604      	mov	r4, r0
 800c1dc:	b930      	cbnz	r0, 800c1ec <__d2b+0x24>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	4b23      	ldr	r3, [pc, #140]	@ (800c270 <__d2b+0xa8>)
 800c1e2:	4824      	ldr	r0, [pc, #144]	@ (800c274 <__d2b+0xac>)
 800c1e4:	f240 310f 	movw	r1, #783	@ 0x30f
 800c1e8:	f000 f8f2 	bl	800c3d0 <__assert_func>
 800c1ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c1f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1f4:	b10d      	cbz	r5, 800c1fa <__d2b+0x32>
 800c1f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	f1b8 0300 	subs.w	r3, r8, #0
 800c200:	d023      	beq.n	800c24a <__d2b+0x82>
 800c202:	4668      	mov	r0, sp
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	f7ff fd96 	bl	800bd36 <__lo0bits>
 800c20a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c20e:	b1d0      	cbz	r0, 800c246 <__d2b+0x7e>
 800c210:	f1c0 0320 	rsb	r3, r0, #32
 800c214:	fa02 f303 	lsl.w	r3, r2, r3
 800c218:	430b      	orrs	r3, r1
 800c21a:	40c2      	lsrs	r2, r0
 800c21c:	6163      	str	r3, [r4, #20]
 800c21e:	9201      	str	r2, [sp, #4]
 800c220:	9b01      	ldr	r3, [sp, #4]
 800c222:	61a3      	str	r3, [r4, #24]
 800c224:	2b00      	cmp	r3, #0
 800c226:	bf0c      	ite	eq
 800c228:	2201      	moveq	r2, #1
 800c22a:	2202      	movne	r2, #2
 800c22c:	6122      	str	r2, [r4, #16]
 800c22e:	b1a5      	cbz	r5, 800c25a <__d2b+0x92>
 800c230:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c234:	4405      	add	r5, r0
 800c236:	603d      	str	r5, [r7, #0]
 800c238:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c23c:	6030      	str	r0, [r6, #0]
 800c23e:	4620      	mov	r0, r4
 800c240:	b003      	add	sp, #12
 800c242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c246:	6161      	str	r1, [r4, #20]
 800c248:	e7ea      	b.n	800c220 <__d2b+0x58>
 800c24a:	a801      	add	r0, sp, #4
 800c24c:	f7ff fd73 	bl	800bd36 <__lo0bits>
 800c250:	9b01      	ldr	r3, [sp, #4]
 800c252:	6163      	str	r3, [r4, #20]
 800c254:	3020      	adds	r0, #32
 800c256:	2201      	movs	r2, #1
 800c258:	e7e8      	b.n	800c22c <__d2b+0x64>
 800c25a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c25e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c262:	6038      	str	r0, [r7, #0]
 800c264:	6918      	ldr	r0, [r3, #16]
 800c266:	f7ff fd47 	bl	800bcf8 <__hi0bits>
 800c26a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c26e:	e7e5      	b.n	800c23c <__d2b+0x74>
 800c270:	0800e879 	.word	0x0800e879
 800c274:	0800e8e2 	.word	0x0800e8e2

0800c278 <__ssprint_r>:
 800c278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	6893      	ldr	r3, [r2, #8]
 800c27e:	f8d2 b000 	ldr.w	fp, [r2]
 800c282:	9001      	str	r0, [sp, #4]
 800c284:	460c      	mov	r4, r1
 800c286:	4617      	mov	r7, r2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d157      	bne.n	800c33c <__ssprint_r+0xc4>
 800c28c:	2000      	movs	r0, #0
 800c28e:	2300      	movs	r3, #0
 800c290:	607b      	str	r3, [r7, #4]
 800c292:	b003      	add	sp, #12
 800c294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c298:	e9db a800 	ldrd	sl, r8, [fp]
 800c29c:	f10b 0b08 	add.w	fp, fp, #8
 800c2a0:	68a6      	ldr	r6, [r4, #8]
 800c2a2:	6820      	ldr	r0, [r4, #0]
 800c2a4:	f1b8 0f00 	cmp.w	r8, #0
 800c2a8:	d0f6      	beq.n	800c298 <__ssprint_r+0x20>
 800c2aa:	45b0      	cmp	r8, r6
 800c2ac:	d32e      	bcc.n	800c30c <__ssprint_r+0x94>
 800c2ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2b2:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c2b6:	d029      	beq.n	800c30c <__ssprint_r+0x94>
 800c2b8:	6921      	ldr	r1, [r4, #16]
 800c2ba:	6965      	ldr	r5, [r4, #20]
 800c2bc:	eba0 0901 	sub.w	r9, r0, r1
 800c2c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2c8:	f109 0001 	add.w	r0, r9, #1
 800c2cc:	106d      	asrs	r5, r5, #1
 800c2ce:	4440      	add	r0, r8
 800c2d0:	4285      	cmp	r5, r0
 800c2d2:	bf38      	it	cc
 800c2d4:	4605      	movcc	r5, r0
 800c2d6:	0553      	lsls	r3, r2, #21
 800c2d8:	d534      	bpl.n	800c344 <__ssprint_r+0xcc>
 800c2da:	9801      	ldr	r0, [sp, #4]
 800c2dc:	4629      	mov	r1, r5
 800c2de:	f7fd f87b 	bl	80093d8 <_malloc_r>
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	2800      	cmp	r0, #0
 800c2e6:	d038      	beq.n	800c35a <__ssprint_r+0xe2>
 800c2e8:	464a      	mov	r2, r9
 800c2ea:	6921      	ldr	r1, [r4, #16]
 800c2ec:	f000 f862 	bl	800c3b4 <memcpy>
 800c2f0:	89a2      	ldrh	r2, [r4, #12]
 800c2f2:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800c2f6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c2fa:	81a2      	strh	r2, [r4, #12]
 800c2fc:	6126      	str	r6, [r4, #16]
 800c2fe:	6165      	str	r5, [r4, #20]
 800c300:	444e      	add	r6, r9
 800c302:	eba5 0509 	sub.w	r5, r5, r9
 800c306:	6026      	str	r6, [r4, #0]
 800c308:	60a5      	str	r5, [r4, #8]
 800c30a:	4646      	mov	r6, r8
 800c30c:	4546      	cmp	r6, r8
 800c30e:	bf28      	it	cs
 800c310:	4646      	movcs	r6, r8
 800c312:	4632      	mov	r2, r6
 800c314:	4651      	mov	r1, sl
 800c316:	6820      	ldr	r0, [r4, #0]
 800c318:	f000 f82b 	bl	800c372 <memmove>
 800c31c:	68a2      	ldr	r2, [r4, #8]
 800c31e:	1b92      	subs	r2, r2, r6
 800c320:	60a2      	str	r2, [r4, #8]
 800c322:	6822      	ldr	r2, [r4, #0]
 800c324:	4432      	add	r2, r6
 800c326:	6022      	str	r2, [r4, #0]
 800c328:	68ba      	ldr	r2, [r7, #8]
 800c32a:	eba2 0308 	sub.w	r3, r2, r8
 800c32e:	44c2      	add	sl, r8
 800c330:	60bb      	str	r3, [r7, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d0aa      	beq.n	800c28c <__ssprint_r+0x14>
 800c336:	f04f 0800 	mov.w	r8, #0
 800c33a:	e7b1      	b.n	800c2a0 <__ssprint_r+0x28>
 800c33c:	f04f 0a00 	mov.w	sl, #0
 800c340:	46d0      	mov	r8, sl
 800c342:	e7ad      	b.n	800c2a0 <__ssprint_r+0x28>
 800c344:	9801      	ldr	r0, [sp, #4]
 800c346:	462a      	mov	r2, r5
 800c348:	f000 f8a8 	bl	800c49c <_realloc_r>
 800c34c:	4606      	mov	r6, r0
 800c34e:	2800      	cmp	r0, #0
 800c350:	d1d4      	bne.n	800c2fc <__ssprint_r+0x84>
 800c352:	6921      	ldr	r1, [r4, #16]
 800c354:	9801      	ldr	r0, [sp, #4]
 800c356:	f7fc ff7f 	bl	8009258 <_free_r>
 800c35a:	9a01      	ldr	r2, [sp, #4]
 800c35c:	230c      	movs	r3, #12
 800c35e:	6013      	str	r3, [r2, #0]
 800c360:	89a3      	ldrh	r3, [r4, #12]
 800c362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c366:	81a3      	strh	r3, [r4, #12]
 800c368:	2300      	movs	r3, #0
 800c36a:	60bb      	str	r3, [r7, #8]
 800c36c:	f04f 30ff 	mov.w	r0, #4294967295
 800c370:	e78d      	b.n	800c28e <__ssprint_r+0x16>

0800c372 <memmove>:
 800c372:	4288      	cmp	r0, r1
 800c374:	b510      	push	{r4, lr}
 800c376:	eb01 0402 	add.w	r4, r1, r2
 800c37a:	d902      	bls.n	800c382 <memmove+0x10>
 800c37c:	4284      	cmp	r4, r0
 800c37e:	4623      	mov	r3, r4
 800c380:	d807      	bhi.n	800c392 <memmove+0x20>
 800c382:	1e43      	subs	r3, r0, #1
 800c384:	42a1      	cmp	r1, r4
 800c386:	d008      	beq.n	800c39a <memmove+0x28>
 800c388:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c38c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c390:	e7f8      	b.n	800c384 <memmove+0x12>
 800c392:	4402      	add	r2, r0
 800c394:	4601      	mov	r1, r0
 800c396:	428a      	cmp	r2, r1
 800c398:	d100      	bne.n	800c39c <memmove+0x2a>
 800c39a:	bd10      	pop	{r4, pc}
 800c39c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c3a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c3a4:	e7f7      	b.n	800c396 <memmove+0x24>
	...

0800c3a8 <__locale_mb_cur_max>:
 800c3a8:	4b01      	ldr	r3, [pc, #4]	@ (800c3b0 <__locale_mb_cur_max+0x8>)
 800c3aa:	f893 0128 	ldrb.w	r0, [r3, #296]	@ 0x128
 800c3ae:	4770      	bx	lr
 800c3b0:	20000644 	.word	0x20000644

0800c3b4 <memcpy>:
 800c3b4:	440a      	add	r2, r1
 800c3b6:	4291      	cmp	r1, r2
 800c3b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c3bc:	d100      	bne.n	800c3c0 <memcpy+0xc>
 800c3be:	4770      	bx	lr
 800c3c0:	b510      	push	{r4, lr}
 800c3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3ca:	4291      	cmp	r1, r2
 800c3cc:	d1f9      	bne.n	800c3c2 <memcpy+0xe>
 800c3ce:	bd10      	pop	{r4, pc}

0800c3d0 <__assert_func>:
 800c3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c3d2:	4614      	mov	r4, r2
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	4b09      	ldr	r3, [pc, #36]	@ (800c3fc <__assert_func+0x2c>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4605      	mov	r5, r0
 800c3dc:	68d8      	ldr	r0, [r3, #12]
 800c3de:	b954      	cbnz	r4, 800c3f6 <__assert_func+0x26>
 800c3e0:	4b07      	ldr	r3, [pc, #28]	@ (800c400 <__assert_func+0x30>)
 800c3e2:	461c      	mov	r4, r3
 800c3e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c3e8:	9100      	str	r1, [sp, #0]
 800c3ea:	462b      	mov	r3, r5
 800c3ec:	4905      	ldr	r1, [pc, #20]	@ (800c404 <__assert_func+0x34>)
 800c3ee:	f000 fa0b 	bl	800c808 <fiprintf>
 800c3f2:	f001 f921 	bl	800d638 <abort>
 800c3f6:	4b04      	ldr	r3, [pc, #16]	@ (800c408 <__assert_func+0x38>)
 800c3f8:	e7f4      	b.n	800c3e4 <__assert_func+0x14>
 800c3fa:	bf00      	nop
 800c3fc:	2000010c 	.word	0x2000010c
 800c400:	0800ea7d 	.word	0x0800ea7d
 800c404:	0800ea4f 	.word	0x0800ea4f
 800c408:	0800ea42 	.word	0x0800ea42

0800c40c <_calloc_r>:
 800c40c:	b538      	push	{r3, r4, r5, lr}
 800c40e:	fba1 1502 	umull	r1, r5, r1, r2
 800c412:	b935      	cbnz	r5, 800c422 <_calloc_r+0x16>
 800c414:	f7fc ffe0 	bl	80093d8 <_malloc_r>
 800c418:	4604      	mov	r4, r0
 800c41a:	b938      	cbnz	r0, 800c42c <_calloc_r+0x20>
 800c41c:	2400      	movs	r4, #0
 800c41e:	4620      	mov	r0, r4
 800c420:	bd38      	pop	{r3, r4, r5, pc}
 800c422:	f7fc fe85 	bl	8009130 <__errno>
 800c426:	230c      	movs	r3, #12
 800c428:	6003      	str	r3, [r0, #0]
 800c42a:	e7f7      	b.n	800c41c <_calloc_r+0x10>
 800c42c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c430:	f022 0203 	bic.w	r2, r2, #3
 800c434:	3a04      	subs	r2, #4
 800c436:	2a24      	cmp	r2, #36	@ 0x24
 800c438:	d819      	bhi.n	800c46e <_calloc_r+0x62>
 800c43a:	2a13      	cmp	r2, #19
 800c43c:	d915      	bls.n	800c46a <_calloc_r+0x5e>
 800c43e:	2a1b      	cmp	r2, #27
 800c440:	e9c0 5500 	strd	r5, r5, [r0]
 800c444:	d806      	bhi.n	800c454 <_calloc_r+0x48>
 800c446:	f100 0308 	add.w	r3, r0, #8
 800c44a:	2200      	movs	r2, #0
 800c44c:	e9c3 2200 	strd	r2, r2, [r3]
 800c450:	609a      	str	r2, [r3, #8]
 800c452:	e7e4      	b.n	800c41e <_calloc_r+0x12>
 800c454:	2a24      	cmp	r2, #36	@ 0x24
 800c456:	e9c0 5502 	strd	r5, r5, [r0, #8]
 800c45a:	bf11      	iteee	ne
 800c45c:	f100 0310 	addne.w	r3, r0, #16
 800c460:	6105      	streq	r5, [r0, #16]
 800c462:	f100 0318 	addeq.w	r3, r0, #24
 800c466:	6145      	streq	r5, [r0, #20]
 800c468:	e7ef      	b.n	800c44a <_calloc_r+0x3e>
 800c46a:	4603      	mov	r3, r0
 800c46c:	e7ed      	b.n	800c44a <_calloc_r+0x3e>
 800c46e:	4629      	mov	r1, r5
 800c470:	f7fc fe0f 	bl	8009092 <memset>
 800c474:	e7d3      	b.n	800c41e <_calloc_r+0x12>

0800c476 <__ascii_mbtowc>:
 800c476:	b082      	sub	sp, #8
 800c478:	b901      	cbnz	r1, 800c47c <__ascii_mbtowc+0x6>
 800c47a:	a901      	add	r1, sp, #4
 800c47c:	b142      	cbz	r2, 800c490 <__ascii_mbtowc+0x1a>
 800c47e:	b14b      	cbz	r3, 800c494 <__ascii_mbtowc+0x1e>
 800c480:	7813      	ldrb	r3, [r2, #0]
 800c482:	600b      	str	r3, [r1, #0]
 800c484:	7812      	ldrb	r2, [r2, #0]
 800c486:	1e10      	subs	r0, r2, #0
 800c488:	bf18      	it	ne
 800c48a:	2001      	movne	r0, #1
 800c48c:	b002      	add	sp, #8
 800c48e:	4770      	bx	lr
 800c490:	4610      	mov	r0, r2
 800c492:	e7fb      	b.n	800c48c <__ascii_mbtowc+0x16>
 800c494:	f06f 0001 	mvn.w	r0, #1
 800c498:	e7f8      	b.n	800c48c <__ascii_mbtowc+0x16>
	...

0800c49c <_realloc_r>:
 800c49c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a0:	4682      	mov	sl, r0
 800c4a2:	4693      	mov	fp, r2
 800c4a4:	460c      	mov	r4, r1
 800c4a6:	b929      	cbnz	r1, 800c4b4 <_realloc_r+0x18>
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	b003      	add	sp, #12
 800c4ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b0:	f7fc bf92 	b.w	80093d8 <_malloc_r>
 800c4b4:	f7fd f9ca 	bl	800984c <__malloc_lock>
 800c4b8:	f10b 080b 	add.w	r8, fp, #11
 800c4bc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c4c0:	f1b8 0f16 	cmp.w	r8, #22
 800c4c4:	f1a4 0908 	sub.w	r9, r4, #8
 800c4c8:	f025 0603 	bic.w	r6, r5, #3
 800c4cc:	d908      	bls.n	800c4e0 <_realloc_r+0x44>
 800c4ce:	f038 0807 	bics.w	r8, r8, #7
 800c4d2:	d507      	bpl.n	800c4e4 <_realloc_r+0x48>
 800c4d4:	230c      	movs	r3, #12
 800c4d6:	f8ca 3000 	str.w	r3, [sl]
 800c4da:	f04f 0b00 	mov.w	fp, #0
 800c4de:	e032      	b.n	800c546 <_realloc_r+0xaa>
 800c4e0:	f04f 0810 	mov.w	r8, #16
 800c4e4:	45c3      	cmp	fp, r8
 800c4e6:	d8f5      	bhi.n	800c4d4 <_realloc_r+0x38>
 800c4e8:	4546      	cmp	r6, r8
 800c4ea:	f280 8174 	bge.w	800c7d6 <_realloc_r+0x33a>
 800c4ee:	4b9e      	ldr	r3, [pc, #632]	@ (800c768 <_realloc_r+0x2cc>)
 800c4f0:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800c4f4:	eb09 0106 	add.w	r1, r9, r6
 800c4f8:	458c      	cmp	ip, r1
 800c4fa:	6848      	ldr	r0, [r1, #4]
 800c4fc:	d005      	beq.n	800c50a <_realloc_r+0x6e>
 800c4fe:	f020 0201 	bic.w	r2, r0, #1
 800c502:	440a      	add	r2, r1
 800c504:	6852      	ldr	r2, [r2, #4]
 800c506:	07d7      	lsls	r7, r2, #31
 800c508:	d449      	bmi.n	800c59e <_realloc_r+0x102>
 800c50a:	f020 0003 	bic.w	r0, r0, #3
 800c50e:	458c      	cmp	ip, r1
 800c510:	eb06 0700 	add.w	r7, r6, r0
 800c514:	d11b      	bne.n	800c54e <_realloc_r+0xb2>
 800c516:	f108 0210 	add.w	r2, r8, #16
 800c51a:	42ba      	cmp	r2, r7
 800c51c:	dc41      	bgt.n	800c5a2 <_realloc_r+0x106>
 800c51e:	eb09 0208 	add.w	r2, r9, r8
 800c522:	eba7 0708 	sub.w	r7, r7, r8
 800c526:	f047 0701 	orr.w	r7, r7, #1
 800c52a:	609a      	str	r2, [r3, #8]
 800c52c:	6057      	str	r7, [r2, #4]
 800c52e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c532:	f003 0301 	and.w	r3, r3, #1
 800c536:	ea43 0308 	orr.w	r3, r3, r8
 800c53a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c53e:	4650      	mov	r0, sl
 800c540:	f7fd f98a 	bl	8009858 <__malloc_unlock>
 800c544:	46a3      	mov	fp, r4
 800c546:	4658      	mov	r0, fp
 800c548:	b003      	add	sp, #12
 800c54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c54e:	45b8      	cmp	r8, r7
 800c550:	dc27      	bgt.n	800c5a2 <_realloc_r+0x106>
 800c552:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800c556:	60d3      	str	r3, [r2, #12]
 800c558:	609a      	str	r2, [r3, #8]
 800c55a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c55e:	eba7 0008 	sub.w	r0, r7, r8
 800c562:	280f      	cmp	r0, #15
 800c564:	f003 0301 	and.w	r3, r3, #1
 800c568:	eb09 0207 	add.w	r2, r9, r7
 800c56c:	f240 8135 	bls.w	800c7da <_realloc_r+0x33e>
 800c570:	eb09 0108 	add.w	r1, r9, r8
 800c574:	ea48 0303 	orr.w	r3, r8, r3
 800c578:	f040 0001 	orr.w	r0, r0, #1
 800c57c:	f8c9 3004 	str.w	r3, [r9, #4]
 800c580:	6048      	str	r0, [r1, #4]
 800c582:	6853      	ldr	r3, [r2, #4]
 800c584:	f043 0301 	orr.w	r3, r3, #1
 800c588:	6053      	str	r3, [r2, #4]
 800c58a:	3108      	adds	r1, #8
 800c58c:	4650      	mov	r0, sl
 800c58e:	f7fc fe63 	bl	8009258 <_free_r>
 800c592:	4650      	mov	r0, sl
 800c594:	f7fd f960 	bl	8009858 <__malloc_unlock>
 800c598:	f109 0b08 	add.w	fp, r9, #8
 800c59c:	e7d3      	b.n	800c546 <_realloc_r+0xaa>
 800c59e:	2000      	movs	r0, #0
 800c5a0:	4601      	mov	r1, r0
 800c5a2:	07ea      	lsls	r2, r5, #31
 800c5a4:	f100 80c7 	bmi.w	800c736 <_realloc_r+0x29a>
 800c5a8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c5ac:	eba9 0505 	sub.w	r5, r9, r5
 800c5b0:	686a      	ldr	r2, [r5, #4]
 800c5b2:	f022 0203 	bic.w	r2, r2, #3
 800c5b6:	4432      	add	r2, r6
 800c5b8:	9201      	str	r2, [sp, #4]
 800c5ba:	2900      	cmp	r1, #0
 800c5bc:	f000 8086 	beq.w	800c6cc <_realloc_r+0x230>
 800c5c0:	458c      	cmp	ip, r1
 800c5c2:	eb00 0702 	add.w	r7, r0, r2
 800c5c6:	d149      	bne.n	800c65c <_realloc_r+0x1c0>
 800c5c8:	f108 0210 	add.w	r2, r8, #16
 800c5cc:	42ba      	cmp	r2, r7
 800c5ce:	dc7d      	bgt.n	800c6cc <_realloc_r+0x230>
 800c5d0:	46ab      	mov	fp, r5
 800c5d2:	68ea      	ldr	r2, [r5, #12]
 800c5d4:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 800c5d8:	60ca      	str	r2, [r1, #12]
 800c5da:	6091      	str	r1, [r2, #8]
 800c5dc:	1f32      	subs	r2, r6, #4
 800c5de:	2a24      	cmp	r2, #36	@ 0x24
 800c5e0:	d836      	bhi.n	800c650 <_realloc_r+0x1b4>
 800c5e2:	2a13      	cmp	r2, #19
 800c5e4:	d932      	bls.n	800c64c <_realloc_r+0x1b0>
 800c5e6:	6821      	ldr	r1, [r4, #0]
 800c5e8:	60a9      	str	r1, [r5, #8]
 800c5ea:	6861      	ldr	r1, [r4, #4]
 800c5ec:	60e9      	str	r1, [r5, #12]
 800c5ee:	2a1b      	cmp	r2, #27
 800c5f0:	d81a      	bhi.n	800c628 <_realloc_r+0x18c>
 800c5f2:	3408      	adds	r4, #8
 800c5f4:	f105 0210 	add.w	r2, r5, #16
 800c5f8:	6821      	ldr	r1, [r4, #0]
 800c5fa:	6011      	str	r1, [r2, #0]
 800c5fc:	6861      	ldr	r1, [r4, #4]
 800c5fe:	6051      	str	r1, [r2, #4]
 800c600:	68a1      	ldr	r1, [r4, #8]
 800c602:	6091      	str	r1, [r2, #8]
 800c604:	eb05 0208 	add.w	r2, r5, r8
 800c608:	eba7 0708 	sub.w	r7, r7, r8
 800c60c:	f047 0701 	orr.w	r7, r7, #1
 800c610:	609a      	str	r2, [r3, #8]
 800c612:	6057      	str	r7, [r2, #4]
 800c614:	686b      	ldr	r3, [r5, #4]
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	ea43 0308 	orr.w	r3, r3, r8
 800c61e:	606b      	str	r3, [r5, #4]
 800c620:	4650      	mov	r0, sl
 800c622:	f7fd f919 	bl	8009858 <__malloc_unlock>
 800c626:	e78e      	b.n	800c546 <_realloc_r+0xaa>
 800c628:	68a1      	ldr	r1, [r4, #8]
 800c62a:	6129      	str	r1, [r5, #16]
 800c62c:	68e1      	ldr	r1, [r4, #12]
 800c62e:	6169      	str	r1, [r5, #20]
 800c630:	2a24      	cmp	r2, #36	@ 0x24
 800c632:	bf01      	itttt	eq
 800c634:	6922      	ldreq	r2, [r4, #16]
 800c636:	61aa      	streq	r2, [r5, #24]
 800c638:	6961      	ldreq	r1, [r4, #20]
 800c63a:	61e9      	streq	r1, [r5, #28]
 800c63c:	bf19      	ittee	ne
 800c63e:	3410      	addne	r4, #16
 800c640:	f105 0218 	addne.w	r2, r5, #24
 800c644:	f105 0220 	addeq.w	r2, r5, #32
 800c648:	3418      	addeq	r4, #24
 800c64a:	e7d5      	b.n	800c5f8 <_realloc_r+0x15c>
 800c64c:	465a      	mov	r2, fp
 800c64e:	e7d3      	b.n	800c5f8 <_realloc_r+0x15c>
 800c650:	4621      	mov	r1, r4
 800c652:	4658      	mov	r0, fp
 800c654:	f7ff fe8d 	bl	800c372 <memmove>
 800c658:	4b43      	ldr	r3, [pc, #268]	@ (800c768 <_realloc_r+0x2cc>)
 800c65a:	e7d3      	b.n	800c604 <_realloc_r+0x168>
 800c65c:	45b8      	cmp	r8, r7
 800c65e:	dc35      	bgt.n	800c6cc <_realloc_r+0x230>
 800c660:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 800c664:	4628      	mov	r0, r5
 800c666:	60d3      	str	r3, [r2, #12]
 800c668:	609a      	str	r2, [r3, #8]
 800c66a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c66e:	68eb      	ldr	r3, [r5, #12]
 800c670:	60d3      	str	r3, [r2, #12]
 800c672:	609a      	str	r2, [r3, #8]
 800c674:	1f32      	subs	r2, r6, #4
 800c676:	2a24      	cmp	r2, #36	@ 0x24
 800c678:	d824      	bhi.n	800c6c4 <_realloc_r+0x228>
 800c67a:	2a13      	cmp	r2, #19
 800c67c:	d908      	bls.n	800c690 <_realloc_r+0x1f4>
 800c67e:	6823      	ldr	r3, [r4, #0]
 800c680:	60ab      	str	r3, [r5, #8]
 800c682:	6863      	ldr	r3, [r4, #4]
 800c684:	60eb      	str	r3, [r5, #12]
 800c686:	2a1b      	cmp	r2, #27
 800c688:	d80a      	bhi.n	800c6a0 <_realloc_r+0x204>
 800c68a:	3408      	adds	r4, #8
 800c68c:	f105 0010 	add.w	r0, r5, #16
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	6003      	str	r3, [r0, #0]
 800c694:	6863      	ldr	r3, [r4, #4]
 800c696:	6043      	str	r3, [r0, #4]
 800c698:	68a3      	ldr	r3, [r4, #8]
 800c69a:	6083      	str	r3, [r0, #8]
 800c69c:	46a9      	mov	r9, r5
 800c69e:	e75c      	b.n	800c55a <_realloc_r+0xbe>
 800c6a0:	68a3      	ldr	r3, [r4, #8]
 800c6a2:	612b      	str	r3, [r5, #16]
 800c6a4:	68e3      	ldr	r3, [r4, #12]
 800c6a6:	616b      	str	r3, [r5, #20]
 800c6a8:	2a24      	cmp	r2, #36	@ 0x24
 800c6aa:	bf01      	itttt	eq
 800c6ac:	6923      	ldreq	r3, [r4, #16]
 800c6ae:	61ab      	streq	r3, [r5, #24]
 800c6b0:	6963      	ldreq	r3, [r4, #20]
 800c6b2:	61eb      	streq	r3, [r5, #28]
 800c6b4:	bf19      	ittee	ne
 800c6b6:	3410      	addne	r4, #16
 800c6b8:	f105 0018 	addne.w	r0, r5, #24
 800c6bc:	f105 0020 	addeq.w	r0, r5, #32
 800c6c0:	3418      	addeq	r4, #24
 800c6c2:	e7e5      	b.n	800c690 <_realloc_r+0x1f4>
 800c6c4:	4621      	mov	r1, r4
 800c6c6:	f7ff fe54 	bl	800c372 <memmove>
 800c6ca:	e7e7      	b.n	800c69c <_realloc_r+0x200>
 800c6cc:	9b01      	ldr	r3, [sp, #4]
 800c6ce:	4598      	cmp	r8, r3
 800c6d0:	dc31      	bgt.n	800c736 <_realloc_r+0x29a>
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	68eb      	ldr	r3, [r5, #12]
 800c6d6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c6da:	60d3      	str	r3, [r2, #12]
 800c6dc:	609a      	str	r2, [r3, #8]
 800c6de:	1f32      	subs	r2, r6, #4
 800c6e0:	2a24      	cmp	r2, #36	@ 0x24
 800c6e2:	d824      	bhi.n	800c72e <_realloc_r+0x292>
 800c6e4:	2a13      	cmp	r2, #19
 800c6e6:	d908      	bls.n	800c6fa <_realloc_r+0x25e>
 800c6e8:	6823      	ldr	r3, [r4, #0]
 800c6ea:	60ab      	str	r3, [r5, #8]
 800c6ec:	6863      	ldr	r3, [r4, #4]
 800c6ee:	60eb      	str	r3, [r5, #12]
 800c6f0:	2a1b      	cmp	r2, #27
 800c6f2:	d80a      	bhi.n	800c70a <_realloc_r+0x26e>
 800c6f4:	3408      	adds	r4, #8
 800c6f6:	f105 0010 	add.w	r0, r5, #16
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	6003      	str	r3, [r0, #0]
 800c6fe:	6863      	ldr	r3, [r4, #4]
 800c700:	6043      	str	r3, [r0, #4]
 800c702:	68a3      	ldr	r3, [r4, #8]
 800c704:	6083      	str	r3, [r0, #8]
 800c706:	9f01      	ldr	r7, [sp, #4]
 800c708:	e7c8      	b.n	800c69c <_realloc_r+0x200>
 800c70a:	68a3      	ldr	r3, [r4, #8]
 800c70c:	612b      	str	r3, [r5, #16]
 800c70e:	68e3      	ldr	r3, [r4, #12]
 800c710:	616b      	str	r3, [r5, #20]
 800c712:	2a24      	cmp	r2, #36	@ 0x24
 800c714:	bf01      	itttt	eq
 800c716:	6923      	ldreq	r3, [r4, #16]
 800c718:	61ab      	streq	r3, [r5, #24]
 800c71a:	6963      	ldreq	r3, [r4, #20]
 800c71c:	61eb      	streq	r3, [r5, #28]
 800c71e:	bf19      	ittee	ne
 800c720:	3410      	addne	r4, #16
 800c722:	f105 0018 	addne.w	r0, r5, #24
 800c726:	f105 0020 	addeq.w	r0, r5, #32
 800c72a:	3418      	addeq	r4, #24
 800c72c:	e7e5      	b.n	800c6fa <_realloc_r+0x25e>
 800c72e:	4621      	mov	r1, r4
 800c730:	f7ff fe1f 	bl	800c372 <memmove>
 800c734:	e7e7      	b.n	800c706 <_realloc_r+0x26a>
 800c736:	4659      	mov	r1, fp
 800c738:	4650      	mov	r0, sl
 800c73a:	f7fc fe4d 	bl	80093d8 <_malloc_r>
 800c73e:	4683      	mov	fp, r0
 800c740:	b918      	cbnz	r0, 800c74a <_realloc_r+0x2ae>
 800c742:	4650      	mov	r0, sl
 800c744:	f7fd f888 	bl	8009858 <__malloc_unlock>
 800c748:	e6c7      	b.n	800c4da <_realloc_r+0x3e>
 800c74a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c74e:	f023 0301 	bic.w	r3, r3, #1
 800c752:	444b      	add	r3, r9
 800c754:	f1a0 0208 	sub.w	r2, r0, #8
 800c758:	4293      	cmp	r3, r2
 800c75a:	d107      	bne.n	800c76c <_realloc_r+0x2d0>
 800c75c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800c760:	f027 0703 	bic.w	r7, r7, #3
 800c764:	4437      	add	r7, r6
 800c766:	e6f8      	b.n	800c55a <_realloc_r+0xbe>
 800c768:	2000023c 	.word	0x2000023c
 800c76c:	1f32      	subs	r2, r6, #4
 800c76e:	2a24      	cmp	r2, #36	@ 0x24
 800c770:	d82d      	bhi.n	800c7ce <_realloc_r+0x332>
 800c772:	2a13      	cmp	r2, #19
 800c774:	d928      	bls.n	800c7c8 <_realloc_r+0x32c>
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	6003      	str	r3, [r0, #0]
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	6043      	str	r3, [r0, #4]
 800c77e:	2a1b      	cmp	r2, #27
 800c780:	d80e      	bhi.n	800c7a0 <_realloc_r+0x304>
 800c782:	f104 0208 	add.w	r2, r4, #8
 800c786:	f100 0308 	add.w	r3, r0, #8
 800c78a:	6811      	ldr	r1, [r2, #0]
 800c78c:	6019      	str	r1, [r3, #0]
 800c78e:	6851      	ldr	r1, [r2, #4]
 800c790:	6059      	str	r1, [r3, #4]
 800c792:	6892      	ldr	r2, [r2, #8]
 800c794:	609a      	str	r2, [r3, #8]
 800c796:	4621      	mov	r1, r4
 800c798:	4650      	mov	r0, sl
 800c79a:	f7fc fd5d 	bl	8009258 <_free_r>
 800c79e:	e73f      	b.n	800c620 <_realloc_r+0x184>
 800c7a0:	68a3      	ldr	r3, [r4, #8]
 800c7a2:	6083      	str	r3, [r0, #8]
 800c7a4:	68e3      	ldr	r3, [r4, #12]
 800c7a6:	60c3      	str	r3, [r0, #12]
 800c7a8:	2a24      	cmp	r2, #36	@ 0x24
 800c7aa:	bf01      	itttt	eq
 800c7ac:	6923      	ldreq	r3, [r4, #16]
 800c7ae:	6103      	streq	r3, [r0, #16]
 800c7b0:	6961      	ldreq	r1, [r4, #20]
 800c7b2:	6141      	streq	r1, [r0, #20]
 800c7b4:	bf19      	ittee	ne
 800c7b6:	f104 0210 	addne.w	r2, r4, #16
 800c7ba:	f100 0310 	addne.w	r3, r0, #16
 800c7be:	f104 0218 	addeq.w	r2, r4, #24
 800c7c2:	f100 0318 	addeq.w	r3, r0, #24
 800c7c6:	e7e0      	b.n	800c78a <_realloc_r+0x2ee>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	4622      	mov	r2, r4
 800c7cc:	e7dd      	b.n	800c78a <_realloc_r+0x2ee>
 800c7ce:	4621      	mov	r1, r4
 800c7d0:	f7ff fdcf 	bl	800c372 <memmove>
 800c7d4:	e7df      	b.n	800c796 <_realloc_r+0x2fa>
 800c7d6:	4637      	mov	r7, r6
 800c7d8:	e6bf      	b.n	800c55a <_realloc_r+0xbe>
 800c7da:	431f      	orrs	r7, r3
 800c7dc:	f8c9 7004 	str.w	r7, [r9, #4]
 800c7e0:	6853      	ldr	r3, [r2, #4]
 800c7e2:	f043 0301 	orr.w	r3, r3, #1
 800c7e6:	6053      	str	r3, [r2, #4]
 800c7e8:	e6d3      	b.n	800c592 <_realloc_r+0xf6>
 800c7ea:	bf00      	nop

0800c7ec <__ascii_wctomb>:
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	4608      	mov	r0, r1
 800c7f0:	b141      	cbz	r1, 800c804 <__ascii_wctomb+0x18>
 800c7f2:	2aff      	cmp	r2, #255	@ 0xff
 800c7f4:	d904      	bls.n	800c800 <__ascii_wctomb+0x14>
 800c7f6:	228a      	movs	r2, #138	@ 0x8a
 800c7f8:	601a      	str	r2, [r3, #0]
 800c7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fe:	4770      	bx	lr
 800c800:	700a      	strb	r2, [r1, #0]
 800c802:	2001      	movs	r0, #1
 800c804:	4770      	bx	lr
	...

0800c808 <fiprintf>:
 800c808:	b40e      	push	{r1, r2, r3}
 800c80a:	b503      	push	{r0, r1, lr}
 800c80c:	4601      	mov	r1, r0
 800c80e:	ab03      	add	r3, sp, #12
 800c810:	4805      	ldr	r0, [pc, #20]	@ (800c828 <fiprintf+0x20>)
 800c812:	f853 2b04 	ldr.w	r2, [r3], #4
 800c816:	6800      	ldr	r0, [r0, #0]
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	f000 f839 	bl	800c890 <_vfiprintf_r>
 800c81e:	b002      	add	sp, #8
 800c820:	f85d eb04 	ldr.w	lr, [sp], #4
 800c824:	b003      	add	sp, #12
 800c826:	4770      	bx	lr
 800c828:	2000010c 	.word	0x2000010c

0800c82c <__sprint_r>:
 800c82c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c830:	6893      	ldr	r3, [r2, #8]
 800c832:	4680      	mov	r8, r0
 800c834:	460e      	mov	r6, r1
 800c836:	4614      	mov	r4, r2
 800c838:	b343      	cbz	r3, 800c88c <__sprint_r+0x60>
 800c83a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800c83c:	049d      	lsls	r5, r3, #18
 800c83e:	d522      	bpl.n	800c886 <__sprint_r+0x5a>
 800c840:	6815      	ldr	r5, [r2, #0]
 800c842:	68a0      	ldr	r0, [r4, #8]
 800c844:	3508      	adds	r5, #8
 800c846:	b928      	cbnz	r0, 800c854 <__sprint_r+0x28>
 800c848:	2300      	movs	r3, #0
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	2300      	movs	r3, #0
 800c84e:	6063      	str	r3, [r4, #4]
 800c850:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c854:	e955 b702 	ldrd	fp, r7, [r5, #-8]
 800c858:	f04f 0900 	mov.w	r9, #0
 800c85c:	ea4f 0a97 	mov.w	sl, r7, lsr #2
 800c860:	45ca      	cmp	sl, r9
 800c862:	dc05      	bgt.n	800c870 <__sprint_r+0x44>
 800c864:	68a3      	ldr	r3, [r4, #8]
 800c866:	f027 0703 	bic.w	r7, r7, #3
 800c86a:	1bdb      	subs	r3, r3, r7
 800c86c:	60a3      	str	r3, [r4, #8]
 800c86e:	e7e8      	b.n	800c842 <__sprint_r+0x16>
 800c870:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800c874:	4632      	mov	r2, r6
 800c876:	4640      	mov	r0, r8
 800c878:	f000 feb5 	bl	800d5e6 <_fputwc_r>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d0e3      	beq.n	800c848 <__sprint_r+0x1c>
 800c880:	f109 0901 	add.w	r9, r9, #1
 800c884:	e7ec      	b.n	800c860 <__sprint_r+0x34>
 800c886:	f000 fccb 	bl	800d220 <__sfvwrite_r>
 800c88a:	e7dd      	b.n	800c848 <__sprint_r+0x1c>
 800c88c:	4618      	mov	r0, r3
 800c88e:	e7dd      	b.n	800c84c <__sprint_r+0x20>

0800c890 <_vfiprintf_r>:
 800c890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c894:	b0bb      	sub	sp, #236	@ 0xec
 800c896:	460f      	mov	r7, r1
 800c898:	4693      	mov	fp, r2
 800c89a:	461c      	mov	r4, r3
 800c89c:	461d      	mov	r5, r3
 800c89e:	9000      	str	r0, [sp, #0]
 800c8a0:	b118      	cbz	r0, 800c8aa <_vfiprintf_r+0x1a>
 800c8a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c8a4:	b90b      	cbnz	r3, 800c8aa <_vfiprintf_r+0x1a>
 800c8a6:	f7fc fb5b 	bl	8008f60 <__sinit>
 800c8aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8ac:	07db      	lsls	r3, r3, #31
 800c8ae:	d405      	bmi.n	800c8bc <_vfiprintf_r+0x2c>
 800c8b0:	89bb      	ldrh	r3, [r7, #12]
 800c8b2:	059e      	lsls	r6, r3, #22
 800c8b4:	d402      	bmi.n	800c8bc <_vfiprintf_r+0x2c>
 800c8b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c8b8:	f7fc fc66 	bl	8009188 <__retarget_lock_acquire_recursive>
 800c8bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c8c0:	0498      	lsls	r0, r3, #18
 800c8c2:	d406      	bmi.n	800c8d2 <_vfiprintf_r+0x42>
 800c8c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c8c8:	81bb      	strh	r3, [r7, #12]
 800c8ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c8d0:	667b      	str	r3, [r7, #100]	@ 0x64
 800c8d2:	89bb      	ldrh	r3, [r7, #12]
 800c8d4:	0719      	lsls	r1, r3, #28
 800c8d6:	d501      	bpl.n	800c8dc <_vfiprintf_r+0x4c>
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	b9ab      	cbnz	r3, 800c908 <_vfiprintf_r+0x78>
 800c8dc:	9800      	ldr	r0, [sp, #0]
 800c8de:	4639      	mov	r1, r7
 800c8e0:	f000 fdea 	bl	800d4b8 <__swsetup_r>
 800c8e4:	b180      	cbz	r0, 800c908 <_vfiprintf_r+0x78>
 800c8e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c8e8:	07da      	lsls	r2, r3, #31
 800c8ea:	d506      	bpl.n	800c8fa <_vfiprintf_r+0x6a>
 800c8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f0:	9303      	str	r3, [sp, #12]
 800c8f2:	9803      	ldr	r0, [sp, #12]
 800c8f4:	b03b      	add	sp, #236	@ 0xec
 800c8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8fa:	89bb      	ldrh	r3, [r7, #12]
 800c8fc:	059b      	lsls	r3, r3, #22
 800c8fe:	d4f5      	bmi.n	800c8ec <_vfiprintf_r+0x5c>
 800c900:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c902:	f7fc fc42 	bl	800918a <__retarget_lock_release_recursive>
 800c906:	e7f1      	b.n	800c8ec <_vfiprintf_r+0x5c>
 800c908:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c90c:	f003 021a 	and.w	r2, r3, #26
 800c910:	2a0a      	cmp	r2, #10
 800c912:	d114      	bne.n	800c93e <_vfiprintf_r+0xae>
 800c914:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800c918:	2a00      	cmp	r2, #0
 800c91a:	db10      	blt.n	800c93e <_vfiprintf_r+0xae>
 800c91c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c91e:	07d6      	lsls	r6, r2, #31
 800c920:	d404      	bmi.n	800c92c <_vfiprintf_r+0x9c>
 800c922:	059d      	lsls	r5, r3, #22
 800c924:	d402      	bmi.n	800c92c <_vfiprintf_r+0x9c>
 800c926:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800c928:	f7fc fc2f 	bl	800918a <__retarget_lock_release_recursive>
 800c92c:	9800      	ldr	r0, [sp, #0]
 800c92e:	4623      	mov	r3, r4
 800c930:	465a      	mov	r2, fp
 800c932:	4639      	mov	r1, r7
 800c934:	b03b      	add	sp, #236	@ 0xec
 800c936:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93a:	f000 bc31 	b.w	800d1a0 <__sbprintf>
 800c93e:	2300      	movs	r3, #0
 800c940:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 800c944:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800c948:	ae11      	add	r6, sp, #68	@ 0x44
 800c94a:	960e      	str	r6, [sp, #56]	@ 0x38
 800c94c:	9307      	str	r3, [sp, #28]
 800c94e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c950:	9303      	str	r3, [sp, #12]
 800c952:	465b      	mov	r3, fp
 800c954:	461c      	mov	r4, r3
 800c956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c95a:	b10a      	cbz	r2, 800c960 <_vfiprintf_r+0xd0>
 800c95c:	2a25      	cmp	r2, #37	@ 0x25
 800c95e:	d1f9      	bne.n	800c954 <_vfiprintf_r+0xc4>
 800c960:	ebb4 080b 	subs.w	r8, r4, fp
 800c964:	d00d      	beq.n	800c982 <_vfiprintf_r+0xf2>
 800c966:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c968:	4443      	add	r3, r8
 800c96a:	9310      	str	r3, [sp, #64]	@ 0x40
 800c96c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c96e:	3301      	adds	r3, #1
 800c970:	2b07      	cmp	r3, #7
 800c972:	e9c6 b800 	strd	fp, r8, [r6]
 800c976:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c978:	dc75      	bgt.n	800ca66 <_vfiprintf_r+0x1d6>
 800c97a:	3608      	adds	r6, #8
 800c97c:	9b03      	ldr	r3, [sp, #12]
 800c97e:	4443      	add	r3, r8
 800c980:	9303      	str	r3, [sp, #12]
 800c982:	7823      	ldrb	r3, [r4, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 83cd 	beq.w	800d124 <_vfiprintf_r+0x894>
 800c98a:	2300      	movs	r3, #0
 800c98c:	f04f 32ff 	mov.w	r2, #4294967295
 800c990:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800c994:	3401      	adds	r4, #1
 800c996:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800c99a:	469a      	mov	sl, r3
 800c99c:	46a3      	mov	fp, r4
 800c99e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 800c9a2:	f1a3 0220 	sub.w	r2, r3, #32
 800c9a6:	2a5a      	cmp	r2, #90	@ 0x5a
 800c9a8:	f200 8316 	bhi.w	800cfd8 <_vfiprintf_r+0x748>
 800c9ac:	e8df f012 	tbh	[pc, r2, lsl #1]
 800c9b0:	0314009a 	.word	0x0314009a
 800c9b4:	00a20314 	.word	0x00a20314
 800c9b8:	03140314 	.word	0x03140314
 800c9bc:	00820314 	.word	0x00820314
 800c9c0:	03140314 	.word	0x03140314
 800c9c4:	00af00a5 	.word	0x00af00a5
 800c9c8:	00ac0314 	.word	0x00ac0314
 800c9cc:	031400b1 	.word	0x031400b1
 800c9d0:	00d000cd 	.word	0x00d000cd
 800c9d4:	00d000d0 	.word	0x00d000d0
 800c9d8:	00d000d0 	.word	0x00d000d0
 800c9dc:	00d000d0 	.word	0x00d000d0
 800c9e0:	00d000d0 	.word	0x00d000d0
 800c9e4:	03140314 	.word	0x03140314
 800c9e8:	03140314 	.word	0x03140314
 800c9ec:	03140314 	.word	0x03140314
 800c9f0:	03140314 	.word	0x03140314
 800c9f4:	00f70314 	.word	0x00f70314
 800c9f8:	03140104 	.word	0x03140104
 800c9fc:	03140314 	.word	0x03140314
 800ca00:	03140314 	.word	0x03140314
 800ca04:	03140314 	.word	0x03140314
 800ca08:	03140314 	.word	0x03140314
 800ca0c:	01520314 	.word	0x01520314
 800ca10:	03140314 	.word	0x03140314
 800ca14:	019a0314 	.word	0x019a0314
 800ca18:	027a0314 	.word	0x027a0314
 800ca1c:	03140314 	.word	0x03140314
 800ca20:	0314029a 	.word	0x0314029a
 800ca24:	03140314 	.word	0x03140314
 800ca28:	03140314 	.word	0x03140314
 800ca2c:	03140314 	.word	0x03140314
 800ca30:	03140314 	.word	0x03140314
 800ca34:	00f70314 	.word	0x00f70314
 800ca38:	03140106 	.word	0x03140106
 800ca3c:	03140314 	.word	0x03140314
 800ca40:	010600e0 	.word	0x010600e0
 800ca44:	031400f1 	.word	0x031400f1
 800ca48:	031400eb 	.word	0x031400eb
 800ca4c:	01540132 	.word	0x01540132
 800ca50:	00f10189 	.word	0x00f10189
 800ca54:	019a0314 	.word	0x019a0314
 800ca58:	027c0098 	.word	0x027c0098
 800ca5c:	03140314 	.word	0x03140314
 800ca60:	03140065 	.word	0x03140065
 800ca64:	0098      	.short	0x0098
 800ca66:	9800      	ldr	r0, [sp, #0]
 800ca68:	aa0e      	add	r2, sp, #56	@ 0x38
 800ca6a:	4639      	mov	r1, r7
 800ca6c:	f7ff fede 	bl	800c82c <__sprint_r>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	f040 8336 	bne.w	800d0e2 <_vfiprintf_r+0x852>
 800ca76:	ae11      	add	r6, sp, #68	@ 0x44
 800ca78:	e780      	b.n	800c97c <_vfiprintf_r+0xec>
 800ca7a:	4a99      	ldr	r2, [pc, #612]	@ (800cce0 <_vfiprintf_r+0x450>)
 800ca7c:	9205      	str	r2, [sp, #20]
 800ca7e:	f01a 0220 	ands.w	r2, sl, #32
 800ca82:	f000 8231 	beq.w	800cee8 <_vfiprintf_r+0x658>
 800ca86:	3507      	adds	r5, #7
 800ca88:	f025 0507 	bic.w	r5, r5, #7
 800ca8c:	46a8      	mov	r8, r5
 800ca8e:	686d      	ldr	r5, [r5, #4]
 800ca90:	f858 4b08 	ldr.w	r4, [r8], #8
 800ca94:	f01a 0f01 	tst.w	sl, #1
 800ca98:	d009      	beq.n	800caae <_vfiprintf_r+0x21e>
 800ca9a:	ea54 0205 	orrs.w	r2, r4, r5
 800ca9e:	bf1f      	itttt	ne
 800caa0:	2230      	movne	r2, #48	@ 0x30
 800caa2:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 800caa6:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 800caaa:	f04a 0a02 	orrne.w	sl, sl, #2
 800caae:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800cab2:	e112      	b.n	800ccda <_vfiprintf_r+0x44a>
 800cab4:	9800      	ldr	r0, [sp, #0]
 800cab6:	f7fe f9cb 	bl	800ae50 <_localeconv_r>
 800caba:	6843      	ldr	r3, [r0, #4]
 800cabc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cabe:	4618      	mov	r0, r3
 800cac0:	f7f3 fbde 	bl	8000280 <strlen>
 800cac4:	9007      	str	r0, [sp, #28]
 800cac6:	9800      	ldr	r0, [sp, #0]
 800cac8:	f7fe f9c2 	bl	800ae50 <_localeconv_r>
 800cacc:	6883      	ldr	r3, [r0, #8]
 800cace:	9306      	str	r3, [sp, #24]
 800cad0:	9b07      	ldr	r3, [sp, #28]
 800cad2:	b12b      	cbz	r3, 800cae0 <_vfiprintf_r+0x250>
 800cad4:	9b06      	ldr	r3, [sp, #24]
 800cad6:	b11b      	cbz	r3, 800cae0 <_vfiprintf_r+0x250>
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	b10b      	cbz	r3, 800cae0 <_vfiprintf_r+0x250>
 800cadc:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 800cae0:	465c      	mov	r4, fp
 800cae2:	e75b      	b.n	800c99c <_vfiprintf_r+0x10c>
 800cae4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d1f9      	bne.n	800cae0 <_vfiprintf_r+0x250>
 800caec:	2320      	movs	r3, #32
 800caee:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800caf2:	e7f5      	b.n	800cae0 <_vfiprintf_r+0x250>
 800caf4:	f04a 0a01 	orr.w	sl, sl, #1
 800caf8:	e7f2      	b.n	800cae0 <_vfiprintf_r+0x250>
 800cafa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cafe:	9302      	str	r3, [sp, #8]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	daed      	bge.n	800cae0 <_vfiprintf_r+0x250>
 800cb04:	425b      	negs	r3, r3
 800cb06:	9302      	str	r3, [sp, #8]
 800cb08:	f04a 0a04 	orr.w	sl, sl, #4
 800cb0c:	e7e8      	b.n	800cae0 <_vfiprintf_r+0x250>
 800cb0e:	232b      	movs	r3, #43	@ 0x2b
 800cb10:	e7ed      	b.n	800caee <_vfiprintf_r+0x25e>
 800cb12:	465a      	mov	r2, fp
 800cb14:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cb18:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb1a:	d112      	bne.n	800cb42 <_vfiprintf_r+0x2b2>
 800cb1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb24:	9301      	str	r3, [sp, #4]
 800cb26:	4693      	mov	fp, r2
 800cb28:	e7da      	b.n	800cae0 <_vfiprintf_r+0x250>
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	fb00 1303 	mla	r3, r0, r3, r1
 800cb30:	9301      	str	r3, [sp, #4]
 800cb32:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cb36:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800cb3a:	2909      	cmp	r1, #9
 800cb3c:	d9f5      	bls.n	800cb2a <_vfiprintf_r+0x29a>
 800cb3e:	4693      	mov	fp, r2
 800cb40:	e72f      	b.n	800c9a2 <_vfiprintf_r+0x112>
 800cb42:	2100      	movs	r1, #0
 800cb44:	9101      	str	r1, [sp, #4]
 800cb46:	200a      	movs	r0, #10
 800cb48:	e7f5      	b.n	800cb36 <_vfiprintf_r+0x2a6>
 800cb4a:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 800cb4e:	e7c7      	b.n	800cae0 <_vfiprintf_r+0x250>
 800cb50:	2100      	movs	r1, #0
 800cb52:	465a      	mov	r2, fp
 800cb54:	9102      	str	r1, [sp, #8]
 800cb56:	200a      	movs	r0, #10
 800cb58:	9902      	ldr	r1, [sp, #8]
 800cb5a:	3b30      	subs	r3, #48	@ 0x30
 800cb5c:	fb00 3301 	mla	r3, r0, r1, r3
 800cb60:	9302      	str	r3, [sp, #8]
 800cb62:	f812 3b01 	ldrb.w	r3, [r2], #1
 800cb66:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 800cb6a:	2909      	cmp	r1, #9
 800cb6c:	d9f4      	bls.n	800cb58 <_vfiprintf_r+0x2c8>
 800cb6e:	e7e6      	b.n	800cb3e <_vfiprintf_r+0x2ae>
 800cb70:	f89b 3000 	ldrb.w	r3, [fp]
 800cb74:	2b68      	cmp	r3, #104	@ 0x68
 800cb76:	bf06      	itte	eq
 800cb78:	f10b 0b01 	addeq.w	fp, fp, #1
 800cb7c:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 800cb80:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 800cb84:	e7ac      	b.n	800cae0 <_vfiprintf_r+0x250>
 800cb86:	f89b 3000 	ldrb.w	r3, [fp]
 800cb8a:	2b6c      	cmp	r3, #108	@ 0x6c
 800cb8c:	d104      	bne.n	800cb98 <_vfiprintf_r+0x308>
 800cb8e:	f10b 0b01 	add.w	fp, fp, #1
 800cb92:	f04a 0a20 	orr.w	sl, sl, #32
 800cb96:	e7a3      	b.n	800cae0 <_vfiprintf_r+0x250>
 800cb98:	f04a 0a10 	orr.w	sl, sl, #16
 800cb9c:	e7a0      	b.n	800cae0 <_vfiprintf_r+0x250>
 800cb9e:	46a8      	mov	r8, r5
 800cba0:	2400      	movs	r4, #0
 800cba2:	f858 3b04 	ldr.w	r3, [r8], #4
 800cba6:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800cbaa:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800cbae:	2301      	movs	r3, #1
 800cbb0:	9301      	str	r3, [sp, #4]
 800cbb2:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 800cbb6:	e0ab      	b.n	800cd10 <_vfiprintf_r+0x480>
 800cbb8:	f04a 0a10 	orr.w	sl, sl, #16
 800cbbc:	f01a 0f20 	tst.w	sl, #32
 800cbc0:	d011      	beq.n	800cbe6 <_vfiprintf_r+0x356>
 800cbc2:	3507      	adds	r5, #7
 800cbc4:	f025 0507 	bic.w	r5, r5, #7
 800cbc8:	46a8      	mov	r8, r5
 800cbca:	686d      	ldr	r5, [r5, #4]
 800cbcc:	f858 4b08 	ldr.w	r4, [r8], #8
 800cbd0:	2d00      	cmp	r5, #0
 800cbd2:	da06      	bge.n	800cbe2 <_vfiprintf_r+0x352>
 800cbd4:	4264      	negs	r4, r4
 800cbd6:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 800cbda:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800cbde:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e048      	b.n	800cc78 <_vfiprintf_r+0x3e8>
 800cbe6:	46a8      	mov	r8, r5
 800cbe8:	f01a 0f10 	tst.w	sl, #16
 800cbec:	f858 5b04 	ldr.w	r5, [r8], #4
 800cbf0:	d002      	beq.n	800cbf8 <_vfiprintf_r+0x368>
 800cbf2:	462c      	mov	r4, r5
 800cbf4:	17ed      	asrs	r5, r5, #31
 800cbf6:	e7eb      	b.n	800cbd0 <_vfiprintf_r+0x340>
 800cbf8:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800cbfc:	d003      	beq.n	800cc06 <_vfiprintf_r+0x376>
 800cbfe:	b22c      	sxth	r4, r5
 800cc00:	f345 35c0 	sbfx	r5, r5, #15, #1
 800cc04:	e7e4      	b.n	800cbd0 <_vfiprintf_r+0x340>
 800cc06:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800cc0a:	d0f2      	beq.n	800cbf2 <_vfiprintf_r+0x362>
 800cc0c:	b26c      	sxtb	r4, r5
 800cc0e:	f345 15c0 	sbfx	r5, r5, #7, #1
 800cc12:	e7dd      	b.n	800cbd0 <_vfiprintf_r+0x340>
 800cc14:	f01a 0f20 	tst.w	sl, #32
 800cc18:	d007      	beq.n	800cc2a <_vfiprintf_r+0x39a>
 800cc1a:	9a03      	ldr	r2, [sp, #12]
 800cc1c:	682b      	ldr	r3, [r5, #0]
 800cc1e:	9903      	ldr	r1, [sp, #12]
 800cc20:	17d2      	asrs	r2, r2, #31
 800cc22:	e9c3 1200 	strd	r1, r2, [r3]
 800cc26:	3504      	adds	r5, #4
 800cc28:	e693      	b.n	800c952 <_vfiprintf_r+0xc2>
 800cc2a:	f01a 0f10 	tst.w	sl, #16
 800cc2e:	d003      	beq.n	800cc38 <_vfiprintf_r+0x3a8>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	9a03      	ldr	r2, [sp, #12]
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	e7f6      	b.n	800cc26 <_vfiprintf_r+0x396>
 800cc38:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 800cc3c:	d003      	beq.n	800cc46 <_vfiprintf_r+0x3b6>
 800cc3e:	682b      	ldr	r3, [r5, #0]
 800cc40:	9a03      	ldr	r2, [sp, #12]
 800cc42:	801a      	strh	r2, [r3, #0]
 800cc44:	e7ef      	b.n	800cc26 <_vfiprintf_r+0x396>
 800cc46:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 800cc4a:	d0f1      	beq.n	800cc30 <_vfiprintf_r+0x3a0>
 800cc4c:	682b      	ldr	r3, [r5, #0]
 800cc4e:	9a03      	ldr	r2, [sp, #12]
 800cc50:	701a      	strb	r2, [r3, #0]
 800cc52:	e7e8      	b.n	800cc26 <_vfiprintf_r+0x396>
 800cc54:	f04a 0a10 	orr.w	sl, sl, #16
 800cc58:	f01a 0320 	ands.w	r3, sl, #32
 800cc5c:	d01f      	beq.n	800cc9e <_vfiprintf_r+0x40e>
 800cc5e:	3507      	adds	r5, #7
 800cc60:	f025 0507 	bic.w	r5, r5, #7
 800cc64:	46a8      	mov	r8, r5
 800cc66:	686d      	ldr	r5, [r5, #4]
 800cc68:	f858 4b08 	ldr.w	r4, [r8], #8
 800cc6c:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 800cc70:	2300      	movs	r3, #0
 800cc72:	2200      	movs	r2, #0
 800cc74:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 800cc78:	9a01      	ldr	r2, [sp, #4]
 800cc7a:	3201      	adds	r2, #1
 800cc7c:	f000 825f 	beq.w	800d13e <_vfiprintf_r+0x8ae>
 800cc80:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 800cc84:	9204      	str	r2, [sp, #16]
 800cc86:	ea54 0205 	orrs.w	r2, r4, r5
 800cc8a:	f040 825e 	bne.w	800d14a <_vfiprintf_r+0x8ba>
 800cc8e:	9a01      	ldr	r2, [sp, #4]
 800cc90:	2a00      	cmp	r2, #0
 800cc92:	f000 8198 	beq.w	800cfc6 <_vfiprintf_r+0x736>
 800cc96:	2b01      	cmp	r3, #1
 800cc98:	f040 825a 	bne.w	800d150 <_vfiprintf_r+0x8c0>
 800cc9c:	e13b      	b.n	800cf16 <_vfiprintf_r+0x686>
 800cc9e:	46a8      	mov	r8, r5
 800cca0:	f01a 0510 	ands.w	r5, sl, #16
 800cca4:	f858 4b04 	ldr.w	r4, [r8], #4
 800cca8:	d001      	beq.n	800ccae <_vfiprintf_r+0x41e>
 800ccaa:	461d      	mov	r5, r3
 800ccac:	e7de      	b.n	800cc6c <_vfiprintf_r+0x3dc>
 800ccae:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ccb2:	d001      	beq.n	800ccb8 <_vfiprintf_r+0x428>
 800ccb4:	b2a4      	uxth	r4, r4
 800ccb6:	e7d9      	b.n	800cc6c <_vfiprintf_r+0x3dc>
 800ccb8:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800ccbc:	d0d6      	beq.n	800cc6c <_vfiprintf_r+0x3dc>
 800ccbe:	b2e4      	uxtb	r4, r4
 800ccc0:	e7f3      	b.n	800ccaa <_vfiprintf_r+0x41a>
 800ccc2:	46a8      	mov	r8, r5
 800ccc4:	f647 0330 	movw	r3, #30768	@ 0x7830
 800ccc8:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 800cccc:	f858 4b04 	ldr.w	r4, [r8], #4
 800ccd0:	4b03      	ldr	r3, [pc, #12]	@ (800cce0 <_vfiprintf_r+0x450>)
 800ccd2:	9305      	str	r3, [sp, #20]
 800ccd4:	2500      	movs	r5, #0
 800ccd6:	f04a 0a02 	orr.w	sl, sl, #2
 800ccda:	2302      	movs	r3, #2
 800ccdc:	e7c9      	b.n	800cc72 <_vfiprintf_r+0x3e2>
 800ccde:	bf00      	nop
 800cce0:	0800e828 	.word	0x0800e828
 800cce4:	9b01      	ldr	r3, [sp, #4]
 800cce6:	46a8      	mov	r8, r5
 800cce8:	1c5c      	adds	r4, r3, #1
 800ccea:	f04f 0500 	mov.w	r5, #0
 800ccee:	f858 9b04 	ldr.w	r9, [r8], #4
 800ccf2:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 800ccf6:	f000 80d0 	beq.w	800ce9a <_vfiprintf_r+0x60a>
 800ccfa:	461a      	mov	r2, r3
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4648      	mov	r0, r9
 800cd00:	f7f3 fa6e 	bl	80001e0 <memchr>
 800cd04:	4604      	mov	r4, r0
 800cd06:	b118      	cbz	r0, 800cd10 <_vfiprintf_r+0x480>
 800cd08:	eba0 0309 	sub.w	r3, r0, r9
 800cd0c:	9301      	str	r3, [sp, #4]
 800cd0e:	462c      	mov	r4, r5
 800cd10:	9b01      	ldr	r3, [sp, #4]
 800cd12:	42a3      	cmp	r3, r4
 800cd14:	bfb8      	it	lt
 800cd16:	4623      	movlt	r3, r4
 800cd18:	9304      	str	r3, [sp, #16]
 800cd1a:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800cd1e:	b113      	cbz	r3, 800cd26 <_vfiprintf_r+0x496>
 800cd20:	9b04      	ldr	r3, [sp, #16]
 800cd22:	3301      	adds	r3, #1
 800cd24:	9304      	str	r3, [sp, #16]
 800cd26:	f01a 0302 	ands.w	r3, sl, #2
 800cd2a:	9308      	str	r3, [sp, #32]
 800cd2c:	bf1e      	ittt	ne
 800cd2e:	9b04      	ldrne	r3, [sp, #16]
 800cd30:	3302      	addne	r3, #2
 800cd32:	9304      	strne	r3, [sp, #16]
 800cd34:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 800cd38:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd3a:	d11f      	bne.n	800cd7c <_vfiprintf_r+0x4ec>
 800cd3c:	9b02      	ldr	r3, [sp, #8]
 800cd3e:	9a04      	ldr	r2, [sp, #16]
 800cd40:	1a9d      	subs	r5, r3, r2
 800cd42:	2d00      	cmp	r5, #0
 800cd44:	dd1a      	ble.n	800cd7c <_vfiprintf_r+0x4ec>
 800cd46:	4ba9      	ldr	r3, [pc, #676]	@ (800cfec <_vfiprintf_r+0x75c>)
 800cd48:	6033      	str	r3, [r6, #0]
 800cd4a:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800cd4e:	2d10      	cmp	r5, #16
 800cd50:	f102 0201 	add.w	r2, r2, #1
 800cd54:	f106 0008 	add.w	r0, r6, #8
 800cd58:	f300 814e 	bgt.w	800cff8 <_vfiprintf_r+0x768>
 800cd5c:	6075      	str	r5, [r6, #4]
 800cd5e:	2a07      	cmp	r2, #7
 800cd60:	4465      	add	r5, ip
 800cd62:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800cd66:	f340 815a 	ble.w	800d01e <_vfiprintf_r+0x78e>
 800cd6a:	9800      	ldr	r0, [sp, #0]
 800cd6c:	aa0e      	add	r2, sp, #56	@ 0x38
 800cd6e:	4639      	mov	r1, r7
 800cd70:	f7ff fd5c 	bl	800c82c <__sprint_r>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f040 81b4 	bne.w	800d0e2 <_vfiprintf_r+0x852>
 800cd7a:	ae11      	add	r6, sp, #68	@ 0x44
 800cd7c:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 800cd80:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800cd84:	b161      	cbz	r1, 800cda0 <_vfiprintf_r+0x510>
 800cd86:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	6031      	str	r1, [r6, #0]
 800cd8e:	2101      	movs	r1, #1
 800cd90:	440a      	add	r2, r1
 800cd92:	2b07      	cmp	r3, #7
 800cd94:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800cd98:	6071      	str	r1, [r6, #4]
 800cd9a:	f300 8142 	bgt.w	800d022 <_vfiprintf_r+0x792>
 800cd9e:	3608      	adds	r6, #8
 800cda0:	9908      	ldr	r1, [sp, #32]
 800cda2:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800cda6:	b159      	cbz	r1, 800cdc0 <_vfiprintf_r+0x530>
 800cda8:	a90d      	add	r1, sp, #52	@ 0x34
 800cdaa:	3301      	adds	r3, #1
 800cdac:	6031      	str	r1, [r6, #0]
 800cdae:	2102      	movs	r1, #2
 800cdb0:	440a      	add	r2, r1
 800cdb2:	2b07      	cmp	r3, #7
 800cdb4:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800cdb8:	6071      	str	r1, [r6, #4]
 800cdba:	f300 813b 	bgt.w	800d034 <_vfiprintf_r+0x7a4>
 800cdbe:	3608      	adds	r6, #8
 800cdc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cdc2:	2b80      	cmp	r3, #128	@ 0x80
 800cdc4:	d11f      	bne.n	800ce06 <_vfiprintf_r+0x576>
 800cdc6:	9b02      	ldr	r3, [sp, #8]
 800cdc8:	9a04      	ldr	r2, [sp, #16]
 800cdca:	1a9d      	subs	r5, r3, r2
 800cdcc:	2d00      	cmp	r5, #0
 800cdce:	dd1a      	ble.n	800ce06 <_vfiprintf_r+0x576>
 800cdd0:	4b87      	ldr	r3, [pc, #540]	@ (800cff0 <_vfiprintf_r+0x760>)
 800cdd2:	6033      	str	r3, [r6, #0]
 800cdd4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 800cdd8:	2d10      	cmp	r5, #16
 800cdda:	f102 0201 	add.w	r2, r2, #1
 800cdde:	f106 0008 	add.w	r0, r6, #8
 800cde2:	f300 8130 	bgt.w	800d046 <_vfiprintf_r+0x7b6>
 800cde6:	6075      	str	r5, [r6, #4]
 800cde8:	2a07      	cmp	r2, #7
 800cdea:	4465      	add	r5, ip
 800cdec:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 800cdf0:	f340 813c 	ble.w	800d06c <_vfiprintf_r+0x7dc>
 800cdf4:	9800      	ldr	r0, [sp, #0]
 800cdf6:	aa0e      	add	r2, sp, #56	@ 0x38
 800cdf8:	4639      	mov	r1, r7
 800cdfa:	f7ff fd17 	bl	800c82c <__sprint_r>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	f040 816f 	bne.w	800d0e2 <_vfiprintf_r+0x852>
 800ce04:	ae11      	add	r6, sp, #68	@ 0x44
 800ce06:	9b01      	ldr	r3, [sp, #4]
 800ce08:	1ae4      	subs	r4, r4, r3
 800ce0a:	2c00      	cmp	r4, #0
 800ce0c:	dd1a      	ble.n	800ce44 <_vfiprintf_r+0x5b4>
 800ce0e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 800ce12:	4877      	ldr	r0, [pc, #476]	@ (800cff0 <_vfiprintf_r+0x760>)
 800ce14:	6030      	str	r0, [r6, #0]
 800ce16:	2c10      	cmp	r4, #16
 800ce18:	f103 0301 	add.w	r3, r3, #1
 800ce1c:	f106 0108 	add.w	r1, r6, #8
 800ce20:	f300 8126 	bgt.w	800d070 <_vfiprintf_r+0x7e0>
 800ce24:	6074      	str	r4, [r6, #4]
 800ce26:	2b07      	cmp	r3, #7
 800ce28:	4414      	add	r4, r2
 800ce2a:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 800ce2e:	f340 8130 	ble.w	800d092 <_vfiprintf_r+0x802>
 800ce32:	9800      	ldr	r0, [sp, #0]
 800ce34:	aa0e      	add	r2, sp, #56	@ 0x38
 800ce36:	4639      	mov	r1, r7
 800ce38:	f7ff fcf8 	bl	800c82c <__sprint_r>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f040 8150 	bne.w	800d0e2 <_vfiprintf_r+0x852>
 800ce42:	ae11      	add	r6, sp, #68	@ 0x44
 800ce44:	9b01      	ldr	r3, [sp, #4]
 800ce46:	9a01      	ldr	r2, [sp, #4]
 800ce48:	6073      	str	r3, [r6, #4]
 800ce4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce4c:	f8c6 9000 	str.w	r9, [r6]
 800ce50:	4413      	add	r3, r2
 800ce52:	9310      	str	r3, [sp, #64]	@ 0x40
 800ce54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce56:	3301      	adds	r3, #1
 800ce58:	2b07      	cmp	r3, #7
 800ce5a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce5c:	f300 811b 	bgt.w	800d096 <_vfiprintf_r+0x806>
 800ce60:	f106 0308 	add.w	r3, r6, #8
 800ce64:	f01a 0f04 	tst.w	sl, #4
 800ce68:	f040 811d 	bne.w	800d0a6 <_vfiprintf_r+0x816>
 800ce6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce70:	9904      	ldr	r1, [sp, #16]
 800ce72:	428a      	cmp	r2, r1
 800ce74:	bfac      	ite	ge
 800ce76:	189b      	addge	r3, r3, r2
 800ce78:	185b      	addlt	r3, r3, r1
 800ce7a:	9303      	str	r3, [sp, #12]
 800ce7c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ce7e:	b13b      	cbz	r3, 800ce90 <_vfiprintf_r+0x600>
 800ce80:	9800      	ldr	r0, [sp, #0]
 800ce82:	aa0e      	add	r2, sp, #56	@ 0x38
 800ce84:	4639      	mov	r1, r7
 800ce86:	f7ff fcd1 	bl	800c82c <__sprint_r>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	f040 8129 	bne.w	800d0e2 <_vfiprintf_r+0x852>
 800ce90:	2300      	movs	r3, #0
 800ce92:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ce94:	4645      	mov	r5, r8
 800ce96:	ae11      	add	r6, sp, #68	@ 0x44
 800ce98:	e55b      	b.n	800c952 <_vfiprintf_r+0xc2>
 800ce9a:	4648      	mov	r0, r9
 800ce9c:	f7f3 f9f0 	bl	8000280 <strlen>
 800cea0:	9001      	str	r0, [sp, #4]
 800cea2:	e734      	b.n	800cd0e <_vfiprintf_r+0x47e>
 800cea4:	f04a 0a10 	orr.w	sl, sl, #16
 800cea8:	f01a 0320 	ands.w	r3, sl, #32
 800ceac:	d008      	beq.n	800cec0 <_vfiprintf_r+0x630>
 800ceae:	3507      	adds	r5, #7
 800ceb0:	f025 0507 	bic.w	r5, r5, #7
 800ceb4:	46a8      	mov	r8, r5
 800ceb6:	686d      	ldr	r5, [r5, #4]
 800ceb8:	f858 4b08 	ldr.w	r4, [r8], #8
 800cebc:	2301      	movs	r3, #1
 800cebe:	e6d8      	b.n	800cc72 <_vfiprintf_r+0x3e2>
 800cec0:	46a8      	mov	r8, r5
 800cec2:	f01a 0510 	ands.w	r5, sl, #16
 800cec6:	f858 4b04 	ldr.w	r4, [r8], #4
 800ceca:	d001      	beq.n	800ced0 <_vfiprintf_r+0x640>
 800cecc:	461d      	mov	r5, r3
 800cece:	e7f5      	b.n	800cebc <_vfiprintf_r+0x62c>
 800ced0:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800ced4:	d001      	beq.n	800ceda <_vfiprintf_r+0x64a>
 800ced6:	b2a4      	uxth	r4, r4
 800ced8:	e7f0      	b.n	800cebc <_vfiprintf_r+0x62c>
 800ceda:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800cede:	d0ed      	beq.n	800cebc <_vfiprintf_r+0x62c>
 800cee0:	b2e4      	uxtb	r4, r4
 800cee2:	e7f3      	b.n	800cecc <_vfiprintf_r+0x63c>
 800cee4:	4a43      	ldr	r2, [pc, #268]	@ (800cff4 <_vfiprintf_r+0x764>)
 800cee6:	e5c9      	b.n	800ca7c <_vfiprintf_r+0x1ec>
 800cee8:	46a8      	mov	r8, r5
 800ceea:	f01a 0510 	ands.w	r5, sl, #16
 800ceee:	f858 4b04 	ldr.w	r4, [r8], #4
 800cef2:	d001      	beq.n	800cef8 <_vfiprintf_r+0x668>
 800cef4:	4615      	mov	r5, r2
 800cef6:	e5cd      	b.n	800ca94 <_vfiprintf_r+0x204>
 800cef8:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 800cefc:	d001      	beq.n	800cf02 <_vfiprintf_r+0x672>
 800cefe:	b2a4      	uxth	r4, r4
 800cf00:	e5c8      	b.n	800ca94 <_vfiprintf_r+0x204>
 800cf02:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 800cf06:	f43f adc5 	beq.w	800ca94 <_vfiprintf_r+0x204>
 800cf0a:	b2e4      	uxtb	r4, r4
 800cf0c:	e7f2      	b.n	800cef4 <_vfiprintf_r+0x664>
 800cf0e:	2c0a      	cmp	r4, #10
 800cf10:	f175 0300 	sbcs.w	r3, r5, #0
 800cf14:	d206      	bcs.n	800cf24 <_vfiprintf_r+0x694>
 800cf16:	3430      	adds	r4, #48	@ 0x30
 800cf18:	b2e4      	uxtb	r4, r4
 800cf1a:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 800cf1e:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800cf22:	e131      	b.n	800d188 <_vfiprintf_r+0x8f8>
 800cf24:	ab3a      	add	r3, sp, #232	@ 0xe8
 800cf26:	9308      	str	r3, [sp, #32]
 800cf28:	9b04      	ldr	r3, [sp, #16]
 800cf2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf2e:	f04f 0a00 	mov.w	sl, #0
 800cf32:	930a      	str	r3, [sp, #40]	@ 0x28
 800cf34:	220a      	movs	r2, #10
 800cf36:	2300      	movs	r3, #0
 800cf38:	4620      	mov	r0, r4
 800cf3a:	4629      	mov	r1, r5
 800cf3c:	f7f3 fe3c 	bl	8000bb8 <__aeabi_uldivmod>
 800cf40:	460b      	mov	r3, r1
 800cf42:	9908      	ldr	r1, [sp, #32]
 800cf44:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cf46:	3230      	adds	r2, #48	@ 0x30
 800cf48:	f801 2c01 	strb.w	r2, [r1, #-1]
 800cf4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cf4e:	f101 39ff 	add.w	r9, r1, #4294967295
 800cf52:	f10a 0a01 	add.w	sl, sl, #1
 800cf56:	b1e2      	cbz	r2, 800cf92 <_vfiprintf_r+0x702>
 800cf58:	9a06      	ldr	r2, [sp, #24]
 800cf5a:	7812      	ldrb	r2, [r2, #0]
 800cf5c:	4552      	cmp	r2, sl
 800cf5e:	d118      	bne.n	800cf92 <_vfiprintf_r+0x702>
 800cf60:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800cf64:	d015      	beq.n	800cf92 <_vfiprintf_r+0x702>
 800cf66:	2c0a      	cmp	r4, #10
 800cf68:	f175 0200 	sbcs.w	r2, r5, #0
 800cf6c:	d311      	bcc.n	800cf92 <_vfiprintf_r+0x702>
 800cf6e:	9308      	str	r3, [sp, #32]
 800cf70:	9b07      	ldr	r3, [sp, #28]
 800cf72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cf74:	eba9 0903 	sub.w	r9, r9, r3
 800cf78:	461a      	mov	r2, r3
 800cf7a:	4648      	mov	r0, r9
 800cf7c:	f7fd ff55 	bl	800ae2a <strncpy>
 800cf80:	9b06      	ldr	r3, [sp, #24]
 800cf82:	785a      	ldrb	r2, [r3, #1]
 800cf84:	9b08      	ldr	r3, [sp, #32]
 800cf86:	b172      	cbz	r2, 800cfa6 <_vfiprintf_r+0x716>
 800cf88:	9a06      	ldr	r2, [sp, #24]
 800cf8a:	3201      	adds	r2, #1
 800cf8c:	9206      	str	r2, [sp, #24]
 800cf8e:	f04f 0a00 	mov.w	sl, #0
 800cf92:	2c0a      	cmp	r4, #10
 800cf94:	f175 0500 	sbcs.w	r5, r5, #0
 800cf98:	f0c0 80f6 	bcc.w	800d188 <_vfiprintf_r+0x8f8>
 800cf9c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800cf9e:	f8cd 9020 	str.w	r9, [sp, #32]
 800cfa2:	461d      	mov	r5, r3
 800cfa4:	e7c6      	b.n	800cf34 <_vfiprintf_r+0x6a4>
 800cfa6:	4692      	mov	sl, r2
 800cfa8:	e7f3      	b.n	800cf92 <_vfiprintf_r+0x702>
 800cfaa:	f004 030f 	and.w	r3, r4, #15
 800cfae:	9a05      	ldr	r2, [sp, #20]
 800cfb0:	0924      	lsrs	r4, r4, #4
 800cfb2:	5cd3      	ldrb	r3, [r2, r3]
 800cfb4:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800cfb8:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 800cfbc:	092d      	lsrs	r5, r5, #4
 800cfbe:	ea54 0305 	orrs.w	r3, r4, r5
 800cfc2:	d1f2      	bne.n	800cfaa <_vfiprintf_r+0x71a>
 800cfc4:	e0e0      	b.n	800d188 <_vfiprintf_r+0x8f8>
 800cfc6:	b923      	cbnz	r3, 800cfd2 <_vfiprintf_r+0x742>
 800cfc8:	f01a 0f01 	tst.w	sl, #1
 800cfcc:	d001      	beq.n	800cfd2 <_vfiprintf_r+0x742>
 800cfce:	2430      	movs	r4, #48	@ 0x30
 800cfd0:	e7a3      	b.n	800cf1a <_vfiprintf_r+0x68a>
 800cfd2:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800cfd6:	e0d7      	b.n	800d188 <_vfiprintf_r+0x8f8>
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 80a3 	beq.w	800d124 <_vfiprintf_r+0x894>
 800cfde:	2400      	movs	r4, #0
 800cfe0:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800cfe4:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 800cfe8:	46a8      	mov	r8, r5
 800cfea:	e5e0      	b.n	800cbae <_vfiprintf_r+0x31e>
 800cfec:	0800eb8f 	.word	0x0800eb8f
 800cff0:	0800eb7f 	.word	0x0800eb7f
 800cff4:	0800e839 	.word	0x0800e839
 800cff8:	2110      	movs	r1, #16
 800cffa:	6071      	str	r1, [r6, #4]
 800cffc:	2a07      	cmp	r2, #7
 800cffe:	4461      	add	r1, ip
 800d000:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d004:	dd08      	ble.n	800d018 <_vfiprintf_r+0x788>
 800d006:	9800      	ldr	r0, [sp, #0]
 800d008:	aa0e      	add	r2, sp, #56	@ 0x38
 800d00a:	4639      	mov	r1, r7
 800d00c:	f7ff fc0e 	bl	800c82c <__sprint_r>
 800d010:	2800      	cmp	r0, #0
 800d012:	d166      	bne.n	800d0e2 <_vfiprintf_r+0x852>
 800d014:	4b60      	ldr	r3, [pc, #384]	@ (800d198 <_vfiprintf_r+0x908>)
 800d016:	a811      	add	r0, sp, #68	@ 0x44
 800d018:	3d10      	subs	r5, #16
 800d01a:	4606      	mov	r6, r0
 800d01c:	e694      	b.n	800cd48 <_vfiprintf_r+0x4b8>
 800d01e:	4606      	mov	r6, r0
 800d020:	e6ac      	b.n	800cd7c <_vfiprintf_r+0x4ec>
 800d022:	9800      	ldr	r0, [sp, #0]
 800d024:	aa0e      	add	r2, sp, #56	@ 0x38
 800d026:	4639      	mov	r1, r7
 800d028:	f7ff fc00 	bl	800c82c <__sprint_r>
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d158      	bne.n	800d0e2 <_vfiprintf_r+0x852>
 800d030:	ae11      	add	r6, sp, #68	@ 0x44
 800d032:	e6b5      	b.n	800cda0 <_vfiprintf_r+0x510>
 800d034:	9800      	ldr	r0, [sp, #0]
 800d036:	aa0e      	add	r2, sp, #56	@ 0x38
 800d038:	4639      	mov	r1, r7
 800d03a:	f7ff fbf7 	bl	800c82c <__sprint_r>
 800d03e:	2800      	cmp	r0, #0
 800d040:	d14f      	bne.n	800d0e2 <_vfiprintf_r+0x852>
 800d042:	ae11      	add	r6, sp, #68	@ 0x44
 800d044:	e6bc      	b.n	800cdc0 <_vfiprintf_r+0x530>
 800d046:	2110      	movs	r1, #16
 800d048:	6071      	str	r1, [r6, #4]
 800d04a:	2a07      	cmp	r2, #7
 800d04c:	4461      	add	r1, ip
 800d04e:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d052:	dd08      	ble.n	800d066 <_vfiprintf_r+0x7d6>
 800d054:	9800      	ldr	r0, [sp, #0]
 800d056:	aa0e      	add	r2, sp, #56	@ 0x38
 800d058:	4639      	mov	r1, r7
 800d05a:	f7ff fbe7 	bl	800c82c <__sprint_r>
 800d05e:	2800      	cmp	r0, #0
 800d060:	d13f      	bne.n	800d0e2 <_vfiprintf_r+0x852>
 800d062:	4b4e      	ldr	r3, [pc, #312]	@ (800d19c <_vfiprintf_r+0x90c>)
 800d064:	a811      	add	r0, sp, #68	@ 0x44
 800d066:	3d10      	subs	r5, #16
 800d068:	4606      	mov	r6, r0
 800d06a:	e6b2      	b.n	800cdd2 <_vfiprintf_r+0x542>
 800d06c:	4606      	mov	r6, r0
 800d06e:	e6ca      	b.n	800ce06 <_vfiprintf_r+0x576>
 800d070:	2010      	movs	r0, #16
 800d072:	4402      	add	r2, r0
 800d074:	2b07      	cmp	r3, #7
 800d076:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 800d07a:	6070      	str	r0, [r6, #4]
 800d07c:	dd06      	ble.n	800d08c <_vfiprintf_r+0x7fc>
 800d07e:	9800      	ldr	r0, [sp, #0]
 800d080:	aa0e      	add	r2, sp, #56	@ 0x38
 800d082:	4639      	mov	r1, r7
 800d084:	f7ff fbd2 	bl	800c82c <__sprint_r>
 800d088:	bb58      	cbnz	r0, 800d0e2 <_vfiprintf_r+0x852>
 800d08a:	a911      	add	r1, sp, #68	@ 0x44
 800d08c:	3c10      	subs	r4, #16
 800d08e:	460e      	mov	r6, r1
 800d090:	e6bd      	b.n	800ce0e <_vfiprintf_r+0x57e>
 800d092:	460e      	mov	r6, r1
 800d094:	e6d6      	b.n	800ce44 <_vfiprintf_r+0x5b4>
 800d096:	9800      	ldr	r0, [sp, #0]
 800d098:	aa0e      	add	r2, sp, #56	@ 0x38
 800d09a:	4639      	mov	r1, r7
 800d09c:	f7ff fbc6 	bl	800c82c <__sprint_r>
 800d0a0:	b9f8      	cbnz	r0, 800d0e2 <_vfiprintf_r+0x852>
 800d0a2:	ab11      	add	r3, sp, #68	@ 0x44
 800d0a4:	e6de      	b.n	800ce64 <_vfiprintf_r+0x5d4>
 800d0a6:	9a02      	ldr	r2, [sp, #8]
 800d0a8:	9904      	ldr	r1, [sp, #16]
 800d0aa:	1a54      	subs	r4, r2, r1
 800d0ac:	2c00      	cmp	r4, #0
 800d0ae:	f77f aedd 	ble.w	800ce6c <_vfiprintf_r+0x5dc>
 800d0b2:	4d39      	ldr	r5, [pc, #228]	@ (800d198 <_vfiprintf_r+0x908>)
 800d0b4:	2610      	movs	r6, #16
 800d0b6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 800d0ba:	2c10      	cmp	r4, #16
 800d0bc:	f102 0201 	add.w	r2, r2, #1
 800d0c0:	601d      	str	r5, [r3, #0]
 800d0c2:	dc1d      	bgt.n	800d100 <_vfiprintf_r+0x870>
 800d0c4:	605c      	str	r4, [r3, #4]
 800d0c6:	2a07      	cmp	r2, #7
 800d0c8:	440c      	add	r4, r1
 800d0ca:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 800d0ce:	f77f aecd 	ble.w	800ce6c <_vfiprintf_r+0x5dc>
 800d0d2:	9800      	ldr	r0, [sp, #0]
 800d0d4:	aa0e      	add	r2, sp, #56	@ 0x38
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f7ff fba8 	bl	800c82c <__sprint_r>
 800d0dc:	2800      	cmp	r0, #0
 800d0de:	f43f aec5 	beq.w	800ce6c <_vfiprintf_r+0x5dc>
 800d0e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d0e4:	07d9      	lsls	r1, r3, #31
 800d0e6:	d405      	bmi.n	800d0f4 <_vfiprintf_r+0x864>
 800d0e8:	89bb      	ldrh	r3, [r7, #12]
 800d0ea:	059a      	lsls	r2, r3, #22
 800d0ec:	d402      	bmi.n	800d0f4 <_vfiprintf_r+0x864>
 800d0ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d0f0:	f7fc f84b 	bl	800918a <__retarget_lock_release_recursive>
 800d0f4:	89bb      	ldrh	r3, [r7, #12]
 800d0f6:	065b      	lsls	r3, r3, #25
 800d0f8:	f57f abfb 	bpl.w	800c8f2 <_vfiprintf_r+0x62>
 800d0fc:	f7ff bbf6 	b.w	800c8ec <_vfiprintf_r+0x5c>
 800d100:	3110      	adds	r1, #16
 800d102:	2a07      	cmp	r2, #7
 800d104:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800d108:	605e      	str	r6, [r3, #4]
 800d10a:	dc02      	bgt.n	800d112 <_vfiprintf_r+0x882>
 800d10c:	3308      	adds	r3, #8
 800d10e:	3c10      	subs	r4, #16
 800d110:	e7d1      	b.n	800d0b6 <_vfiprintf_r+0x826>
 800d112:	9800      	ldr	r0, [sp, #0]
 800d114:	aa0e      	add	r2, sp, #56	@ 0x38
 800d116:	4639      	mov	r1, r7
 800d118:	f7ff fb88 	bl	800c82c <__sprint_r>
 800d11c:	2800      	cmp	r0, #0
 800d11e:	d1e0      	bne.n	800d0e2 <_vfiprintf_r+0x852>
 800d120:	ab11      	add	r3, sp, #68	@ 0x44
 800d122:	e7f4      	b.n	800d10e <_vfiprintf_r+0x87e>
 800d124:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d126:	b913      	cbnz	r3, 800d12e <_vfiprintf_r+0x89e>
 800d128:	2300      	movs	r3, #0
 800d12a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d12c:	e7d9      	b.n	800d0e2 <_vfiprintf_r+0x852>
 800d12e:	9800      	ldr	r0, [sp, #0]
 800d130:	aa0e      	add	r2, sp, #56	@ 0x38
 800d132:	4639      	mov	r1, r7
 800d134:	f7ff fb7a 	bl	800c82c <__sprint_r>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d0f5      	beq.n	800d128 <_vfiprintf_r+0x898>
 800d13c:	e7d1      	b.n	800d0e2 <_vfiprintf_r+0x852>
 800d13e:	ea54 0205 	orrs.w	r2, r4, r5
 800d142:	f8cd a010 	str.w	sl, [sp, #16]
 800d146:	f43f ada6 	beq.w	800cc96 <_vfiprintf_r+0x406>
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	f43f aedf 	beq.w	800cf0e <_vfiprintf_r+0x67e>
 800d150:	2b02      	cmp	r3, #2
 800d152:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800d156:	f43f af28 	beq.w	800cfaa <_vfiprintf_r+0x71a>
 800d15a:	f004 0307 	and.w	r3, r4, #7
 800d15e:	08e4      	lsrs	r4, r4, #3
 800d160:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800d164:	08ed      	lsrs	r5, r5, #3
 800d166:	3330      	adds	r3, #48	@ 0x30
 800d168:	ea54 0105 	orrs.w	r1, r4, r5
 800d16c:	464a      	mov	r2, r9
 800d16e:	f809 3d01 	strb.w	r3, [r9, #-1]!
 800d172:	d1f2      	bne.n	800d15a <_vfiprintf_r+0x8ca>
 800d174:	9904      	ldr	r1, [sp, #16]
 800d176:	07c8      	lsls	r0, r1, #31
 800d178:	d506      	bpl.n	800d188 <_vfiprintf_r+0x8f8>
 800d17a:	2b30      	cmp	r3, #48	@ 0x30
 800d17c:	d004      	beq.n	800d188 <_vfiprintf_r+0x8f8>
 800d17e:	2330      	movs	r3, #48	@ 0x30
 800d180:	f809 3c01 	strb.w	r3, [r9, #-1]
 800d184:	f1a2 0902 	sub.w	r9, r2, #2
 800d188:	ab3a      	add	r3, sp, #232	@ 0xe8
 800d18a:	eba3 0309 	sub.w	r3, r3, r9
 800d18e:	9c01      	ldr	r4, [sp, #4]
 800d190:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	e5bb      	b.n	800cd10 <_vfiprintf_r+0x480>
 800d198:	0800eb8f 	.word	0x0800eb8f
 800d19c:	0800eb7f 	.word	0x0800eb7f

0800d1a0 <__sbprintf>:
 800d1a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1a2:	461f      	mov	r7, r3
 800d1a4:	898b      	ldrh	r3, [r1, #12]
 800d1a6:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 800d1aa:	f023 0302 	bic.w	r3, r3, #2
 800d1ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d1b2:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 800d1b4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d1b6:	89cb      	ldrh	r3, [r1, #14]
 800d1b8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d1bc:	69cb      	ldr	r3, [r1, #28]
 800d1be:	9307      	str	r3, [sp, #28]
 800d1c0:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 800d1c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1c4:	ab1a      	add	r3, sp, #104	@ 0x68
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1ce:	4615      	mov	r5, r2
 800d1d0:	4606      	mov	r6, r0
 800d1d2:	9302      	str	r3, [sp, #8]
 800d1d4:	9305      	str	r3, [sp, #20]
 800d1d6:	a816      	add	r0, sp, #88	@ 0x58
 800d1d8:	2300      	movs	r3, #0
 800d1da:	460c      	mov	r4, r1
 800d1dc:	9306      	str	r3, [sp, #24]
 800d1de:	f7fb ffd1 	bl	8009184 <__retarget_lock_init_recursive>
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	463b      	mov	r3, r7
 800d1e6:	4669      	mov	r1, sp
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	f7ff fb51 	bl	800c890 <_vfiprintf_r>
 800d1ee:	1e05      	subs	r5, r0, #0
 800d1f0:	db07      	blt.n	800d202 <__sbprintf+0x62>
 800d1f2:	4669      	mov	r1, sp
 800d1f4:	4630      	mov	r0, r6
 800d1f6:	f7fd fdf3 	bl	800ade0 <_fflush_r>
 800d1fa:	2800      	cmp	r0, #0
 800d1fc:	bf18      	it	ne
 800d1fe:	f04f 35ff 	movne.w	r5, #4294967295
 800d202:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800d206:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d208:	065b      	lsls	r3, r3, #25
 800d20a:	bf42      	ittt	mi
 800d20c:	89a3      	ldrhmi	r3, [r4, #12]
 800d20e:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800d212:	81a3      	strhmi	r3, [r4, #12]
 800d214:	f7fb ffb7 	bl	8009186 <__retarget_lock_close_recursive>
 800d218:	4628      	mov	r0, r5
 800d21a:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 800d21e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d220 <__sfvwrite_r>:
 800d220:	6893      	ldr	r3, [r2, #8]
 800d222:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d226:	4606      	mov	r6, r0
 800d228:	460c      	mov	r4, r1
 800d22a:	4691      	mov	r9, r2
 800d22c:	b91b      	cbnz	r3, 800d236 <__sfvwrite_r+0x16>
 800d22e:	2000      	movs	r0, #0
 800d230:	b003      	add	sp, #12
 800d232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d236:	898b      	ldrh	r3, [r1, #12]
 800d238:	0718      	lsls	r0, r3, #28
 800d23a:	d550      	bpl.n	800d2de <__sfvwrite_r+0xbe>
 800d23c:	690b      	ldr	r3, [r1, #16]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d04d      	beq.n	800d2de <__sfvwrite_r+0xbe>
 800d242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d246:	f8d9 8000 	ldr.w	r8, [r9]
 800d24a:	f013 0702 	ands.w	r7, r3, #2
 800d24e:	d16b      	bne.n	800d328 <__sfvwrite_r+0x108>
 800d250:	f013 0301 	ands.w	r3, r3, #1
 800d254:	f000 809c 	beq.w	800d390 <__sfvwrite_r+0x170>
 800d258:	4638      	mov	r0, r7
 800d25a:	46ba      	mov	sl, r7
 800d25c:	46bb      	mov	fp, r7
 800d25e:	f1bb 0f00 	cmp.w	fp, #0
 800d262:	f000 8103 	beq.w	800d46c <__sfvwrite_r+0x24c>
 800d266:	b950      	cbnz	r0, 800d27e <__sfvwrite_r+0x5e>
 800d268:	465a      	mov	r2, fp
 800d26a:	210a      	movs	r1, #10
 800d26c:	4650      	mov	r0, sl
 800d26e:	f7f2 ffb7 	bl	80001e0 <memchr>
 800d272:	2800      	cmp	r0, #0
 800d274:	f000 8100 	beq.w	800d478 <__sfvwrite_r+0x258>
 800d278:	3001      	adds	r0, #1
 800d27a:	eba0 070a 	sub.w	r7, r0, sl
 800d27e:	6820      	ldr	r0, [r4, #0]
 800d280:	6921      	ldr	r1, [r4, #16]
 800d282:	68a5      	ldr	r5, [r4, #8]
 800d284:	6963      	ldr	r3, [r4, #20]
 800d286:	455f      	cmp	r7, fp
 800d288:	463a      	mov	r2, r7
 800d28a:	bf28      	it	cs
 800d28c:	465a      	movcs	r2, fp
 800d28e:	4288      	cmp	r0, r1
 800d290:	f240 80f5 	bls.w	800d47e <__sfvwrite_r+0x25e>
 800d294:	441d      	add	r5, r3
 800d296:	42aa      	cmp	r2, r5
 800d298:	f340 80f1 	ble.w	800d47e <__sfvwrite_r+0x25e>
 800d29c:	4651      	mov	r1, sl
 800d29e:	462a      	mov	r2, r5
 800d2a0:	f7ff f867 	bl	800c372 <memmove>
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	442b      	add	r3, r5
 800d2a8:	6023      	str	r3, [r4, #0]
 800d2aa:	4621      	mov	r1, r4
 800d2ac:	4630      	mov	r0, r6
 800d2ae:	f7fd fd97 	bl	800ade0 <_fflush_r>
 800d2b2:	2800      	cmp	r0, #0
 800d2b4:	d167      	bne.n	800d386 <__sfvwrite_r+0x166>
 800d2b6:	1b7f      	subs	r7, r7, r5
 800d2b8:	f040 80f9 	bne.w	800d4ae <__sfvwrite_r+0x28e>
 800d2bc:	4621      	mov	r1, r4
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7fd fd8e 	bl	800ade0 <_fflush_r>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d15e      	bne.n	800d386 <__sfvwrite_r+0x166>
 800d2c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d2cc:	1b5b      	subs	r3, r3, r5
 800d2ce:	44aa      	add	sl, r5
 800d2d0:	ebab 0b05 	sub.w	fp, fp, r5
 800d2d4:	f8c9 3008 	str.w	r3, [r9, #8]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d1c0      	bne.n	800d25e <__sfvwrite_r+0x3e>
 800d2dc:	e7a7      	b.n	800d22e <__sfvwrite_r+0xe>
 800d2de:	4621      	mov	r1, r4
 800d2e0:	4630      	mov	r0, r6
 800d2e2:	f000 f8e9 	bl	800d4b8 <__swsetup_r>
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d0ab      	beq.n	800d242 <__sfvwrite_r+0x22>
 800d2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ee:	e79f      	b.n	800d230 <__sfvwrite_r+0x10>
 800d2f0:	e9d8 a500 	ldrd	sl, r5, [r8]
 800d2f4:	f108 0808 	add.w	r8, r8, #8
 800d2f8:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800d2fc:	69e1      	ldr	r1, [r4, #28]
 800d2fe:	2d00      	cmp	r5, #0
 800d300:	d0f6      	beq.n	800d2f0 <__sfvwrite_r+0xd0>
 800d302:	42bd      	cmp	r5, r7
 800d304:	462b      	mov	r3, r5
 800d306:	4652      	mov	r2, sl
 800d308:	bf28      	it	cs
 800d30a:	463b      	movcs	r3, r7
 800d30c:	4630      	mov	r0, r6
 800d30e:	47d8      	blx	fp
 800d310:	2800      	cmp	r0, #0
 800d312:	dd38      	ble.n	800d386 <__sfvwrite_r+0x166>
 800d314:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d318:	1a1b      	subs	r3, r3, r0
 800d31a:	4482      	add	sl, r0
 800d31c:	1a2d      	subs	r5, r5, r0
 800d31e:	f8c9 3008 	str.w	r3, [r9, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d1e8      	bne.n	800d2f8 <__sfvwrite_r+0xd8>
 800d326:	e782      	b.n	800d22e <__sfvwrite_r+0xe>
 800d328:	f04f 0a00 	mov.w	sl, #0
 800d32c:	4f61      	ldr	r7, [pc, #388]	@ (800d4b4 <__sfvwrite_r+0x294>)
 800d32e:	4655      	mov	r5, sl
 800d330:	e7e2      	b.n	800d2f8 <__sfvwrite_r+0xd8>
 800d332:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800d336:	f108 0808 	add.w	r8, r8, #8
 800d33a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d33e:	6820      	ldr	r0, [r4, #0]
 800d340:	68a2      	ldr	r2, [r4, #8]
 800d342:	f1ba 0f00 	cmp.w	sl, #0
 800d346:	d0f4      	beq.n	800d332 <__sfvwrite_r+0x112>
 800d348:	0599      	lsls	r1, r3, #22
 800d34a:	d563      	bpl.n	800d414 <__sfvwrite_r+0x1f4>
 800d34c:	4552      	cmp	r2, sl
 800d34e:	d836      	bhi.n	800d3be <__sfvwrite_r+0x19e>
 800d350:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 800d354:	d033      	beq.n	800d3be <__sfvwrite_r+0x19e>
 800d356:	6921      	ldr	r1, [r4, #16]
 800d358:	6965      	ldr	r5, [r4, #20]
 800d35a:	eba0 0b01 	sub.w	fp, r0, r1
 800d35e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d362:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d366:	f10b 0201 	add.w	r2, fp, #1
 800d36a:	106d      	asrs	r5, r5, #1
 800d36c:	4452      	add	r2, sl
 800d36e:	4295      	cmp	r5, r2
 800d370:	bf38      	it	cc
 800d372:	4615      	movcc	r5, r2
 800d374:	055b      	lsls	r3, r3, #21
 800d376:	d53d      	bpl.n	800d3f4 <__sfvwrite_r+0x1d4>
 800d378:	4629      	mov	r1, r5
 800d37a:	4630      	mov	r0, r6
 800d37c:	f7fc f82c 	bl	80093d8 <_malloc_r>
 800d380:	b948      	cbnz	r0, 800d396 <__sfvwrite_r+0x176>
 800d382:	230c      	movs	r3, #12
 800d384:	6033      	str	r3, [r6, #0]
 800d386:	89a3      	ldrh	r3, [r4, #12]
 800d388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d38c:	81a3      	strh	r3, [r4, #12]
 800d38e:	e7ac      	b.n	800d2ea <__sfvwrite_r+0xca>
 800d390:	461f      	mov	r7, r3
 800d392:	469a      	mov	sl, r3
 800d394:	e7d1      	b.n	800d33a <__sfvwrite_r+0x11a>
 800d396:	465a      	mov	r2, fp
 800d398:	6921      	ldr	r1, [r4, #16]
 800d39a:	9001      	str	r0, [sp, #4]
 800d39c:	f7ff f80a 	bl	800c3b4 <memcpy>
 800d3a0:	89a2      	ldrh	r2, [r4, #12]
 800d3a2:	9b01      	ldr	r3, [sp, #4]
 800d3a4:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 800d3a8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d3ac:	81a2      	strh	r2, [r4, #12]
 800d3ae:	6123      	str	r3, [r4, #16]
 800d3b0:	6165      	str	r5, [r4, #20]
 800d3b2:	445b      	add	r3, fp
 800d3b4:	eba5 050b 	sub.w	r5, r5, fp
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	4652      	mov	r2, sl
 800d3bc:	60a5      	str	r5, [r4, #8]
 800d3be:	4552      	cmp	r2, sl
 800d3c0:	bf28      	it	cs
 800d3c2:	4652      	movcs	r2, sl
 800d3c4:	6820      	ldr	r0, [r4, #0]
 800d3c6:	9201      	str	r2, [sp, #4]
 800d3c8:	4639      	mov	r1, r7
 800d3ca:	f7fe ffd2 	bl	800c372 <memmove>
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	9a01      	ldr	r2, [sp, #4]
 800d3d2:	1a9b      	subs	r3, r3, r2
 800d3d4:	60a3      	str	r3, [r4, #8]
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	4413      	add	r3, r2
 800d3da:	4655      	mov	r5, sl
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800d3e2:	1b5b      	subs	r3, r3, r5
 800d3e4:	442f      	add	r7, r5
 800d3e6:	ebaa 0a05 	sub.w	sl, sl, r5
 800d3ea:	f8c9 3008 	str.w	r3, [r9, #8]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1a3      	bne.n	800d33a <__sfvwrite_r+0x11a>
 800d3f2:	e71c      	b.n	800d22e <__sfvwrite_r+0xe>
 800d3f4:	462a      	mov	r2, r5
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f7ff f850 	bl	800c49c <_realloc_r>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d1d5      	bne.n	800d3ae <__sfvwrite_r+0x18e>
 800d402:	6921      	ldr	r1, [r4, #16]
 800d404:	4630      	mov	r0, r6
 800d406:	f7fb ff27 	bl	8009258 <_free_r>
 800d40a:	89a3      	ldrh	r3, [r4, #12]
 800d40c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d410:	81a3      	strh	r3, [r4, #12]
 800d412:	e7b6      	b.n	800d382 <__sfvwrite_r+0x162>
 800d414:	6923      	ldr	r3, [r4, #16]
 800d416:	4283      	cmp	r3, r0
 800d418:	d302      	bcc.n	800d420 <__sfvwrite_r+0x200>
 800d41a:	6961      	ldr	r1, [r4, #20]
 800d41c:	4551      	cmp	r1, sl
 800d41e:	d915      	bls.n	800d44c <__sfvwrite_r+0x22c>
 800d420:	4552      	cmp	r2, sl
 800d422:	bf28      	it	cs
 800d424:	4652      	movcs	r2, sl
 800d426:	4639      	mov	r1, r7
 800d428:	4615      	mov	r5, r2
 800d42a:	f7fe ffa2 	bl	800c372 <memmove>
 800d42e:	68a3      	ldr	r3, [r4, #8]
 800d430:	6822      	ldr	r2, [r4, #0]
 800d432:	1b5b      	subs	r3, r3, r5
 800d434:	442a      	add	r2, r5
 800d436:	60a3      	str	r3, [r4, #8]
 800d438:	6022      	str	r2, [r4, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d1cf      	bne.n	800d3de <__sfvwrite_r+0x1be>
 800d43e:	4621      	mov	r1, r4
 800d440:	4630      	mov	r0, r6
 800d442:	f7fd fccd 	bl	800ade0 <_fflush_r>
 800d446:	2800      	cmp	r0, #0
 800d448:	d0c9      	beq.n	800d3de <__sfvwrite_r+0x1be>
 800d44a:	e79c      	b.n	800d386 <__sfvwrite_r+0x166>
 800d44c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800d450:	4553      	cmp	r3, sl
 800d452:	bf28      	it	cs
 800d454:	4653      	movcs	r3, sl
 800d456:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d458:	fb93 f3f1 	sdiv	r3, r3, r1
 800d45c:	463a      	mov	r2, r7
 800d45e:	434b      	muls	r3, r1
 800d460:	4630      	mov	r0, r6
 800d462:	69e1      	ldr	r1, [r4, #28]
 800d464:	47a8      	blx	r5
 800d466:	1e05      	subs	r5, r0, #0
 800d468:	dcb9      	bgt.n	800d3de <__sfvwrite_r+0x1be>
 800d46a:	e78c      	b.n	800d386 <__sfvwrite_r+0x166>
 800d46c:	e9d8 ab00 	ldrd	sl, fp, [r8]
 800d470:	2000      	movs	r0, #0
 800d472:	f108 0808 	add.w	r8, r8, #8
 800d476:	e6f2      	b.n	800d25e <__sfvwrite_r+0x3e>
 800d478:	f10b 0701 	add.w	r7, fp, #1
 800d47c:	e6ff      	b.n	800d27e <__sfvwrite_r+0x5e>
 800d47e:	4293      	cmp	r3, r2
 800d480:	dc08      	bgt.n	800d494 <__sfvwrite_r+0x274>
 800d482:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800d484:	69e1      	ldr	r1, [r4, #28]
 800d486:	4652      	mov	r2, sl
 800d488:	4630      	mov	r0, r6
 800d48a:	47a8      	blx	r5
 800d48c:	1e05      	subs	r5, r0, #0
 800d48e:	f73f af12 	bgt.w	800d2b6 <__sfvwrite_r+0x96>
 800d492:	e778      	b.n	800d386 <__sfvwrite_r+0x166>
 800d494:	4651      	mov	r1, sl
 800d496:	9201      	str	r2, [sp, #4]
 800d498:	f7fe ff6b 	bl	800c372 <memmove>
 800d49c:	9a01      	ldr	r2, [sp, #4]
 800d49e:	68a3      	ldr	r3, [r4, #8]
 800d4a0:	1a9b      	subs	r3, r3, r2
 800d4a2:	60a3      	str	r3, [r4, #8]
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	6023      	str	r3, [r4, #0]
 800d4aa:	4615      	mov	r5, r2
 800d4ac:	e703      	b.n	800d2b6 <__sfvwrite_r+0x96>
 800d4ae:	2001      	movs	r0, #1
 800d4b0:	e70a      	b.n	800d2c8 <__sfvwrite_r+0xa8>
 800d4b2:	bf00      	nop
 800d4b4:	7ffffc00 	.word	0x7ffffc00

0800d4b8 <__swsetup_r>:
 800d4b8:	b538      	push	{r3, r4, r5, lr}
 800d4ba:	4b29      	ldr	r3, [pc, #164]	@ (800d560 <__swsetup_r+0xa8>)
 800d4bc:	4605      	mov	r5, r0
 800d4be:	6818      	ldr	r0, [r3, #0]
 800d4c0:	460c      	mov	r4, r1
 800d4c2:	b118      	cbz	r0, 800d4cc <__swsetup_r+0x14>
 800d4c4:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4c6:	b90b      	cbnz	r3, 800d4cc <__swsetup_r+0x14>
 800d4c8:	f7fb fd4a 	bl	8008f60 <__sinit>
 800d4cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4d0:	0719      	lsls	r1, r3, #28
 800d4d2:	d422      	bmi.n	800d51a <__swsetup_r+0x62>
 800d4d4:	06da      	lsls	r2, r3, #27
 800d4d6:	d407      	bmi.n	800d4e8 <__swsetup_r+0x30>
 800d4d8:	2209      	movs	r2, #9
 800d4da:	602a      	str	r2, [r5, #0]
 800d4dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d4e6:	e033      	b.n	800d550 <__swsetup_r+0x98>
 800d4e8:	0758      	lsls	r0, r3, #29
 800d4ea:	d512      	bpl.n	800d512 <__swsetup_r+0x5a>
 800d4ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d4ee:	b141      	cbz	r1, 800d502 <__swsetup_r+0x4a>
 800d4f0:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 800d4f4:	4299      	cmp	r1, r3
 800d4f6:	d002      	beq.n	800d4fe <__swsetup_r+0x46>
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f7fb fead 	bl	8009258 <_free_r>
 800d4fe:	2300      	movs	r3, #0
 800d500:	6323      	str	r3, [r4, #48]	@ 0x30
 800d502:	89a3      	ldrh	r3, [r4, #12]
 800d504:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d508:	81a3      	strh	r3, [r4, #12]
 800d50a:	2300      	movs	r3, #0
 800d50c:	6063      	str	r3, [r4, #4]
 800d50e:	6923      	ldr	r3, [r4, #16]
 800d510:	6023      	str	r3, [r4, #0]
 800d512:	89a3      	ldrh	r3, [r4, #12]
 800d514:	f043 0308 	orr.w	r3, r3, #8
 800d518:	81a3      	strh	r3, [r4, #12]
 800d51a:	6923      	ldr	r3, [r4, #16]
 800d51c:	b94b      	cbnz	r3, 800d532 <__swsetup_r+0x7a>
 800d51e:	89a3      	ldrh	r3, [r4, #12]
 800d520:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d528:	d003      	beq.n	800d532 <__swsetup_r+0x7a>
 800d52a:	4621      	mov	r1, r4
 800d52c:	4628      	mov	r0, r5
 800d52e:	f000 f8c9 	bl	800d6c4 <__smakebuf_r>
 800d532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d536:	f013 0201 	ands.w	r2, r3, #1
 800d53a:	d00a      	beq.n	800d552 <__swsetup_r+0x9a>
 800d53c:	2200      	movs	r2, #0
 800d53e:	60a2      	str	r2, [r4, #8]
 800d540:	6962      	ldr	r2, [r4, #20]
 800d542:	4252      	negs	r2, r2
 800d544:	61a2      	str	r2, [r4, #24]
 800d546:	6922      	ldr	r2, [r4, #16]
 800d548:	b942      	cbnz	r2, 800d55c <__swsetup_r+0xa4>
 800d54a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d54e:	d1c5      	bne.n	800d4dc <__swsetup_r+0x24>
 800d550:	bd38      	pop	{r3, r4, r5, pc}
 800d552:	0799      	lsls	r1, r3, #30
 800d554:	bf58      	it	pl
 800d556:	6962      	ldrpl	r2, [r4, #20]
 800d558:	60a2      	str	r2, [r4, #8]
 800d55a:	e7f4      	b.n	800d546 <__swsetup_r+0x8e>
 800d55c:	2000      	movs	r0, #0
 800d55e:	e7f7      	b.n	800d550 <__swsetup_r+0x98>
 800d560:	2000010c 	.word	0x2000010c

0800d564 <__fputwc>:
 800d564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d568:	4680      	mov	r8, r0
 800d56a:	460f      	mov	r7, r1
 800d56c:	4614      	mov	r4, r2
 800d56e:	f7fe ff1b 	bl	800c3a8 <__locale_mb_cur_max>
 800d572:	2801      	cmp	r0, #1
 800d574:	4605      	mov	r5, r0
 800d576:	d11b      	bne.n	800d5b0 <__fputwc+0x4c>
 800d578:	1e7b      	subs	r3, r7, #1
 800d57a:	2bfe      	cmp	r3, #254	@ 0xfe
 800d57c:	d818      	bhi.n	800d5b0 <__fputwc+0x4c>
 800d57e:	f88d 7004 	strb.w	r7, [sp, #4]
 800d582:	2600      	movs	r6, #0
 800d584:	f10d 0904 	add.w	r9, sp, #4
 800d588:	42ae      	cmp	r6, r5
 800d58a:	d021      	beq.n	800d5d0 <__fputwc+0x6c>
 800d58c:	68a3      	ldr	r3, [r4, #8]
 800d58e:	f816 1009 	ldrb.w	r1, [r6, r9]
 800d592:	3b01      	subs	r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	60a3      	str	r3, [r4, #8]
 800d598:	da04      	bge.n	800d5a4 <__fputwc+0x40>
 800d59a:	69a2      	ldr	r2, [r4, #24]
 800d59c:	4293      	cmp	r3, r2
 800d59e:	db1b      	blt.n	800d5d8 <__fputwc+0x74>
 800d5a0:	290a      	cmp	r1, #10
 800d5a2:	d019      	beq.n	800d5d8 <__fputwc+0x74>
 800d5a4:	6823      	ldr	r3, [r4, #0]
 800d5a6:	1c5a      	adds	r2, r3, #1
 800d5a8:	6022      	str	r2, [r4, #0]
 800d5aa:	7019      	strb	r1, [r3, #0]
 800d5ac:	3601      	adds	r6, #1
 800d5ae:	e7eb      	b.n	800d588 <__fputwc+0x24>
 800d5b0:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 800d5b4:	463a      	mov	r2, r7
 800d5b6:	a901      	add	r1, sp, #4
 800d5b8:	4640      	mov	r0, r8
 800d5ba:	f000 f845 	bl	800d648 <_wcrtomb_r>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	4605      	mov	r5, r0
 800d5c2:	d1de      	bne.n	800d582 <__fputwc+0x1e>
 800d5c4:	89a3      	ldrh	r3, [r4, #12]
 800d5c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5ca:	81a3      	strh	r3, [r4, #12]
 800d5cc:	f04f 37ff 	mov.w	r7, #4294967295
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	b003      	add	sp, #12
 800d5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5d8:	4622      	mov	r2, r4
 800d5da:	4640      	mov	r0, r8
 800d5dc:	f000 f8ae 	bl	800d73c <__swbuf_r>
 800d5e0:	3001      	adds	r0, #1
 800d5e2:	d1e3      	bne.n	800d5ac <__fputwc+0x48>
 800d5e4:	e7f2      	b.n	800d5cc <__fputwc+0x68>

0800d5e6 <_fputwc_r>:
 800d5e6:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800d5e8:	07db      	lsls	r3, r3, #31
 800d5ea:	b570      	push	{r4, r5, r6, lr}
 800d5ec:	4605      	mov	r5, r0
 800d5ee:	460e      	mov	r6, r1
 800d5f0:	4614      	mov	r4, r2
 800d5f2:	d405      	bmi.n	800d600 <_fputwc_r+0x1a>
 800d5f4:	8993      	ldrh	r3, [r2, #12]
 800d5f6:	0598      	lsls	r0, r3, #22
 800d5f8:	d402      	bmi.n	800d600 <_fputwc_r+0x1a>
 800d5fa:	6d90      	ldr	r0, [r2, #88]	@ 0x58
 800d5fc:	f7fb fdc4 	bl	8009188 <__retarget_lock_acquire_recursive>
 800d600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d604:	0499      	lsls	r1, r3, #18
 800d606:	d406      	bmi.n	800d616 <_fputwc_r+0x30>
 800d608:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d60c:	81a3      	strh	r3, [r4, #12]
 800d60e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d610:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d614:	6663      	str	r3, [r4, #100]	@ 0x64
 800d616:	4622      	mov	r2, r4
 800d618:	4628      	mov	r0, r5
 800d61a:	4631      	mov	r1, r6
 800d61c:	f7ff ffa2 	bl	800d564 <__fputwc>
 800d620:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d622:	07da      	lsls	r2, r3, #31
 800d624:	4605      	mov	r5, r0
 800d626:	d405      	bmi.n	800d634 <_fputwc_r+0x4e>
 800d628:	89a3      	ldrh	r3, [r4, #12]
 800d62a:	059b      	lsls	r3, r3, #22
 800d62c:	d402      	bmi.n	800d634 <_fputwc_r+0x4e>
 800d62e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d630:	f7fb fdab 	bl	800918a <__retarget_lock_release_recursive>
 800d634:	4628      	mov	r0, r5
 800d636:	bd70      	pop	{r4, r5, r6, pc}

0800d638 <abort>:
 800d638:	b508      	push	{r3, lr}
 800d63a:	2006      	movs	r0, #6
 800d63c:	f000 f8f0 	bl	800d820 <raise>
 800d640:	2001      	movs	r0, #1
 800d642:	f7f3 ffad 	bl	80015a0 <_exit>
	...

0800d648 <_wcrtomb_r>:
 800d648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d64a:	4c09      	ldr	r4, [pc, #36]	@ (800d670 <_wcrtomb_r+0x28>)
 800d64c:	b085      	sub	sp, #20
 800d64e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	@ 0xe0
 800d652:	4605      	mov	r5, r0
 800d654:	461e      	mov	r6, r3
 800d656:	b909      	cbnz	r1, 800d65c <_wcrtomb_r+0x14>
 800d658:	460a      	mov	r2, r1
 800d65a:	a901      	add	r1, sp, #4
 800d65c:	47b8      	blx	r7
 800d65e:	1c43      	adds	r3, r0, #1
 800d660:	bf01      	itttt	eq
 800d662:	2300      	moveq	r3, #0
 800d664:	6033      	streq	r3, [r6, #0]
 800d666:	238a      	moveq	r3, #138	@ 0x8a
 800d668:	602b      	streq	r3, [r5, #0]
 800d66a:	b005      	add	sp, #20
 800d66c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d66e:	bf00      	nop
 800d670:	20000644 	.word	0x20000644

0800d674 <__swhatbuf_r>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	460c      	mov	r4, r1
 800d678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d67c:	2900      	cmp	r1, #0
 800d67e:	b096      	sub	sp, #88	@ 0x58
 800d680:	4615      	mov	r5, r2
 800d682:	461e      	mov	r6, r3
 800d684:	da07      	bge.n	800d696 <__swhatbuf_r+0x22>
 800d686:	89a1      	ldrh	r1, [r4, #12]
 800d688:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 800d68c:	d117      	bne.n	800d6be <__swhatbuf_r+0x4a>
 800d68e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d692:	4608      	mov	r0, r1
 800d694:	e00f      	b.n	800d6b6 <__swhatbuf_r+0x42>
 800d696:	466a      	mov	r2, sp
 800d698:	f000 f8ca 	bl	800d830 <_fstat_r>
 800d69c:	2800      	cmp	r0, #0
 800d69e:	dbf2      	blt.n	800d686 <__swhatbuf_r+0x12>
 800d6a0:	9901      	ldr	r1, [sp, #4]
 800d6a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d6a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d6aa:	4259      	negs	r1, r3
 800d6ac:	4159      	adcs	r1, r3
 800d6ae:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800d6b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d6b6:	6031      	str	r1, [r6, #0]
 800d6b8:	602b      	str	r3, [r5, #0]
 800d6ba:	b016      	add	sp, #88	@ 0x58
 800d6bc:	bd70      	pop	{r4, r5, r6, pc}
 800d6be:	2100      	movs	r1, #0
 800d6c0:	2340      	movs	r3, #64	@ 0x40
 800d6c2:	e7e6      	b.n	800d692 <__swhatbuf_r+0x1e>

0800d6c4 <__smakebuf_r>:
 800d6c4:	898b      	ldrh	r3, [r1, #12]
 800d6c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6c8:	079d      	lsls	r5, r3, #30
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	460c      	mov	r4, r1
 800d6ce:	d507      	bpl.n	800d6e0 <__smakebuf_r+0x1c>
 800d6d0:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 800d6d4:	6023      	str	r3, [r4, #0]
 800d6d6:	6123      	str	r3, [r4, #16]
 800d6d8:	2301      	movs	r3, #1
 800d6da:	6163      	str	r3, [r4, #20]
 800d6dc:	b003      	add	sp, #12
 800d6de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6e0:	ab01      	add	r3, sp, #4
 800d6e2:	466a      	mov	r2, sp
 800d6e4:	f7ff ffc6 	bl	800d674 <__swhatbuf_r>
 800d6e8:	9f00      	ldr	r7, [sp, #0]
 800d6ea:	4605      	mov	r5, r0
 800d6ec:	4639      	mov	r1, r7
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7fb fe72 	bl	80093d8 <_malloc_r>
 800d6f4:	b948      	cbnz	r0, 800d70a <__smakebuf_r+0x46>
 800d6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6fa:	059a      	lsls	r2, r3, #22
 800d6fc:	d4ee      	bmi.n	800d6dc <__smakebuf_r+0x18>
 800d6fe:	f023 0303 	bic.w	r3, r3, #3
 800d702:	f043 0302 	orr.w	r3, r3, #2
 800d706:	81a3      	strh	r3, [r4, #12]
 800d708:	e7e2      	b.n	800d6d0 <__smakebuf_r+0xc>
 800d70a:	89a3      	ldrh	r3, [r4, #12]
 800d70c:	6020      	str	r0, [r4, #0]
 800d70e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d712:	81a3      	strh	r3, [r4, #12]
 800d714:	9b01      	ldr	r3, [sp, #4]
 800d716:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d71a:	b15b      	cbz	r3, 800d734 <__smakebuf_r+0x70>
 800d71c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d720:	4630      	mov	r0, r6
 800d722:	f000 f897 	bl	800d854 <_isatty_r>
 800d726:	b128      	cbz	r0, 800d734 <__smakebuf_r+0x70>
 800d728:	89a3      	ldrh	r3, [r4, #12]
 800d72a:	f023 0303 	bic.w	r3, r3, #3
 800d72e:	f043 0301 	orr.w	r3, r3, #1
 800d732:	81a3      	strh	r3, [r4, #12]
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	431d      	orrs	r5, r3
 800d738:	81a5      	strh	r5, [r4, #12]
 800d73a:	e7cf      	b.n	800d6dc <__smakebuf_r+0x18>

0800d73c <__swbuf_r>:
 800d73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73e:	460e      	mov	r6, r1
 800d740:	4614      	mov	r4, r2
 800d742:	4605      	mov	r5, r0
 800d744:	b118      	cbz	r0, 800d74e <__swbuf_r+0x12>
 800d746:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d748:	b90b      	cbnz	r3, 800d74e <__swbuf_r+0x12>
 800d74a:	f7fb fc09 	bl	8008f60 <__sinit>
 800d74e:	69a3      	ldr	r3, [r4, #24]
 800d750:	60a3      	str	r3, [r4, #8]
 800d752:	89a3      	ldrh	r3, [r4, #12]
 800d754:	0719      	lsls	r1, r3, #28
 800d756:	d501      	bpl.n	800d75c <__swbuf_r+0x20>
 800d758:	6923      	ldr	r3, [r4, #16]
 800d75a:	b943      	cbnz	r3, 800d76e <__swbuf_r+0x32>
 800d75c:	4621      	mov	r1, r4
 800d75e:	4628      	mov	r0, r5
 800d760:	f7ff feaa 	bl	800d4b8 <__swsetup_r>
 800d764:	b118      	cbz	r0, 800d76e <__swbuf_r+0x32>
 800d766:	f04f 37ff 	mov.w	r7, #4294967295
 800d76a:	4638      	mov	r0, r7
 800d76c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d772:	b2f6      	uxtb	r6, r6
 800d774:	049a      	lsls	r2, r3, #18
 800d776:	4637      	mov	r7, r6
 800d778:	d406      	bmi.n	800d788 <__swbuf_r+0x4c>
 800d77a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d77e:	81a3      	strh	r3, [r4, #12]
 800d780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d782:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d786:	6663      	str	r3, [r4, #100]	@ 0x64
 800d788:	6823      	ldr	r3, [r4, #0]
 800d78a:	6922      	ldr	r2, [r4, #16]
 800d78c:	1a98      	subs	r0, r3, r2
 800d78e:	6963      	ldr	r3, [r4, #20]
 800d790:	4283      	cmp	r3, r0
 800d792:	dc05      	bgt.n	800d7a0 <__swbuf_r+0x64>
 800d794:	4621      	mov	r1, r4
 800d796:	4628      	mov	r0, r5
 800d798:	f7fd fb22 	bl	800ade0 <_fflush_r>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d1e2      	bne.n	800d766 <__swbuf_r+0x2a>
 800d7a0:	68a3      	ldr	r3, [r4, #8]
 800d7a2:	3b01      	subs	r3, #1
 800d7a4:	60a3      	str	r3, [r4, #8]
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	1c5a      	adds	r2, r3, #1
 800d7aa:	6022      	str	r2, [r4, #0]
 800d7ac:	701e      	strb	r6, [r3, #0]
 800d7ae:	6962      	ldr	r2, [r4, #20]
 800d7b0:	1c43      	adds	r3, r0, #1
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d004      	beq.n	800d7c0 <__swbuf_r+0x84>
 800d7b6:	89a3      	ldrh	r3, [r4, #12]
 800d7b8:	07db      	lsls	r3, r3, #31
 800d7ba:	d5d6      	bpl.n	800d76a <__swbuf_r+0x2e>
 800d7bc:	2e0a      	cmp	r6, #10
 800d7be:	d1d4      	bne.n	800d76a <__swbuf_r+0x2e>
 800d7c0:	4621      	mov	r1, r4
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	f7fd fb0c 	bl	800ade0 <_fflush_r>
 800d7c8:	2800      	cmp	r0, #0
 800d7ca:	d0ce      	beq.n	800d76a <__swbuf_r+0x2e>
 800d7cc:	e7cb      	b.n	800d766 <__swbuf_r+0x2a>

0800d7ce <_raise_r>:
 800d7ce:	291f      	cmp	r1, #31
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4605      	mov	r5, r0
 800d7d4:	460c      	mov	r4, r1
 800d7d6:	d904      	bls.n	800d7e2 <_raise_r+0x14>
 800d7d8:	2316      	movs	r3, #22
 800d7da:	6003      	str	r3, [r0, #0]
 800d7dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d7e0:	bd38      	pop	{r3, r4, r5, pc}
 800d7e2:	f8d0 2118 	ldr.w	r2, [r0, #280]	@ 0x118
 800d7e6:	b112      	cbz	r2, 800d7ee <_raise_r+0x20>
 800d7e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7ec:	b94b      	cbnz	r3, 800d802 <_raise_r+0x34>
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f000 f852 	bl	800d898 <_getpid_r>
 800d7f4:	4622      	mov	r2, r4
 800d7f6:	4601      	mov	r1, r0
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7fe:	f000 b839 	b.w	800d874 <_kill_r>
 800d802:	2b01      	cmp	r3, #1
 800d804:	d00a      	beq.n	800d81c <_raise_r+0x4e>
 800d806:	1c59      	adds	r1, r3, #1
 800d808:	d103      	bne.n	800d812 <_raise_r+0x44>
 800d80a:	2316      	movs	r3, #22
 800d80c:	6003      	str	r3, [r0, #0]
 800d80e:	2001      	movs	r0, #1
 800d810:	e7e6      	b.n	800d7e0 <_raise_r+0x12>
 800d812:	2100      	movs	r1, #0
 800d814:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d818:	4620      	mov	r0, r4
 800d81a:	4798      	blx	r3
 800d81c:	2000      	movs	r0, #0
 800d81e:	e7df      	b.n	800d7e0 <_raise_r+0x12>

0800d820 <raise>:
 800d820:	4b02      	ldr	r3, [pc, #8]	@ (800d82c <raise+0xc>)
 800d822:	4601      	mov	r1, r0
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	f7ff bfd2 	b.w	800d7ce <_raise_r>
 800d82a:	bf00      	nop
 800d82c:	2000010c 	.word	0x2000010c

0800d830 <_fstat_r>:
 800d830:	b538      	push	{r3, r4, r5, lr}
 800d832:	4d07      	ldr	r5, [pc, #28]	@ (800d850 <_fstat_r+0x20>)
 800d834:	2300      	movs	r3, #0
 800d836:	4604      	mov	r4, r0
 800d838:	4608      	mov	r0, r1
 800d83a:	4611      	mov	r1, r2
 800d83c:	602b      	str	r3, [r5, #0]
 800d83e:	f7f3 feff 	bl	8001640 <_fstat>
 800d842:	1c43      	adds	r3, r0, #1
 800d844:	d102      	bne.n	800d84c <_fstat_r+0x1c>
 800d846:	682b      	ldr	r3, [r5, #0]
 800d848:	b103      	cbz	r3, 800d84c <_fstat_r+0x1c>
 800d84a:	6023      	str	r3, [r4, #0]
 800d84c:	bd38      	pop	{r3, r4, r5, pc}
 800d84e:	bf00      	nop
 800d850:	200025e0 	.word	0x200025e0

0800d854 <_isatty_r>:
 800d854:	b538      	push	{r3, r4, r5, lr}
 800d856:	4d06      	ldr	r5, [pc, #24]	@ (800d870 <_isatty_r+0x1c>)
 800d858:	2300      	movs	r3, #0
 800d85a:	4604      	mov	r4, r0
 800d85c:	4608      	mov	r0, r1
 800d85e:	602b      	str	r3, [r5, #0]
 800d860:	f7f3 fefe 	bl	8001660 <_isatty>
 800d864:	1c43      	adds	r3, r0, #1
 800d866:	d102      	bne.n	800d86e <_isatty_r+0x1a>
 800d868:	682b      	ldr	r3, [r5, #0]
 800d86a:	b103      	cbz	r3, 800d86e <_isatty_r+0x1a>
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	200025e0 	.word	0x200025e0

0800d874 <_kill_r>:
 800d874:	b538      	push	{r3, r4, r5, lr}
 800d876:	4d07      	ldr	r5, [pc, #28]	@ (800d894 <_kill_r+0x20>)
 800d878:	2300      	movs	r3, #0
 800d87a:	4604      	mov	r4, r0
 800d87c:	4608      	mov	r0, r1
 800d87e:	4611      	mov	r1, r2
 800d880:	602b      	str	r3, [r5, #0]
 800d882:	f7f3 fe7d 	bl	8001580 <_kill>
 800d886:	1c43      	adds	r3, r0, #1
 800d888:	d102      	bne.n	800d890 <_kill_r+0x1c>
 800d88a:	682b      	ldr	r3, [r5, #0]
 800d88c:	b103      	cbz	r3, 800d890 <_kill_r+0x1c>
 800d88e:	6023      	str	r3, [r4, #0]
 800d890:	bd38      	pop	{r3, r4, r5, pc}
 800d892:	bf00      	nop
 800d894:	200025e0 	.word	0x200025e0

0800d898 <_getpid_r>:
 800d898:	f7f3 be6a 	b.w	8001570 <_getpid>

0800d89c <pow>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	ed2d 8b02 	vpush	{d8}
 800d8a2:	eeb0 8a40 	vmov.f32	s16, s0
 800d8a6:	eef0 8a60 	vmov.f32	s17, s1
 800d8aa:	ec55 4b11 	vmov	r4, r5, d1
 800d8ae:	f000 f873 	bl	800d998 <__ieee754_pow>
 800d8b2:	4622      	mov	r2, r4
 800d8b4:	462b      	mov	r3, r5
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	ec57 6b10 	vmov	r6, r7, d0
 800d8be:	f7f3 f93d 	bl	8000b3c <__aeabi_dcmpun>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	d13b      	bne.n	800d93e <pow+0xa2>
 800d8c6:	ec51 0b18 	vmov	r0, r1, d8
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	f7f3 f903 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8d2:	b1b8      	cbz	r0, 800d904 <pow+0x68>
 800d8d4:	2200      	movs	r2, #0
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	4620      	mov	r0, r4
 800d8da:	4629      	mov	r1, r5
 800d8dc:	f7f3 f8fc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	d146      	bne.n	800d972 <pow+0xd6>
 800d8e4:	ec45 4b10 	vmov	d0, r4, r5
 800d8e8:	f000 f848 	bl	800d97c <finite>
 800d8ec:	b338      	cbz	r0, 800d93e <pow+0xa2>
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	f7f3 f8f9 	bl	8000aec <__aeabi_dcmplt>
 800d8fa:	b300      	cbz	r0, 800d93e <pow+0xa2>
 800d8fc:	f7fb fc18 	bl	8009130 <__errno>
 800d900:	2322      	movs	r3, #34	@ 0x22
 800d902:	e01b      	b.n	800d93c <pow+0xa0>
 800d904:	ec47 6b10 	vmov	d0, r6, r7
 800d908:	f000 f838 	bl	800d97c <finite>
 800d90c:	b9e0      	cbnz	r0, 800d948 <pow+0xac>
 800d90e:	eeb0 0a48 	vmov.f32	s0, s16
 800d912:	eef0 0a68 	vmov.f32	s1, s17
 800d916:	f000 f831 	bl	800d97c <finite>
 800d91a:	b1a8      	cbz	r0, 800d948 <pow+0xac>
 800d91c:	ec45 4b10 	vmov	d0, r4, r5
 800d920:	f000 f82c 	bl	800d97c <finite>
 800d924:	b180      	cbz	r0, 800d948 <pow+0xac>
 800d926:	4632      	mov	r2, r6
 800d928:	463b      	mov	r3, r7
 800d92a:	4630      	mov	r0, r6
 800d92c:	4639      	mov	r1, r7
 800d92e:	f7f3 f905 	bl	8000b3c <__aeabi_dcmpun>
 800d932:	2800      	cmp	r0, #0
 800d934:	d0e2      	beq.n	800d8fc <pow+0x60>
 800d936:	f7fb fbfb 	bl	8009130 <__errno>
 800d93a:	2321      	movs	r3, #33	@ 0x21
 800d93c:	6003      	str	r3, [r0, #0]
 800d93e:	ecbd 8b02 	vpop	{d8}
 800d942:	ec47 6b10 	vmov	d0, r6, r7
 800d946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d948:	2200      	movs	r2, #0
 800d94a:	2300      	movs	r3, #0
 800d94c:	4630      	mov	r0, r6
 800d94e:	4639      	mov	r1, r7
 800d950:	f7f3 f8c2 	bl	8000ad8 <__aeabi_dcmpeq>
 800d954:	2800      	cmp	r0, #0
 800d956:	d0f2      	beq.n	800d93e <pow+0xa2>
 800d958:	eeb0 0a48 	vmov.f32	s0, s16
 800d95c:	eef0 0a68 	vmov.f32	s1, s17
 800d960:	f000 f80c 	bl	800d97c <finite>
 800d964:	2800      	cmp	r0, #0
 800d966:	d0ea      	beq.n	800d93e <pow+0xa2>
 800d968:	ec45 4b10 	vmov	d0, r4, r5
 800d96c:	f000 f806 	bl	800d97c <finite>
 800d970:	e7c3      	b.n	800d8fa <pow+0x5e>
 800d972:	4f01      	ldr	r7, [pc, #4]	@ (800d978 <pow+0xdc>)
 800d974:	2600      	movs	r6, #0
 800d976:	e7e2      	b.n	800d93e <pow+0xa2>
 800d978:	3ff00000 	.word	0x3ff00000

0800d97c <finite>:
 800d97c:	b082      	sub	sp, #8
 800d97e:	ed8d 0b00 	vstr	d0, [sp]
 800d982:	9801      	ldr	r0, [sp, #4]
 800d984:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d988:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d98c:	0fc0      	lsrs	r0, r0, #31
 800d98e:	b002      	add	sp, #8
 800d990:	4770      	bx	lr
 800d992:	0000      	movs	r0, r0
 800d994:	0000      	movs	r0, r0
	...

0800d998 <__ieee754_pow>:
 800d998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d99c:	b091      	sub	sp, #68	@ 0x44
 800d99e:	ed8d 1b00 	vstr	d1, [sp]
 800d9a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800d9a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800d9aa:	ea5a 0001 	orrs.w	r0, sl, r1
 800d9ae:	ec57 6b10 	vmov	r6, r7, d0
 800d9b2:	d113      	bne.n	800d9dc <__ieee754_pow+0x44>
 800d9b4:	19b3      	adds	r3, r6, r6
 800d9b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800d9ba:	4152      	adcs	r2, r2
 800d9bc:	4298      	cmp	r0, r3
 800d9be:	4b98      	ldr	r3, [pc, #608]	@ (800dc20 <__ieee754_pow+0x288>)
 800d9c0:	4193      	sbcs	r3, r2
 800d9c2:	f080 84ea 	bcs.w	800e39a <__ieee754_pow+0xa02>
 800d9c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	4639      	mov	r1, r7
 800d9ce:	f7f2 fc65 	bl	800029c <__adddf3>
 800d9d2:	ec41 0b10 	vmov	d0, r0, r1
 800d9d6:	b011      	add	sp, #68	@ 0x44
 800d9d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9dc:	4a91      	ldr	r2, [pc, #580]	@ (800dc24 <__ieee754_pow+0x28c>)
 800d9de:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d9e2:	4590      	cmp	r8, r2
 800d9e4:	463d      	mov	r5, r7
 800d9e6:	4633      	mov	r3, r6
 800d9e8:	d806      	bhi.n	800d9f8 <__ieee754_pow+0x60>
 800d9ea:	d101      	bne.n	800d9f0 <__ieee754_pow+0x58>
 800d9ec:	2e00      	cmp	r6, #0
 800d9ee:	d1ea      	bne.n	800d9c6 <__ieee754_pow+0x2e>
 800d9f0:	4592      	cmp	sl, r2
 800d9f2:	d801      	bhi.n	800d9f8 <__ieee754_pow+0x60>
 800d9f4:	d10e      	bne.n	800da14 <__ieee754_pow+0x7c>
 800d9f6:	b169      	cbz	r1, 800da14 <__ieee754_pow+0x7c>
 800d9f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800d9fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800da00:	431d      	orrs	r5, r3
 800da02:	d1e0      	bne.n	800d9c6 <__ieee754_pow+0x2e>
 800da04:	e9dd 3200 	ldrd	r3, r2, [sp]
 800da08:	18db      	adds	r3, r3, r3
 800da0a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800da0e:	4152      	adcs	r2, r2
 800da10:	429d      	cmp	r5, r3
 800da12:	e7d4      	b.n	800d9be <__ieee754_pow+0x26>
 800da14:	2d00      	cmp	r5, #0
 800da16:	46c3      	mov	fp, r8
 800da18:	da3a      	bge.n	800da90 <__ieee754_pow+0xf8>
 800da1a:	4a83      	ldr	r2, [pc, #524]	@ (800dc28 <__ieee754_pow+0x290>)
 800da1c:	4592      	cmp	sl, r2
 800da1e:	d84d      	bhi.n	800dabc <__ieee754_pow+0x124>
 800da20:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800da24:	4592      	cmp	sl, r2
 800da26:	f240 84c7 	bls.w	800e3b8 <__ieee754_pow+0xa20>
 800da2a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800da2e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800da32:	2a14      	cmp	r2, #20
 800da34:	dd0f      	ble.n	800da56 <__ieee754_pow+0xbe>
 800da36:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800da3a:	fa21 f402 	lsr.w	r4, r1, r2
 800da3e:	fa04 f202 	lsl.w	r2, r4, r2
 800da42:	428a      	cmp	r2, r1
 800da44:	f040 84b8 	bne.w	800e3b8 <__ieee754_pow+0xa20>
 800da48:	f004 0401 	and.w	r4, r4, #1
 800da4c:	f1c4 0402 	rsb	r4, r4, #2
 800da50:	2900      	cmp	r1, #0
 800da52:	d158      	bne.n	800db06 <__ieee754_pow+0x16e>
 800da54:	e00e      	b.n	800da74 <__ieee754_pow+0xdc>
 800da56:	2900      	cmp	r1, #0
 800da58:	d154      	bne.n	800db04 <__ieee754_pow+0x16c>
 800da5a:	f1c2 0214 	rsb	r2, r2, #20
 800da5e:	fa4a f402 	asr.w	r4, sl, r2
 800da62:	fa04 f202 	lsl.w	r2, r4, r2
 800da66:	4552      	cmp	r2, sl
 800da68:	f040 84a3 	bne.w	800e3b2 <__ieee754_pow+0xa1a>
 800da6c:	f004 0401 	and.w	r4, r4, #1
 800da70:	f1c4 0402 	rsb	r4, r4, #2
 800da74:	4a6d      	ldr	r2, [pc, #436]	@ (800dc2c <__ieee754_pow+0x294>)
 800da76:	4592      	cmp	sl, r2
 800da78:	d12e      	bne.n	800dad8 <__ieee754_pow+0x140>
 800da7a:	f1b9 0f00 	cmp.w	r9, #0
 800da7e:	f280 8494 	bge.w	800e3aa <__ieee754_pow+0xa12>
 800da82:	496a      	ldr	r1, [pc, #424]	@ (800dc2c <__ieee754_pow+0x294>)
 800da84:	4632      	mov	r2, r6
 800da86:	463b      	mov	r3, r7
 800da88:	2000      	movs	r0, #0
 800da8a:	f7f2 fee7 	bl	800085c <__aeabi_ddiv>
 800da8e:	e7a0      	b.n	800d9d2 <__ieee754_pow+0x3a>
 800da90:	2400      	movs	r4, #0
 800da92:	bbc1      	cbnz	r1, 800db06 <__ieee754_pow+0x16e>
 800da94:	4a63      	ldr	r2, [pc, #396]	@ (800dc24 <__ieee754_pow+0x28c>)
 800da96:	4592      	cmp	sl, r2
 800da98:	d1ec      	bne.n	800da74 <__ieee754_pow+0xdc>
 800da9a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800da9e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800daa2:	431a      	orrs	r2, r3
 800daa4:	f000 8479 	beq.w	800e39a <__ieee754_pow+0xa02>
 800daa8:	4b61      	ldr	r3, [pc, #388]	@ (800dc30 <__ieee754_pow+0x298>)
 800daaa:	4598      	cmp	r8, r3
 800daac:	d908      	bls.n	800dac0 <__ieee754_pow+0x128>
 800daae:	f1b9 0f00 	cmp.w	r9, #0
 800dab2:	f2c0 8476 	blt.w	800e3a2 <__ieee754_pow+0xa0a>
 800dab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daba:	e78a      	b.n	800d9d2 <__ieee754_pow+0x3a>
 800dabc:	2402      	movs	r4, #2
 800dabe:	e7e8      	b.n	800da92 <__ieee754_pow+0xfa>
 800dac0:	f1b9 0f00 	cmp.w	r9, #0
 800dac4:	f04f 0000 	mov.w	r0, #0
 800dac8:	f04f 0100 	mov.w	r1, #0
 800dacc:	da81      	bge.n	800d9d2 <__ieee754_pow+0x3a>
 800dace:	e9dd 0300 	ldrd	r0, r3, [sp]
 800dad2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800dad6:	e77c      	b.n	800d9d2 <__ieee754_pow+0x3a>
 800dad8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800dadc:	d106      	bne.n	800daec <__ieee754_pow+0x154>
 800dade:	4632      	mov	r2, r6
 800dae0:	463b      	mov	r3, r7
 800dae2:	4630      	mov	r0, r6
 800dae4:	4639      	mov	r1, r7
 800dae6:	f7f2 fd8f 	bl	8000608 <__aeabi_dmul>
 800daea:	e772      	b.n	800d9d2 <__ieee754_pow+0x3a>
 800daec:	4a51      	ldr	r2, [pc, #324]	@ (800dc34 <__ieee754_pow+0x29c>)
 800daee:	4591      	cmp	r9, r2
 800daf0:	d109      	bne.n	800db06 <__ieee754_pow+0x16e>
 800daf2:	2d00      	cmp	r5, #0
 800daf4:	db07      	blt.n	800db06 <__ieee754_pow+0x16e>
 800daf6:	ec47 6b10 	vmov	d0, r6, r7
 800dafa:	b011      	add	sp, #68	@ 0x44
 800dafc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db00:	f000 bd52 	b.w	800e5a8 <__ieee754_sqrt>
 800db04:	2400      	movs	r4, #0
 800db06:	ec47 6b10 	vmov	d0, r6, r7
 800db0a:	9302      	str	r3, [sp, #8]
 800db0c:	f000 fc88 	bl	800e420 <fabs>
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	ec51 0b10 	vmov	r0, r1, d0
 800db16:	bb53      	cbnz	r3, 800db6e <__ieee754_pow+0x1d6>
 800db18:	4b44      	ldr	r3, [pc, #272]	@ (800dc2c <__ieee754_pow+0x294>)
 800db1a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800db1e:	429a      	cmp	r2, r3
 800db20:	d002      	beq.n	800db28 <__ieee754_pow+0x190>
 800db22:	f1b8 0f00 	cmp.w	r8, #0
 800db26:	d122      	bne.n	800db6e <__ieee754_pow+0x1d6>
 800db28:	f1b9 0f00 	cmp.w	r9, #0
 800db2c:	da05      	bge.n	800db3a <__ieee754_pow+0x1a2>
 800db2e:	4602      	mov	r2, r0
 800db30:	460b      	mov	r3, r1
 800db32:	2000      	movs	r0, #0
 800db34:	493d      	ldr	r1, [pc, #244]	@ (800dc2c <__ieee754_pow+0x294>)
 800db36:	f7f2 fe91 	bl	800085c <__aeabi_ddiv>
 800db3a:	2d00      	cmp	r5, #0
 800db3c:	f6bf af49 	bge.w	800d9d2 <__ieee754_pow+0x3a>
 800db40:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800db44:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800db48:	ea58 0804 	orrs.w	r8, r8, r4
 800db4c:	d108      	bne.n	800db60 <__ieee754_pow+0x1c8>
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	4610      	mov	r0, r2
 800db54:	4619      	mov	r1, r3
 800db56:	f7f2 fb9f 	bl	8000298 <__aeabi_dsub>
 800db5a:	4602      	mov	r2, r0
 800db5c:	460b      	mov	r3, r1
 800db5e:	e794      	b.n	800da8a <__ieee754_pow+0xf2>
 800db60:	2c01      	cmp	r4, #1
 800db62:	f47f af36 	bne.w	800d9d2 <__ieee754_pow+0x3a>
 800db66:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800db6a:	4619      	mov	r1, r3
 800db6c:	e731      	b.n	800d9d2 <__ieee754_pow+0x3a>
 800db6e:	0feb      	lsrs	r3, r5, #31
 800db70:	3b01      	subs	r3, #1
 800db72:	ea53 0204 	orrs.w	r2, r3, r4
 800db76:	d102      	bne.n	800db7e <__ieee754_pow+0x1e6>
 800db78:	4632      	mov	r2, r6
 800db7a:	463b      	mov	r3, r7
 800db7c:	e7e9      	b.n	800db52 <__ieee754_pow+0x1ba>
 800db7e:	3c01      	subs	r4, #1
 800db80:	431c      	orrs	r4, r3
 800db82:	d016      	beq.n	800dbb2 <__ieee754_pow+0x21a>
 800db84:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800dc10 <__ieee754_pow+0x278>
 800db88:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800db8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db90:	f240 8112 	bls.w	800ddb8 <__ieee754_pow+0x420>
 800db94:	4b28      	ldr	r3, [pc, #160]	@ (800dc38 <__ieee754_pow+0x2a0>)
 800db96:	459a      	cmp	sl, r3
 800db98:	4b25      	ldr	r3, [pc, #148]	@ (800dc30 <__ieee754_pow+0x298>)
 800db9a:	d916      	bls.n	800dbca <__ieee754_pow+0x232>
 800db9c:	4598      	cmp	r8, r3
 800db9e:	d80b      	bhi.n	800dbb8 <__ieee754_pow+0x220>
 800dba0:	f1b9 0f00 	cmp.w	r9, #0
 800dba4:	da0b      	bge.n	800dbbe <__ieee754_pow+0x226>
 800dba6:	2000      	movs	r0, #0
 800dba8:	b011      	add	sp, #68	@ 0x44
 800dbaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbae:	f000 bcf3 	b.w	800e598 <__math_oflow>
 800dbb2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800dc18 <__ieee754_pow+0x280>
 800dbb6:	e7e7      	b.n	800db88 <__ieee754_pow+0x1f0>
 800dbb8:	f1b9 0f00 	cmp.w	r9, #0
 800dbbc:	dcf3      	bgt.n	800dba6 <__ieee754_pow+0x20e>
 800dbbe:	2000      	movs	r0, #0
 800dbc0:	b011      	add	sp, #68	@ 0x44
 800dbc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbc6:	f000 bcdf 	b.w	800e588 <__math_uflow>
 800dbca:	4598      	cmp	r8, r3
 800dbcc:	d20c      	bcs.n	800dbe8 <__ieee754_pow+0x250>
 800dbce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f7f2 ff89 	bl	8000aec <__aeabi_dcmplt>
 800dbda:	3800      	subs	r0, #0
 800dbdc:	bf18      	it	ne
 800dbde:	2001      	movne	r0, #1
 800dbe0:	f1b9 0f00 	cmp.w	r9, #0
 800dbe4:	daec      	bge.n	800dbc0 <__ieee754_pow+0x228>
 800dbe6:	e7df      	b.n	800dba8 <__ieee754_pow+0x210>
 800dbe8:	4b10      	ldr	r3, [pc, #64]	@ (800dc2c <__ieee754_pow+0x294>)
 800dbea:	4598      	cmp	r8, r3
 800dbec:	f04f 0200 	mov.w	r2, #0
 800dbf0:	d924      	bls.n	800dc3c <__ieee754_pow+0x2a4>
 800dbf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f7f2 ff78 	bl	8000aec <__aeabi_dcmplt>
 800dbfc:	3800      	subs	r0, #0
 800dbfe:	bf18      	it	ne
 800dc00:	2001      	movne	r0, #1
 800dc02:	f1b9 0f00 	cmp.w	r9, #0
 800dc06:	dccf      	bgt.n	800dba8 <__ieee754_pow+0x210>
 800dc08:	e7da      	b.n	800dbc0 <__ieee754_pow+0x228>
 800dc0a:	bf00      	nop
 800dc0c:	f3af 8000 	nop.w
 800dc10:	00000000 	.word	0x00000000
 800dc14:	3ff00000 	.word	0x3ff00000
 800dc18:	00000000 	.word	0x00000000
 800dc1c:	bff00000 	.word	0xbff00000
 800dc20:	fff00000 	.word	0xfff00000
 800dc24:	7ff00000 	.word	0x7ff00000
 800dc28:	433fffff 	.word	0x433fffff
 800dc2c:	3ff00000 	.word	0x3ff00000
 800dc30:	3fefffff 	.word	0x3fefffff
 800dc34:	3fe00000 	.word	0x3fe00000
 800dc38:	43f00000 	.word	0x43f00000
 800dc3c:	4b5a      	ldr	r3, [pc, #360]	@ (800dda8 <__ieee754_pow+0x410>)
 800dc3e:	f7f2 fb2b 	bl	8000298 <__aeabi_dsub>
 800dc42:	a351      	add	r3, pc, #324	@ (adr r3, 800dd88 <__ieee754_pow+0x3f0>)
 800dc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc48:	4604      	mov	r4, r0
 800dc4a:	460d      	mov	r5, r1
 800dc4c:	f7f2 fcdc 	bl	8000608 <__aeabi_dmul>
 800dc50:	a34f      	add	r3, pc, #316	@ (adr r3, 800dd90 <__ieee754_pow+0x3f8>)
 800dc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc56:	4606      	mov	r6, r0
 800dc58:	460f      	mov	r7, r1
 800dc5a:	4620      	mov	r0, r4
 800dc5c:	4629      	mov	r1, r5
 800dc5e:	f7f2 fcd3 	bl	8000608 <__aeabi_dmul>
 800dc62:	4b52      	ldr	r3, [pc, #328]	@ (800ddac <__ieee754_pow+0x414>)
 800dc64:	4682      	mov	sl, r0
 800dc66:	468b      	mov	fp, r1
 800dc68:	2200      	movs	r2, #0
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	f7f2 fccb 	bl	8000608 <__aeabi_dmul>
 800dc72:	4602      	mov	r2, r0
 800dc74:	460b      	mov	r3, r1
 800dc76:	a148      	add	r1, pc, #288	@ (adr r1, 800dd98 <__ieee754_pow+0x400>)
 800dc78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc7c:	f7f2 fb0c 	bl	8000298 <__aeabi_dsub>
 800dc80:	4622      	mov	r2, r4
 800dc82:	462b      	mov	r3, r5
 800dc84:	f7f2 fcc0 	bl	8000608 <__aeabi_dmul>
 800dc88:	4602      	mov	r2, r0
 800dc8a:	460b      	mov	r3, r1
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	4948      	ldr	r1, [pc, #288]	@ (800ddb0 <__ieee754_pow+0x418>)
 800dc90:	f7f2 fb02 	bl	8000298 <__aeabi_dsub>
 800dc94:	4622      	mov	r2, r4
 800dc96:	4680      	mov	r8, r0
 800dc98:	4689      	mov	r9, r1
 800dc9a:	462b      	mov	r3, r5
 800dc9c:	4620      	mov	r0, r4
 800dc9e:	4629      	mov	r1, r5
 800dca0:	f7f2 fcb2 	bl	8000608 <__aeabi_dmul>
 800dca4:	4602      	mov	r2, r0
 800dca6:	460b      	mov	r3, r1
 800dca8:	4640      	mov	r0, r8
 800dcaa:	4649      	mov	r1, r9
 800dcac:	f7f2 fcac 	bl	8000608 <__aeabi_dmul>
 800dcb0:	a33b      	add	r3, pc, #236	@ (adr r3, 800dda0 <__ieee754_pow+0x408>)
 800dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb6:	f7f2 fca7 	bl	8000608 <__aeabi_dmul>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	460b      	mov	r3, r1
 800dcbe:	4650      	mov	r0, sl
 800dcc0:	4659      	mov	r1, fp
 800dcc2:	f7f2 fae9 	bl	8000298 <__aeabi_dsub>
 800dcc6:	4602      	mov	r2, r0
 800dcc8:	460b      	mov	r3, r1
 800dcca:	4680      	mov	r8, r0
 800dccc:	4689      	mov	r9, r1
 800dcce:	4630      	mov	r0, r6
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	f7f2 fae3 	bl	800029c <__adddf3>
 800dcd6:	2400      	movs	r4, #0
 800dcd8:	4632      	mov	r2, r6
 800dcda:	463b      	mov	r3, r7
 800dcdc:	4620      	mov	r0, r4
 800dcde:	460d      	mov	r5, r1
 800dce0:	f7f2 fada 	bl	8000298 <__aeabi_dsub>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	4640      	mov	r0, r8
 800dcea:	4649      	mov	r1, r9
 800dcec:	f7f2 fad4 	bl	8000298 <__aeabi_dsub>
 800dcf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	9304      	str	r3, [sp, #16]
 800dcfc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dd00:	4606      	mov	r6, r0
 800dd02:	460f      	mov	r7, r1
 800dd04:	4652      	mov	r2, sl
 800dd06:	465b      	mov	r3, fp
 800dd08:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd0c:	f7f2 fac4 	bl	8000298 <__aeabi_dsub>
 800dd10:	4622      	mov	r2, r4
 800dd12:	462b      	mov	r3, r5
 800dd14:	f7f2 fc78 	bl	8000608 <__aeabi_dmul>
 800dd18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd1c:	4680      	mov	r8, r0
 800dd1e:	4689      	mov	r9, r1
 800dd20:	4630      	mov	r0, r6
 800dd22:	4639      	mov	r1, r7
 800dd24:	f7f2 fc70 	bl	8000608 <__aeabi_dmul>
 800dd28:	4602      	mov	r2, r0
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	4649      	mov	r1, r9
 800dd30:	f7f2 fab4 	bl	800029c <__adddf3>
 800dd34:	4652      	mov	r2, sl
 800dd36:	465b      	mov	r3, fp
 800dd38:	4606      	mov	r6, r0
 800dd3a:	460f      	mov	r7, r1
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	4629      	mov	r1, r5
 800dd40:	f7f2 fc62 	bl	8000608 <__aeabi_dmul>
 800dd44:	460b      	mov	r3, r1
 800dd46:	4602      	mov	r2, r0
 800dd48:	4680      	mov	r8, r0
 800dd4a:	4689      	mov	r9, r1
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	4639      	mov	r1, r7
 800dd50:	f7f2 faa4 	bl	800029c <__adddf3>
 800dd54:	4b17      	ldr	r3, [pc, #92]	@ (800ddb4 <__ieee754_pow+0x41c>)
 800dd56:	4299      	cmp	r1, r3
 800dd58:	4604      	mov	r4, r0
 800dd5a:	460d      	mov	r5, r1
 800dd5c:	468a      	mov	sl, r1
 800dd5e:	468b      	mov	fp, r1
 800dd60:	f340 82ef 	ble.w	800e342 <__ieee754_pow+0x9aa>
 800dd64:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800dd68:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800dd6c:	4303      	orrs	r3, r0
 800dd6e:	f000 81e8 	beq.w	800e142 <__ieee754_pow+0x7aa>
 800dd72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd76:	2200      	movs	r2, #0
 800dd78:	2300      	movs	r3, #0
 800dd7a:	f7f2 feb7 	bl	8000aec <__aeabi_dcmplt>
 800dd7e:	3800      	subs	r0, #0
 800dd80:	bf18      	it	ne
 800dd82:	2001      	movne	r0, #1
 800dd84:	e710      	b.n	800dba8 <__ieee754_pow+0x210>
 800dd86:	bf00      	nop
 800dd88:	60000000 	.word	0x60000000
 800dd8c:	3ff71547 	.word	0x3ff71547
 800dd90:	f85ddf44 	.word	0xf85ddf44
 800dd94:	3e54ae0b 	.word	0x3e54ae0b
 800dd98:	55555555 	.word	0x55555555
 800dd9c:	3fd55555 	.word	0x3fd55555
 800dda0:	652b82fe 	.word	0x652b82fe
 800dda4:	3ff71547 	.word	0x3ff71547
 800dda8:	3ff00000 	.word	0x3ff00000
 800ddac:	3fd00000 	.word	0x3fd00000
 800ddb0:	3fe00000 	.word	0x3fe00000
 800ddb4:	408fffff 	.word	0x408fffff
 800ddb8:	4bd5      	ldr	r3, [pc, #852]	@ (800e110 <__ieee754_pow+0x778>)
 800ddba:	402b      	ands	r3, r5
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	b92b      	cbnz	r3, 800ddcc <__ieee754_pow+0x434>
 800ddc0:	4bd4      	ldr	r3, [pc, #848]	@ (800e114 <__ieee754_pow+0x77c>)
 800ddc2:	f7f2 fc21 	bl	8000608 <__aeabi_dmul>
 800ddc6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ddca:	468b      	mov	fp, r1
 800ddcc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ddd0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ddd4:	4413      	add	r3, r2
 800ddd6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddd8:	4bcf      	ldr	r3, [pc, #828]	@ (800e118 <__ieee754_pow+0x780>)
 800ddda:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ddde:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800dde2:	459b      	cmp	fp, r3
 800dde4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dde8:	dd08      	ble.n	800ddfc <__ieee754_pow+0x464>
 800ddea:	4bcc      	ldr	r3, [pc, #816]	@ (800e11c <__ieee754_pow+0x784>)
 800ddec:	459b      	cmp	fp, r3
 800ddee:	f340 81a5 	ble.w	800e13c <__ieee754_pow+0x7a4>
 800ddf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddf8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ddfc:	f04f 0a00 	mov.w	sl, #0
 800de00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800de04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de06:	4bc6      	ldr	r3, [pc, #792]	@ (800e120 <__ieee754_pow+0x788>)
 800de08:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de0c:	ed93 7b00 	vldr	d7, [r3]
 800de10:	4629      	mov	r1, r5
 800de12:	ec53 2b17 	vmov	r2, r3, d7
 800de16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800de1a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de1e:	f7f2 fa3b 	bl	8000298 <__aeabi_dsub>
 800de22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800de26:	4606      	mov	r6, r0
 800de28:	460f      	mov	r7, r1
 800de2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de2e:	f7f2 fa35 	bl	800029c <__adddf3>
 800de32:	4602      	mov	r2, r0
 800de34:	460b      	mov	r3, r1
 800de36:	2000      	movs	r0, #0
 800de38:	49ba      	ldr	r1, [pc, #744]	@ (800e124 <__ieee754_pow+0x78c>)
 800de3a:	f7f2 fd0f 	bl	800085c <__aeabi_ddiv>
 800de3e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800de42:	4602      	mov	r2, r0
 800de44:	460b      	mov	r3, r1
 800de46:	4630      	mov	r0, r6
 800de48:	4639      	mov	r1, r7
 800de4a:	f7f2 fbdd 	bl	8000608 <__aeabi_dmul>
 800de4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800de52:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800de56:	106d      	asrs	r5, r5, #1
 800de58:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800de5c:	f04f 0b00 	mov.w	fp, #0
 800de60:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800de64:	4661      	mov	r1, ip
 800de66:	2200      	movs	r2, #0
 800de68:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800de6c:	4658      	mov	r0, fp
 800de6e:	46e1      	mov	r9, ip
 800de70:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800de74:	4614      	mov	r4, r2
 800de76:	461d      	mov	r5, r3
 800de78:	f7f2 fbc6 	bl	8000608 <__aeabi_dmul>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	4630      	mov	r0, r6
 800de82:	4639      	mov	r1, r7
 800de84:	f7f2 fa08 	bl	8000298 <__aeabi_dsub>
 800de88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de8c:	4606      	mov	r6, r0
 800de8e:	460f      	mov	r7, r1
 800de90:	4620      	mov	r0, r4
 800de92:	4629      	mov	r1, r5
 800de94:	f7f2 fa00 	bl	8000298 <__aeabi_dsub>
 800de98:	4602      	mov	r2, r0
 800de9a:	460b      	mov	r3, r1
 800de9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dea0:	f7f2 f9fa 	bl	8000298 <__aeabi_dsub>
 800dea4:	465a      	mov	r2, fp
 800dea6:	464b      	mov	r3, r9
 800dea8:	f7f2 fbae 	bl	8000608 <__aeabi_dmul>
 800deac:	4602      	mov	r2, r0
 800deae:	460b      	mov	r3, r1
 800deb0:	4630      	mov	r0, r6
 800deb2:	4639      	mov	r1, r7
 800deb4:	f7f2 f9f0 	bl	8000298 <__aeabi_dsub>
 800deb8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800debc:	f7f2 fba4 	bl	8000608 <__aeabi_dmul>
 800dec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dec4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dec8:	4610      	mov	r0, r2
 800deca:	4619      	mov	r1, r3
 800decc:	f7f2 fb9c 	bl	8000608 <__aeabi_dmul>
 800ded0:	a37d      	add	r3, pc, #500	@ (adr r3, 800e0c8 <__ieee754_pow+0x730>)
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	4604      	mov	r4, r0
 800ded8:	460d      	mov	r5, r1
 800deda:	f7f2 fb95 	bl	8000608 <__aeabi_dmul>
 800dede:	a37c      	add	r3, pc, #496	@ (adr r3, 800e0d0 <__ieee754_pow+0x738>)
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	f7f2 f9da 	bl	800029c <__adddf3>
 800dee8:	4622      	mov	r2, r4
 800deea:	462b      	mov	r3, r5
 800deec:	f7f2 fb8c 	bl	8000608 <__aeabi_dmul>
 800def0:	a379      	add	r3, pc, #484	@ (adr r3, 800e0d8 <__ieee754_pow+0x740>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f7f2 f9d1 	bl	800029c <__adddf3>
 800defa:	4622      	mov	r2, r4
 800defc:	462b      	mov	r3, r5
 800defe:	f7f2 fb83 	bl	8000608 <__aeabi_dmul>
 800df02:	a377      	add	r3, pc, #476	@ (adr r3, 800e0e0 <__ieee754_pow+0x748>)
 800df04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df08:	f7f2 f9c8 	bl	800029c <__adddf3>
 800df0c:	4622      	mov	r2, r4
 800df0e:	462b      	mov	r3, r5
 800df10:	f7f2 fb7a 	bl	8000608 <__aeabi_dmul>
 800df14:	a374      	add	r3, pc, #464	@ (adr r3, 800e0e8 <__ieee754_pow+0x750>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	f7f2 f9bf 	bl	800029c <__adddf3>
 800df1e:	4622      	mov	r2, r4
 800df20:	462b      	mov	r3, r5
 800df22:	f7f2 fb71 	bl	8000608 <__aeabi_dmul>
 800df26:	a372      	add	r3, pc, #456	@ (adr r3, 800e0f0 <__ieee754_pow+0x758>)
 800df28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2c:	f7f2 f9b6 	bl	800029c <__adddf3>
 800df30:	4622      	mov	r2, r4
 800df32:	4606      	mov	r6, r0
 800df34:	460f      	mov	r7, r1
 800df36:	462b      	mov	r3, r5
 800df38:	4620      	mov	r0, r4
 800df3a:	4629      	mov	r1, r5
 800df3c:	f7f2 fb64 	bl	8000608 <__aeabi_dmul>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4630      	mov	r0, r6
 800df46:	4639      	mov	r1, r7
 800df48:	f7f2 fb5e 	bl	8000608 <__aeabi_dmul>
 800df4c:	465a      	mov	r2, fp
 800df4e:	4604      	mov	r4, r0
 800df50:	460d      	mov	r5, r1
 800df52:	464b      	mov	r3, r9
 800df54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df58:	f7f2 f9a0 	bl	800029c <__adddf3>
 800df5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df60:	f7f2 fb52 	bl	8000608 <__aeabi_dmul>
 800df64:	4622      	mov	r2, r4
 800df66:	462b      	mov	r3, r5
 800df68:	f7f2 f998 	bl	800029c <__adddf3>
 800df6c:	465a      	mov	r2, fp
 800df6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df72:	464b      	mov	r3, r9
 800df74:	4658      	mov	r0, fp
 800df76:	4649      	mov	r1, r9
 800df78:	f7f2 fb46 	bl	8000608 <__aeabi_dmul>
 800df7c:	4b6a      	ldr	r3, [pc, #424]	@ (800e128 <__ieee754_pow+0x790>)
 800df7e:	2200      	movs	r2, #0
 800df80:	4606      	mov	r6, r0
 800df82:	460f      	mov	r7, r1
 800df84:	f7f2 f98a 	bl	800029c <__adddf3>
 800df88:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800df8c:	f7f2 f986 	bl	800029c <__adddf3>
 800df90:	46d8      	mov	r8, fp
 800df92:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800df96:	460d      	mov	r5, r1
 800df98:	465a      	mov	r2, fp
 800df9a:	460b      	mov	r3, r1
 800df9c:	4640      	mov	r0, r8
 800df9e:	4649      	mov	r1, r9
 800dfa0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800dfa4:	f7f2 fb30 	bl	8000608 <__aeabi_dmul>
 800dfa8:	465c      	mov	r4, fp
 800dfaa:	4680      	mov	r8, r0
 800dfac:	4689      	mov	r9, r1
 800dfae:	4b5e      	ldr	r3, [pc, #376]	@ (800e128 <__ieee754_pow+0x790>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	f7f2 f96f 	bl	8000298 <__aeabi_dsub>
 800dfba:	4632      	mov	r2, r6
 800dfbc:	463b      	mov	r3, r7
 800dfbe:	f7f2 f96b 	bl	8000298 <__aeabi_dsub>
 800dfc2:	4602      	mov	r2, r0
 800dfc4:	460b      	mov	r3, r1
 800dfc6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dfca:	f7f2 f965 	bl	8000298 <__aeabi_dsub>
 800dfce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfd2:	f7f2 fb19 	bl	8000608 <__aeabi_dmul>
 800dfd6:	4622      	mov	r2, r4
 800dfd8:	4606      	mov	r6, r0
 800dfda:	460f      	mov	r7, r1
 800dfdc:	462b      	mov	r3, r5
 800dfde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfe2:	f7f2 fb11 	bl	8000608 <__aeabi_dmul>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4630      	mov	r0, r6
 800dfec:	4639      	mov	r1, r7
 800dfee:	f7f2 f955 	bl	800029c <__adddf3>
 800dff2:	4606      	mov	r6, r0
 800dff4:	460f      	mov	r7, r1
 800dff6:	4602      	mov	r2, r0
 800dff8:	460b      	mov	r3, r1
 800dffa:	4640      	mov	r0, r8
 800dffc:	4649      	mov	r1, r9
 800dffe:	f7f2 f94d 	bl	800029c <__adddf3>
 800e002:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e006:	a33c      	add	r3, pc, #240	@ (adr r3, 800e0f8 <__ieee754_pow+0x760>)
 800e008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00c:	4658      	mov	r0, fp
 800e00e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e012:	460d      	mov	r5, r1
 800e014:	f7f2 faf8 	bl	8000608 <__aeabi_dmul>
 800e018:	465c      	mov	r4, fp
 800e01a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e01e:	4642      	mov	r2, r8
 800e020:	464b      	mov	r3, r9
 800e022:	4620      	mov	r0, r4
 800e024:	4629      	mov	r1, r5
 800e026:	f7f2 f937 	bl	8000298 <__aeabi_dsub>
 800e02a:	4602      	mov	r2, r0
 800e02c:	460b      	mov	r3, r1
 800e02e:	4630      	mov	r0, r6
 800e030:	4639      	mov	r1, r7
 800e032:	f7f2 f931 	bl	8000298 <__aeabi_dsub>
 800e036:	a332      	add	r3, pc, #200	@ (adr r3, 800e100 <__ieee754_pow+0x768>)
 800e038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03c:	f7f2 fae4 	bl	8000608 <__aeabi_dmul>
 800e040:	a331      	add	r3, pc, #196	@ (adr r3, 800e108 <__ieee754_pow+0x770>)
 800e042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e046:	4606      	mov	r6, r0
 800e048:	460f      	mov	r7, r1
 800e04a:	4620      	mov	r0, r4
 800e04c:	4629      	mov	r1, r5
 800e04e:	f7f2 fadb 	bl	8000608 <__aeabi_dmul>
 800e052:	4602      	mov	r2, r0
 800e054:	460b      	mov	r3, r1
 800e056:	4630      	mov	r0, r6
 800e058:	4639      	mov	r1, r7
 800e05a:	f7f2 f91f 	bl	800029c <__adddf3>
 800e05e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e060:	4b32      	ldr	r3, [pc, #200]	@ (800e12c <__ieee754_pow+0x794>)
 800e062:	4413      	add	r3, r2
 800e064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e068:	f7f2 f918 	bl	800029c <__adddf3>
 800e06c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e070:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e072:	f7f2 fa5f 	bl	8000534 <__aeabi_i2d>
 800e076:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e078:	4b2d      	ldr	r3, [pc, #180]	@ (800e130 <__ieee754_pow+0x798>)
 800e07a:	4413      	add	r3, r2
 800e07c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e080:	4606      	mov	r6, r0
 800e082:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e086:	460f      	mov	r7, r1
 800e088:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e08c:	f7f2 f906 	bl	800029c <__adddf3>
 800e090:	4642      	mov	r2, r8
 800e092:	464b      	mov	r3, r9
 800e094:	f7f2 f902 	bl	800029c <__adddf3>
 800e098:	4632      	mov	r2, r6
 800e09a:	463b      	mov	r3, r7
 800e09c:	f7f2 f8fe 	bl	800029c <__adddf3>
 800e0a0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e0a4:	4632      	mov	r2, r6
 800e0a6:	463b      	mov	r3, r7
 800e0a8:	4658      	mov	r0, fp
 800e0aa:	460d      	mov	r5, r1
 800e0ac:	f7f2 f8f4 	bl	8000298 <__aeabi_dsub>
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	464b      	mov	r3, r9
 800e0b4:	f7f2 f8f0 	bl	8000298 <__aeabi_dsub>
 800e0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e0bc:	f7f2 f8ec 	bl	8000298 <__aeabi_dsub>
 800e0c0:	465c      	mov	r4, fp
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	e036      	b.n	800e134 <__ieee754_pow+0x79c>
 800e0c6:	bf00      	nop
 800e0c8:	4a454eef 	.word	0x4a454eef
 800e0cc:	3fca7e28 	.word	0x3fca7e28
 800e0d0:	93c9db65 	.word	0x93c9db65
 800e0d4:	3fcd864a 	.word	0x3fcd864a
 800e0d8:	a91d4101 	.word	0xa91d4101
 800e0dc:	3fd17460 	.word	0x3fd17460
 800e0e0:	518f264d 	.word	0x518f264d
 800e0e4:	3fd55555 	.word	0x3fd55555
 800e0e8:	db6fabff 	.word	0xdb6fabff
 800e0ec:	3fdb6db6 	.word	0x3fdb6db6
 800e0f0:	33333303 	.word	0x33333303
 800e0f4:	3fe33333 	.word	0x3fe33333
 800e0f8:	e0000000 	.word	0xe0000000
 800e0fc:	3feec709 	.word	0x3feec709
 800e100:	dc3a03fd 	.word	0xdc3a03fd
 800e104:	3feec709 	.word	0x3feec709
 800e108:	145b01f5 	.word	0x145b01f5
 800e10c:	be3e2fe0 	.word	0xbe3e2fe0
 800e110:	7ff00000 	.word	0x7ff00000
 800e114:	43400000 	.word	0x43400000
 800e118:	0003988e 	.word	0x0003988e
 800e11c:	000bb679 	.word	0x000bb679
 800e120:	0800ebc0 	.word	0x0800ebc0
 800e124:	3ff00000 	.word	0x3ff00000
 800e128:	40080000 	.word	0x40080000
 800e12c:	0800eba0 	.word	0x0800eba0
 800e130:	0800ebb0 	.word	0x0800ebb0
 800e134:	460b      	mov	r3, r1
 800e136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e13a:	e5d7      	b.n	800dcec <__ieee754_pow+0x354>
 800e13c:	f04f 0a01 	mov.w	sl, #1
 800e140:	e65e      	b.n	800de00 <__ieee754_pow+0x468>
 800e142:	a3b4      	add	r3, pc, #720	@ (adr r3, 800e414 <__ieee754_pow+0xa7c>)
 800e144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e148:	4630      	mov	r0, r6
 800e14a:	4639      	mov	r1, r7
 800e14c:	f7f2 f8a6 	bl	800029c <__adddf3>
 800e150:	4642      	mov	r2, r8
 800e152:	e9cd 0100 	strd	r0, r1, [sp]
 800e156:	464b      	mov	r3, r9
 800e158:	4620      	mov	r0, r4
 800e15a:	4629      	mov	r1, r5
 800e15c:	f7f2 f89c 	bl	8000298 <__aeabi_dsub>
 800e160:	4602      	mov	r2, r0
 800e162:	460b      	mov	r3, r1
 800e164:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e168:	f7f2 fcde 	bl	8000b28 <__aeabi_dcmpgt>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	f47f ae00 	bne.w	800dd72 <__ieee754_pow+0x3da>
 800e172:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e176:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e17a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e17e:	fa43 fa0a 	asr.w	sl, r3, sl
 800e182:	44da      	add	sl, fp
 800e184:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e188:	489d      	ldr	r0, [pc, #628]	@ (800e400 <__ieee754_pow+0xa68>)
 800e18a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e18e:	4108      	asrs	r0, r1
 800e190:	ea00 030a 	and.w	r3, r0, sl
 800e194:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e198:	f1c1 0114 	rsb	r1, r1, #20
 800e19c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e1a0:	fa4a fa01 	asr.w	sl, sl, r1
 800e1a4:	f1bb 0f00 	cmp.w	fp, #0
 800e1a8:	4640      	mov	r0, r8
 800e1aa:	4649      	mov	r1, r9
 800e1ac:	f04f 0200 	mov.w	r2, #0
 800e1b0:	bfb8      	it	lt
 800e1b2:	f1ca 0a00 	rsblt	sl, sl, #0
 800e1b6:	f7f2 f86f 	bl	8000298 <__aeabi_dsub>
 800e1ba:	4680      	mov	r8, r0
 800e1bc:	4689      	mov	r9, r1
 800e1be:	4632      	mov	r2, r6
 800e1c0:	463b      	mov	r3, r7
 800e1c2:	4640      	mov	r0, r8
 800e1c4:	4649      	mov	r1, r9
 800e1c6:	f7f2 f869 	bl	800029c <__adddf3>
 800e1ca:	2400      	movs	r4, #0
 800e1cc:	a37c      	add	r3, pc, #496	@ (adr r3, 800e3c0 <__ieee754_pow+0xa28>)
 800e1ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	460d      	mov	r5, r1
 800e1d6:	f7f2 fa17 	bl	8000608 <__aeabi_dmul>
 800e1da:	4642      	mov	r2, r8
 800e1dc:	e9cd 0100 	strd	r0, r1, [sp]
 800e1e0:	464b      	mov	r3, r9
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	4629      	mov	r1, r5
 800e1e6:	f7f2 f857 	bl	8000298 <__aeabi_dsub>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	4630      	mov	r0, r6
 800e1f0:	4639      	mov	r1, r7
 800e1f2:	f7f2 f851 	bl	8000298 <__aeabi_dsub>
 800e1f6:	a374      	add	r3, pc, #464	@ (adr r3, 800e3c8 <__ieee754_pow+0xa30>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f7f2 fa04 	bl	8000608 <__aeabi_dmul>
 800e200:	a373      	add	r3, pc, #460	@ (adr r3, 800e3d0 <__ieee754_pow+0xa38>)
 800e202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e206:	4680      	mov	r8, r0
 800e208:	4689      	mov	r9, r1
 800e20a:	4620      	mov	r0, r4
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7f2 f9fb 	bl	8000608 <__aeabi_dmul>
 800e212:	4602      	mov	r2, r0
 800e214:	460b      	mov	r3, r1
 800e216:	4640      	mov	r0, r8
 800e218:	4649      	mov	r1, r9
 800e21a:	f7f2 f83f 	bl	800029c <__adddf3>
 800e21e:	4604      	mov	r4, r0
 800e220:	460d      	mov	r5, r1
 800e222:	4602      	mov	r2, r0
 800e224:	460b      	mov	r3, r1
 800e226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e22a:	f7f2 f837 	bl	800029c <__adddf3>
 800e22e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e232:	4680      	mov	r8, r0
 800e234:	4689      	mov	r9, r1
 800e236:	f7f2 f82f 	bl	8000298 <__aeabi_dsub>
 800e23a:	4602      	mov	r2, r0
 800e23c:	460b      	mov	r3, r1
 800e23e:	4620      	mov	r0, r4
 800e240:	4629      	mov	r1, r5
 800e242:	f7f2 f829 	bl	8000298 <__aeabi_dsub>
 800e246:	4642      	mov	r2, r8
 800e248:	4606      	mov	r6, r0
 800e24a:	460f      	mov	r7, r1
 800e24c:	464b      	mov	r3, r9
 800e24e:	4640      	mov	r0, r8
 800e250:	4649      	mov	r1, r9
 800e252:	f7f2 f9d9 	bl	8000608 <__aeabi_dmul>
 800e256:	a360      	add	r3, pc, #384	@ (adr r3, 800e3d8 <__ieee754_pow+0xa40>)
 800e258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e25c:	4604      	mov	r4, r0
 800e25e:	460d      	mov	r5, r1
 800e260:	f7f2 f9d2 	bl	8000608 <__aeabi_dmul>
 800e264:	a35e      	add	r3, pc, #376	@ (adr r3, 800e3e0 <__ieee754_pow+0xa48>)
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 f815 	bl	8000298 <__aeabi_dsub>
 800e26e:	4622      	mov	r2, r4
 800e270:	462b      	mov	r3, r5
 800e272:	f7f2 f9c9 	bl	8000608 <__aeabi_dmul>
 800e276:	a35c      	add	r3, pc, #368	@ (adr r3, 800e3e8 <__ieee754_pow+0xa50>)
 800e278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27c:	f7f2 f80e 	bl	800029c <__adddf3>
 800e280:	4622      	mov	r2, r4
 800e282:	462b      	mov	r3, r5
 800e284:	f7f2 f9c0 	bl	8000608 <__aeabi_dmul>
 800e288:	a359      	add	r3, pc, #356	@ (adr r3, 800e3f0 <__ieee754_pow+0xa58>)
 800e28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e28e:	f7f2 f803 	bl	8000298 <__aeabi_dsub>
 800e292:	4622      	mov	r2, r4
 800e294:	462b      	mov	r3, r5
 800e296:	f7f2 f9b7 	bl	8000608 <__aeabi_dmul>
 800e29a:	a357      	add	r3, pc, #348	@ (adr r3, 800e3f8 <__ieee754_pow+0xa60>)
 800e29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a0:	f7f1 fffc 	bl	800029c <__adddf3>
 800e2a4:	4622      	mov	r2, r4
 800e2a6:	462b      	mov	r3, r5
 800e2a8:	f7f2 f9ae 	bl	8000608 <__aeabi_dmul>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	4640      	mov	r0, r8
 800e2b2:	4649      	mov	r1, r9
 800e2b4:	f7f1 fff0 	bl	8000298 <__aeabi_dsub>
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	460d      	mov	r5, r1
 800e2bc:	4602      	mov	r2, r0
 800e2be:	460b      	mov	r3, r1
 800e2c0:	4640      	mov	r0, r8
 800e2c2:	4649      	mov	r1, r9
 800e2c4:	f7f2 f9a0 	bl	8000608 <__aeabi_dmul>
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	e9cd 0100 	strd	r0, r1, [sp]
 800e2ce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e2d2:	4620      	mov	r0, r4
 800e2d4:	4629      	mov	r1, r5
 800e2d6:	f7f1 ffdf 	bl	8000298 <__aeabi_dsub>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2e2:	f7f2 fabb 	bl	800085c <__aeabi_ddiv>
 800e2e6:	4632      	mov	r2, r6
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	463b      	mov	r3, r7
 800e2ee:	4640      	mov	r0, r8
 800e2f0:	4649      	mov	r1, r9
 800e2f2:	f7f2 f989 	bl	8000608 <__aeabi_dmul>
 800e2f6:	4632      	mov	r2, r6
 800e2f8:	463b      	mov	r3, r7
 800e2fa:	f7f1 ffcf 	bl	800029c <__adddf3>
 800e2fe:	4602      	mov	r2, r0
 800e300:	460b      	mov	r3, r1
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	f7f1 ffc7 	bl	8000298 <__aeabi_dsub>
 800e30a:	4642      	mov	r2, r8
 800e30c:	464b      	mov	r3, r9
 800e30e:	f7f1 ffc3 	bl	8000298 <__aeabi_dsub>
 800e312:	460b      	mov	r3, r1
 800e314:	4602      	mov	r2, r0
 800e316:	493b      	ldr	r1, [pc, #236]	@ (800e404 <__ieee754_pow+0xa6c>)
 800e318:	2000      	movs	r0, #0
 800e31a:	f7f1 ffbd 	bl	8000298 <__aeabi_dsub>
 800e31e:	ec41 0b10 	vmov	d0, r0, r1
 800e322:	ee10 3a90 	vmov	r3, s1
 800e326:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e32a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e32e:	da30      	bge.n	800e392 <__ieee754_pow+0x9fa>
 800e330:	4650      	mov	r0, sl
 800e332:	f000 f87d 	bl	800e430 <scalbn>
 800e336:	ec51 0b10 	vmov	r0, r1, d0
 800e33a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e33e:	f7ff bbd2 	b.w	800dae6 <__ieee754_pow+0x14e>
 800e342:	4c31      	ldr	r4, [pc, #196]	@ (800e408 <__ieee754_pow+0xa70>)
 800e344:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e348:	42a3      	cmp	r3, r4
 800e34a:	d91a      	bls.n	800e382 <__ieee754_pow+0x9ea>
 800e34c:	4b2f      	ldr	r3, [pc, #188]	@ (800e40c <__ieee754_pow+0xa74>)
 800e34e:	440b      	add	r3, r1
 800e350:	4303      	orrs	r3, r0
 800e352:	d009      	beq.n	800e368 <__ieee754_pow+0x9d0>
 800e354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e358:	2200      	movs	r2, #0
 800e35a:	2300      	movs	r3, #0
 800e35c:	f7f2 fbc6 	bl	8000aec <__aeabi_dcmplt>
 800e360:	3800      	subs	r0, #0
 800e362:	bf18      	it	ne
 800e364:	2001      	movne	r0, #1
 800e366:	e42b      	b.n	800dbc0 <__ieee754_pow+0x228>
 800e368:	4642      	mov	r2, r8
 800e36a:	464b      	mov	r3, r9
 800e36c:	f7f1 ff94 	bl	8000298 <__aeabi_dsub>
 800e370:	4632      	mov	r2, r6
 800e372:	463b      	mov	r3, r7
 800e374:	f7f2 fbce 	bl	8000b14 <__aeabi_dcmpge>
 800e378:	2800      	cmp	r0, #0
 800e37a:	d1eb      	bne.n	800e354 <__ieee754_pow+0x9bc>
 800e37c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800e41c <__ieee754_pow+0xa84>
 800e380:	e6f7      	b.n	800e172 <__ieee754_pow+0x7da>
 800e382:	469a      	mov	sl, r3
 800e384:	4b22      	ldr	r3, [pc, #136]	@ (800e410 <__ieee754_pow+0xa78>)
 800e386:	459a      	cmp	sl, r3
 800e388:	f63f aef3 	bhi.w	800e172 <__ieee754_pow+0x7da>
 800e38c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e390:	e715      	b.n	800e1be <__ieee754_pow+0x826>
 800e392:	ec51 0b10 	vmov	r0, r1, d0
 800e396:	4619      	mov	r1, r3
 800e398:	e7cf      	b.n	800e33a <__ieee754_pow+0x9a2>
 800e39a:	491a      	ldr	r1, [pc, #104]	@ (800e404 <__ieee754_pow+0xa6c>)
 800e39c:	2000      	movs	r0, #0
 800e39e:	f7ff bb18 	b.w	800d9d2 <__ieee754_pow+0x3a>
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	f7ff bb14 	b.w	800d9d2 <__ieee754_pow+0x3a>
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	4639      	mov	r1, r7
 800e3ae:	f7ff bb10 	b.w	800d9d2 <__ieee754_pow+0x3a>
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	f7ff bb5e 	b.w	800da74 <__ieee754_pow+0xdc>
 800e3b8:	2400      	movs	r4, #0
 800e3ba:	f7ff bb49 	b.w	800da50 <__ieee754_pow+0xb8>
 800e3be:	bf00      	nop
 800e3c0:	00000000 	.word	0x00000000
 800e3c4:	3fe62e43 	.word	0x3fe62e43
 800e3c8:	fefa39ef 	.word	0xfefa39ef
 800e3cc:	3fe62e42 	.word	0x3fe62e42
 800e3d0:	0ca86c39 	.word	0x0ca86c39
 800e3d4:	be205c61 	.word	0xbe205c61
 800e3d8:	72bea4d0 	.word	0x72bea4d0
 800e3dc:	3e663769 	.word	0x3e663769
 800e3e0:	c5d26bf1 	.word	0xc5d26bf1
 800e3e4:	3ebbbd41 	.word	0x3ebbbd41
 800e3e8:	af25de2c 	.word	0xaf25de2c
 800e3ec:	3f11566a 	.word	0x3f11566a
 800e3f0:	16bebd93 	.word	0x16bebd93
 800e3f4:	3f66c16c 	.word	0x3f66c16c
 800e3f8:	5555553e 	.word	0x5555553e
 800e3fc:	3fc55555 	.word	0x3fc55555
 800e400:	fff00000 	.word	0xfff00000
 800e404:	3ff00000 	.word	0x3ff00000
 800e408:	4090cbff 	.word	0x4090cbff
 800e40c:	3f6f3400 	.word	0x3f6f3400
 800e410:	3fe00000 	.word	0x3fe00000
 800e414:	652b82fe 	.word	0x652b82fe
 800e418:	3c971547 	.word	0x3c971547
 800e41c:	4090cc00 	.word	0x4090cc00

0800e420 <fabs>:
 800e420:	ec51 0b10 	vmov	r0, r1, d0
 800e424:	4602      	mov	r2, r0
 800e426:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e42a:	ec43 2b10 	vmov	d0, r2, r3
 800e42e:	4770      	bx	lr

0800e430 <scalbn>:
 800e430:	b570      	push	{r4, r5, r6, lr}
 800e432:	ec55 4b10 	vmov	r4, r5, d0
 800e436:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e43a:	4606      	mov	r6, r0
 800e43c:	462b      	mov	r3, r5
 800e43e:	b991      	cbnz	r1, 800e466 <scalbn+0x36>
 800e440:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e444:	4323      	orrs	r3, r4
 800e446:	d03d      	beq.n	800e4c4 <scalbn+0x94>
 800e448:	4b35      	ldr	r3, [pc, #212]	@ (800e520 <scalbn+0xf0>)
 800e44a:	4620      	mov	r0, r4
 800e44c:	4629      	mov	r1, r5
 800e44e:	2200      	movs	r2, #0
 800e450:	f7f2 f8da 	bl	8000608 <__aeabi_dmul>
 800e454:	4b33      	ldr	r3, [pc, #204]	@ (800e524 <scalbn+0xf4>)
 800e456:	429e      	cmp	r6, r3
 800e458:	4604      	mov	r4, r0
 800e45a:	460d      	mov	r5, r1
 800e45c:	da0f      	bge.n	800e47e <scalbn+0x4e>
 800e45e:	a328      	add	r3, pc, #160	@ (adr r3, 800e500 <scalbn+0xd0>)
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	e01e      	b.n	800e4a4 <scalbn+0x74>
 800e466:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e46a:	4291      	cmp	r1, r2
 800e46c:	d10b      	bne.n	800e486 <scalbn+0x56>
 800e46e:	4622      	mov	r2, r4
 800e470:	4620      	mov	r0, r4
 800e472:	4629      	mov	r1, r5
 800e474:	f7f1 ff12 	bl	800029c <__adddf3>
 800e478:	4604      	mov	r4, r0
 800e47a:	460d      	mov	r5, r1
 800e47c:	e022      	b.n	800e4c4 <scalbn+0x94>
 800e47e:	460b      	mov	r3, r1
 800e480:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e484:	3936      	subs	r1, #54	@ 0x36
 800e486:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e48a:	4296      	cmp	r6, r2
 800e48c:	dd0d      	ble.n	800e4aa <scalbn+0x7a>
 800e48e:	2d00      	cmp	r5, #0
 800e490:	a11d      	add	r1, pc, #116	@ (adr r1, 800e508 <scalbn+0xd8>)
 800e492:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e496:	da02      	bge.n	800e49e <scalbn+0x6e>
 800e498:	a11d      	add	r1, pc, #116	@ (adr r1, 800e510 <scalbn+0xe0>)
 800e49a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e49e:	a31a      	add	r3, pc, #104	@ (adr r3, 800e508 <scalbn+0xd8>)
 800e4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a4:	f7f2 f8b0 	bl	8000608 <__aeabi_dmul>
 800e4a8:	e7e6      	b.n	800e478 <scalbn+0x48>
 800e4aa:	1872      	adds	r2, r6, r1
 800e4ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e4b0:	428a      	cmp	r2, r1
 800e4b2:	dcec      	bgt.n	800e48e <scalbn+0x5e>
 800e4b4:	2a00      	cmp	r2, #0
 800e4b6:	dd08      	ble.n	800e4ca <scalbn+0x9a>
 800e4b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e4bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e4c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4c4:	ec45 4b10 	vmov	d0, r4, r5
 800e4c8:	bd70      	pop	{r4, r5, r6, pc}
 800e4ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e4ce:	da08      	bge.n	800e4e2 <scalbn+0xb2>
 800e4d0:	2d00      	cmp	r5, #0
 800e4d2:	a10b      	add	r1, pc, #44	@ (adr r1, 800e500 <scalbn+0xd0>)
 800e4d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4d8:	dac1      	bge.n	800e45e <scalbn+0x2e>
 800e4da:	a10f      	add	r1, pc, #60	@ (adr r1, 800e518 <scalbn+0xe8>)
 800e4dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4e0:	e7bd      	b.n	800e45e <scalbn+0x2e>
 800e4e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e4e6:	3236      	adds	r2, #54	@ 0x36
 800e4e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e4ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e4f0:	4620      	mov	r0, r4
 800e4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800e528 <scalbn+0xf8>)
 800e4f4:	4629      	mov	r1, r5
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	e7d4      	b.n	800e4a4 <scalbn+0x74>
 800e4fa:	bf00      	nop
 800e4fc:	f3af 8000 	nop.w
 800e500:	c2f8f359 	.word	0xc2f8f359
 800e504:	01a56e1f 	.word	0x01a56e1f
 800e508:	8800759c 	.word	0x8800759c
 800e50c:	7e37e43c 	.word	0x7e37e43c
 800e510:	8800759c 	.word	0x8800759c
 800e514:	fe37e43c 	.word	0xfe37e43c
 800e518:	c2f8f359 	.word	0xc2f8f359
 800e51c:	81a56e1f 	.word	0x81a56e1f
 800e520:	43500000 	.word	0x43500000
 800e524:	ffff3cb0 	.word	0xffff3cb0
 800e528:	3c900000 	.word	0x3c900000

0800e52c <with_errno>:
 800e52c:	b510      	push	{r4, lr}
 800e52e:	ed2d 8b02 	vpush	{d8}
 800e532:	eeb0 8a40 	vmov.f32	s16, s0
 800e536:	eef0 8a60 	vmov.f32	s17, s1
 800e53a:	4604      	mov	r4, r0
 800e53c:	f7fa fdf8 	bl	8009130 <__errno>
 800e540:	eeb0 0a48 	vmov.f32	s0, s16
 800e544:	eef0 0a68 	vmov.f32	s1, s17
 800e548:	ecbd 8b02 	vpop	{d8}
 800e54c:	6004      	str	r4, [r0, #0]
 800e54e:	bd10      	pop	{r4, pc}

0800e550 <xflow>:
 800e550:	4603      	mov	r3, r0
 800e552:	b507      	push	{r0, r1, r2, lr}
 800e554:	ec51 0b10 	vmov	r0, r1, d0
 800e558:	b183      	cbz	r3, 800e57c <xflow+0x2c>
 800e55a:	4602      	mov	r2, r0
 800e55c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e560:	e9cd 2300 	strd	r2, r3, [sp]
 800e564:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e568:	f7f2 f84e 	bl	8000608 <__aeabi_dmul>
 800e56c:	ec41 0b10 	vmov	d0, r0, r1
 800e570:	2022      	movs	r0, #34	@ 0x22
 800e572:	b003      	add	sp, #12
 800e574:	f85d eb04 	ldr.w	lr, [sp], #4
 800e578:	f7ff bfd8 	b.w	800e52c <with_errno>
 800e57c:	4602      	mov	r2, r0
 800e57e:	460b      	mov	r3, r1
 800e580:	e7ee      	b.n	800e560 <xflow+0x10>
 800e582:	0000      	movs	r0, r0
 800e584:	0000      	movs	r0, r0
	...

0800e588 <__math_uflow>:
 800e588:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e590 <__math_uflow+0x8>
 800e58c:	f7ff bfe0 	b.w	800e550 <xflow>
 800e590:	00000000 	.word	0x00000000
 800e594:	10000000 	.word	0x10000000

0800e598 <__math_oflow>:
 800e598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e5a0 <__math_oflow+0x8>
 800e59c:	f7ff bfd8 	b.w	800e550 <xflow>
 800e5a0:	00000000 	.word	0x00000000
 800e5a4:	70000000 	.word	0x70000000

0800e5a8 <__ieee754_sqrt>:
 800e5a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ac:	4a68      	ldr	r2, [pc, #416]	@ (800e750 <__ieee754_sqrt+0x1a8>)
 800e5ae:	ec55 4b10 	vmov	r4, r5, d0
 800e5b2:	43aa      	bics	r2, r5
 800e5b4:	462b      	mov	r3, r5
 800e5b6:	4621      	mov	r1, r4
 800e5b8:	d110      	bne.n	800e5dc <__ieee754_sqrt+0x34>
 800e5ba:	4622      	mov	r2, r4
 800e5bc:	4620      	mov	r0, r4
 800e5be:	4629      	mov	r1, r5
 800e5c0:	f7f2 f822 	bl	8000608 <__aeabi_dmul>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	f7f1 fe66 	bl	800029c <__adddf3>
 800e5d0:	4604      	mov	r4, r0
 800e5d2:	460d      	mov	r5, r1
 800e5d4:	ec45 4b10 	vmov	d0, r4, r5
 800e5d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	dc0e      	bgt.n	800e5fe <__ieee754_sqrt+0x56>
 800e5e0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e5e4:	4322      	orrs	r2, r4
 800e5e6:	d0f5      	beq.n	800e5d4 <__ieee754_sqrt+0x2c>
 800e5e8:	b19d      	cbz	r5, 800e612 <__ieee754_sqrt+0x6a>
 800e5ea:	4622      	mov	r2, r4
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	4629      	mov	r1, r5
 800e5f0:	f7f1 fe52 	bl	8000298 <__aeabi_dsub>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	f7f2 f930 	bl	800085c <__aeabi_ddiv>
 800e5fc:	e7e8      	b.n	800e5d0 <__ieee754_sqrt+0x28>
 800e5fe:	152a      	asrs	r2, r5, #20
 800e600:	d115      	bne.n	800e62e <__ieee754_sqrt+0x86>
 800e602:	2000      	movs	r0, #0
 800e604:	e009      	b.n	800e61a <__ieee754_sqrt+0x72>
 800e606:	0acb      	lsrs	r3, r1, #11
 800e608:	3a15      	subs	r2, #21
 800e60a:	0549      	lsls	r1, r1, #21
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d0fa      	beq.n	800e606 <__ieee754_sqrt+0x5e>
 800e610:	e7f7      	b.n	800e602 <__ieee754_sqrt+0x5a>
 800e612:	462a      	mov	r2, r5
 800e614:	e7fa      	b.n	800e60c <__ieee754_sqrt+0x64>
 800e616:	005b      	lsls	r3, r3, #1
 800e618:	3001      	adds	r0, #1
 800e61a:	02dc      	lsls	r4, r3, #11
 800e61c:	d5fb      	bpl.n	800e616 <__ieee754_sqrt+0x6e>
 800e61e:	1e44      	subs	r4, r0, #1
 800e620:	1b12      	subs	r2, r2, r4
 800e622:	f1c0 0420 	rsb	r4, r0, #32
 800e626:	fa21 f404 	lsr.w	r4, r1, r4
 800e62a:	4323      	orrs	r3, r4
 800e62c:	4081      	lsls	r1, r0
 800e62e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e632:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e636:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e63a:	07d2      	lsls	r2, r2, #31
 800e63c:	bf5c      	itt	pl
 800e63e:	005b      	lslpl	r3, r3, #1
 800e640:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e644:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e648:	bf58      	it	pl
 800e64a:	0049      	lslpl	r1, r1, #1
 800e64c:	2600      	movs	r6, #0
 800e64e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e652:	106d      	asrs	r5, r5, #1
 800e654:	0049      	lsls	r1, r1, #1
 800e656:	2016      	movs	r0, #22
 800e658:	4632      	mov	r2, r6
 800e65a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e65e:	1917      	adds	r7, r2, r4
 800e660:	429f      	cmp	r7, r3
 800e662:	bfde      	ittt	le
 800e664:	193a      	addle	r2, r7, r4
 800e666:	1bdb      	suble	r3, r3, r7
 800e668:	1936      	addle	r6, r6, r4
 800e66a:	0fcf      	lsrs	r7, r1, #31
 800e66c:	3801      	subs	r0, #1
 800e66e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e672:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e676:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e67a:	d1f0      	bne.n	800e65e <__ieee754_sqrt+0xb6>
 800e67c:	4604      	mov	r4, r0
 800e67e:	2720      	movs	r7, #32
 800e680:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e684:	429a      	cmp	r2, r3
 800e686:	eb00 0e0c 	add.w	lr, r0, ip
 800e68a:	db02      	blt.n	800e692 <__ieee754_sqrt+0xea>
 800e68c:	d113      	bne.n	800e6b6 <__ieee754_sqrt+0x10e>
 800e68e:	458e      	cmp	lr, r1
 800e690:	d811      	bhi.n	800e6b6 <__ieee754_sqrt+0x10e>
 800e692:	f1be 0f00 	cmp.w	lr, #0
 800e696:	eb0e 000c 	add.w	r0, lr, ip
 800e69a:	da42      	bge.n	800e722 <__ieee754_sqrt+0x17a>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	db40      	blt.n	800e722 <__ieee754_sqrt+0x17a>
 800e6a0:	f102 0801 	add.w	r8, r2, #1
 800e6a4:	1a9b      	subs	r3, r3, r2
 800e6a6:	458e      	cmp	lr, r1
 800e6a8:	bf88      	it	hi
 800e6aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e6ae:	eba1 010e 	sub.w	r1, r1, lr
 800e6b2:	4464      	add	r4, ip
 800e6b4:	4642      	mov	r2, r8
 800e6b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e6ba:	3f01      	subs	r7, #1
 800e6bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e6c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e6c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e6c8:	d1dc      	bne.n	800e684 <__ieee754_sqrt+0xdc>
 800e6ca:	4319      	orrs	r1, r3
 800e6cc:	d01b      	beq.n	800e706 <__ieee754_sqrt+0x15e>
 800e6ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e754 <__ieee754_sqrt+0x1ac>
 800e6d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e758 <__ieee754_sqrt+0x1b0>
 800e6d6:	e9da 0100 	ldrd	r0, r1, [sl]
 800e6da:	e9db 2300 	ldrd	r2, r3, [fp]
 800e6de:	f7f1 fddb 	bl	8000298 <__aeabi_dsub>
 800e6e2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	4640      	mov	r0, r8
 800e6ec:	4649      	mov	r1, r9
 800e6ee:	f7f2 fa07 	bl	8000b00 <__aeabi_dcmple>
 800e6f2:	b140      	cbz	r0, 800e706 <__ieee754_sqrt+0x15e>
 800e6f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e6f8:	e9da 0100 	ldrd	r0, r1, [sl]
 800e6fc:	e9db 2300 	ldrd	r2, r3, [fp]
 800e700:	d111      	bne.n	800e726 <__ieee754_sqrt+0x17e>
 800e702:	3601      	adds	r6, #1
 800e704:	463c      	mov	r4, r7
 800e706:	1072      	asrs	r2, r6, #1
 800e708:	0863      	lsrs	r3, r4, #1
 800e70a:	07f1      	lsls	r1, r6, #31
 800e70c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e710:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e714:	bf48      	it	mi
 800e716:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e71a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e71e:	4618      	mov	r0, r3
 800e720:	e756      	b.n	800e5d0 <__ieee754_sqrt+0x28>
 800e722:	4690      	mov	r8, r2
 800e724:	e7be      	b.n	800e6a4 <__ieee754_sqrt+0xfc>
 800e726:	f7f1 fdb9 	bl	800029c <__adddf3>
 800e72a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4640      	mov	r0, r8
 800e734:	4649      	mov	r1, r9
 800e736:	f7f2 f9d9 	bl	8000aec <__aeabi_dcmplt>
 800e73a:	b120      	cbz	r0, 800e746 <__ieee754_sqrt+0x19e>
 800e73c:	1ca0      	adds	r0, r4, #2
 800e73e:	bf08      	it	eq
 800e740:	3601      	addeq	r6, #1
 800e742:	3402      	adds	r4, #2
 800e744:	e7df      	b.n	800e706 <__ieee754_sqrt+0x15e>
 800e746:	1c63      	adds	r3, r4, #1
 800e748:	f023 0401 	bic.w	r4, r3, #1
 800e74c:	e7db      	b.n	800e706 <__ieee754_sqrt+0x15e>
 800e74e:	bf00      	nop
 800e750:	7ff00000 	.word	0x7ff00000
 800e754:	200007b8 	.word	0x200007b8
 800e758:	200007b0 	.word	0x200007b0

0800e75c <_init>:
 800e75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e75e:	bf00      	nop
 800e760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e762:	bc08      	pop	{r3}
 800e764:	469e      	mov	lr, r3
 800e766:	4770      	bx	lr

0800e768 <_fini>:
 800e768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e76a:	bf00      	nop
 800e76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e76e:	bc08      	pop	{r3}
 800e770:	469e      	mov	lr, r3
 800e772:	4770      	bx	lr
