/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ZEROSCAlE 0
#define MIDSCALE 1861
#define FULLSCALE 4095
#define ADCRES 12


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c2;

/* USER CODE BEGIN PV */
int counts, adcValue;
int ton, toff;
double voltsOn;
double voltsOff;
char buffer[32];
uint8_t bufon[2] = { 0x07, 0xff };
uint8_t bufoff[2] = { 0x00, 0x00 };
uint8_t buf[2];

const uint16_t sine_wave[360] = {
    2048, 2098, 2149, 2199, 2249, 2299, 2349, 2398, 2446, 2494,
    2541, 2587, 2632, 2675, 2717, 2758, 2797, 2834, 2870, 2904,
    2935, 2965, 2993, 3019, 3043, 3065, 3085, 3103, 3119, 3132,
    3144, 3153, 3161, 3166, 3169, 3170, 3169, 3166, 3161, 3153,
    3144, 3132, 3119, 3103, 3085, 3065, 3043, 3019, 2993, 2965,
    2935, 2904, 2870, 2834, 2797, 2758, 2717, 2675, 2632, 2587,
    2541, 2494, 2446, 2398, 2349, 2299, 2249, 2199, 2149, 2098,
    2048, 1997, 1946, 1896, 1846, 1796, 1746, 1697, 1649, 1601,
    1554, 1508, 1463, 1419, 1376, 1335, 1296, 1259, 1223, 1189,
    1158, 1128, 1100, 1074, 1050, 1028, 1008, 990, 974, 961,
    949, 941, 933, 928, 925, 922, 923, 926, 931, 939,
    948, 961, 976, 993, 1010, 1028, 1049, 1071, 1094, 1119,
    1146, 1174, 1204, 1235, 1268, 1302, 1337, 1374, 1411, 1449,
    1489, 1530, 1571, 1614, 1657, 1701, 1745, 1790, 1836, 1882,
    1929, 1976, 2024, 2071, 2119, 2167, 2215, 2263, 2310, 2358,
    2405, 2451, 2497, 2542, 2586, 2629, 2672, 2713, 2753, 2791,
    2828, 2863, 2897, 2929, 2959, 2987, 3013, 3037, 3059, 3079,
    3096, 3111, 3124, 3135, 3144, 3151, 3156, 3159, 3160, 3159,
    3156, 3151, 3144, 3135, 3124, 3111, 3096, 3079, 3059, 3037,
    3013, 2987, 2959, 2929, 2897, 2863, 2828, 2791, 2753, 2713,
    2672, 2629, 2586, 2542, 2497, 2451, 2405, 2358, 2310, 2263,
    2215, 2167, 2119, 2071, 2024, 1976, 1929, 1882, 1836, 1790,
    1745, 1701, 1657, 1614, 1571, 1530, 1489, 1449, 1411, 1374,
    1337, 1302, 1268, 1235, 1204, 1174, 1146, 1119, 1094, 1071
};
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
uint32_t readADCValue(void);
extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
double count2volt(int res, int count);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {

	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */
	//HAL_StatusTypeDef RET;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_ADC1_Init();
	MX_I2C2_Init();
	MX_USB_DEVICE_Init();
	/* USER CODE BEGIN 2 */
	//HAL_ADC_Start_IT(&hadc1);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	// generateSineWave();
	while (1) {

		for (int i = 0; i < 360; i++) {
			buf[0] = sine_wave[i] >> 8;
			buf[1] = sine_wave[i];
			if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), buf, 2, 10)
					== HAL_OK) {
				adcValue = readADCValue();
				voltsOn = count2volt(ADCRES, adcValue);
				sprintf(buffer, "%.2f\r\n", voltsOn);
				CDC_Transmit_FS(buffer, sizeof(buffer));
			}
		}

		/*		if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufon, 2, 50) == HAL_OK) {
		 adcValue = readADCValue();
		 }
		 voltsOn = count2volt(ADCRES, adcValue);
		 ton = 80 * adcValue / 4096 + 10;
		 toff = 100 - ton;
		 sprintf(buffer, "Ton: %d --- Volts: %.3f\r\n", ton, voltsOn);
		 CDC_Transmit_FS(buffer, sizeof(buffer));
		 HAL_Delay(ton);

		 if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufoff, 2, 50) == HAL_OK) {
		 adcValue = readADCValue();
		 }
		 voltsOff = count2volt(ADCRES, adcValue);
		 sprintf(buffer, "Toff: %d --- Volts: %.3f\r\n", toff, voltsOff);
		 CDC_Transmit_FS(buffer, sizeof(buffer));
		 HAL_Delay(100 - ton);*/

		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	RCC_OscInitStruct.PLL.PLLM = 15;
	RCC_OscInitStruct.PLL.PLLN = 144;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 5;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };

	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
	hadc1.Init.ScanConvMode = DISABLE;
	hadc1.Init.ContinuousConvMode = DISABLE;
	hadc1.Init.DiscontinuousConvMode = DISABLE;
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
	hadc1.Init.NbrOfConversion = 1;
	hadc1.Init.DMAContinuousRequests = DISABLE;
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
		Error_Handler();
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
	sConfig.Rank = 1;
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}

/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {

	/* USER CODE BEGIN I2C2_Init 0 */

	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
	hi2c2.Init.ClockSpeed = 400000;
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
	hi2c2.Init.OwnAddress1 = 0;
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
	hi2c2.Init.OwnAddress2 = 0;
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
	__HAL_RCC_GPIOH_CLK_ENABLE();
	__HAL_RCC_GPIOA_CLK_ENABLE();
	__HAL_RCC_GPIOB_CLK_ENABLE();

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/*void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 adcValue = HAL_ADC_GetValue(hadc1);
 //ton=(((80*adcValue)/4095)+10);
 //toff=100-ton;
 HAL_ADC_Stop_IT(hadc1);
 }*/

uint32_t readADCValue(void) {
	uint32_t adc_value = 0;

	// Inicia a conversão do ADC de forma síncrona
	if (HAL_ADC_Start(&hadc1) == HAL_OK) {
		// Espera até que a conversão seja concluída
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
			// Obtém o valor convertido
			adc_value = HAL_ADC_GetValue(&hadc1);
		}
		// Stop ADC to save power and resources
		HAL_ADC_Stop(&hadc1);
	}

	return adc_value;
}

/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
