/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define ZEROSCAlE 0
#define MIDSCALE 1861
#define FULLSCALE 4095
#define ADCRES 12

#define ARRAY_SIZE 360 // Adjust the size as needed
#define MAX_DAC_VALUE 4095
#define MID_DAC_VALUE 2048

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c2;

/* USER CODE BEGIN PV */
int counts, adcValue;
int ton, toff;
double voltsOn;
double voltsOff;
char buffer[32];
uint8_t bufon[2] = { 0x07, 0xff };
uint8_t bufoff[2] = { 0x00, 0x00 };
uint8_t buf[2];
uint16_t sine_wave[ARRAY_SIZE];

/*
const uint16_t sine_wave[360] = {
    2048, 2071, 2094, 2116, 2139, 2161, 2183, 2205, 2227, 2249,
    2271, 2292, 2313, 2334, 2355, 2375, 2395, 2415, 2434, 2453,
    2471, 2489, 2507, 2524, 2541, 2557, 2572, 2587, 2602, 2616,
    2629, 2642, 2654, 2665, 2676, 2686, 2695, 2704, 2712, 2719,
    2726, 2732, 2737, 2742, 2746, 2749, 2751, 2753, 2754, 2754,
    2754, 2753, 2751, 2749, 2746, 2742, 2737, 2732, 2726, 2719,
    2712, 2704, 2695, 2686, 2676, 2665, 2654, 2642, 2629, 2616,
    2602, 2587, 2572, 2557, 2541, 2524, 2507, 2489, 2471, 2453,
    2434, 2415, 2395, 2375, 2355, 2334, 2313, 2292, 2271, 2249,
    2227, 2205, 2183, 2161, 2139, 2116, 2094, 2071, 2048, 2025,
    2002, 1980, 1957, 1935, 1913, 1891, 1869, 1847, 1826, 1805,
    1784, 1763, 1743, 1722, 1702, 1682, 1662, 1643, 1624, 1605,
    1587, 1569, 1551, 1534, 1517, 1501, 1485, 1469, 1454, 1439,
    1425, 1411, 1398, 1385, 1372, 1360, 1349, 1338, 1328, 1318,
    1309, 1300, 1292, 1284, 1277, 1270, 1264, 1259, 1254, 1249,
    1245, 1242, 1239, 1237, 1235, 1234, 1233, 1233, 1233, 1233,
    1234, 1235, 1237, 1239, 1242, 1245, 1249, 1254, 1259, 1264,
    1270, 1277, 1284, 1292, 1300, 1309, 1318, 1328, 1338, 1349,
    1360, 1372, 1385, 1398, 1411, 1425, 1439, 1454, 1469, 1485,
    1501, 1517, 1534, 1551, 1569, 1587, 1605, 1624, 1643, 1662,
    1682, 1702, 1722, 1743, 1763, 1784, 1805, 1826, 1847, 1869,
    1891, 1913, 1935, 1957, 1980, 2002, 2025
};
*/




/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C2_Init(void);
/* USER CODE BEGIN PFP */
uint32_t readADCValue(void);
void generateSineWave();
extern uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len);
double count2volt(int res, int count);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
	//HAL_StatusTypeDef RET;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_I2C2_Init();
  MX_USB_DEVICE_Init();
  /* USER CODE BEGIN 2 */
	//HAL_ADC_Start_IT(&hadc1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  generateSineWave();

	while (1) {

		for (int i = 0; i < ARRAY_SIZE; i++) {
			buf[0] = sine_wave[i] >> 8;
			buf[1] = sine_wave[i];
			if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), buf, 2, 10) == HAL_OK) {
				adcValue = readADCValue();
				voltsOn = count2volt(ADCRES, adcValue);
				sprintf(buffer, "%.2f\r\n", voltsOn);
				CDC_Transmit_FS(buffer, sizeof(buffer));
			}
		}

/*		if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufon, 2, 50) == HAL_OK) {
			adcValue = readADCValue();
		}
		voltsOn = count2volt(ADCRES, adcValue);
		ton = 80 * adcValue / 4096 + 10;
		toff = 100 - ton;
		sprintf(buffer, "Ton: %d --- Volts: %.3f\r\n", ton, voltsOn);
		CDC_Transmit_FS(buffer, sizeof(buffer));
		HAL_Delay(ton);

		if (HAL_I2C_Master_Transmit(&hi2c2, (0x60 << 1), bufoff, 2, 50) == HAL_OK) {
			adcValue = readADCValue();
		}
		voltsOff = count2volt(ADCRES, adcValue);
		sprintf(buffer, "Toff: %d --- Volts: %.3f\r\n", toff, voltsOff);
		CDC_Transmit_FS(buffer, sizeof(buffer));
		HAL_Delay(100 - ton);*/

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 15;
  RCC_OscInitStruct.PLL.PLLN = 144;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 5;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{

  /* USER CODE BEGIN I2C2_Init 0 */

  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
  hi2c2.Init.ClockSpeed = 400000;
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
/*void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 adcValue = HAL_ADC_GetValue(hadc1);
 //ton=(((80*adcValue)/4095)+10);
 //toff=100-ton;
 HAL_ADC_Stop_IT(hadc1);
 }*/

uint32_t readADCValue(void) {
	uint32_t adc_value = 0;

	// Inicia a conversão do ADC de forma síncrona
	if (HAL_ADC_Start(&hadc1) == HAL_OK) {
		// Espera até que a conversão seja concluída
		if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
			// Obtém o valor convertido
			adc_value = HAL_ADC_GetValue(&hadc1);
		}
		// Stop ADC to save power and resources
		HAL_ADC_Stop(&hadc1);
	}

	return adc_value;
}

void generateSineWave() {
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        // Generate sine wave values scaled from 0 to 4095
        // Sine function generates values from -1 to 1, so we adjust the range
        double angle = ((double)i / ARRAY_SIZE) * 2.0 * M_PI;
        double sineValue = sin(angle);
        // Scale sine value to go from 0 to 2047 then add MID_DAC_VALUE to shift to 2048 to 4095 range
        sine_wave[i] = (uint16_t)((sineValue * 2047.0) + MID_DAC_VALUE);

        // Adjusting for the full cycle as requested: 0 -> Max -> 0 -> Min -> 0
        if (i <= ARRAY_SIZE / 4) { // 0 to Max
            sine_wave[i] = (uint16_t)((sineValue * 2047.0) + 2047.0);
        } else if (i <= ARRAY_SIZE / 2) { // Max to 0
            sine_wave[i] = (uint16_t)((-sineValue * 2047.0) + 2047.0);
        } else if (i <= (3 * ARRAY_SIZE) / 4) { // 0 to Min
            sine_wave[i] = (uint16_t)((-sineValue * 2047.0) + 2047.0);
        } else { // Min to 0
            sine_wave[i] = (uint16_t)((sineValue * 2047.0) + 2047.0);
        }
    }
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
